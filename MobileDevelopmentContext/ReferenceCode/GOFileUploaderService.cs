////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Text;
using System.IO;
using System.Collections.Generic;
using System.Net;
using System.Linq;
using System.Linq.Expressions;
using System.Net.Http;
using System.Threading.Tasks;

using GenerativeObjects.Practices;
using GenerativeObjects.Practices.ORMSupportClasses;
using GenerativeObjects.Practices.ExceptionHandling;
using GenerativeObjects.Practices.LayerSupportClasses;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;	
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer.Serialization;
using GenerativeObjects.Practices.LayerSupportClasses.Features.Threading;
using GenerativeObjects.Practices.LayerSupportClasses.Features.Security.Common;
using GenerativeObjects.Practices.LayerSupportClasses.ServiceLayer;
using GenerativeObjects.Practices.Settings;
using forkuapp.Data.DataObjects;
using Newtonsoft.Json;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Configuration;

namespace forkuapp.Client.Model.Components
{
    public partial class GOFileUploaderService : BaseService, IGOFileUploaderService
    {
        /// <summary>
        /// Constructor, with dependencies injection
        /// </summary>
        /// <param name="provider">The injected service provide</param>
        /// <param name="configuration">The injected configuration</param>
        /// <param name="threadContext">The injected thread context</param>
        public GOFileUploaderService(IServiceProvider provider, IConfiguration configuration, IThreadContext threadContext) : base(provider, configuration, threadContext)
        {
            _endpointName = "gofileuploader";
        }

        /// <summary>
        /// UploadFileAsync component operation
        /// Upload a new File on the remote server
        /// </summary>
        /// <returns>bool</returns>
        public async Task<System.Boolean> UploadFileAsync()
        {
			// Create a handler that will store cookies
            var handler_local = new HttpClientHandler
            {
                UseCookies = true,  // Ensure cookies are used
                CookieContainer = new CookieContainer()  // Store cookies in a container
            };

            using (var httpClient_local = new HttpClient(handler_local))
            {
                
                var queryStringParams_local = new List<string>();

                
                // get user token for currently authenticated user if any                    
                var userToken_local = _threadContext.UserToken;
                var applicationToken_local = _threadContext.ApplicationToken;

                if (!String.IsNullOrEmpty(userToken_local))
                {
                    queryStringParams_local.Add($"_user_token={userToken_local}");
                }

                if (!String.IsNullOrEmpty(applicationToken_local))
                {
                    queryStringParams_local.Add($"_application_token={applicationToken_local}");
                }

                if (!String.IsNullOrEmpty(_threadContext.DbKey))
                {
                    queryStringParams_local.Add($"dbKey={_threadContext.DbKey}");
                }

                var queryUrl_local = $"{_serviceUrl}uploadfile";
                if (queryStringParams_local.Any())
                {
                    queryUrl_local += "?" + String.Join("&", queryStringParams_local);
                }
                
                // Make the POST request to the API endpoint
                var response_local = await httpClient_local.PostAsync(queryUrl_local, null);

                // Check if the request was successful (status code 200)
                if (response_local.IsSuccessStatusCode)
                {
                    // Read the response content as a string
                    string responseContent_local = await response_local.Content.ReadAsStringAsync();

                    var result_local = JsonConvert.DeserializeObject<System.Boolean>(responseContent_local);
                    return result_local;
                }
                else
                {
                    throw new GOServerException($"API request failed with status code: {response_local.StatusCode}");
                }
            }
        }
    }
}
