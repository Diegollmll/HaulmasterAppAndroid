diff --git a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
index e2a630f..bc401b8 100644
--- a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
+++ b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
@@ -15,7 +15,8 @@ data class UserDto(
     val lastMedicalCheck: String?,
     val lastLogin: String?,
     val isActive: Boolean = true,
-    val businessId: String? = null
+    val businessId: String? = null,
+    val systemOwnerId: String? = null
 )
 
 data class CertificationDto(
diff --git a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
index 7d8a645..aba9dfc 100644
--- a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
+++ b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
@@ -38,6 +38,7 @@ class AuthDataStore @Inject constructor(
         val IS_ONLINE = booleanPreferencesKey("is_online")
         val BUSINESS_ID = stringPreferencesKey("business_id")
         val SITE_ID = stringPreferencesKey("site_id")
+        val SYSTEM_OWNER_ID = stringPreferencesKey("system_owner_id")
     }
 
     @Volatile
@@ -74,13 +75,14 @@ class AuthDataStore @Inject constructor(
 
     suspend fun setCurrentUser(user: User) {
         android.util.Log.d("AuthDataStore", """
-            Setting current user:
+            Storing user data:
             - ID: ${user.id}
             - Name: ${user.fullName}
             - Token: ${user.token.take(10)}...
             - Role: ${user.role}
             - Business ID: ${user.businessId}
             - Site ID: ${user.siteId}
+            - System Owner ID: ${user.systemOwnerId}
         """.trimIndent())
         
         context.dataStore.edit { preferences ->
@@ -98,6 +100,7 @@ class AuthDataStore @Inject constructor(
             preferences[PreferencesKeys.IS_ONLINE] = true
             user.businessId?.let { preferences[PreferencesKeys.BUSINESS_ID] = it }
             user.siteId?.let { preferences[PreferencesKeys.SITE_ID] = it }
+            user.systemOwnerId?.let { preferences[PreferencesKeys.SYSTEM_OWNER_ID] = it }
             val now = System.currentTimeMillis()
             preferences[PreferencesKeys.LAST_ACTIVE] = now.toString()
             lastActiveTime = now
@@ -110,12 +113,9 @@ class AuthDataStore @Inject constructor(
         return try {
             val preferences = context.dataStore.data.first()
             
-            // Log all stored preferences for debugging
             android.util.Log.d("AuthDataStore", """
-                Stored preferences:
+                Current preferences:
                 - USER_ID: ${preferences[PreferencesKeys.USER_ID]}
-                - TOKEN: ${preferences[PreferencesKeys.TOKEN]?.take(10)}...
-                - TOKEN_KEY: ${preferences[PreferencesKeys.TOKEN_KEY]?.take(10)}...
                 - EMAIL: ${preferences[PreferencesKeys.EMAIL]}
                 - USERNAME: ${preferences[PreferencesKeys.USERNAME]}
                 - FIRST_NAME: ${preferences[PreferencesKeys.FIRST_NAME]}
@@ -125,16 +125,13 @@ class AuthDataStore @Inject constructor(
                 - LAST_ACTIVE: ${preferences[PreferencesKeys.LAST_ACTIVE]}
                 - BUSINESS_ID: ${preferences[PreferencesKeys.BUSINESS_ID]}
                 - SITE_ID: ${preferences[PreferencesKeys.SITE_ID]}
+                - SYSTEM_OWNER_ID: ${preferences[PreferencesKeys.SYSTEM_OWNER_ID]}
             """.trimIndent())
             
-            val userId = preferences[PreferencesKeys.USER_ID]
-            android.util.Log.d("AuthDataStore", "Getting current user - Found ID: $userId")
-            
-            if (userId == null) {
-                android.util.Log.e("AuthDataStore", "No user ID found in preferences")
+            val userId = preferences[PreferencesKeys.USER_ID] ?: run {
+                android.util.Log.e("AuthDataStore", "No user ID found")
                 return null
             }
-            
             val token = preferences[PreferencesKeys.TOKEN] ?: run {
                 android.util.Log.e("AuthDataStore", "No token found for user $userId")
                 return null
@@ -167,6 +164,7 @@ class AuthDataStore @Inject constructor(
             val password = preferences[PreferencesKeys.PASSWORD] ?: ""
             val businessId = preferences[PreferencesKeys.BUSINESS_ID]
             val siteId = preferences[PreferencesKeys.SITE_ID]
+            val systemOwnerId = preferences[PreferencesKeys.SYSTEM_OWNER_ID]
 
             val isOnline = preferences[PreferencesKeys.IS_ONLINE] ?: false
             val lastActive = preferences[PreferencesKeys.LAST_ACTIVE]?.toLongOrNull() ?: 0L
@@ -186,7 +184,8 @@ class AuthDataStore @Inject constructor(
                 isActive = isOnline,
                 lastLogin = lastActive.toString(),
                 businessId = businessId,
-                siteId = siteId
+                siteId = siteId,
+                systemOwnerId = systemOwnerId
             ).also {
                 android.util.Log.d("AuthDataStore", """
                     User retrieved successfully:
@@ -196,6 +195,7 @@ class AuthDataStore @Inject constructor(
                     - Role: ${it.role}
                     - Business ID: ${it.businessId}
                     - Site ID: ${it.siteId}
+                    - System Owner ID: ${it.systemOwnerId}
                     - Online: $isOnline
                     - Last Active: ${java.time.Instant.ofEpochMilli(lastActive)}
                 """.trimIndent())
diff --git a/app/src/main/java/app/forku/data/mapper/UserMapper.kt b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
index 74c8642..1cbac49 100644
--- a/app/src/main/java/app/forku/data/mapper/UserMapper.kt
+++ b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
@@ -25,7 +25,8 @@ fun UserDto.toDomain(): User {
         lastLogin = lastLogin,
         isActive = isActive,
         password = password,
-        businessId = businessId
+        businessId = businessId,
+        systemOwnerId = systemOwnerId
     )
 }
 
@@ -53,7 +54,8 @@ fun User.toDto(): UserDto {
         lastMedicalCheck = lastMedicalCheck,
         lastLogin = lastLogin,
         isActive = isActive,
-        businessId = businessId
+        businessId = businessId,
+        systemOwnerId = systemOwnerId
     )
 }
 
diff --git a/app/src/main/java/app/forku/data/remote/api/BusinessApi.kt b/app/src/main/java/app/forku/data/remote/api/BusinessApi.kt
index d29ac34..a793141 100644
--- a/app/src/main/java/app/forku/data/remote/api/BusinessApi.kt
+++ b/app/src/main/java/app/forku/data/remote/api/BusinessApi.kt
@@ -1,6 +1,7 @@
 package app.forku.data.remote.api
 
 import app.forku.data.remote.dto.BusinessDto
+import app.forku.data.remote.dto.BusinessStats
 import retrofit2.Response
 import retrofit2.http.*
 
@@ -41,4 +42,23 @@ interface BusinessApi {
 
     @GET("business/{businessId}/vehicles")
     suspend fun getBusinessVehicles(@Path("businessId") businessId: String): List<String>
+
+    // New endpoints for System Owner and Super Admin
+    @GET("business/system-owner/{systemOwnerId}")
+    suspend fun getBusinessesBySystemOwnerId(@Path("systemOwnerId") systemOwnerId: String): List<BusinessDto>
+
+    @GET("business/super-admin/{superAdminId}")
+    suspend fun getBusinessesBySuperAdminId(@Path("superAdminId") superAdminId: String): List<BusinessDto>
+
+    @PUT("business/{businessId}/transfer")
+    suspend fun transferBusiness(
+        @Path("businessId") businessId: String,
+        @Query("newSuperAdminId") newSuperAdminId: String
+    ): BusinessDto
+
+    @GET("business/stats/system-owner/{systemOwnerId}")
+    suspend fun getSystemOwnerBusinessStats(@Path("systemOwnerId") systemOwnerId: String): BusinessStats
+
+    @GET("business/stats/super-admin/{superAdminId}")
+    suspend fun getSuperAdminBusinessStats(@Path("superAdminId") superAdminId: String): BusinessStats
 }
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/remote/api/CreateBusinessRequest.kt b/app/src/main/java/app/forku/data/remote/api/CreateBusinessRequest.kt
index 49261bc..81a295b 100644
--- a/app/src/main/java/app/forku/data/remote/api/CreateBusinessRequest.kt
+++ b/app/src/main/java/app/forku/data/remote/api/CreateBusinessRequest.kt
@@ -7,9 +7,15 @@ data class CreateBusinessRequest(
     val name: String,
     
     @SerializedName("status")
-    val status: String = "PENDING"
+    val status: String = "PENDING",
+
+    @SerializedName("system_owner_id")
+    val systemOwnerId: String?,
+
+    @SerializedName("super_admin_id")
+    val superAdminId: String?
 ) {
     override fun toString(): String {
-        return "CreateBusinessRequest(name='$name', status='$status')"
+        return "CreateBusinessRequest(name='$name', status='$status', systemOwnerId='$systemOwnerId', superAdminId='$superAdminId')"
     }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/remote/dto/BusinessDto.kt b/app/src/main/java/app/forku/data/remote/dto/BusinessDto.kt
index a018424..c8b7d46 100644
--- a/app/src/main/java/app/forku/data/remote/dto/BusinessDto.kt
+++ b/app/src/main/java/app/forku/data/remote/dto/BusinessDto.kt
@@ -16,5 +16,17 @@ data class BusinessDto(
     val totalVehicles: Int,
     
     @SerializedName("status")
-    val status: String
+    val status: String,
+
+    @SerializedName("system_owner_id")
+    val systemOwnerId: String,
+
+    @SerializedName("super_admin_id")
+    val superAdminId: String,
+
+    @SerializedName("created_at")
+    val createdAt: String,
+
+    @SerializedName("updated_at")
+    val updatedAt: String
 ) 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/repository/business/BusinessRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/business/BusinessRepositoryImpl.kt
index 1176c14..181dfe0 100644
--- a/app/src/main/java/app/forku/data/repository/business/BusinessRepositoryImpl.kt
+++ b/app/src/main/java/app/forku/data/repository/business/BusinessRepositoryImpl.kt
@@ -8,27 +8,47 @@ import app.forku.presentation.dashboard.BusinessStatus
 import retrofit2.HttpException
 import javax.inject.Inject
 import android.util.Log
+import app.forku.data.remote.dto.BusinessDto
+import app.forku.data.remote.dto.BusinessStats
 import com.google.gson.Gson
+import app.forku.domain.model.user.UserRole
+import app.forku.domain.repository.user.UserRepository
 
 class BusinessRepositoryImpl @Inject constructor(
     private val api: BusinessApi,
-    private val gson: Gson
+    private val gson: Gson,
+    private val userRepository: UserRepository
 ) : BusinessRepository {
 
     override suspend fun getAllBusinesses(): List<Business> {
         try {
-            Log.d("BusinessManagement", "Fetching all businesses")
-            val businesses = api.getAllBusinesses()
-            Log.d("BusinessManagement", "Received ${businesses.size} businesses")
-            return businesses.map { dto ->
-                Log.d("BusinessManagement", "Mapping business: ${dto.name}")
-                Business(
-                    id = dto.id,
-                    name = dto.name,
-                    totalUsers = dto.totalUsers,
-                    totalVehicles = dto.totalVehicles,
-                    status = BusinessStatus.valueOf(dto.status.uppercase())
-                )
+            val currentUser = userRepository.getCurrentUser()
+            Log.d("BusinessManagement", "Fetching businesses for user role: ${currentUser?.role}")
+            
+            val businessDtos = when (currentUser?.role) {
+                UserRole.SYSTEM_OWNER -> {
+                    Log.d("BusinessManagement", "Fetching all businesses as SYSTEM_OWNER")
+                    api.getAllBusinesses()
+                }
+                UserRole.SUPERADMIN -> {
+                    Log.d("BusinessManagement", "Fetching businesses for SUPERADMIN: ${currentUser.id}")
+                    api.getBusinessesBySuperAdminId(currentUser.id)
+                }
+                else -> {
+                    Log.e("BusinessManagement", "Unauthorized role: ${currentUser?.role}")
+                    throw SecurityException("Insufficient permissions to access businesses")
+                }
+            }
+            
+            Log.d("BusinessManagement", "Received ${businessDtos.size} businesses from API")
+            businessDtos.forEach { dto ->
+                Log.d("BusinessManagement", "Business DTO: id=${dto.id}, name=${dto.name}, status=${dto.status}")
+            }
+            
+            return businessDtos.map { dto ->
+                mapDtoToBusiness(dto).also { business ->
+                    Log.d("BusinessManagement", "Mapped business: id=${business.id}, name=${business.name}, status=${business.status}")
+                }
             }
         } catch (e: Exception) {
             Log.e("BusinessManagement", "Error fetching businesses", e)
@@ -38,49 +58,174 @@ class BusinessRepositoryImpl @Inject constructor(
 
     override suspend fun getBusinessById(id: String): Business {
         val dto = api.getBusinessById(id)
-        return Business(
-            id = dto.id,
-            name = dto.name,
-            totalUsers = dto.totalUsers,
-            totalVehicles = dto.totalVehicles,
-            status = BusinessStatus.valueOf(dto.status.uppercase())
-        )
+        return mapDtoToBusiness(dto)
     }
 
     override suspend fun createBusiness(name: String): Business {
         try {
-            val request = CreateBusinessRequest(name)
-            val jsonRequest = gson.toJson(request)
-            Log.d("BusinessManagement", "Sending request JSON: $jsonRequest")
-            Log.d("BusinessManagement", "Request object: $request")
-            
-            val response = api.createBusiness(request)
-            if (!response.isSuccessful) {
-                val errorBody = response.errorBody()?.string()
-                Log.e("BusinessManagement", "Error response: ${response.code()} - $errorBody")
-                Log.e("BusinessManagement", "Request URL: ${response.raw().request.url}")
-                Log.e("BusinessManagement", "Request headers: ${response.raw().request.headers}")
-                throw Exception("Failed to create business: [${response.code()}] $errorBody")
+            val currentUser = userRepository.getCurrentUser()
+            when (currentUser?.role) {
+                UserRole.SYSTEM_OWNER, UserRole.SUPERADMIN -> {
+                    val request = CreateBusinessRequest(
+                        name = name,
+                        systemOwnerId = if (currentUser.role == UserRole.SYSTEM_OWNER) currentUser.id else null,
+                        superAdminId = if (currentUser.role == UserRole.SUPERADMIN) currentUser.id else null
+                    )
+                    
+                    val response = api.createBusiness(request)
+                    if (!response.isSuccessful) {
+                        handleErrorResponse(response)
+                    }
+                    
+                    val dto = response.body() ?: throw Exception("Empty response body")
+                    val business = mapDtoToBusiness(dto)
+
+                    // Update user's systemOwnerId if they are a SYSTEM_OWNER
+                    if (currentUser.role == UserRole.SYSTEM_OWNER) {
+                        val updatedUser = currentUser.copy(
+                            systemOwnerId = currentUser.id,
+                            businessId = business.id
+                        )
+                        userRepository.updateUser(updatedUser)
+                    }
+
+                    return business
+                }
+                else -> throw SecurityException("Insufficient permissions to create business")
             }
+        } catch (e: Exception) {
+            handleException(e, "create business")
+            throw e
+        }
+    }
+
+    override suspend fun getBusinessesBySystemOwnerId(systemOwnerId: String): List<Business> {
+        validateSystemOwnerAccess(systemOwnerId)
+        return api.getBusinessesBySystemOwnerId(systemOwnerId).map { mapDtoToBusiness(it) }
+    }
+
+    override suspend fun getBusinessesBySuperAdminId(superAdminId: String): List<Business> {
+        validateSuperAdminAccess(superAdminId, null)
+        return api.getBusinessesBySuperAdminId(superAdminId).map { mapDtoToBusiness(it) }
+    }
+
+    override suspend fun transferBusinessToSuperAdmin(businessId: String, newSuperAdminId: String) {
+        val currentUser = userRepository.getCurrentUser()
+        val business = getBusinessById(businessId)
+        
+        when {
+            currentUser?.role == UserRole.SYSTEM_OWNER -> {
+                api.transferBusiness(businessId, newSuperAdminId)
+            }
+            currentUser?.role == UserRole.SUPERADMIN && business.superAdminId == currentUser.id -> {
+                api.transferBusiness(businessId, newSuperAdminId)
+            }
+            else -> throw SecurityException("Insufficient permissions to transfer business")
+        }
+    }
+
+    override suspend fun validateSuperAdminAccess(superAdminId: String, businessId: String?): Boolean {
+        try {
+            val currentUser = userRepository.getCurrentUser()
+            Log.d("BusinessManagement", "Validating SuperAdmin access for user: ${currentUser?.id}, role: ${currentUser?.role}")
             
-            val dto = response.body() ?: throw Exception("Empty response body")
-            return Business(
+            return when {
+                // System Owner tiene acceso total
+                currentUser?.role == UserRole.SYSTEM_OWNER -> true
+                
+                // SuperAdmin solo puede acceder a sus propios negocios
+                currentUser?.role == UserRole.SUPERADMIN && currentUser.id == superAdminId -> {
+                    if (businessId == null) {
+                        true // SuperAdmin can access their own general resources without a specific business
+                    } else {
+                        val business = getBusinessById(businessId)
+                        business.superAdminId == superAdminId
+                    }
+                }
+                
+                // Otros roles no tienen acceso
+                else -> false
+            }.also {
+                Log.d("BusinessManagement", "Access validation result: $it")
+            }
+        } catch (e: Exception) {
+            Log.e("BusinessManagement", "Error validating SuperAdmin access", e)
+            return false
+        }
+    }
+
+    override suspend fun getSystemOwnerBusinessStats(systemOwnerId: String): BusinessStats {
+        validateSystemOwnerAccess(systemOwnerId)
+        return api.getSystemOwnerBusinessStats(systemOwnerId)
+    }
+
+    override suspend fun getSuperAdminBusinessStats(superAdminId: String): BusinessStats {
+        validateSuperAdminAccess(superAdminId, null)
+        return api.getSuperAdminBusinessStats(superAdminId)
+    }
+
+    private suspend fun validateSystemOwnerAccess(systemOwnerId: String) {
+        val currentUser = userRepository.getCurrentUser()
+        if (currentUser?.role != UserRole.SYSTEM_OWNER || currentUser.id != systemOwnerId) {
+            throw SecurityException("Insufficient permissions to access system owner resources")
+        }
+    }
+
+    private fun mapDtoToBusiness(dto: BusinessDto): Business {
+        return try {
+            Log.d("BusinessManagement", "Mapping DTO to Business: " +
+                "id=${dto.id}, " +
+                "name=${dto.name}, " +
+                "status=${dto.status}, " +
+                "systemOwnerId=${dto.systemOwnerId}, " +
+                "superAdminId=${dto.superAdminId}")
+                
+            Business(
                 id = dto.id,
                 name = dto.name,
                 totalUsers = dto.totalUsers,
                 totalVehicles = dto.totalVehicles,
-                status = BusinessStatus.valueOf(dto.status.uppercase())
-            )
-        } catch (e: HttpException) {
-            val errorBody = e.response()?.errorBody()?.string()
-            val errorCode = e.response()?.code()
-            Log.e("BusinessManagement", "HTTP error: $errorCode - $errorBody")
-            Log.e("BusinessManagement", "Request URL: ${e.response()?.raw()?.request?.url}")
-            Log.e("BusinessManagement", "Request headers: ${e.response()?.raw()?.request?.headers}")
-            throw Exception("Failed to create business: [$errorCode] $errorBody")
+                status = BusinessStatus.valueOf(dto.status.uppercase()),
+                systemOwnerId = dto.systemOwnerId,
+                superAdminId = dto.superAdminId,
+                createdAt = dto.createdAt,
+                updatedAt = dto.updatedAt
+            ).also {
+                Log.d("BusinessManagement", "Successfully mapped Business: " +
+                    "id=${it.id}, " +
+                    "name=${it.name}, " +
+                    "status=${it.status}, " +
+                    "systemOwnerId=${it.systemOwnerId}, " +
+                    "superAdminId=${it.superAdminId}")
+            }
         } catch (e: Exception) {
-            Log.e("BusinessManagement", "Unexpected error", e)
-            throw Exception("Failed to create business: ${e.message}")
+            Log.e("BusinessManagement", "Error mapping DTO to Business: ${dto.id}", e)
+            throw e
+        }
+    }
+
+    private fun handleErrorResponse(response: retrofit2.Response<BusinessDto>) {
+        val errorBody = response.errorBody()?.string()
+        Log.e("BusinessManagement", "Error response: ${response.code()} - $errorBody")
+        Log.e("BusinessManagement", "Request URL: ${response.raw().request.url}")
+        Log.e("BusinessManagement", "Request headers: ${response.raw().request.headers}")
+        throw Exception("Failed to create business: [${response.code()}] $errorBody")
+    }
+
+    private fun handleException(e: Exception, operation: String) {
+        when (e) {
+            is HttpException -> {
+                val errorBody = e.response()?.errorBody()?.string()
+                val errorCode = e.response()?.code()
+                Log.e("BusinessManagement", "HTTP error: $errorCode - $errorBody")
+                Log.e("BusinessManagement", "Request URL: ${e.response()?.raw()?.request?.url}")
+                Log.e("BusinessManagement", "Request headers: ${e.response()?.raw()?.request?.headers}")
+                throw Exception("Failed to $operation: [$errorCode] $errorBody")
+            }
+            else -> {
+                Log.e("BusinessManagement", "Unexpected error", e)
+                throw Exception("Failed to $operation: ${e.message}")
+            }
         }
     }
 
@@ -90,13 +235,7 @@ class BusinessRepositoryImpl @Inject constructor(
             name = business.name,
             status = business.status.name.lowercase()
         )
-        return Business(
-            id = dto.id,
-            name = dto.name,
-            totalUsers = dto.totalUsers,
-            totalVehicles = dto.totalVehicles,
-            status = BusinessStatus.valueOf(dto.status.uppercase())
-        )
+        return mapDtoToBusiness(dto)
     }
 
     override suspend fun deleteBusiness(id: String) {
diff --git a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
index 15f7ffc..14ee150 100644
--- a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
+++ b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
@@ -242,7 +242,9 @@ class UserRepositoryImpl @Inject constructor(
                 certifications = user.certifications.map { it.toDto() },
                 lastMedicalCheck = user.lastMedicalCheck,
                 lastLogin = user.lastLogin,
-                isActive = user.isActive
+                isActive = user.isActive,
+                businessId = user.businessId,
+                systemOwnerId = user.systemOwnerId
             )
 
             val response = api.updateUser(user.id, userDto)
@@ -279,13 +281,21 @@ class UserRepositoryImpl @Inject constructor(
 
     override suspend fun getAllUsers(): List<User> = withContext(Dispatchers.IO) {
         try {
+            Log.d("UserRepository", "Getting all users")
             val response = api.getUsers()
             if (!response.isSuccessful) {
+                Log.e("UserRepository", "Failed to get users: ${response.code()}")
                 return@withContext emptyList()
             }
 
-            response.body()?.map { it.toDomain() } ?: emptyList()
+            val users = response.body()?.map { it.toDomain() } ?: emptyList()
+            Log.d("UserRepository", "Successfully retrieved ${users.size} users")
+            users.forEach { user ->
+                Log.d("UserRepository", "User: ${user.firstName} ${user.lastName}, Role: ${user.role}")
+            }
+            users
         } catch (e: Exception) {
+            Log.e("UserRepository", "Error getting all users", e)
             emptyList()
         }
     }
diff --git a/app/src/main/java/app/forku/di/BusinessModule.kt b/app/src/main/java/app/forku/di/BusinessModule.kt
index 1cbac2a..e18d302 100644
--- a/app/src/main/java/app/forku/di/BusinessModule.kt
+++ b/app/src/main/java/app/forku/di/BusinessModule.kt
@@ -3,6 +3,7 @@ package app.forku.di
 import app.forku.data.remote.api.BusinessApi
 import app.forku.data.repository.business.BusinessRepositoryImpl
 import app.forku.domain.repository.business.BusinessRepository
+import app.forku.domain.repository.user.UserRepository
 import com.google.gson.Gson
 import dagger.Module
 import dagger.Provides
@@ -16,7 +17,11 @@ object BusinessModule {
 
     @Provides
     @Singleton
-    fun provideBusinessRepository(api: BusinessApi, gson: Gson): BusinessRepository {
-        return BusinessRepositoryImpl(api, gson)
+    fun provideBusinessRepository(
+        api: BusinessApi, 
+        gson: Gson,
+        userRepository: UserRepository
+    ): BusinessRepository {
+        return BusinessRepositoryImpl(api, gson, userRepository)
     }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/domain/model/user/User.kt b/app/src/main/java/app/forku/domain/model/user/User.kt
index 2688e64..1522aee 100644
--- a/app/src/main/java/app/forku/domain/model/user/User.kt
+++ b/app/src/main/java/app/forku/domain/model/user/User.kt
@@ -22,7 +22,8 @@ data class User(
     val isApproved: Boolean = false,
     val password: String,
     val businessId: String? = null,
-    val siteId: String? = null
+    val siteId: String? = null,
+    val systemOwnerId: String? = null
 ) {
     val fullName: String
         get() = "$firstName $lastName"
diff --git a/app/src/main/java/app/forku/domain/model/user/UserRole.kt b/app/src/main/java/app/forku/domain/model/user/UserRole.kt
index 840a6ba..c45f6f9 100644
--- a/app/src/main/java/app/forku/domain/model/user/UserRole.kt
+++ b/app/src/main/java/app/forku/domain/model/user/UserRole.kt
@@ -1,6 +1,7 @@
 package app.forku.domain.model.user
 
 enum class UserRole {
+    SYSTEM_OWNER,
     SUPERADMIN,
     ADMIN,
     OPERATOR;
diff --git a/app/src/main/java/app/forku/domain/repository/business/BusinessRepository.kt b/app/src/main/java/app/forku/domain/repository/business/BusinessRepository.kt
index f8256d4..071a6b1 100644
--- a/app/src/main/java/app/forku/domain/repository/business/BusinessRepository.kt
+++ b/app/src/main/java/app/forku/domain/repository/business/BusinessRepository.kt
@@ -1,5 +1,6 @@
 package app.forku.domain.repository.business
 
+import app.forku.data.remote.dto.BusinessStats
 import app.forku.presentation.dashboard.Business
 
 interface BusinessRepository {
@@ -12,4 +13,10 @@ interface BusinessRepository {
     suspend fun removeUserFromBusiness(userId: String, businessId: String)
     suspend fun getBusinessUsers(businessId: String): List<String>
     suspend fun getBusinessVehicles(businessId: String): List<String>
+    suspend fun getBusinessesBySystemOwnerId(systemOwnerId: String): List<Business>
+    suspend fun getBusinessesBySuperAdminId(superAdminId: String): List<Business>
+    suspend fun transferBusinessToSuperAdmin(businessId: String, newSuperAdminId: String)
+    suspend fun validateSuperAdminAccess(superAdminId: String, businessId: String?): Boolean
+    suspend fun getSystemOwnerBusinessStats(systemOwnerId: String): BusinessStats
+    suspend fun getSuperAdminBusinessStats(superAdminId: String): BusinessStats
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/presentation/business/BusinessManagementScreen.kt b/app/src/main/java/app/forku/presentation/business/BusinessManagementScreen.kt
index cd5f031..0cf5ab2 100644
--- a/app/src/main/java/app/forku/presentation/business/BusinessManagementScreen.kt
+++ b/app/src/main/java/app/forku/presentation/business/BusinessManagementScreen.kt
@@ -48,7 +48,7 @@ fun BusinessManagementScreen(
 
     LaunchedEffect(Unit) {
         Log.d("BusinessManagement", "Screen launched, current user role: ${currentUser.value?.role}")
-        if (currentUser.value?.role != UserRole.SUPERADMIN) {
+        if (currentUser.value?.role != UserRole.SYSTEM_OWNER && currentUser.value?.role != UserRole.SUPERADMIN) {
             navController.navigateUp()
         }
     }
diff --git a/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardState.kt b/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardState.kt
index c3b339c..56121cf 100644
--- a/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardState.kt
+++ b/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardState.kt
@@ -30,14 +30,6 @@ data class SuperAdminDashboardState(
     val recentAuditLogs: List<AuditLogEntry> = emptyList()
 )
 
-data class Business(
-    val id: String,
-    val name: String,
-    val totalUsers: Int,
-    val totalVehicles: Int,
-    val status: BusinessStatus
-)
-
 enum class BusinessStatus {
     ACTIVE,
     PENDING,
diff --git a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
index a7e4928..28ed3a9 100644
--- a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
+++ b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
@@ -43,6 +43,7 @@ import app.forku.presentation.user.operator.OperatorsListScreen
 import app.forku.presentation.checklist.CheckDetailScreen
 import app.forku.presentation.safety.SafetyAlertsScreen
 import app.forku.presentation.business.BusinessManagementScreen
+import app.forku.presentation.dashboard.SystemOwnerDashboardScreen
 
 @Composable
 fun NavGraph(
@@ -63,6 +64,7 @@ fun NavGraph(
             !tourCompleted -> Screen.Tour.route
             loginState is LoginState.Success || hasToken -> {
                 when (currentUser?.role) {
+                    UserRole.SYSTEM_OWNER -> Screen.SystemOwnerDashboard.route
                     UserRole.SUPERADMIN -> Screen.SuperAdminDashboard.route
                     UserRole.ADMIN -> Screen.AdminDashboard.route
                     else -> Screen.Dashboard.route
@@ -75,6 +77,7 @@ fun NavGraph(
             LoginScreen(
                 onLoginSuccess = { user ->
                     val route = when (user.role) {
+                        UserRole.SYSTEM_OWNER -> Screen.SystemOwnerDashboard.route
                         UserRole.SUPERADMIN -> Screen.SuperAdminDashboard.route
                         UserRole.ADMIN -> Screen.AdminDashboard.route
                         else -> Screen.Dashboard.route
@@ -441,6 +444,16 @@ fun NavGraph(
             )
         }
 
+        composable(Screen.SystemOwnerDashboard.route) {
+            SystemOwnerDashboardScreen(
+                navController = navController,
+                onNavigate = { route ->
+                    navController.navigate(route)
+                },
+                networkManager = networkManager
+            )
+        }
+
         // SuperAdmin specific routes
         composable(Screen.UserManagement.route) {
             // TODO: Implement UserManagementScreen
diff --git a/app/src/main/java/app/forku/presentation/navigation/Screen.kt b/app/src/main/java/app/forku/presentation/navigation/Screen.kt
index 00caf16..455b96c 100644
--- a/app/src/main/java/app/forku/presentation/navigation/Screen.kt
+++ b/app/src/main/java/app/forku/presentation/navigation/Screen.kt
@@ -74,6 +74,7 @@ sealed class Screen(val route: String) {
     data object IncidentDetail : Screen("incident_detail/{incidentId}")
     data object Tour : Screen("tour")
     data object AdminDashboard : Screen("admin_dashboard")
+    data object SystemOwnerDashboard : Screen("system_owner_dashboard")
     data object SuperAdminDashboard : Screen("super_admin_dashboard")
     data object OperatorsList : Screen("operator_session_list")
     data object Notifications : Screen("notifications")
diff --git a/current_diff_forku.txt b/current_diff_forku.txt
index 1aca26b..daf8a13 100644
--- a/current_diff_forku.txt
+++ b/current_diff_forku.txt
@@ -1,8248 +0,0 @@
-diff --git a/app/src/main/java/app/forku/core/Constants.kt b/app/src/main/java/app/forku/core/Constants.kt
-index 49b7af7..d64d142 100644
---- a/app/src/main/java/app/forku/core/Constants.kt
-+++ b/app/src/main/java/app/forku/core/Constants.kt
-@@ -1,8 +1,7 @@
- package app.forku.core
- 
- object Constants {
--    //const val BASE_URL = "https://67ce79d2125cd5af757aa258.mockapi.io/forku/api/v2/" //Test
--    const val BASE_URL = "https://67d20f4190e0670699bc531f.mockapi.io/forku/api/dev/" //Dev
-+    //const val BASE_URL = "https://67d20f4190e0670699bc531f.mockapi.io/forku/api/dev/" //Dev
-+    const val BASE_URL = "https://67ed9e4e4387d9117bbe2e16.mockapi.io/forku/api/v1/" //V1
-     const val API_VERSION = "v1"
--
- }
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/data/api/GeneralApi.kt b/app/src/main/java/app/forku/data/api/GeneralApi.kt
-deleted file mode 100644
-index ccdd77c..0000000
---- a/app/src/main/java/app/forku/data/api/GeneralApi.kt
-+++ /dev/null
-@@ -1,139 +0,0 @@
--package app.forku.data.api
--
--import app.forku.data.api.dto.checklist.ChecklistResponseDto
--import app.forku.data.api.dto.user.UserDto
--import app.forku.data.api.dto.vehicle.VehicleDto
--import app.forku.data.api.dto.session.StartSessionRequestDto
--import app.forku.data.api.dto.checklist.PreShiftCheckDto
--import app.forku.data.api.dto.incident.IncidentDto
--import app.forku.data.api.dto.session.SessionDto
--import app.forku.data.api.dto.notification.NotificationDto
--import retrofit2.Response
--import retrofit2.http.*
--
--interface GeneralApi {
--
--
--    // Users
--    @GET("users")
--    suspend fun getUsers(): Response<List<UserDto>>
--
--    @GET("users/{id}")
--    suspend fun getUser(@Path("id") id: String): Response<UserDto>
--
--    @POST("users")
--    suspend fun createUser(@Body user: UserDto): Response<UserDto>
--
--    @PUT("users/{id}")
--    suspend fun updateUser(
--        @Path("id") id: String,
--        @Body user: UserDto
--    ): Response<UserDto>
--
--
--
--    // Vehicles
--    @GET("vehicles")
--    suspend fun getVehicles(): Response<List<VehicleDto>>
--
--    @GET("vehicles/{id}")
--    suspend fun getVehicle(@Path("id") id: String): Response<VehicleDto>
--
--    @PUT("vehicles/{id}")
--    suspend fun updateVehicle(
--        @Path("id") id: String,
--        @Body vehicle: VehicleDto
--    ): Response<VehicleDto>
--
--
--
--    // Incidents
--    @POST("incidents")
--    suspend fun reportIncident(@Body incident: IncidentDto): Response<IncidentDto>
--
--    @GET("incidents")
--    suspend fun getIncidents(): Response<List<IncidentDto>>
--
--    @GET("incidents/{id}")
--    suspend fun getIncidentById(@Path("id") id: String): Response<IncidentDto>
--
--
--
--    //PreShiftCheck Questionary
--    @GET("checklist_questionary")
--    suspend fun getChecklistQuestionary(): Response<ChecklistResponseDto>
--
--
--
--
--    // Global checks endpoints
--    @GET("checks")
--    suspend fun getAllChecks(): Response<List<PreShiftCheckDto>>
--
--    @GET("checks/{checkId}")
--    suspend fun getCheckById(@Path("checkId") checkId: String): Response<PreShiftCheckDto>
--
--    @POST("checks")
--    suspend fun createGlobalCheck(@Body check: PreShiftCheckDto): Response<PreShiftCheckDto>
--
--    @PUT("checks/{checkId}")
--    suspend fun updateGlobalCheck(
--        @Path("checkId") checkId: String,
--        @Body check: PreShiftCheckDto
--    ): Response<PreShiftCheckDto>
--
--
--
--
--
--    // Global session endpoints
--    @GET("sessions")
--    suspend fun getAllSessions(): Response<List<SessionDto>>
--
--    @GET("users/{userId}/sessions")
--    suspend fun getUserSessions(
--        @Path("userId") userId: String
--    ): Response<List<SessionDto>>
--
--    @GET("sessions/{sessionId}")
--    suspend fun getSessionById(@Path("sessionId") sessionId: String): Response<SessionDto>
--
--    @POST("sessions")
--    suspend fun createSession(@Body session: StartSessionRequestDto): Response<SessionDto>
--
--    @PUT("sessions/{sessionId}")
--    suspend fun updateSession(
--        @Path("sessionId") sessionId: String,
--        @Body session: SessionDto
--    ): Response<SessionDto>
--
--
--
--
--
--    /* Notifications */
--    @GET("notifications")
--    suspend fun getNotifications(): Response<List<NotificationDto>>
--
--    @GET("notifications/{id}")
--    suspend fun getNotification(
--        @Path("id") id: String
--    ): Response<NotificationDto>
--
--    @POST("notifications")
--    suspend fun createNotification(
--        @Body notification: NotificationDto
--    ): Response<NotificationDto>
--
--    @PUT("notifications/{id}")
--    suspend fun updateNotification(
--        @Path("id") id: String,
--        @Body notification: NotificationDto
--    ): Response<NotificationDto>
--
--    @DELETE("notifications/{id}")
--    suspend fun deleteNotification(
--        @Path("id") id: String
--    ): Response<Unit>
--}
--
-diff --git a/app/src/main/java/app/forku/data/api/dto/session/SessionDto.kt b/app/src/main/java/app/forku/data/api/dto/session/SessionDto.kt
-index e2a0d22..a0bb697 100644
---- a/app/src/main/java/app/forku/data/api/dto/session/SessionDto.kt
-+++ b/app/src/main/java/app/forku/data/api/dto/session/SessionDto.kt
-@@ -6,6 +6,7 @@ data class SessionDto(
-     val id: String,
-     val vehicleId: String,
-     val userId: String,
-+    val checkId: String,
-     val startTime: String,
-     val endTime: String?,
-     val status: String,
-diff --git a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
-index 64b228a..e2a630f 100644
---- a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
-+++ b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
-@@ -14,7 +14,8 @@ data class UserDto(
-     val certifications: List<CertificationDto>,
-     val lastMedicalCheck: String?,
-     val lastLogin: String?,
--    val isActive: Boolean = true
-+    val isActive: Boolean = true,
-+    val businessId: String? = null
- )
- 
- data class CertificationDto(
-diff --git a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
-index 0f240ed..7d8a645 100644
---- a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
-+++ b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
-@@ -36,6 +36,8 @@ class AuthDataStore @Inject constructor(
-         val PASSWORD = stringPreferencesKey("password")
-         val LAST_ACTIVE = stringPreferencesKey("last_active")
-         val IS_ONLINE = booleanPreferencesKey("is_online")
-+        val BUSINESS_ID = stringPreferencesKey("business_id")
-+        val SITE_ID = stringPreferencesKey("site_id")
-     }
- 
-     @Volatile
-@@ -77,6 +79,8 @@ class AuthDataStore @Inject constructor(
-             - Name: ${user.fullName}
-             - Token: ${user.token.take(10)}...
-             - Role: ${user.role}
-+            - Business ID: ${user.businessId}
-+            - Site ID: ${user.siteId}
-         """.trimIndent())
-         
-         context.dataStore.edit { preferences ->
-@@ -92,6 +96,8 @@ class AuthDataStore @Inject constructor(
-             preferences[PreferencesKeys.TOKEN_KEY] = user.token
-             preferences[PreferencesKeys.PASSWORD] = user.password
-             preferences[PreferencesKeys.IS_ONLINE] = true
-+            user.businessId?.let { preferences[PreferencesKeys.BUSINESS_ID] = it }
-+            user.siteId?.let { preferences[PreferencesKeys.SITE_ID] = it }
-             val now = System.currentTimeMillis()
-             preferences[PreferencesKeys.LAST_ACTIVE] = now.toString()
-             lastActiveTime = now
-@@ -117,6 +123,8 @@ class AuthDataStore @Inject constructor(
-                 - ROLE: ${preferences[PreferencesKeys.ROLE]}
-                 - IS_ONLINE: ${preferences[PreferencesKeys.IS_ONLINE]}
-                 - LAST_ACTIVE: ${preferences[PreferencesKeys.LAST_ACTIVE]}
-+                - BUSINESS_ID: ${preferences[PreferencesKeys.BUSINESS_ID]}
-+                - SITE_ID: ${preferences[PreferencesKeys.SITE_ID]}
-             """.trimIndent())
-             
-             val userId = preferences[PreferencesKeys.USER_ID]
-@@ -157,6 +165,8 @@ class AuthDataStore @Inject constructor(
-                 return null
-             }
-             val password = preferences[PreferencesKeys.PASSWORD] ?: ""
-+            val businessId = preferences[PreferencesKeys.BUSINESS_ID]
-+            val siteId = preferences[PreferencesKeys.SITE_ID]
- 
-             val isOnline = preferences[PreferencesKeys.IS_ONLINE] ?: false
-             val lastActive = preferences[PreferencesKeys.LAST_ACTIVE]?.toLongOrNull() ?: 0L
-@@ -174,7 +184,9 @@ class AuthDataStore @Inject constructor(
-                 certifications = emptyList(),
-                 password = password,
-                 isActive = isOnline,
--                lastLogin = lastActive.toString()
-+                lastLogin = lastActive.toString(),
-+                businessId = businessId,
-+                siteId = siteId
-             ).also {
-                 android.util.Log.d("AuthDataStore", """
-                     User retrieved successfully:
-@@ -182,6 +194,8 @@ class AuthDataStore @Inject constructor(
-                     - Name: ${it.fullName}
-                     - Token: ${it.token.take(10)}...
-                     - Role: ${it.role}
-+                    - Business ID: ${it.businessId}
-+                    - Site ID: ${it.siteId}
-                     - Online: $isOnline
-                     - Last Active: ${java.time.Instant.ofEpochMilli(lastActive)}
-                 """.trimIndent())
-diff --git a/app/src/main/java/app/forku/data/mapper/SessionMapper.kt b/app/src/main/java/app/forku/data/mapper/SessionMapper.kt
-deleted file mode 100644
-index 6c0f1cf..0000000
---- a/app/src/main/java/app/forku/data/mapper/SessionMapper.kt
-+++ /dev/null
-@@ -1,68 +0,0 @@
--package app.forku.data.mapper
--
--
--import app.forku.data.api.dto.session.SessionDto
--import app.forku.domain.model.session.VehicleSessionStatus
--import app.forku.domain.model.session.VehicleSession
--import app.forku.domain.model.session.VehicleSessionClosedMethod
--
--
--fun SessionDto.toDomain(): VehicleSession {
--    val duration = if (endTime != null) {
--        try {
--            val start = java.time.ZonedDateTime.parse(startTime).toInstant()
--            val end = java.time.ZonedDateTime.parse(endTime).toInstant()
--            java.time.Duration.between(start, end).toMinutes().toInt()
--        } catch (e: Exception) {
--            null
--        }
--    } else null
--
--    // Strict status mapping
--    val vehicleSessionStatus = when (status.uppercase()) {
--        "OPERATING" -> VehicleSessionStatus.OPERATING
--        else -> VehicleSessionStatus.NOT_OPERATING
--    }
--
--    // Map close method
--    val closeMethod = when (this.closeMethod?.uppercase()) {
--        "USER_CLOSED" -> VehicleSessionClosedMethod.USER_CLOSED
--        "ADMIN_CLOSED" -> VehicleSessionClosedMethod.ADMIN_CLOSED
--        "TIMEOUT_CLOSED" -> VehicleSessionClosedMethod.TIMEOUT_CLOSED
--        "GEOFENCE_CLOSED" -> VehicleSessionClosedMethod.GEOFENCE_CLOSED
--        else -> VehicleSessionClosedMethod.USER_CLOSED // Default value
--    }
--
--    return VehicleSession(
--        id = id,
--        vehicleId = vehicleId,
--        userId = userId,
--        startTime = startTime,
--        endTime = endTime,
--        status = vehicleSessionStatus,
--        startLocationCoordinates = startLocationCoordinates,
--        endLocationCoordinates = endLocationCoordinates,
--        durationMinutes = duration,
--        timestamp = timestamp,
--        closeMethod = closeMethod,
--        closedBy = closedBy,
--        notes = notes
--    )
--}
--
--fun VehicleSession.toDto(): SessionDto {
--    return SessionDto(
--        id = id,
--        vehicleId = vehicleId,
--        userId = userId,
--        startTime = startTime,
--        endTime = endTime,
--        status = status.name,
--        startLocationCoordinates = startLocationCoordinates,
--        endLocationCoordinates = endLocationCoordinates,
--        timestamp = timestamp,
--        closeMethod = closeMethod.name,
--        closedBy = closedBy,
--        notes = notes
--    )
--} 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/data/mapper/UserMapper.kt b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
-index 642815b..74c8642 100644
---- a/app/src/main/java/app/forku/data/mapper/UserMapper.kt
-+++ b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
-@@ -24,7 +24,8 @@ fun UserDto.toDomain(): User {
-         lastMedicalCheck = lastMedicalCheck,
-         lastLogin = lastLogin,
-         isActive = isActive,
--        password = password
-+        password = password,
-+        businessId = businessId
-     )
- }
- 
-@@ -51,7 +52,8 @@ fun User.toDto(): UserDto {
-         certifications = certifications.map { it.toDto() },
-         lastMedicalCheck = lastMedicalCheck,
-         lastLogin = lastLogin,
--        isActive = isActive
-+        isActive = isActive,
-+        businessId = businessId
-     )
- }
- 
-diff --git a/app/src/main/java/app/forku/data/mapper/VehicleSessionMapper.kt b/app/src/main/java/app/forku/data/mapper/VehicleSessionMapper.kt
-index 014aeb5..6ef5418 100644
---- a/app/src/main/java/app/forku/data/mapper/VehicleSessionMapper.kt
-+++ b/app/src/main/java/app/forku/data/mapper/VehicleSessionMapper.kt
-@@ -1,44 +1,109 @@
- package app.forku.data.mapper
- 
- import app.forku.data.model.VehicleSessionDto
-+import app.forku.data.api.dto.session.SessionDto
- import app.forku.domain.model.session.VehicleSession
- import app.forku.domain.model.session.VehicleSessionStatus
- import app.forku.domain.model.session.VehicleSessionClosedMethod
- 
--fun VehicleSessionDto.toVehicleSession(): VehicleSession {
--    return VehicleSession(
--        id = id,
--        vehicleId = vehicleId,
--        userId = operatorId,
--        startTime = startTime,
--        endTime = endTime,
--        status = if (endTime == null) VehicleSessionStatus.OPERATING else VehicleSessionStatus.NOT_OPERATING,
--        startLocationCoordinates = startLocationCoordinates,
--        endLocationCoordinates = endLocationCoordinates,
--        durationMinutes = null,
--        timestamp = startTime,
--        closeMethod = closeMethod?.let { 
-+object VehicleSessionMapper {
-+    fun calculateDuration(startTime: String, endTime: String?): Int? {
-+        return if (endTime != null) {
-             try {
--                VehicleSessionClosedMethod.valueOf(it)
--            } catch (e: IllegalArgumentException) {
--                VehicleSessionClosedMethod.USER_CLOSED
-+                val start = java.time.ZonedDateTime.parse(startTime).toInstant()
-+                val end = java.time.ZonedDateTime.parse(endTime).toInstant()
-+                java.time.Duration.between(start, end).toMinutes().toInt()
-+            } catch (e: Exception) {
-+                null
-             }
--        } ?: VehicleSessionClosedMethod.USER_CLOSED,
--        closedBy = closedBy,
--        notes = null
--    )
--}
-+        } else null
-+    }
- 
--fun VehicleSession.toVehicleSessionDto(): VehicleSessionDto {
--    return VehicleSessionDto(
--        id = id,
--        vehicleId = vehicleId,
--        operatorId = userId,
--        startTime = startTime,
--        endTime = endTime,
--        closeMethod = closeMethod.name,
--        closedBy = closedBy,
--        startLocationCoordinates = startLocationCoordinates,
--        endLocationCoordinates = endLocationCoordinates
--    )
-+    fun mapCloseMethod(closeMethod: String?): VehicleSessionClosedMethod? {
-+        return when (closeMethod?.uppercase()) {
-+            "USER_CLOSED" -> VehicleSessionClosedMethod.USER_CLOSED
-+            "ADMIN_CLOSED" -> VehicleSessionClosedMethod.ADMIN_CLOSED
-+            "TIMEOUT_CLOSED" -> VehicleSessionClosedMethod.TIMEOUT_CLOSED
-+            "GEOFENCE_CLOSED" -> VehicleSessionClosedMethod.GEOFENCE_CLOSED
-+            null -> null
-+            else -> VehicleSessionClosedMethod.USER_CLOSED
-+        }
-+    }
-+
-+    fun toDomain(dto: VehicleSessionDto): VehicleSession {
-+        return VehicleSession(
-+            id = dto.id,
-+            vehicleId = dto.vehicleId,
-+            userId = dto.userId,
-+            checkId = dto.checkId,
-+            startTime = dto.startTime,
-+            endTime = dto.endTime,
-+            status = VehicleSessionStatus.valueOf(dto.status),
-+            startLocationCoordinates = dto.startLocationCoordinates,
-+            endLocationCoordinates = dto.endLocationCoordinates,
-+            durationMinutes = calculateDuration(dto.startTime, dto.endTime),
-+            timestamp = dto.timestamp,
-+            closeMethod = mapCloseMethod(dto.closeMethod),
-+            closedBy = dto.closedBy,
-+            notes = dto.notes
-+        )
-+    }
-+
-+    fun toDomain(dto: SessionDto): VehicleSession {
-+        return VehicleSession(
-+            id = dto.id,
-+            vehicleId = dto.vehicleId,
-+            userId = dto.userId,
-+            checkId = dto.checkId,
-+            startTime = dto.startTime,
-+            endTime = dto.endTime,
-+            status = when (dto.status.uppercase()) {
-+                "OPERATING" -> VehicleSessionStatus.OPERATING
-+                else -> VehicleSessionStatus.NOT_OPERATING
-+            },
-+            startLocationCoordinates = dto.startLocationCoordinates,
-+            endLocationCoordinates = dto.endLocationCoordinates,
-+            durationMinutes = calculateDuration(dto.startTime, dto.endTime),
-+            timestamp = dto.timestamp,
-+            closeMethod = mapCloseMethod(dto.closeMethod),
-+            closedBy = dto.closedBy,
-+            notes = dto.notes
-+        )
-+    }
-+
-+    fun toDto(domain: VehicleSession): SessionDto {
-+        return SessionDto(
-+            id = domain.id,
-+            vehicleId = domain.vehicleId,
-+            userId = domain.userId,
-+            checkId = domain.checkId,
-+            startTime = domain.startTime,
-+            endTime = domain.endTime,
-+            status = domain.status.name,
-+            startLocationCoordinates = domain.startLocationCoordinates,
-+            endLocationCoordinates = domain.endLocationCoordinates,
-+            timestamp = domain.timestamp,
-+            closeMethod = domain.closeMethod?.name,
-+            closedBy = domain.closedBy,
-+            notes = domain.notes
-+        )
-+    }
-+
-+    fun toVehicleSessionDto(domain: VehicleSession): VehicleSessionDto {
-+        return VehicleSessionDto(
-+            id = domain.id,
-+            vehicleId = domain.vehicleId,
-+            userId = domain.userId,
-+            checkId = domain.checkId,
-+            startTime = domain.startTime,
-+            endTime = domain.endTime,
-+            timestamp = domain.timestamp,
-+            status = domain.status.toString(),
-+            closeMethod = domain.closeMethod?.toString(),
-+            closedBy = domain.closedBy,
-+            startLocationCoordinates = domain.startLocationCoordinates,
-+            endLocationCoordinates = domain.endLocationCoordinates,
-+            notes = domain.notes
-+        )
-+    }
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/data/model/VehicleSessionDto.kt b/app/src/main/java/app/forku/data/model/VehicleSessionDto.kt
-index 9260b78..acdea99 100644
---- a/app/src/main/java/app/forku/data/model/VehicleSessionDto.kt
-+++ b/app/src/main/java/app/forku/data/model/VehicleSessionDto.kt
-@@ -8,17 +8,25 @@ data class VehicleSessionDto(
-     @SerializedName("vehicle_id")
-     val vehicleId: String,
-     @SerializedName("operator_id")
--    val operatorId: String,
-+    val userId: String,
-+    @SerializedName("check_id")
-+    val checkId: String,
-     @SerializedName("start_time")
-     val startTime: String,
-     @SerializedName("end_time")
-     val endTime: String?,
--    @SerializedName("close_method")
--    val closeMethod: String? = null,
--    @SerializedName("closed_by")
--    val closedBy: String? = null,
-+    @SerializedName("timestamp")
-+    val timestamp: String,
-+    @SerializedName("status")
-+    val status: String,
-     @SerializedName("start_location_coordinates")
--    val startLocationCoordinates: String? = null,
-+    val startLocationCoordinates: String?,
-     @SerializedName("end_location_coordinates")
--    val endLocationCoordinates: String? = null
-+    val endLocationCoordinates: String?,
-+    @SerializedName("close_method")
-+    val closeMethod: String?,
-+    @SerializedName("closed_by")
-+    val closedBy: String?,
-+    @SerializedName("notes")
-+    val notes: String?
- ) 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt
-index ade55de..7199ac0 100644
---- a/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt
-@@ -1,6 +1,5 @@
- package app.forku.data.repository.checklist
- 
--import app.forku.data.api.GeneralApi
- import app.forku.data.datastore.AuthDataStore
- import app.forku.domain.repository.checklist.ChecklistRepository
- import app.forku.domain.usecase.checklist.ValidateChecklistUseCase
-@@ -15,11 +14,11 @@ import app.forku.domain.model.checklist.CheckStatus
- import java.time.Instant
- import app.forku.domain.repository.checklist.ChecklistStatusNotifier
- import app.forku.core.location.LocationManager
--
-+import app.forku.data.api.ChecklistApi
- 
- 
- class ChecklistRepositoryImpl @Inject constructor(
--    private val api: GeneralApi,
-+    private val api: ChecklistApi,
-     private val authDataStore: AuthDataStore,
-     private val validateChecklistUseCase: ValidateChecklistUseCase,
-     private val checklistStatusNotifier: ChecklistStatusNotifier,
-@@ -48,14 +47,14 @@ class ChecklistRepositoryImpl @Inject constructor(
-         }
-     }
- 
--    override suspend fun getLastPreShiftCheck(vehicleId: String): PreShiftCheck? {
-+    override suspend fun getLastPreShiftCheck(vehicleId: String, businessId: String): PreShiftCheck? {
-         var attempts = 0
-         val maxAttempts = 3
-         var delay = 1000L
-         
-         while (attempts < maxAttempts) {
-             try {
--                val response = api.getAllChecks()
-+                val response = api.getAllChecks(businessId)
-                 
-                 if (response.isSuccessful && response.body() != null) {
-                     return response.body()!!
-@@ -143,9 +142,11 @@ class ChecklistRepositoryImpl @Inject constructor(
-         val maxAttempts = 3
-         var delay = 1000L
- 
-+        val businessId = authDataStore.getCurrentUser()?.businessId ?: return emptyList()
-+
-         while (attempts < maxAttempts) {
-             try {
--                val response = api.getAllChecks()
-+                val response = api.getAllChecks(businessId)
-                 
-                 if (response.isSuccessful && response.body() != null) {
-                     val allChecks = response.body()!!
-@@ -208,7 +209,8 @@ class ChecklistRepositoryImpl @Inject constructor(
- 
-     override suspend fun hasChecklistInCreation(vehicleId: String): Boolean {
-         return try {
--            val lastCheck = getLastPreShiftCheck(vehicleId)
-+            val businessId = authDataStore.getCurrentUser()?.businessId ?: return false
-+            val lastCheck = getLastPreShiftCheck(vehicleId, businessId)
-             lastCheck?.status == CheckStatus.NOT_STARTED.toString() ||
-                     lastCheck?.status == CheckStatus.IN_PROGRESS.toString()
-         } catch (e: Exception) {
-diff --git a/app/src/main/java/app/forku/data/repository/checklist/ChecklistStatusNotifierImpl.kt b/app/src/main/java/app/forku/data/repository/checklist/ChecklistStatusNotifierImpl.kt
-index 866bca4..6eb22e1 100644
---- a/app/src/main/java/app/forku/data/repository/checklist/ChecklistStatusNotifierImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/checklist/ChecklistStatusNotifierImpl.kt
-@@ -6,14 +6,25 @@ import app.forku.domain.model.checklist.CheckStatus
- import app.forku.domain.model.vehicle.VehicleStatus
- import app.forku.domain.service.VehicleValidationService
- import app.forku.domain.service.VehicleStatusDeterminer
-+import app.forku.data.datastore.AuthDataStore
- import javax.inject.Inject
-+import javax.inject.Singleton
- 
-+@Singleton
- class ChecklistStatusNotifierImpl @Inject constructor(
-     private val vehicleStatusUpdater: VehicleStatusUpdater,
--    private val vehicleStatusDeterminer: VehicleStatusDeterminer
-+    private val vehicleStatusDeterminer: VehicleStatusDeterminer,
-+    private val authDataStore: AuthDataStore
- ) : ChecklistStatusNotifier {
-     override suspend fun notifyCheckStatusChanged(vehicleId: String, checkStatus: String) {
-+        val businessId = authDataStore.getCurrentUser()?.businessId
-+            ?: throw Exception("User not authenticated or missing business ID")
-+            
-         val newVehicleStatus = vehicleStatusDeterminer.determineStatusFromCheck(checkStatus)
--        vehicleStatusUpdater.updateVehicleStatus(vehicleId, newVehicleStatus)
-+        vehicleStatusUpdater.updateVehicleStatus(
-+            vehicleId = vehicleId,
-+            status = newVehicleStatus,
-+            businessId = businessId
-+        )
-     }
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/data/repository/cico/CicoHistoryRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/cico/CicoHistoryRepositoryImpl.kt
-index 14306be..255f778 100644
---- a/app/src/main/java/app/forku/data/repository/cico/CicoHistoryRepositoryImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/cico/CicoHistoryRepositoryImpl.kt
-@@ -1,15 +1,15 @@
- package app.forku.data.repository.cico
- 
- import app.forku.core.Constants
--import app.forku.data.api.GeneralApi
-+import app.forku.data.api.SessionApi
- import app.forku.data.datastore.AuthDataStore
--import app.forku.data.mapper.toDomain
-+import app.forku.data.mapper.VehicleSessionMapper
- import app.forku.domain.model.session.VehicleSession
- import app.forku.domain.repository.cico.CicoHistoryRepository
- import javax.inject.Inject
- 
- class CicoHistoryRepositoryImpl @Inject constructor(
--    private val api: GeneralApi,
-+    private val api: SessionApi,
-     private val authDataStore: AuthDataStore
- ) : CicoHistoryRepository {
- 
-@@ -22,12 +22,13 @@ class CicoHistoryRepositoryImpl @Inject constructor(
-             val response = api.getAllSessions()
-             
-             if (response.isSuccessful && response.body() != null) {
--                val allSessions = response.body()!!.map { it.toDomain() }
-+                val allSessions = response.body()!!
-+                    .map { VehicleSessionMapper.toDomain(it) }
-                     .sortedByDescending { it.startTime }
-                 // Handle pagination on client side if server doesn't support it
-                 allSessions.drop((page - 1) * PAGE_SIZE).take(PAGE_SIZE)
-             } else {
--                android.util.Log.e("CicoHistory", "Error getting all sessions: ${response.code()}")
-+                android.util.Log.e("CicoHistory","Error getting all sessions: ${response.code()}")
-                 emptyList()
-             }
-         } catch (e: Exception) {
-@@ -38,34 +39,20 @@ class CicoHistoryRepositoryImpl @Inject constructor(
- 
-     override suspend fun getOperatorSessionsHistory(operatorId: String, page: Int): List<VehicleSession> {
-         return try {
--            // First try with the specific endpoint
--            val response = api.getUserSessions(userId = operatorId)
--            
--            if (response.isSuccessful) {
--                val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
--                // Sort by start time descending and handle pagination on client side
--                sessions.sortedByDescending { it.startTime }
--                    .drop((page - 1) * PAGE_SIZE)
--                    .take(PAGE_SIZE)
-+            val response = api.getAllSessions()
-+            if (response.isSuccessful && response.body() != null) {
-+                val operatorSessions = response.body()!!
-+                    .map { VehicleSessionMapper.toDomain(it) }
-+                    .filter { it.userId == operatorId }
-+                    .sortedByDescending { it.startTime }
-+                // Handle pagination on client side
-+                operatorSessions.drop((page - 1) * PAGE_SIZE).take(PAGE_SIZE)
-             } else {
--                // Fallback to getting all sessions and filtering
--                android.util.Log.d("CicoHistory", "Specific endpoint failed, falling back to filtering all sessions")
--                val allSessionsResponse = api.getAllSessions()
--                
--                if (allSessionsResponse.isSuccessful) {
--                    val allSessions = allSessionsResponse.body()?.map { it.toDomain() } ?: emptyList()
--                    val operatorSessions = allSessions
--                        .filter { it.userId == operatorId }
--                        .sortedByDescending { it.startTime }
--                    // Handle pagination on client side
--                    operatorSessions.drop((page - 1) * PAGE_SIZE).take(PAGE_SIZE)
--                } else {
--                    android.util.Log.e("CicoHistory", "Error getting operator sessions: ${allSessionsResponse.code()}")
--                    emptyList()
--                }
-+                android.util.Log.e("CicoHistory","Error getting operator sessions: ${response.code()}")
-+                emptyList()
-             }
-         } catch (e: Exception) {
--            android.util.Log.e("CicoHistory", "Error getting operator sessions", e)
-+            android.util.Log.e("CicoHistory","Error getting operator sessions", e)
-             emptyList()
-         }
-     }
-diff --git a/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt
-index e9d0039..a35c150 100644
---- a/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt
-@@ -1,6 +1,6 @@
- package app.forku.data.repository.incident
- 
--import app.forku.data.api.GeneralApi
-+import app.forku.data.api.IncidentApi
- import app.forku.data.datastore.AuthDataStore
- import app.forku.data.mapper.toDto
- import app.forku.data.mapper.toDomain
-@@ -9,7 +9,7 @@ import app.forku.domain.repository.incident.IncidentRepository
- import javax.inject.Inject
- 
- class IncidentRepositoryImpl @Inject constructor(
--    private val api: GeneralApi,
-+    private val api: IncidentApi,
-     private val authDataStore: AuthDataStore
- ) : IncidentRepository {
-     override suspend fun reportIncident(incident: Incident): Result<Incident> {
-diff --git a/app/src/main/java/app/forku/data/repository/notification/NotificationRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/notification/NotificationRepositoryImpl.kt
-index 1faf832..22d41f2 100644
---- a/app/src/main/java/app/forku/data/repository/notification/NotificationRepositoryImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/notification/NotificationRepositoryImpl.kt
-@@ -1,6 +1,7 @@
- package app.forku.data.repository.notification
- 
--import app.forku.data.api.GeneralApi
-+
-+import app.forku.data.api.NotificationApi
- import app.forku.data.mapper.toNotification
- import app.forku.data.mapper.toNotificationDto
- import app.forku.domain.model.notification.Notification
-@@ -13,7 +14,7 @@ import javax.inject.Singleton
- 
- @Singleton
- class NotificationRepositoryImpl @Inject constructor(
--    private val api: GeneralApi
-+    private val api: NotificationApi
- ) : NotificationRepository {
- 
-     private val _notifications = MutableStateFlow<List<Notification>>(emptyList())
-diff --git a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
-index 2e9b031..15f7ffc 100644
---- a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
-@@ -1,6 +1,6 @@
- package app.forku.data.repository.user
- 
--import app.forku.data.api.GeneralApi
-+import app.forku.data.api.UserApi
- import app.forku.data.api.dto.user.UserDto
- import app.forku.data.mapper.toDomain
- import app.forku.domain.model.user.User
-@@ -15,10 +15,11 @@ import kotlinx.coroutines.Dispatchers
- import kotlinx.coroutines.withContext
- import javax.inject.Singleton
- import kotlinx.coroutines.flow.Flow
-+import android.util.Log
- 
- @Singleton
- class UserRepositoryImpl @Inject constructor(
--    private val api: GeneralApi,
-+    private val api: UserApi,
-     private val authDataStore: AuthDataStore,
-     private val tourPreferences: TourPreferences
- ) : UserRepository {
-@@ -290,11 +291,26 @@ class UserRepositoryImpl @Inject constructor(
-     }
- 
-     override suspend fun deleteUser(userId: String) {
--        TODO("Not yet implemented")
-+        try {
-+            val response = api.deleteUser(userId)
-+            if (!response.isSuccessful) {
-+                throw Exception("Failed to delete user")
-+            }
-+        } catch (e: Exception) {
-+            throw e
-+        }
-     }
- 
-     override suspend fun searchUsers(query: String): List<User> {
--        TODO("Not yet implemented")
-+        return try {
-+            val allUsers = getAllUsers()
-+            allUsers.filter { user ->
-+                user.fullName.contains(query, ignoreCase = true) ||
-+                user.email.contains(query, ignoreCase = true)
-+            }
-+        } catch (e: Exception) {
-+            emptyList()
-+        }
-     }
- 
-     override suspend fun observeCurrentUser(): Flow<User?> {
-@@ -325,4 +341,24 @@ class UserRepositoryImpl @Inject constructor(
-     override suspend fun getCurrentUserId(): String? {
-         return authDataStore.getCurrentUser()?.id
-     }
-+
-+    override suspend fun getUnassignedUsers(): List<User> {
-+        Log.d("UserRepository", "Getting unassigned users")
-+        return try {
-+            // Obtener todos los usuarios
-+            val allUsers = getAllUsers()
-+            Log.d("UserRepository", "Total users: ${allUsers.size}")
-+            
-+            // Filtrar usuarios que no tienen businessId o businessId está vacío
-+            val unassignedUsers = allUsers.filter { user ->
-+                user.businessId.isNullOrEmpty()
-+            }
-+            Log.d("UserRepository", "Unassigned users: ${unassignedUsers.size}")
-+            
-+            unassignedUsers
-+        } catch (e: Exception) {
-+            Log.e("UserRepository", "Error getting unassigned users", e)
-+            emptyList()
-+        }
-+    }
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/data/repository/vehicle/VehicleRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle/VehicleRepositoryImpl.kt
-index 2455eae..3d87dcb 100644
---- a/app/src/main/java/app/forku/data/repository/vehicle/VehicleRepositoryImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/vehicle/VehicleRepositoryImpl.kt
-@@ -1,12 +1,13 @@
- package app.forku.data.repository.vehicle
- 
--import app.forku.data.api.GeneralApi
-+import app.forku.data.api.VehicleApi
- import app.forku.data.datastore.AuthDataStore
- import app.forku.data.mapper.toDomain
- import app.forku.data.mapper.toDto
- import app.forku.domain.model.vehicle.Vehicle
- import app.forku.domain.repository.vehicle.VehicleRepository
- import javax.inject.Inject
-+import javax.inject.Singleton
- import app.forku.domain.usecase.checklist.ValidateChecklistUseCase
- import app.forku.domain.model.vehicle.VehicleStatus
- import app.forku.domain.model.vehicle.getErrorMessage
-@@ -16,9 +17,13 @@ import kotlinx.coroutines.sync.Mutex
- import kotlinx.coroutines.sync.withLock
- import java.util.concurrent.ConcurrentHashMap
- import java.util.concurrent.TimeUnit
-+import kotlinx.coroutines.Dispatchers
-+import kotlinx.coroutines.withContext
-+import dagger.hilt.android.scopes.ViewModelScoped
- 
-+@Singleton
- class VehicleRepositoryImpl @Inject constructor(
--    private val api: GeneralApi,
-+    private val api: VehicleApi,
-     private val authDataStore: AuthDataStore,
-     private val validateChecklistUseCase: ValidateChecklistUseCase,
-     private val vehicleStatusRepository: VehicleStatusRepository
-@@ -40,47 +45,59 @@ class VehicleRepositoryImpl @Inject constructor(
-         return (now - cachedVehicle.timestamp) < CACHE_DURATION_MS
-     }
- 
--    override suspend fun getVehicle(id: String): Vehicle = mutex.withLock {
--        // Check cache first
--        cache[id]?.let { cached ->
--            if (isCacheValid(cached)) {
--                return cached.vehicle
--            }
--        }
--
--        try {
--            val response = api.getVehicle(id)
--            if (!response.isSuccessful) {
--                when (response.code()) {
--                    404 -> throw Exception("Vehicle not found")
--                    429 -> throw Exception("Rate limit exceeded. Please try again later.")
--                    in 500..599 -> throw Exception("Server error. Please try again later.")
--                    else -> throw Exception("Failed to get vehicle: ${response.code()}")
-+    override suspend fun getVehicle(
-+        id: String,
-+        businessId: String
-+    ): Vehicle = withContext(Dispatchers.IO) {
-+        mutex.withLock {
-+            // Check cache first
-+            cache[id]?.let { cached ->
-+                if (isCacheValid(cached)) {
-+                    return@withContext cached.vehicle
-                 }
-             }
- 
--            val vehicle = response.body()?.toDomain() 
--                ?: throw Exception("Vehicle data is missing")
-+            try {
-+                val response = api.getVehicle(businessId, id)
-+                if (!response.isSuccessful) {
-+                    when (response.code()) {
-+                        404 -> throw Exception("Vehicle not found")
-+                        429 -> throw Exception("Rate limit exceeded. Please try again later.")
-+                        in 500..599 -> throw Exception("Server error. Please try again later.")
-+                        else -> throw Exception("Failed to get vehicle: ${response.code()}")
-+                    }
-+                }
- 
--            // Update cache
--            cache[id] = CachedVehicle(vehicle, System.currentTimeMillis())
--            
--            return vehicle
--        } catch (e: Exception) {
--            android.util.Log.e("VehicleRepo", "Error getting vehicle $id", e)
--            // If we have a cached version, return it as fallback
--            cache[id]?.vehicle?.let { cached ->
--                android.util.Log.d("VehicleRepo", "Returning cached vehicle as fallback")
--                return cached
-+                val vehicle = response.body()?.toDomain() 
-+                    ?: throw Exception("Vehicle data is missing")
-+
-+                // Update cache
-+                cache[id] = CachedVehicle(vehicle, System.currentTimeMillis())
-+                
-+                vehicle
-+            } catch (e: Exception) {
-+                android.util.Log.e("VehicleRepo", "Error getting vehicle $id", e)
-+                // If we have a cached version, return it as fallback
-+                cache[id]?.vehicle?.let { cached ->
-+                    android.util.Log.d("VehicleRepo", "Returning cached vehicle as fallback")
-+                    cached
-+                } ?: throw e
-             }
--            throw e
-         }
-     }
- 
--    override suspend fun getVehicleByQr(code: String, checkAvailability: Boolean): Vehicle {
-+    override suspend fun getVehicleByQr(
-+        code: String,
-+        checkAvailability: Boolean,
-+        businessId: String?
-+    ): Vehicle = withContext(Dispatchers.IO) {
-         try {
-+            // Use provided businessId or get from current user
-+            val effectiveBusinessId = businessId ?: authDataStore.getCurrentUser()?.businessId
-+                ?: throw Exception("User not authenticated or missing business ID")
-+
-             // Get vehicle from API
--            val response = api.getVehicle(code)
-+            val response = api.getVehicleByQr(effectiveBusinessId, code)
-             if (!response.isSuccessful) {
-                 when (response.code()) {
-                     404 -> throw Exception("Vehículo no encontrado")
-@@ -95,22 +112,25 @@ class VehicleRepositoryImpl @Inject constructor(
- 
-             if (checkAvailability) {
-                 // Check vehicle status
--                val status = vehicleStatusRepository.getVehicleStatus(vehicle.id)
-+                val status = vehicleStatusRepository.getVehicleStatus(vehicle.id, effectiveBusinessId)
-                 if (!status.isAvailable()) {
-                     throw Exception(status.getErrorMessage())
-                 }
-             }
- 
--            return vehicle
-+            vehicle
-         } catch (e: Exception) {
-             android.util.Log.e("VehicleRepo", "Error getting vehicle by QR $code", e)
-             throw Exception("Vehículo no encontrado o no disponible: ${e.message}")
-         }
-     }
- 
--    override suspend fun getVehicles(): List<Vehicle> {
-+    override suspend fun getVehicles(
-+        businessId: String,
-+        siteId: String?
-+    ): List<Vehicle> = withContext(Dispatchers.IO) {
-         try {
--            val response = api.getVehicles()
-+            val response = api.getVehicles(businessId, siteId)
-             android.util.Log.d("VehicleRepo", "Raw API response: ${response.body()}")
-             
-             if (!response.isSuccessful) {
-@@ -129,46 +149,67 @@ class VehicleRepositoryImpl @Inject constructor(
-                 cache[vehicle.id] = CachedVehicle(vehicle, System.currentTimeMillis())
-             }
- 
--            return vehicles
-+            vehicles
-         } catch (e: Exception) {
-             android.util.Log.e("VehicleRepo", "Error fetching vehicles", e)
-             throw e
-         }
-     }
- 
--    override suspend fun getVehicleStatus(vehicleId: String): VehicleStatus {
--        return vehicleStatusRepository.getVehicleStatus(vehicleId)
-+    override suspend fun getAllVehicles(): List<Vehicle> {
-+        try {
-+            val response = api.getAllVehicles()
-+            if (!response.isSuccessful) {
-+                when (response.code()) {
-+                    403 -> throw Exception("Permission denied. SuperAdmin access required.")
-+                    429 -> throw Exception("Rate limit exceeded. Please try again later.")
-+                    in 500..599 -> throw Exception("Server error. Please try again later.")
-+                    else -> throw Exception("Failed to get all vehicles: ${response.code()}")
-+                }
-+            }
-+
-+            return response.body()?.map { it.toDomain() }
-+                ?: throw Exception("Failed to get vehicles: Empty response body")
-+        } catch (e: Exception) {
-+            android.util.Log.e("VehicleRepo", "Error fetching all vehicles", e)
-+            throw e
-+        }
-+    }
-+
-+    override suspend fun getVehicleStatus(
-+        vehicleId: String,
-+        businessId: String
-+    ): VehicleStatus {
-+        return vehicleStatusRepository.getVehicleStatus(vehicleId, businessId)
-     }
- 
--    override suspend fun updateVehicleStatus(vehicleId: String, status: VehicleStatus): Vehicle {
-+    override suspend fun updateVehicleStatus(
-+        vehicleId: String,
-+        status: VehicleStatus,
-+        businessId: String
-+    ): Vehicle = withContext(Dispatchers.IO) {
-         try {
--            // First get the current vehicle
--            val vehicle = getVehicle(vehicleId)
--            
--            // Update only the status
--            val updatedVehicle = vehicle.copy(status = status)
--            
--            // Make the PUT request with the updated vehicle
--            val updateResponse = api.updateVehicle(
--                id = vehicleId,
--                vehicle = updatedVehicle.toDto()
-+            val response = api.updateVehicleStatus(
-+                businessId = businessId,
-+                vehicleId = vehicleId,
-+                status = status.name
-             )
-             
--            if (!updateResponse.isSuccessful) {
--                when (updateResponse.code()) {
-+            if (!response.isSuccessful) {
-+                when (response.code()) {
-                     429 -> throw Exception("Rate limit exceeded. Please try again later.")
-                     in 500..599 -> throw Exception("Server error. Please try again later.")
--                    else -> throw Exception("Failed to update vehicle status: ${updateResponse.code()}")
-+                    else -> throw Exception("Failed to update vehicle status: ${response.code()}")
-                 }
-             }
-             
--            val result = updateResponse.body()?.toDomain() 
-+            val result = response.body()?.toDomain() 
-                 ?: throw Exception("No vehicle data in response")
- 
-             // Update cache
-             cache[vehicleId] = CachedVehicle(result, System.currentTimeMillis())
-             
--            return result
-+            result
-         } catch (e: Exception) {
-             android.util.Log.e("VehicleRepo", "Error updating vehicle status", e)
-             throw Exception("Error updating vehicle status: ${e.message}")
-diff --git a/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusRepositoryImpl.kt
-index 0274d39..5bf5e94 100644
---- a/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusRepositoryImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusRepositoryImpl.kt
-@@ -11,21 +11,24 @@ class VehicleStatusRepositoryImpl @Inject constructor(
-     private val vehicleStatusUpdater: VehicleStatusUpdater
- ) : VehicleStatusRepository {
- 
--    override suspend fun getVehicleStatus(vehicleId: String): VehicleStatus {
--        return vehicleValidationService.getVehicleStatus(vehicleId)
-+    override suspend fun getVehicleStatus(vehicleId: String, businessId: String): VehicleStatus {
-+        return vehicleValidationService.getVehicleStatus(vehicleId, businessId)
-     }
- 
--    override suspend fun updateVehicleStatus(vehicleId: String, status: VehicleStatus): Boolean {
--        vehicleStatusUpdater.updateVehicleStatus(vehicleId, status)
--        return true
-+    override suspend fun updateVehicleStatus(
-+        vehicleId: String,
-+        status: VehicleStatus,
-+        businessId: String
-+    ): Boolean {
-+        return vehicleStatusUpdater.updateVehicleStatus(vehicleId, status, businessId)
-     }
- 
--    override suspend fun isVehicleAvailable(vehicleId: String): Boolean {
--        return vehicleValidationService.isVehicleAvailable(vehicleId)
-+    override suspend fun isVehicleAvailable(vehicleId: String, businessId: String): Boolean {
-+        return vehicleValidationService.isVehicleAvailable(vehicleId, businessId)
-     }
- 
--    override suspend fun getVehicleErrorMessage(vehicleId: String): String? {
--        return vehicleValidationService.getVehicleErrorMessage(vehicleId)
-+    override suspend fun getVehicleErrorMessage(vehicleId: String, businessId: String): String? {
-+        return vehicleValidationService.getVehicleErrorMessage(vehicleId, businessId)
-     }
- 
-     override suspend fun determineStatusFromCheck(checkStatus: String): VehicleStatus {
-diff --git a/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusUpdaterImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusUpdaterImpl.kt
-index 463636d..561ba4c 100644
---- a/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusUpdaterImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusUpdaterImpl.kt
-@@ -1,30 +1,37 @@
- package app.forku.data.repository.vehicle
- 
--import app.forku.data.api.GeneralApi
--import app.forku.data.mapper.toDomain
--import app.forku.data.mapper.toDto
-+import app.forku.data.api.VehicleApi
- import app.forku.domain.model.vehicle.VehicleStatus
- import app.forku.domain.repository.vehicle.VehicleStatusUpdater
- import javax.inject.Inject
-+import javax.inject.Singleton
- 
--
-+@Singleton
- class VehicleStatusUpdaterImpl @Inject constructor(
--    private val api: GeneralApi
-+    private val api: VehicleApi
- ) : VehicleStatusUpdater {
--    override suspend fun updateVehicleStatus(vehicleId: String, status: VehicleStatus): Boolean {
-+    override suspend fun updateVehicleStatus(
-+        vehicleId: String,
-+        status: VehicleStatus,
-+        businessId: String
-+    ): Boolean {
-         return try {
--            val response = api.getVehicle(vehicleId)
--            val vehicle = response.body()?.toDomain() 
--                ?: throw Exception("Vehicle not found")
--            
--            val updatedVehicle = vehicle.copy(status = status)
--            
--            val updateResponse = api.updateVehicle(
--                id = vehicleId,
--                vehicle = updatedVehicle.toDto()
-+            val response = api.updateVehicleStatus(
-+                businessId = businessId,
-+                vehicleId = vehicleId,
-+                status = status.name
-             )
-             
--            updateResponse.isSuccessful
-+            if (!response.isSuccessful) {
-+                when (response.code()) {
-+                    404 -> throw Exception("Vehicle not found")
-+                    429 -> throw Exception("Rate limit exceeded. Please try again later.")
-+                    in 500..599 -> throw Exception("Server error. Please try again later.")
-+                    else -> throw Exception("Failed to update vehicle status: ${response.code()}")
-+                }
-+            }
-+            
-+            true
-         } catch (e: Exception) {
-             android.util.Log.e("VehicleStatus", "Error updating vehicle status", e)
-             false
-diff --git a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
-index d5e03db..db48424 100644
---- a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
-@@ -1,9 +1,9 @@
- package app.forku.data.repository.vehicle_session
- 
--import app.forku.data.api.GeneralApi
-+import app.forku.data.api.VehicleSessionApi
- import app.forku.data.datastore.AuthDataStore
- import app.forku.data.api.dto.session.StartSessionRequestDto
--import app.forku.data.mapper.toDomain
-+import app.forku.data.mapper.VehicleSessionMapper
- import app.forku.domain.model.checklist.CheckStatus
- import app.forku.domain.model.session.VehicleSessionStatus
- import app.forku.domain.model.session.VehicleSession
-@@ -19,27 +19,30 @@ import app.forku.core.location.LocationManager
- import javax.inject.Inject
- 
- class VehicleSessionRepositoryImpl @Inject constructor(
--    private val api: GeneralApi,
-+    private val api: VehicleSessionApi,
-     private val authDataStore: AuthDataStore,
-     private val vehicleStatusRepository: VehicleStatusRepository,
-     private val checklistRepository: ChecklistRepository,
-     private val locationManager: LocationManager
- ) : VehicleSessionRepository {
-     override suspend fun getCurrentSession(): VehicleSession? {
--        val userId = authDataStore.getCurrentUser()?.id ?: return null
--        return try {
--            val response = api.getAllSessions()
-+        val currentUser = authDataStore.getCurrentUser() ?: return null
-+        try {
-+            val response = api.getAllSessions(currentUser.businessId ?: return null)
-             if (response.isSuccessful) {
--                val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
--                sessions.find { 
--                    it.userId == userId && 
-+                val sessions = response.body()?.let { dtos ->
-+                    dtos.map { dto -> VehicleSessionMapper.toDomain(dto) }
-+                } ?: emptyList()
-+                
-+                return sessions.find { 
-+                    it.userId == currentUser.id && 
-                     it.status == VehicleSessionStatus.OPERATING
-                 }
--            } else {
--                null
-             }
-+            return null
-         } catch (e: Exception) {
--            null
-+            android.util.Log.e("VehicleSession", "Error getting current session: ${e.message}", e)
-+            return null
-         }
-     }
- 
-@@ -48,7 +51,10 @@ class VehicleSessionRepositoryImpl @Inject constructor(
-             ?: throw Exception("No user logged in")
- 
-         // Get vehicle status using VehicleStatusRepository instead
--        val vehicleStatus = vehicleStatusRepository.getVehicleStatus(vehicleId)
-+        val vehicleStatus = vehicleStatusRepository.getVehicleStatus(
-+            vehicleId = vehicleId,
-+            businessId = currentUser.businessId ?: throw Exception("User has no associated business")
-+        )
- 
-         if (!vehicleStatus.isAvailable()) {
-             throw Exception(vehicleStatus.getErrorMessage())
-@@ -70,7 +76,11 @@ class VehicleSessionRepositoryImpl @Inject constructor(
- 
-         try {
-             // Update vehicle status first
--            vehicleStatusRepository.updateVehicleStatus(vehicleId, VehicleStatus.IN_USE)
-+            vehicleStatusRepository.updateVehicleStatus(
-+                vehicleId = vehicleId,
-+                status = VehicleStatus.IN_USE,
-+                businessId = currentUser.businessId ?: throw Exception("User has no associated business")
-+            )
-             
-             val currentDateTime = java.time.Instant.now()
-                 .atZone(java.time.ZoneId.systemDefault())
-@@ -97,16 +107,24 @@ class VehicleSessionRepositoryImpl @Inject constructor(
- 
-             if (!response.isSuccessful) {
-                 // Rollback vehicle status if session creation fails
--                vehicleStatusRepository.updateVehicleStatus(vehicleId, VehicleStatus.AVAILABLE)
-+                vehicleStatusRepository.updateVehicleStatus(
-+                    vehicleId = vehicleId,
-+                    status = VehicleStatus.AVAILABLE,
-+                    businessId = currentUser.businessId ?: throw Exception("User has no associated business")
-+                )
-                 throw Exception("Failed to create session: ${response.code()}")
-             }
- 
--            return response.body()?.toDomain() 
-+            return response.body()?.let { VehicleSessionMapper.toDomain(it) }
-                 ?: throw Exception("Failed to start session: Empty response")
-                 
-         } catch (e: Exception) {
-             // Revert vehicle status on failure
--            vehicleStatusRepository.updateVehicleStatus(vehicleId, VehicleStatus.AVAILABLE)
-+            vehicleStatusRepository.updateVehicleStatus(
-+                vehicleId = vehicleId,
-+                status = VehicleStatus.AVAILABLE,
-+                businessId = currentUser.businessId ?: throw Exception("User has no associated business")
-+            )
-             throw e
-         }
-     }
-@@ -122,29 +140,37 @@ class VehicleSessionRepositoryImpl @Inject constructor(
-             throw Exception("Failed to get session details")
-         }
-             
--        val existingSession = sessionResponse.body() ?: throw Exception("Session not found")
-+        val existingSession = sessionResponse.body()?.let { VehicleSessionMapper.toDomain(it) }
-+            ?: throw Exception("Session not found")
-             
-         // Determine who closed the session
-         val currentUser = authDataStore.getCurrentUser()
-+            ?: throw Exception("No user logged in")
-+            
-         val closedBy = when (closeMethod) {
--            VehicleSessionClosedMethod.USER_CLOSED -> currentUser?.id
--            VehicleSessionClosedMethod.ADMIN_CLOSED -> adminId ?: currentUser?.id
-+            VehicleSessionClosedMethod.USER_CLOSED -> currentUser.id
-+            VehicleSessionClosedMethod.ADMIN_CLOSED -> adminId ?: currentUser.id
-             VehicleSessionClosedMethod.TIMEOUT_CLOSED -> "SYSTEM"
-             VehicleSessionClosedMethod.GEOFENCE_CLOSED -> "SYSTEM"
-         }
- 
-         // Verify permissions
--        if (closeMethod == VehicleSessionClosedMethod.ADMIN_CLOSED && currentUser?.role != UserRole.ADMIN) {
-+        if (closeMethod == VehicleSessionClosedMethod.ADMIN_CLOSED && currentUser.role != UserRole.ADMIN) {
-             throw Exception("Only administrators can perform administrative session closure")
-         }
- 
--        if (closeMethod == VehicleSessionClosedMethod.USER_CLOSED && currentUser?.id != existingSession.userId) {
-+        if (closeMethod == VehicleSessionClosedMethod.USER_CLOSED && currentUser.id != existingSession.userId) {
-             throw Exception("Users can only close their own sessions")
-         }
-             
-         try {
-             // Update vehicle status back to AVAILABLE
--            vehicleStatusRepository.updateVehicleStatus(existingSession.vehicleId, VehicleStatus.AVAILABLE)
-+            vehicleStatusRepository.updateVehicleStatus(
-+                vehicleId = existingSession.vehicleId,
-+                status = VehicleStatus.AVAILABLE,
-+                businessId = currentUser.businessId ?: throw Exception("User has no associated business")
-+            )
-+            
-             val currentDateTime = java.time.Instant.now()
-                 .atZone(java.time.ZoneId.systemDefault())
-                 .format(java.time.format.DateTimeFormatter.ISO_DATE_TIME)
-@@ -158,8 +184,8 @@ class VehicleSessionRepositoryImpl @Inject constructor(
-             val updatedSession = existingSession.copy(
-                 endTime = currentDateTime,
-                 timestamp = currentDateTime,
--                status = VehicleSessionStatus.NOT_OPERATING.toString(),
--                closeMethod = closeMethod.name,
-+                status = VehicleSessionStatus.NOT_OPERATING,
-+                closeMethod = closeMethod,
-                 closedBy = closedBy,
-                 notes = notes,
-                 endLocationCoordinates = locationCoordinates
-@@ -167,31 +193,39 @@ class VehicleSessionRepositoryImpl @Inject constructor(
-             
-             val response = api.updateSession(
-                 sessionId = sessionId,
--                session = updatedSession
-+                session = VehicleSessionMapper.toVehicleSessionDto(updatedSession)
-             )
- 
-             if (!response.isSuccessful) {
-                 // Rollback vehicle status if session update fails
--                vehicleStatusRepository.updateVehicleStatus(existingSession.vehicleId, VehicleStatus.IN_USE)
-+                vehicleStatusRepository.updateVehicleStatus(
-+                    vehicleId = existingSession.vehicleId,
-+                    status = VehicleStatus.IN_USE,
-+                    businessId = currentUser.businessId ?: throw Exception("User has no associated business")
-+                )
-                 throw Exception("Failed to end session: ${response.code()}")
-             }
-             
--            return response.body()?.toDomain() 
-+            return response.body()?.let { VehicleSessionMapper.toDomain(it) }
-                 ?: throw Exception("Empty response when ending session")
-         } catch (e: Exception) {
-             // Ensure vehicle status is restored on any error
--            vehicleStatusRepository.updateVehicleStatus(existingSession.vehicleId, VehicleStatus.IN_USE)
-+            vehicleStatusRepository.updateVehicleStatus(
-+                vehicleId = existingSession.vehicleId,
-+                status = VehicleStatus.IN_USE,
-+                businessId = currentUser.businessId ?: throw Exception("User has no associated business")
-+            )
-             throw e
-         }
-     }
- 
--    override suspend fun getActiveSessionForVehicle(vehicleId: String): VehicleSession? {
-+    override suspend fun getActiveSessionForVehicle(vehicleId: String, businessId: String): VehicleSession? {
-         android.util.Log.d("VehicleSession", "Fetching active session for vehicle: $vehicleId")
-         return try {
--            val response = api.getAllSessions()
-+            val response = api.getAllSessions(businessId)
-             if (response.isSuccessful) {
-                 android.util.Log.d("VehicleSession", "API response successful. Status code: ${response.code()}")
--                val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
-+                val sessions = response.body()?.map { VehicleSessionMapper.toDomain(it) } ?: emptyList()
-                 android.util.Log.d("VehicleSession", "Total sessions fetched: ${sessions.size}")
-                 
-                 val activeSession = sessions.find { session ->
-@@ -221,10 +255,11 @@ class VehicleSessionRepositoryImpl @Inject constructor(
-     }
- 
-     override suspend fun getSessionsByUserId(userId: String): List<VehicleSession> {
-+        val currentUser = authDataStore.getCurrentUser() ?: return emptyList()
-         return try {
--            val response = api.getAllSessions()
-+            val response = api.getAllSessions(currentUser.businessId ?: return emptyList())
-             if (response.isSuccessful) {
--                val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
-+                val sessions = response.body()?.map { VehicleSessionMapper.toDomain(it) } ?: emptyList()
-                 sessions.filter { it.userId == userId }
-             } else {
-                 emptyList()
-@@ -235,10 +270,11 @@ class VehicleSessionRepositoryImpl @Inject constructor(
-     }
- 
-     override suspend fun getLastCompletedSessionForVehicle(vehicleId: String): VehicleSession? {
-+        val currentUser = authDataStore.getCurrentUser() ?: return null
-         return try {
--            val response = api.getAllSessions()
-+            val response = api.getAllSessions(currentUser.businessId ?: return null)
-             if (response.isSuccessful) {
--                val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
-+                val sessions = response.body()?.map { VehicleSessionMapper.toDomain(it) } ?: emptyList()
-                 sessions
-                     .filter { 
-                         it.vehicleId == vehicleId && 
-@@ -256,10 +292,11 @@ class VehicleSessionRepositoryImpl @Inject constructor(
-     }
- 
-     override suspend fun getSessions(): List<VehicleSession> {
-+        val currentUser = authDataStore.getCurrentUser() ?: return emptyList()
-         return try {
--            val response = api.getAllSessions()
-+            val response = api.getAllSessions(currentUser.businessId ?: return emptyList())
-             if (response.isSuccessful && response.body() != null) {
--                response.body()!!.map { it.toDomain() }
-+                response.body()!!.map { VehicleSessionMapper.toDomain(it) }
-             } else {
-                 emptyList()
-             }
-diff --git a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionStatusCheckerImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionStatusCheckerImpl.kt
-index 869eaec..4fbbefc 100644
---- a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionStatusCheckerImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionStatusCheckerImpl.kt
-@@ -1,29 +1,30 @@
- package app.forku.data.repository.vehicle_session
- 
--import app.forku.data.api.GeneralApi
--import app.forku.data.mapper.toDomain
--import app.forku.domain.model.session.VehicleSessionStatus
-+import app.forku.data.api.VehicleSessionApi
-+import app.forku.data.mapper.VehicleSessionMapper
- import app.forku.domain.model.session.VehicleSession
-+import app.forku.domain.model.session.VehicleSessionStatus
- import app.forku.domain.repository.session.SessionStatusChecker
- import javax.inject.Inject
- 
- class VehicleSessionStatusCheckerImpl @Inject constructor(
--    private val api: GeneralApi
-+    private val api: VehicleSessionApi
- ) : SessionStatusChecker {
--    override suspend fun getActiveSessionForVehicle(vehicleId: String): VehicleSession? {
-+    override suspend fun getActiveSessionForVehicle(vehicleId: String, businessId: String): VehicleSession? {
-         return try {
--            val response = api.getAllSessions()
-+            val response = api.getAllSessions(businessId)
-             if (response.isSuccessful) {
-                 val sessions = response.body()?.mapNotNull { 
-                     try {
--                        it.toDomain()
-+                        VehicleSessionMapper.toDomain(it)
-                     } catch (e: Exception) {
-                         android.util.Log.e("SessionMapper", "Error parsing session: ${e.message}")
-                         null
-                     }
-                 } ?: emptyList()
-+                
-                 sessions.find { 
--                    it.vehicleId == vehicleId && 
-+                    it.vehicleId == vehicleId &&
-                     it.status == VehicleSessionStatus.OPERATING
-                 }
-             } else {
-diff --git a/app/src/main/java/app/forku/data/service/VehicleValidationServiceImpl.kt b/app/src/main/java/app/forku/data/service/VehicleValidationServiceImpl.kt
-index be2faed..ead3051 100644
---- a/app/src/main/java/app/forku/data/service/VehicleValidationServiceImpl.kt
-+++ b/app/src/main/java/app/forku/data/service/VehicleValidationServiceImpl.kt
-@@ -1,6 +1,5 @@
- package app.forku.data.service
- 
--import app.forku.data.api.GeneralApi
- import app.forku.domain.model.session.VehicleSessionStatus
- import app.forku.domain.model.vehicle.VehicleStatus
- import app.forku.domain.model.vehicle.getErrorMessage
-@@ -12,35 +11,34 @@ import app.forku.domain.service.VehicleStatusDeterminer
- import javax.inject.Inject
- 
- class VehicleValidationServiceImpl @Inject constructor(
--    private val api: GeneralApi,
-     private val sessionStatusChecker: SessionStatusChecker,
-     private val checklistRepository: ChecklistRepository,
-     private val vehicleStatusDeterminer: VehicleStatusDeterminer
- ) : VehicleValidationService {
-     
--    override suspend fun getVehicleStatus(vehicleId: String): VehicleStatus {
-+    override suspend fun getVehicleStatus(vehicleId: String, businessId: String): VehicleStatus {
-         // First check if there's an active session
--        val activeSession = sessionStatusChecker.getActiveSessionForVehicle(vehicleId)
-+        val activeSession = sessionStatusChecker.getActiveSessionForVehicle(vehicleId, businessId)
-         if (activeSession?.status == VehicleSessionStatus.OPERATING) {
-             return VehicleStatus.IN_USE
-         }
-         
-         // Get the last check and determine status
--        val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId)
--        return vehicleStatusDeterminer.determineStatusFromCheck(lastCheck?.status ?: "")
-+        val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId, businessId)
-+        return vehicleStatusDeterminer.determineStatusFromCheck(checkStatus = lastCheck?.status ?: "")
-     }
- 
--    override suspend fun isVehicleAvailable(vehicleId: String): Boolean {
--        return getVehicleStatus(vehicleId) == VehicleStatus.AVAILABLE
-+    override suspend fun isVehicleAvailable(vehicleId: String, businessId: String): Boolean {
-+        return getVehicleStatus(vehicleId, businessId) == VehicleStatus.AVAILABLE
-     }
- 
--    override suspend fun getVehicleErrorMessage(vehicleId: String): String? {
--        val status = getVehicleStatus(vehicleId)
-+    override suspend fun getVehicleErrorMessage(vehicleId: String, businessId: String): String? {
-+        val status = getVehicleStatus(vehicleId, businessId)
-         return if (status.isAvailable()) null else status.getErrorMessage()
-     }
- 
--    override suspend fun validateVehicleForOperation(vehicleId: String) {
--        val status = getVehicleStatus(vehicleId)
-+    override suspend fun validateVehicleForOperation(vehicleId: String, businessId: String) {
-+        val status = getVehicleStatus(vehicleId, businessId)
-         if (!status.isAvailable()) {
-             throw Exception(status.getErrorMessage())
-         }
-diff --git a/app/src/main/java/app/forku/di/CertificationsModule.kt b/app/src/main/java/app/forku/di/CertificationsModule.kt
-index 51417f6..ae72c8d 100644
---- a/app/src/main/java/app/forku/di/CertificationsModule.kt
-+++ b/app/src/main/java/app/forku/di/CertificationsModule.kt
-@@ -15,12 +15,6 @@ import javax.inject.Singleton
- @InstallIn(SingletonComponent::class)
- object CertificationsModule {
- 
--    @Provides
--    @Singleton
--    fun provideCertificationApi(retrofit: Retrofit): CertificationApi {
--        return retrofit.create(CertificationApi::class.java)
--    }
--
-     @Provides
-     @Singleton
-     fun provideCertificationRepository(
-diff --git a/app/src/main/java/app/forku/di/FeedbackModule.kt b/app/src/main/java/app/forku/di/FeedbackModule.kt
-index 47adc0d..f393a58 100644
---- a/app/src/main/java/app/forku/di/FeedbackModule.kt
-+++ b/app/src/main/java/app/forku/di/FeedbackModule.kt
-@@ -13,12 +13,6 @@ import javax.inject.Singleton
- @Module
- @InstallIn(SingletonComponent::class)
- object FeedbackModule {
--    
--    @Provides
--    @Singleton
--    fun provideFeedbackApi(retrofit: Retrofit): FeedbackApi =
--        retrofit.create(FeedbackApi::class.java)
--
-     @Provides
-     @Singleton
-     fun provideFeedbackRepository(api: FeedbackApi): FeedbackRepository =
-diff --git a/app/src/main/java/app/forku/di/NetworkModule.kt b/app/src/main/java/app/forku/di/NetworkModule.kt
-index 8731f34..c2b0647 100644
---- a/app/src/main/java/app/forku/di/NetworkModule.kt
-+++ b/app/src/main/java/app/forku/di/NetworkModule.kt
-@@ -1,12 +1,17 @@
- package app.forku.di
- 
- import app.forku.core.Constants
--import app.forku.data.api.GeneralApi
-+
-+import app.forku.data.api.UserApi
-+import app.forku.data.api.VehicleApi
-+import app.forku.data.api.CertificationApi
-+import app.forku.data.api.FeedbackApi
- import app.forku.data.api.WeatherApi
- import app.forku.data.api.interceptor.AuthInterceptor
- import app.forku.data.api.interceptor.RetryInterceptor
- import app.forku.domain.repository.weather.WeatherRepository
- import app.forku.data.repository.weather.WeatherRepositoryImpl
-+import app.forku.data.api.VehicleSessionApi
- import dagger.Module
- import dagger.Provides
- import dagger.hilt.InstallIn
-@@ -20,55 +25,96 @@ import javax.inject.Singleton
- import java.util.concurrent.TimeUnit
- import android.content.Context
- import app.forku.core.network.NetworkConnectivityManager
-+import javax.inject.Named
-+import app.forku.data.api.IncidentApi
-+import app.forku.data.api.ChecklistApi
-+import app.forku.data.api.SessionApi
-+import app.forku.data.api.NotificationApi
-+import app.forku.data.remote.api.BusinessApi
-+
- 
- @Module
- @InstallIn(SingletonComponent::class)
- object NetworkModule {
-     @Provides
-     @Singleton
--    fun provideOkHttpClient(authInterceptor: AuthInterceptor): OkHttpClient {
--        val loggingInterceptor = HttpLoggingInterceptor().apply {
--            level = HttpLoggingInterceptor.Level.BODY
--        }
--        
--        return OkHttpClient.Builder()
--            .addInterceptor(loggingInterceptor)
--            .addInterceptor(authInterceptor)
--            .addInterceptor(RetryInterceptor())
--            .connectTimeout(30, TimeUnit.SECONDS)
--            .readTimeout(30, TimeUnit.SECONDS)
--            .writeTimeout(30, TimeUnit.SECONDS)
--            .retryOnConnectionFailure(true)
--            .build()
--    }
-+    fun provideUserApi(retrofit: Retrofit): UserApi = retrofit.create(UserApi::class.java)
- 
-     @Provides
-     @Singleton
--    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {
--        return Retrofit.Builder()
--            .baseUrl(Constants.BASE_URL)
--            .client(okHttpClient)
--            .addConverterFactory(GsonConverterFactory.create())
--            .build()
--    }
-+    fun provideVehicleApi(retrofit: Retrofit): VehicleApi = retrofit.create(VehicleApi::class.java)
- 
-     @Provides
-     @Singleton
--    fun provideGeneralApi(retrofit: Retrofit): GeneralApi {
--        return retrofit.create(GeneralApi::class.java)
--    }
-+    fun provideIncidentApi(retrofit: Retrofit): IncidentApi = retrofit.create(IncidentApi::class.java)
-+
-+    @Provides
-+    @Singleton
-+    fun provideChecklistApi(retrofit: Retrofit): ChecklistApi = retrofit.create(ChecklistApi::class.java)
-+
-+    @Provides
-+    @Singleton
-+    fun provideSessionApi(retrofit: Retrofit): SessionApi = retrofit.create(SessionApi::class.java)
-+
-+    @Provides
-+    @Singleton
-+    fun provideNotificationApi(retrofit: Retrofit): NotificationApi = retrofit.create(NotificationApi::class.java)
-+
-+    @Provides
-+    @Singleton
-+    fun provideCertificationApi(retrofit: Retrofit): CertificationApi = retrofit.create(CertificationApi::class.java)
-+
-+    @Provides
-+    @Singleton
-+    fun provideFeedbackApi(retrofit: Retrofit): FeedbackApi = retrofit.create(FeedbackApi::class.java)
-+
-+    @Provides
-+    @Singleton
-+    fun provideWeatherApi(retrofit: Retrofit): WeatherApi = retrofit.create(WeatherApi::class.java)
- 
-     @Provides
-     @Singleton
--    fun provideWeatherApi(okHttpClient: OkHttpClient): WeatherApi {
--        return Retrofit.Builder()
--            .baseUrl("http://api.weatherapi.com/v1/")
--            .client(okHttpClient)
--            .addConverterFactory(GsonConverterFactory.create())
--            .build()
--            .create(WeatherApi::class.java)
-+    fun provideVehicleSessionApi(retrofit: Retrofit): VehicleSessionApi = 
-+        retrofit.create(VehicleSessionApi::class.java)
-+
-+    @Provides
-+    @Singleton
-+    fun provideBusinessApi(retrofit: Retrofit): BusinessApi {
-+        return retrofit.create(BusinessApi::class.java)
-     }
- 
-+    @Provides
-+    @Singleton
-+    fun provideRetrofit(
-+        okHttpClient: OkHttpClient,
-+        @Named("baseUrl") baseUrl: String
-+    ): Retrofit = Retrofit.Builder()
-+        .baseUrl(baseUrl)
-+        .client(okHttpClient)
-+        .addConverterFactory(GsonConverterFactory.create())
-+        .build()
-+
-+    @Provides
-+    @Singleton
-+    fun provideOkHttpClient(
-+        @Named("apiKey") apiKey: String
-+    ): OkHttpClient = OkHttpClient.Builder()
-+        .addInterceptor { chain ->
-+            val request = chain.request().newBuilder()
-+                .addHeader("X-API-KEY", apiKey)
-+                .build()
-+            chain.proceed(request)
-+        }
-+        .build()
-+
-+    @Provides
-+    @Named("baseUrl")
-+    fun provideBaseUrl(): String = Constants.BASE_URL
-+
-+    @Provides
-+    @Named("apiKey")
-+    fun provideApiKey(): String = ""
-+
-     @Provides
-     @Singleton
-     fun provideWeatherRepository(
-diff --git a/app/src/main/java/app/forku/di/RepositoryModule.kt b/app/src/main/java/app/forku/di/RepositoryModule.kt
-index c13d181..f484092 100644
---- a/app/src/main/java/app/forku/di/RepositoryModule.kt
-+++ b/app/src/main/java/app/forku/di/RepositoryModule.kt
-@@ -2,7 +2,6 @@ package app.forku.di
- 
- import app.forku.core.location.LocationManager
- import app.forku.domain.repository.vehicle.VehicleStatusChecker
--import app.forku.data.api.GeneralApi
- import app.forku.data.datastore.AuthDataStore
- import app.forku.data.repository.vehicle.VehicleRepositoryImpl
- import app.forku.domain.repository.vehicle.VehicleRepository
-@@ -29,6 +28,10 @@ import app.forku.data.service.VehicleStatusDeterminerImpl
- import app.forku.data.repository.notification.NotificationRepositoryImpl
- import app.forku.domain.repository.notification.NotificationRepository
- import app.forku.domain.repository.cico.CicoHistoryRepository
-+import app.forku.data.api.VehicleApi
-+import app.forku.data.api.ChecklistApi
-+import app.forku.data.api.VehicleSessionApi
-+import app.forku.data.api.IncidentApi
- import com.google.gson.Gson
- import com.google.gson.GsonBuilder
- import dagger.Module
-@@ -45,7 +48,7 @@ object RepositoryModule {
-     @Provides
-     @Singleton
-     fun provideVehicleStatusUpdater(
--        api: GeneralApi
-+        api: VehicleApi
-     ): VehicleStatusUpdater {
-         return VehicleStatusUpdaterImpl(api)
-     }
-@@ -53,7 +56,7 @@ object RepositoryModule {
-     @Provides
-     @Singleton
-     fun provideSessionStatusChecker(
--        api: GeneralApi
-+        api: VehicleSessionApi
-     ): SessionStatusChecker {
-         return VehicleSessionStatusCheckerImpl(api)
-     }
-@@ -68,15 +71,20 @@ object RepositoryModule {
-     @Singleton
-     fun provideChecklistStatusNotifier(
-         vehicleStatusUpdater: VehicleStatusUpdater,
--        vehicleStatusDeterminer: VehicleStatusDeterminer
-+        vehicleStatusDeterminer: VehicleStatusDeterminer,
-+        authDataStore: AuthDataStore
-     ): ChecklistStatusNotifier {
--        return ChecklistStatusNotifierImpl(vehicleStatusUpdater, vehicleStatusDeterminer)
-+        return ChecklistStatusNotifierImpl(
-+            vehicleStatusUpdater = vehicleStatusUpdater,
-+            vehicleStatusDeterminer = vehicleStatusDeterminer,
-+            authDataStore = authDataStore
-+        )
-     }
- 
-     @Provides
-     @Singleton
-     fun provideChecklistRepository(
--        api: GeneralApi,
-+        api: ChecklistApi,
-         authDataStore: AuthDataStore,
-         validateChecklistUseCase: ValidateChecklistUseCase,
-         checklistStatusNotifier: ChecklistStatusNotifier,
-@@ -94,13 +102,11 @@ object RepositoryModule {
-     @Provides
-     @Singleton
-     fun provideVehicleValidationService(
--        api: GeneralApi,
-         sessionStatusChecker: SessionStatusChecker,
-         checklistRepository: ChecklistRepository,
-         vehicleStatusDeterminer: VehicleStatusDeterminer
-     ): VehicleValidationService {
-         return VehicleValidationServiceImpl(
--            api = api,
-             sessionStatusChecker = sessionStatusChecker,
-             checklistRepository = checklistRepository,
-             vehicleStatusDeterminer = vehicleStatusDeterminer
-@@ -119,7 +125,7 @@ object RepositoryModule {
-     @Provides
-     @Singleton
-     fun provideSessionRepository(
--        api: GeneralApi,
-+        api: VehicleSessionApi,
-         authDataStore: AuthDataStore,
-         vehicleStatusRepository: VehicleStatusRepository,
-         checklistRepository: ChecklistRepository,
-@@ -141,7 +147,7 @@ object RepositoryModule {
-     @Provides
-     @Singleton
-     fun provideIncidentRepository(
--        api: GeneralApi,
-+        api: IncidentApi,
-         authDataStore: AuthDataStore
-     ): IncidentRepository {
-         return IncidentRepositoryImpl(api, authDataStore)
-@@ -150,7 +156,7 @@ object RepositoryModule {
-     @Provides
-     @Singleton
-     fun provideVehicleRepository(
--        api: GeneralApi,
-+        api: VehicleApi,
-         authDataStore: AuthDataStore,
-         validateChecklistUseCase: ValidateChecklistUseCase,
-         vehicleStatusRepository: VehicleStatusRepository
-diff --git a/app/src/main/java/app/forku/di/UseCaseModule.kt b/app/src/main/java/app/forku/di/UseCaseModule.kt
-index 822b82b..19fd777 100644
---- a/app/src/main/java/app/forku/di/UseCaseModule.kt
-+++ b/app/src/main/java/app/forku/di/UseCaseModule.kt
-@@ -41,14 +41,20 @@ object UseCaseModule {
- 
-     @Provides
-     @Singleton
--    fun provideGetVehicleUseCase(repository: VehicleRepository): GetVehicleUseCase {
--        return GetVehicleUseCase(repository)
-+    fun provideGetVehicleUseCase(
-+        repository: VehicleRepository,
-+        userRepository: UserRepository
-+    ): GetVehicleUseCase {
-+        return GetVehicleUseCase(repository, userRepository)
-     }
- 
-     @Provides
-     @Singleton
--    fun provideGetVehiclesUseCase(repository: VehicleRepository): GetVehiclesUseCase {
--        return GetVehiclesUseCase(repository)
-+    fun provideGetVehiclesUseCase(
-+        repository: VehicleRepository,
-+        userRepository: UserRepository
-+    ): GetVehiclesUseCase {
-+        return GetVehiclesUseCase(repository, userRepository)
-     }
- 
-     @Provides
-@@ -64,9 +70,10 @@ object UseCaseModule {
-     @Provides
-     @Singleton
-     fun provideGetVehicleStatusUseCase(
--        vehicleStatusRepository: VehicleStatusRepository
-+        vehicleStatusRepository: VehicleStatusRepository,
-+        userRepository: UserRepository
-     ): GetVehicleStatusUseCase {
--        return GetVehicleStatusUseCase(vehicleStatusRepository)
-+        return GetVehicleStatusUseCase(vehicleStatusRepository, userRepository)
-     }
- 
-     @Provides
-diff --git a/app/src/main/java/app/forku/domain/model/session/VehicleSession.kt b/app/src/main/java/app/forku/domain/model/session/VehicleSession.kt
-index 491e34b..f9310b4 100644
---- a/app/src/main/java/app/forku/domain/model/session/VehicleSession.kt
-+++ b/app/src/main/java/app/forku/domain/model/session/VehicleSession.kt
-@@ -4,6 +4,7 @@ data class VehicleSession(
-     val id: String,
-     val vehicleId: String,
-     val userId: String,
-+    val checkId: String,
-     val startTime: String,
-     val endTime: String?,
-     val status: VehicleSessionStatus,
-@@ -11,7 +12,7 @@ data class VehicleSession(
-     val endLocationCoordinates: String?,
-     val durationMinutes: Int?,
-     val timestamp: String,
--    val closeMethod: VehicleSessionClosedMethod,
-+    val closeMethod: VehicleSessionClosedMethod?,
-     val closedBy: String? = null,
-     val notes: String? = null
- )
-diff --git a/app/src/main/java/app/forku/domain/model/user/User.kt b/app/src/main/java/app/forku/domain/model/user/User.kt
-index 4c4929f..2688e64 100644
---- a/app/src/main/java/app/forku/domain/model/user/User.kt
-+++ b/app/src/main/java/app/forku/domain/model/user/User.kt
-@@ -19,7 +19,10 @@ data class User(
-     val lastMedicalCheck: String? = null,
-     val lastLogin: String? = null,
-     val isActive: Boolean = true,
--    val password: String
-+    val isApproved: Boolean = false,
-+    val password: String,
-+    val businessId: String? = null,
-+    val siteId: String? = null
- ) {
-     val fullName: String
-         get() = "$firstName $lastName"
-diff --git a/app/src/main/java/app/forku/domain/model/user/UserRole.kt b/app/src/main/java/app/forku/domain/model/user/UserRole.kt
-index 57ae288..840a6ba 100644
---- a/app/src/main/java/app/forku/domain/model/user/UserRole.kt
-+++ b/app/src/main/java/app/forku/domain/model/user/UserRole.kt
-@@ -1,6 +1,7 @@
- package app.forku.domain.model.user
- 
- enum class UserRole {
-+    SUPERADMIN,
-     ADMIN,
-     OPERATOR;
- 
-diff --git a/app/src/main/java/app/forku/domain/model/vehicle/Vehicle.kt b/app/src/main/java/app/forku/domain/model/vehicle/Vehicle.kt
-index b4edb96..3366a03 100644
---- a/app/src/main/java/app/forku/domain/model/vehicle/Vehicle.kt
-+++ b/app/src/main/java/app/forku/domain/model/vehicle/Vehicle.kt
-@@ -1,6 +1,8 @@
- package app.forku.domain.model.vehicle
- 
- import app.forku.domain.model.checklist.PreShiftCheck
-+import java.time.LocalDate
-+import java.time.format.DateTimeFormatter
- 
- data class Vehicle(
-     val id: String,
-@@ -17,5 +19,16 @@ data class Vehicle(
-     val photoModel: String,
-     val vehicleClass: String,
-     val energyType: String,
--    val nextService: String
--)
-\ No newline at end of file
-+    val nextService: String,
-+    val hasIssues: Boolean = false,
-+    val maintenanceStatus: MaintenanceStatus = MaintenanceStatus.UP_TO_DATE
-+) {
-+    val needsMaintenance: Boolean
-+        get() = maintenanceStatus != MaintenanceStatus.UP_TO_DATE
-+}
-+
-+enum class MaintenanceStatus {
-+    UP_TO_DATE,
-+    DUE_SOON,
-+    OVERDUE
-+}
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/domain/repository/checklist/ChecklistRepository.kt b/app/src/main/java/app/forku/domain/repository/checklist/ChecklistRepository.kt
-index 41540ce..2931cae 100644
---- a/app/src/main/java/app/forku/domain/repository/checklist/ChecklistRepository.kt
-+++ b/app/src/main/java/app/forku/domain/repository/checklist/ChecklistRepository.kt
-@@ -7,7 +7,7 @@ import app.forku.domain.model.checklist.CheckStatus
- 
- interface ChecklistRepository {
-     suspend fun getChecklistItems(vehicleId: String): List<Checklist>
--    suspend fun getLastPreShiftCheck(vehicleId: String): PreShiftCheck?
-+    suspend fun getLastPreShiftCheck(vehicleId: String, businessId: String): PreShiftCheck?
-     suspend fun submitPreShiftCheck(
-         vehicleId: String,
-         checkItems: List<ChecklistItem>,
-diff --git a/app/src/main/java/app/forku/domain/repository/session/SessionStatusChecker.kt b/app/src/main/java/app/forku/domain/repository/session/SessionStatusChecker.kt
-index 7c7474f..8165346 100644
---- a/app/src/main/java/app/forku/domain/repository/session/SessionStatusChecker.kt
-+++ b/app/src/main/java/app/forku/domain/repository/session/SessionStatusChecker.kt
-@@ -3,5 +3,5 @@ package app.forku.domain.repository.session
- import app.forku.domain.model.session.VehicleSession
- 
- interface SessionStatusChecker {
--    suspend fun getActiveSessionForVehicle(vehicleId: String): VehicleSession?
-+    suspend fun getActiveSessionForVehicle(vehicleId: String, businessId: String): VehicleSession?
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/domain/repository/session/VehicleSessionRepository.kt b/app/src/main/java/app/forku/domain/repository/session/VehicleSessionRepository.kt
-index 0021e0a..6e05c5b 100644
---- a/app/src/main/java/app/forku/domain/repository/session/VehicleSessionRepository.kt
-+++ b/app/src/main/java/app/forku/domain/repository/session/VehicleSessionRepository.kt
-@@ -12,7 +12,7 @@ interface VehicleSessionRepository {
-         adminId: String? = null,
-         notes: String? = null
-     ): VehicleSession
--    suspend fun getActiveSessionForVehicle(vehicleId: String): VehicleSession?
-+    suspend fun getActiveSessionForVehicle(vehicleId: String, businessId: String): VehicleSession?
-     suspend fun getOperatorSessionHistory(): List<VehicleSession>
-     suspend fun getSessionsByUserId(userId: String): List<VehicleSession>
-     suspend fun getLastCompletedSessionForVehicle(vehicleId: String): VehicleSession?
-diff --git a/app/src/main/java/app/forku/domain/repository/user/UserRepository.kt b/app/src/main/java/app/forku/domain/repository/user/UserRepository.kt
-index 1da1db0..a7fa0cb 100644
---- a/app/src/main/java/app/forku/domain/repository/user/UserRepository.kt
-+++ b/app/src/main/java/app/forku/domain/repository/user/UserRepository.kt
-@@ -47,4 +47,6 @@ interface UserRepository {
-     suspend fun getLastActiveTime(userId: String): Long?
- 
-     suspend fun getCurrentUserId(): String?
-+
-+    suspend fun getUnassignedUsers(): List<User>
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleRepository.kt b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleRepository.kt
-index 6fa3686..2532cfa 100644
---- a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleRepository.kt
-+++ b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleRepository.kt
-@@ -1,21 +1,57 @@
- package app.forku.domain.repository.vehicle
- 
--
--import app.forku.domain.model.checklist.Answer
- import app.forku.domain.model.vehicle.Vehicle
--import app.forku.domain.model.checklist.Checklist
--import app.forku.domain.model.checklist.ChecklistItem
--import app.forku.domain.model.checklist.PreShiftCheck
- import app.forku.domain.model.vehicle.VehicleStatus
--import kotlinx.coroutines.flow.Flow
--import kotlinx.coroutines.flow.flow
--import kotlinx.coroutines.delay
--
- 
- interface VehicleRepository {
--    suspend fun getVehicle(id: String): Vehicle
--    suspend fun getVehicles(): List<Vehicle>
--    suspend fun getVehicleByQr(code: String, checkAvailability: Boolean = true): Vehicle
--    suspend fun updateVehicleStatus(vehicleId: String, status: VehicleStatus): Vehicle
--    suspend fun getVehicleStatus(vehicleId: String): VehicleStatus
-+    /**
-+     * Gets a specific vehicle by ID
-+     */
-+    suspend fun getVehicle(id: String, businessId: String): Vehicle
-+    
-+    /**
-+     * Gets vehicles for the current business and site context
-+     * @param businessId The ID of the business
-+     * @param siteId Optional site ID to filter vehicles by site
-+     */
-+    suspend fun getVehicles(businessId: String, siteId: String? = null): List<Vehicle>
-+    
-+    /**
-+     * Gets all vehicles across all businesses (SuperAdmin only)
-+     */
-+    suspend fun getAllVehicles(): List<Vehicle>
-+    
-+    /**
-+     * Gets a vehicle by QR code
-+     * @param code The QR code
-+     * @param checkAvailability Whether to check if the vehicle is available
-+     * @param businessId The business context for availability check
-+     */
-+    suspend fun getVehicleByQr(
-+        code: String, 
-+        checkAvailability: Boolean = true,
-+        businessId: String? = null
-+    ): Vehicle
-+
-+    /**
-+     * Updates vehicle status
-+     * @param vehicleId The ID of the vehicle
-+     * @param status The new status
-+     * @param businessId The business context
-+     */
-+    suspend fun updateVehicleStatus(
-+        vehicleId: String, 
-+        status: VehicleStatus,
-+        businessId: String
-+    ): Vehicle
-+
-+    /**
-+     * Gets vehicle status
-+     * @param vehicleId The ID of the vehicle
-+     * @param businessId The business context
-+     */
-+    suspend fun getVehicleStatus(
-+        vehicleId: String,
-+        businessId: String
-+    ): VehicleStatus
- }
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusChecker.kt b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusChecker.kt
-index 29e8e0e..abd1270 100644
---- a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusChecker.kt
-+++ b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusChecker.kt
-@@ -1,6 +1,19 @@
- package app.forku.domain.repository.vehicle
- 
- interface VehicleStatusChecker {
--    suspend fun isVehicleAvailable(vehicleId: String): Boolean
--    suspend fun getVehicleErrorMessage(vehicleId: String): String?
-+    /**
-+     * Check if a vehicle is available for use
-+     * @param vehicleId The ID of the vehicle to check
-+     * @param businessId The business context for the check
-+     * @return true if the vehicle is available, false otherwise
-+     */
-+    suspend fun isVehicleAvailable(vehicleId: String, businessId: String): Boolean
-+
-+    /**
-+     * Get error message if vehicle is not available
-+     * @param vehicleId The ID of the vehicle to check
-+     * @param businessId The business context for the check
-+     * @return Error message if vehicle is not available, null otherwise
-+     */
-+    suspend fun getVehicleErrorMessage(vehicleId: String, businessId: String): String?
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusRepository.kt b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusRepository.kt
-index 127755d..18c5158 100644
---- a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusRepository.kt
-+++ b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusRepository.kt
-@@ -3,7 +3,7 @@ package app.forku.domain.repository.vehicle
- import app.forku.domain.model.vehicle.VehicleStatus
- 
- interface VehicleStatusRepository : VehicleStatusChecker {
--    suspend fun getVehicleStatus(vehicleId: String): VehicleStatus
--    suspend fun updateVehicleStatus(vehicleId: String, status: VehicleStatus): Boolean
-+    suspend fun getVehicleStatus(vehicleId: String, businessId: String): VehicleStatus
-+    suspend fun updateVehicleStatus(vehicleId: String, status: VehicleStatus, businessId: String): Boolean
-     suspend fun determineStatusFromCheck(checkStatus: String): VehicleStatus
- }
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusUpdater.kt b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusUpdater.kt
-index 91cf7bb..f6ee67d 100644
---- a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusUpdater.kt
-+++ b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusUpdater.kt
-@@ -3,5 +3,16 @@ package app.forku.domain.repository.vehicle
- import app.forku.domain.model.vehicle.VehicleStatus
- 
- interface VehicleStatusUpdater {
--    suspend fun updateVehicleStatus(vehicleId: String, status: VehicleStatus): Boolean
-+    /**
-+     * Updates the status of a vehicle
-+     * @param vehicleId The ID of the vehicle to update
-+     * @param status The new status to set
-+     * @param businessId The business context for the update
-+     * @return true if update was successful, false otherwise
-+     */
-+    suspend fun updateVehicleStatus(
-+        vehicleId: String,
-+        status: VehicleStatus,
-+        businessId: String
-+    ): Boolean
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/domain/service/VehicleValidationService.kt b/app/src/main/java/app/forku/domain/service/VehicleValidationService.kt
-index e0853a5..a6bd064 100644
---- a/app/src/main/java/app/forku/domain/service/VehicleValidationService.kt
-+++ b/app/src/main/java/app/forku/domain/service/VehicleValidationService.kt
-@@ -3,9 +3,42 @@ package app.forku.domain.service
- import app.forku.domain.model.vehicle.VehicleStatus
- 
- interface VehicleValidationService {
--    suspend fun getVehicleStatus(vehicleId: String): VehicleStatus
--    suspend fun isVehicleAvailable(vehicleId: String): Boolean
--    suspend fun getVehicleErrorMessage(vehicleId: String): String?
--    suspend fun validateVehicleForOperation(vehicleId: String)
-+    /**
-+     * Get the current status of a vehicle
-+     * @param vehicleId The ID of the vehicle to check
-+     * @param businessId The business context for the check
-+     * @return The current status of the vehicle
-+     */
-+    suspend fun getVehicleStatus(vehicleId: String, businessId: String): VehicleStatus
-+
-+    /**
-+     * Check if a vehicle is available for use
-+     * @param vehicleId The ID of the vehicle to check
-+     * @param businessId The business context for the check
-+     * @return true if the vehicle is available, false otherwise
-+     */
-+    suspend fun isVehicleAvailable(vehicleId: String, businessId: String): Boolean
-+
-+    /**
-+     * Get error message if vehicle is not available
-+     * @param vehicleId The ID of the vehicle to check
-+     * @param businessId The business context for the check
-+     * @return Error message if vehicle is not available, null otherwise
-+     */
-+    suspend fun getVehicleErrorMessage(vehicleId: String, businessId: String): String?
-+
-+    /**
-+     * Validate if a vehicle can be used for operation
-+     * @param vehicleId The ID of the vehicle to validate
-+     * @param businessId The business context for the validation
-+     * @throws Exception if vehicle is not available
-+     */
-+    suspend fun validateVehicleForOperation(vehicleId: String, businessId: String)
-+
-+    /**
-+     * Determine vehicle status from check status
-+     * @param checkStatus The check status to evaluate
-+     * @return The determined vehicle status
-+     */
-     fun determineStatusFromCheck(checkStatus: String): VehicleStatus
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/domain/usecase/vehicle/GetActiveVehicleSessionsUseCase.kt b/app/src/main/java/app/forku/domain/usecase/vehicle/GetActiveVehicleSessionsUseCase.kt
-index 0e58a22..80c9fab 100644
---- a/app/src/main/java/app/forku/domain/usecase/vehicle/GetActiveVehicleSessionsUseCase.kt
-+++ b/app/src/main/java/app/forku/domain/usecase/vehicle/GetActiveVehicleSessionsUseCase.kt
-@@ -15,13 +15,17 @@ class GetActiveVehicleSessionsUseCase @Inject constructor(
-     suspend operator fun invoke(): Map<String, VehicleSessionInfo> {
-         val sessionMap = mutableMapOf<String, VehicleSessionInfo>()
-         
-+        // Get current user's business ID
-+        val currentUser = userRepository.getCurrentUser() ?: return emptyMap()
-+        val businessId = currentUser.businessId ?: return emptyMap()
-+        
-         // Get all active sessions
-         val activeSessions = vehicleSessionRepository.getOperatorSessionHistory()
-             .filter { it.endTime == null }  // Only active sessions
-             
-         for (session in activeSessions) {
-             val operator = userRepository.getUserById(session.userId)
--            val vehicle = vehicleRepository.getVehicle(session.vehicleId)
-+            val vehicle = vehicleRepository.getVehicle(session.vehicleId, businessId)
-             
-             try {
-                 sessionMap[session.vehicleId] = VehicleSessionInfo(
-diff --git a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleActiveSessionUseCase.kt b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleActiveSessionUseCase.kt
-index 717504f..de89099 100644
---- a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleActiveSessionUseCase.kt
-+++ b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleActiveSessionUseCase.kt
-@@ -15,9 +15,13 @@ class GetVehicleActiveSessionUseCase @Inject constructor(
-     private val vehicleRepository: VehicleRepository
- ) {
-     suspend operator fun invoke(vehicleId: String): VehicleSessionInfo? {
--        val session = vehicleSessionRepository.getActiveSessionForVehicle(vehicleId) ?: return null
-+        // Get current user's business ID
-+        val currentUser = userRepository.getCurrentUser() ?: return null
-+        val businessId = currentUser.businessId ?: return null
-+        
-+        val session = vehicleSessionRepository.getActiveSessionForVehicle(vehicleId, businessId) ?: return null
-         val operator = userRepository.getUserById(session.userId)
--        val vehicle = vehicleRepository.getVehicle(vehicleId)
-+        val vehicle = vehicleRepository.getVehicle(vehicleId, businessId)
-         
-         val startTime = LocalDateTime.parse(session.startTime)
-         val currentTime = LocalDateTime.now()
-diff --git a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleStatusUseCase.kt b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleStatusUseCase.kt
-index 9a46e0d..d029d4e 100644
---- a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleStatusUseCase.kt
-+++ b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleStatusUseCase.kt
-@@ -3,13 +3,23 @@ package app.forku.domain.usecase.vehicle
- import app.forku.domain.model.vehicle.VehicleStatus
- import javax.inject.Inject
- import app.forku.domain.repository.vehicle.VehicleStatusRepository
-+import app.forku.domain.repository.user.UserRepository
- 
- class GetVehicleStatusUseCase @Inject constructor(
--    private val vehicleStatusRepository: VehicleStatusRepository
-+    private val vehicleStatusRepository: VehicleStatusRepository,
-+    private val userRepository: UserRepository
- ) {
-     suspend operator fun invoke(vehicleId: String): VehicleStatus {
-         return try {
--            vehicleStatusRepository.getVehicleStatus(vehicleId)
-+            val currentUser = userRepository.getCurrentUser()
-+            val businessId = currentUser?.businessId
-+            
-+            if (businessId == null) {
-+                android.util.Log.e("VehicleStatus", "No business ID available")
-+                return VehicleStatus.AVAILABLE
-+            }
-+            
-+            vehicleStatusRepository.getVehicleStatus(vehicleId, businessId)
-         } catch (e: Exception) {
-             android.util.Log.e("VehicleStatus", "Error getting vehicle status", e)
-             VehicleStatus.AVAILABLE
-diff --git a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleUseCase.kt b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleUseCase.kt
-index df60bca..59a3d3e 100644
---- a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleUseCase.kt
-+++ b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleUseCase.kt
-@@ -1,13 +1,23 @@
- package app.forku.domain.usecase.vehicle
- 
- import app.forku.domain.model.vehicle.Vehicle
--import app.forku.domain.repository.vehicle.VehicleRepository
- import javax.inject.Inject
-+import app.forku.domain.repository.vehicle.VehicleRepository
-+import app.forku.domain.repository.user.UserRepository
- 
- class GetVehicleUseCase @Inject constructor(
--    private val repository: VehicleRepository
-+    private val repository: VehicleRepository,
-+    private val userRepository: UserRepository
- ) {
--    suspend operator fun invoke(id: String): Vehicle {
--        return repository.getVehicle(id)
-+    suspend operator fun invoke(id: String): Vehicle? {
-+        val currentUser = userRepository.getCurrentUser() ?: return null
-+        val businessId = currentUser.businessId ?: return null
-+        
-+        return try {
-+            repository.getVehicle(id, businessId)
-+        } catch (e: Exception) {
-+            android.util.Log.e("GetVehicleUseCase", "Error getting vehicle: ${e.message}")
-+            null
-+        }
-     }
- }
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehiclesUseCase.kt b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehiclesUseCase.kt
-index cacb891..6aa4adb 100644
---- a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehiclesUseCase.kt
-+++ b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehiclesUseCase.kt
-@@ -1,13 +1,23 @@
- package app.forku.domain.usecase.vehicle
- 
- import app.forku.domain.model.vehicle.Vehicle
--import app.forku.domain.repository.vehicle.VehicleRepository
- import javax.inject.Inject
-+import app.forku.domain.repository.vehicle.VehicleRepository
-+import app.forku.domain.repository.user.UserRepository
- 
- class GetVehiclesUseCase @Inject constructor(
--    private val repository: VehicleRepository
-+    private val repository: VehicleRepository,
-+    private val userRepository: UserRepository
- ) {
-     suspend operator fun invoke(): List<Vehicle> {
--        return repository.getVehicles()
-+        val currentUser = userRepository.getCurrentUser() ?: return emptyList()
-+        val businessId = currentUser.businessId ?: return emptyList()
-+        
-+        return try {
-+            repository.getVehicles(businessId)
-+        } catch (e: Exception) {
-+            android.util.Log.e("GetVehiclesUseCase", "Error getting vehicles: ${e.message}")
-+            emptyList()
-+        }
-     }
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/presentation/checklist/AllChecklistViewModel.kt b/app/src/main/java/app/forku/presentation/checklist/AllChecklistViewModel.kt
-index 4b86049..117215e 100644
---- a/app/src/main/java/app/forku/presentation/checklist/AllChecklistViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/checklist/AllChecklistViewModel.kt
-@@ -69,11 +69,25 @@ class AllChecklistViewModel @Inject constructor(
-             }
-             
-             try {
-+                val currentUser = userRepository.getCurrentUser()
-+                val businessId = currentUser?.businessId
-+                
-+                if (businessId == null) {
-+                    _state.update { 
-+                        it.copy(
-+                            isLoading = false,
-+                            isLoadingMore = false,
-+                            error = "No business context available"
-+                        )
-+                    }
-+                    return@launch
-+                }
-+                
-                 val checks = checklistRepository.getAllChecks(page)
-                 val checkStates = checks.mapNotNull { check ->
-                     try {
-                         val operator = userRepository.getUserById(check.userId)
--                        val vehicle = vehicleRepository.getVehicle(check.vehicleId)
-+                        val vehicle = vehicleRepository.getVehicle(check.vehicleId, businessId)
-                         PreShiftCheckState(
-                             id = check.id,
-                             vehicleId = check.vehicleId,
-@@ -83,6 +97,7 @@ class AllChecklistViewModel @Inject constructor(
-                             lastCheckDateTime = check.lastCheckDateTime
-                         )
-                     } catch (e: Exception) {
-+                        android.util.Log.e("AllChecklistViewModel", "Error processing check: ${e.message}")
-                         null
-                     }
-                 }
-diff --git a/app/src/main/java/app/forku/presentation/checklist/CheckDetailViewModel.kt b/app/src/main/java/app/forku/presentation/checklist/CheckDetailViewModel.kt
-index bf00ffb..e2bc26e 100644
---- a/app/src/main/java/app/forku/presentation/checklist/CheckDetailViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/checklist/CheckDetailViewModel.kt
-@@ -25,16 +25,27 @@ class CheckDetailViewModel @Inject constructor(
-             try {
-                 _state.value = _state.value.copy(isLoading = true)
-                 
-+                val currentUser = userRepository.getCurrentUser()
-+                val businessId = currentUser?.businessId
-+                
-+                if (businessId == null) {
-+                    _state.value = _state.value.copy(
-+                        isLoading = false,
-+                        error = "No business context available"
-+                    )
-+                    return@launch
-+                }
-+
-                 val check = checklistRepository.getCheckById(checkId)
-                 check?.let {
-                     val operator = userRepository.getUserById(it.userId)
--                    val vehicle = vehicleRepository.getVehicle(it.vehicleId)
-+                    val vehicle = vehicleRepository.getVehicle(it.vehicleId, businessId)
-                     _state.value = _state.value.copy(
-                         check = PreShiftCheckState(
-                             id = it.id,
-                             vehicleId = it.vehicleId,
-                             vehicleCodename = vehicle.codename,
--                            operatorName = operator?.let { user -> "${user.firstName} ${user.lastName}" } ?: "Unknown",
-+                            operatorName = operator?.let { "${it.firstName} ${it.lastName}" } ?: "Unknown",
-                             status = it.status,
-                             lastCheckDateTime = it.lastCheckDateTime
-                         ),
-@@ -50,7 +61,7 @@ class CheckDetailViewModel @Inject constructor(
-             } catch (e: Exception) {
-                 _state.value = _state.value.copy(
-                     isLoading = false,
--                    error = e.message ?: "Unknown error occurred"
-+                    error = "Error loading check: ${e.message}"
-                 )
-             }
-         }
-diff --git a/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt b/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt
-index 13a967f..6323f63 100644
---- a/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt
-@@ -75,11 +75,18 @@ class ChecklistViewModel @Inject constructor(
-             val currentSession = vehicleSessionRepository.getCurrentSession()
-             if (currentSession != null) {
-                 // Get the last completed check for this vehicle
--                val lastCompletedCheck = checklistRepository.getLastPreShiftCheck(vehicleId.toString())
--                if (lastCompletedCheck != null) {
--                    loadExistingCheck(lastCompletedCheck.id)
-+                val currentUser = userRepository.getCurrentUser()
-+                val businessId = currentUser?.businessId
-+                
-+                if (businessId != null) {
-+                    val lastCompletedCheck = checklistRepository.getLastPreShiftCheck(vehicleId.toString(), businessId)
-+                    if (lastCompletedCheck != null) {
-+                        loadExistingCheck(lastCompletedCheck.id)
-+                    } else {
-+                        loadChecklistData() // Fallback to normal flow if no check found
-+                    }
-                 } else {
--                    loadChecklistData() // Fallback to normal flow if no check found
-+                    loadChecklistData() // Fallback if no business context
-                 }
-             } else {
-                 loadChecklistData()
-@@ -174,6 +181,22 @@ class ChecklistViewModel @Inject constructor(
-     fun loadChecklistData() {
-         viewModelScope.launch(Dispatchers.IO) {
-             try {
-+                // Get current user's business ID
-+                val currentUser = userRepository.getCurrentUser()
-+                val businessId = currentUser?.businessId
-+                
-+                if (businessId == null) {
-+                    withContext(Dispatchers.Main) {
-+                        _state.value = ChecklistState(
-+                            vehicleId = vehicleId.toString(),
-+                            vehicleStatus = VehicleStatus.AVAILABLE,
-+                            checkStatus = CheckStatus.NOT_STARTED.toString(),
-+                            error = "No business context available"
-+                        )
-+                    }
-+                    return@launch
-+                }
-+
-                 // 1. Obtener datos del checklist
-                 val checklists = getChecklistUseCase(vehicleId.toString())
-                 val firstChecklist = checklists.first()
-@@ -184,7 +207,7 @@ class ChecklistViewModel @Inject constructor(
-                 )
- 
-                 // 2. Crear o recuperar el check
--                val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId.toString())
-+                val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId.toString(), businessId)
-                 
-                 // Get current time in ISO format
-                 val currentDateTime = java.time.Instant.now().toString()
-diff --git a/app/src/main/java/app/forku/presentation/common/components/DashboardHeader.kt b/app/src/main/java/app/forku/presentation/common/components/DashboardHeader.kt
-index a771b7a..13549aa 100644
---- a/app/src/main/java/app/forku/presentation/common/components/DashboardHeader.kt
-+++ b/app/src/main/java/app/forku/presentation/common/components/DashboardHeader.kt
-@@ -3,6 +3,7 @@ package app.forku.presentation.common.components
- import androidx.compose.foundation.layout.*
- import androidx.compose.material.icons.Icons
- import androidx.compose.material.icons.filled.Notifications
-+import androidx.compose.material.icons.filled.AccountCircle
- import androidx.compose.material3.*
- import androidx.compose.runtime.Composable
- import androidx.compose.ui.Alignment
-@@ -16,8 +17,10 @@ import androidx.compose.ui.unit.sp
- fun DashboardHeader(
-     userName: String,
-     onNotificationClick: () -> Unit,
-+    onProfileClick: () -> Unit = {},
-     modifier: Modifier = Modifier,
-     showNotifications: Boolean = true,
-+    showProfile: Boolean = true,
-     greeting: String = "How are you today?"
- ) {
-     Row(
-@@ -39,17 +42,35 @@ fun DashboardHeader(
-                 fontSize = 18.sp
-             )
-         }
--        if (showNotifications) {
--            IconButton(
--                onClick = onNotificationClick,
--                modifier = Modifier.size(48.dp)
--            ) {
--                Icon(
--                    imageVector = Icons.Default.Notifications,
--                    contentDescription = "Notifications",
--                    tint = Color.Gray,
--                    modifier = Modifier.size(28.dp)
--                )
-+        Row(
-+            horizontalArrangement = Arrangement.spacedBy(8.dp),
-+            verticalAlignment = Alignment.CenterVertically
-+        ) {
-+            if (showProfile) {
-+                IconButton(
-+                    onClick = onProfileClick,
-+                    modifier = Modifier.size(48.dp)
-+                ) {
-+                    Icon(
-+                        imageVector = Icons.Default.AccountCircle,
-+                        contentDescription = "Profile",
-+                        tint = Color.Gray,
-+                        modifier = Modifier.size(28.dp)
-+                    )
-+                }
-+            }
-+            if (showNotifications) {
-+                IconButton(
-+                    onClick = onNotificationClick,
-+                    modifier = Modifier.size(48.dp)
-+                ) {
-+                    Icon(
-+                        imageVector = Icons.Default.Notifications,
-+                        contentDescription = "Notifications",
-+                        tint = Color.Gray,
-+                        modifier = Modifier.size(28.dp)
-+                    )
-+                }
-             }
-         }
-     }
-diff --git a/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt
-index 11cc022..333f3c5 100644
---- a/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt
-@@ -195,7 +195,7 @@ private fun OperationStatusSection(
- }
- 
- @Composable
--private fun StatusItem(
-+fun StatusItem(
-     icon: ImageVector,
-     count: String,
-     label: String,
-diff --git a/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardViewModel.kt b/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardViewModel.kt
-index c71edce..bc399a6 100644
---- a/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardViewModel.kt
-@@ -6,6 +6,7 @@ import app.forku.domain.model.checklist.Answer
- import app.forku.domain.model.session.VehicleSession
- import app.forku.domain.model.session.VehicleSessionInfo
- import app.forku.domain.model.user.User
-+import app.forku.domain.model.user.UserRole
- import app.forku.domain.repository.checklist.ChecklistRepository
- import app.forku.domain.repository.incident.IncidentRepository
- import app.forku.domain.repository.session.VehicleSessionRepository
-@@ -62,37 +63,46 @@ class AdminDashboardViewModel @Inject constructor(
-     private suspend fun getVehicleSessionInfo(session: VehicleSession): VehicleSessionInfo? {
-         return try {
-             android.util.Log.d("AdminDashboard", "Getting info for session: $session")
--            val vehicle = vehicleRepository.getVehicle(session.vehicleId)
--            android.util.Log.d("AdminDashboard", "Found vehicle: $vehicle")
--            val operator = userRepository.getUserById(session.userId)
--            android.util.Log.d("AdminDashboard", "Found operator: $operator with photoUrl: ${operator?.photoUrl}")
-+            val currentUser = userRepository.getCurrentUser()
-+            val businessId = currentUser?.businessId
-+            
-+            if (businessId == null) {
-+                android.util.Log.e("AdminDashboard", "No business context available")
-+                return null
-+            }
-+            
-+            val vehicle = vehicleRepository.getVehicle(session.vehicleId, businessId)
-+            android.util.Log.d("AdminDashboard", "Got vehicle: $vehicle")
-             
--            // Calculate session progress (assuming 8-hour shifts)
-+            val operator = userRepository.getUserById(session.userId)
-+            android.util.Log.d("AdminDashboard", "Got operator: $operator, photoUrl: ${operator?.photoUrl}")
-+
-+            // Calculate session progress (assuming 8-hour default duration)
-             val startTime = parseDateTime(session.startTime)
-             val now = OffsetDateTime.now()
-             val elapsedMinutes = java.time.Duration.between(startTime, now).toMinutes()
--
-             val progress = (elapsedMinutes.toFloat() / (8 * 60)).coerceIn(0f, 1f)
- 
-             // Default avatar URL for when photoUrl is empty
-             val defaultAvatarUrl = "https://ui-avatars.com/api/?name=${operator?.firstName?.first() ?: "U"}+${operator?.lastName?.first() ?: "U"}&background=random"
--            
-+
-             // Create session info even if operator is null
-             VehicleSessionInfo(
-                 vehicle = vehicle,
-                 vehicleId = vehicle.id,
-                 vehicleType = vehicle.type.displayName,
--                progress = progress,
--                operatorName = operator?.let { "${it.firstName.first()}. ${it.lastName}" } ?: "Unknown",
--                operatorImage = operator?.photoUrl?.takeIf { it.isNotEmpty() } ?: defaultAvatarUrl,
--                sessionStartTime = session.startTime,
--                vehicleImage = vehicle.photoModel,
-                 codename = vehicle.codename,
-+                vehicleImage = vehicle.photoModel,
-                 session = session,
--                operator = operator
-+                operator = operator,
-+                operatorName = "${operator?.firstName?.first() ?: ""}. ${operator?.lastName ?: ""}",
-+                operatorImage = operator?.photoUrl ?: defaultAvatarUrl,
-+                sessionStartTime = session.startTime,
-+                userRole = operator?.role ?: UserRole.OPERATOR,
-+                progress = progress
-             )
-         } catch (e: Exception) {
--            android.util.Log.e("AdminDashboard", "Error getting vehicle session info", e)
-+            android.util.Log.e("AdminDashboard", "Error getting session info: ${e.message}")
-             null
-         }
-     }
-@@ -123,9 +133,20 @@ class AdminDashboardViewModel @Inject constructor(
-             try {
-                 _state.value = _state.value.copy(isLoading = true)
- 
-+                val currentUser = userRepository.getCurrentUser()
-+                val businessId = currentUser?.businessId
-+                
-+                if (businessId == null) {
-+                    _state.value = _state.value.copy(
-+                        error = "No business context available",
-+                        isLoading = false
-+                    )
-+                    return@launch
-+                }
-+
-                 // Get all vehicles with error handling
-                 val vehicles = try {
--                    vehicleRepository.getVehicles()
-+                    vehicleRepository.getVehicles(businessId)
-                 } catch (e: Exception) {
-                     android.util.Log.e("AdminDashboard", "Error getting vehicles", e)
-                     emptyList()
-@@ -137,7 +158,7 @@ class AdminDashboardViewModel @Inject constructor(
-                         async {
-                             try {
-                                 delay(100) // Add small delay between requests to prevent rate limiting
--                                val session = vehicleSessionRepository.getActiveSessionForVehicle(vehicle.id)
-+                                val session = vehicleSessionRepository.getActiveSessionForVehicle(vehicle.id, businessId)
-                                 session?.let { 
-                                     val operator = userRepository.getUserById(it.userId)
-                                     val defaultAvatarUrl = "https://ui-avatars.com/api/?name=${operator?.firstName?.first() ?: "U"}+${operator?.lastName?.first() ?: "U"}&background=random"
-@@ -176,7 +197,7 @@ class AdminDashboardViewModel @Inject constructor(
-                         async {
-                             try {
-                                 delay(100) // Add small delay between requests
--                                val lastCheck = checklistRepository.getLastPreShiftCheck(session.vehicle.id)
-+                                val lastCheck = checklistRepository.getLastPreShiftCheck(session.vehicle.id, businessId)
-                                 session.vehicle.id to lastCheck
-                             } catch (e: Exception) {
-                                 android.util.Log.e("AdminDashboard", "Error getting last check for vehicle ${session.vehicle.id}", e)
-diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
-index d36fff1..1fdedbe 100644
---- a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
-@@ -133,6 +133,36 @@ fun DashboardScreen(
-                         )
-                     }
- 
-+                    // Show business assignment message if needed
-+                    if (dashboardState.needsBusinessAssignment) {
-+                        item {
-+                            Card(
-+                                modifier = Modifier
-+                                    .fillMaxWidth()
-+                                    .padding(vertical = 8.dp),
-+                                colors = CardDefaults.cardColors(
-+                                    containerColor = MaterialTheme.colorScheme.errorContainer
-+                                )
-+                            ) {
-+                                Column(
-+                                    modifier = Modifier.padding(16.dp),
-+                                    verticalArrangement = Arrangement.spacedBy(8.dp)
-+                                ) {
-+                                    Text(
-+                                        text = "Business Assignment Required",
-+                                        style = MaterialTheme.typography.titleMedium,
-+                                        color = MaterialTheme.colorScheme.onErrorContainer
-+                                    )
-+                                    Text(
-+                                        text = "Please contact your administrator to assign you to a business. You won't be able to access vehicle operations until this is done.",
-+                                        style = MaterialTheme.typography.bodyMedium,
-+                                        color = MaterialTheme.colorScheme.onErrorContainer
-+                                    )
-+                                }
-+                            }
-+                        }
-+                    }
-+
-                     // Show current user's session
-                     item {
-                         CurrentUserSession(
-diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardState.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardState.kt
-index cf8a308..a532b03 100644
---- a/app/src/main/java/app/forku/presentation/dashboard/DashboardState.kt
-+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardState.kt
-@@ -21,7 +21,8 @@ data class DashboardState(
-     val vehicles: List<Vehicle> = emptyList(),
-     val activeSessions: List<VehicleSession> = emptyList(),
-     val users: List<User> = emptyList(),
--    val checks: List<PreShiftCheck> = emptyList()
-+    val checks: List<PreShiftCheck> = emptyList(),
-+    val needsBusinessAssignment: Boolean = false
- )
- //{
- //    val displayVehicle: Vehicle?
-diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
-index fa4ed2d..2a46216 100644
---- a/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
-@@ -103,39 +103,55 @@ class DashboardViewModel @Inject constructor(
-     }
-     
-     private suspend fun loadDashboard(showLoading: Boolean = false) {
--        // Use mutex to prevent concurrent loadDashboard calls
--        if (!loadDashboardMutex.tryLock()) {
--            android.util.Log.d("DashboardViewModel", "Skipping loadDashboard - already in progress")
--            return
-+        if (showLoading) {
-+            android.util.Log.d("DashboardViewModel", "Setting loading state to true")
-+            _state.update { it.copy(isLoading = true) }
-         }
--        
-+
-         try {
--            if (showLoading) {
--                android.util.Log.d("DashboardViewModel", "Setting loading state to true")
--                _state.update { it.copy(isLoading = true) }
--            }
--            
-             val currentUser = userRepository.getCurrentUser()
-                 ?: throw Exception("User not authenticated")
-+                
-+            // For operators without a business context, we'll show a limited dashboard
-+            if (currentUser.businessId == null) {
-+                _state.update {
-+                    it.copy(
-+                        isLoading = false,
-+                        error = null,
-+                        vehicles = emptyList(),
-+                        activeSessions = emptyList(),
-+                        users = emptyList(),
-+                        checks = emptyList(),
-+                        currentSession = null,
-+                        lastSession = null,
-+                        displayVehicle = null,
-+                        lastPreShiftCheck = null,
-+                        needsBusinessAssignment = true
-+                    )
-+                }
-+                return
-+            }
-+
-+            val businessId = currentUser.businessId
- 
-             // Load all vehicles
--            val vehicles = vehicleRepository.getVehicles()
--            
-+            val vehicles = vehicleRepository.getVehicles(businessId)
-+
-             // Load only active sessions (where endTime is null)
-             val activeSessions = vehicleSessionRepository.getSessions()
--                .filter { session -> 
--                    session.endTime == null && 
-+                .filter { session ->
-+                    session.endTime == null &&
-                     // Ensure the vehicle exists for this session
-                     vehicles.any { vehicle -> vehicle.id == session.vehicleId }
-                 }
--                .distinctBy { it.vehicleId } // Ensure only one active session per vehicle
--            
-+                .distinctBy { it.vehicleId } // Ensure only one session per vehicle
-+
-             // Load all users involved in active sessions
--            val userIds = activeSessions.map { it.userId }.distinct()
-+            val userIds = activeSessions.map { it.userId }
-             val users = userIds.mapNotNull { userId ->
-                 userRepository.getUserById(userId)
-             }
--            
-+
-             // Load latest checks for each vehicle
-             val checks = vehicles.mapNotNull { vehicle ->
-                 getLastPreShiftCheckUseCase(vehicle.id)
-@@ -192,15 +208,8 @@ class DashboardViewModel @Inject constructor(
-                 )
-             }
-         } catch (e: Exception) {
--            android.util.Log.e("DashboardViewModel", "Error in loadDashboard", e)
--            _state.update {
--                it.copy(
--                    error = e.message,
--                    isLoading = false
--                )
--            }
--        } finally {
--            loadDashboardMutex.unlock()
-+            android.util.Log.e("DashboardViewModel", "Error loading dashboard", e)
-+            _state.update { it.copy(error = "Error loading dashboard: ${e.message}") }
-         }
-     }
- 
-diff --git a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
-index 441cc9d..f0cfa1f 100644
---- a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
-@@ -125,10 +125,6 @@ class IncidentReportViewModel @Inject constructor(
-     private fun loadInitialData() {
-         viewModelScope.launch {
-             try {
--                // Load available vehicles first
--                val vehicles = vehicleRepository.getVehicles()
--                _state.update { it.copy(availableVehicles = vehicles) }
--
-                 // Get current user first
-                 var user = userRepository.getCurrentUser()
-                 android.util.Log.d("IncidentReport", "Initial current user fetch: $user")
-@@ -140,6 +136,17 @@ class IncidentReportViewModel @Inject constructor(
-                     user = refreshResult.getOrNull()
-                     android.util.Log.d("IncidentReport", "After refresh, current user: $user")
-                 }
-+
-+                val businessId = user?.businessId
-+                if (businessId == null) {
-+                    android.util.Log.e("IncidentReport", "No business context available")
-+                    _state.update { it.copy(error = "No business context available") }
-+                    return@launch
-+                }
-+                
-+                // Load available vehicles first
-+                val vehicles = vehicleRepository.getVehicles(businessId)
-+                _state.update { it.copy(availableVehicles = vehicles) }
-                 
-                 // Set user information regardless of session
-                 user?.let { currentUser ->
-@@ -169,8 +176,8 @@ class IncidentReportViewModel @Inject constructor(
-                 
-                 session?.vehicleId?.let { vehicleId ->
-                     try {
--                        val vehicle = vehicleRepository.getVehicle(vehicleId)
--                        val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId)
-+                        val vehicle = vehicleRepository.getVehicle(vehicleId, businessId)
-+                        val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId, businessId)
-                         
-                         _state.update { currentState ->
-                             currentState.copy(
-@@ -200,7 +207,16 @@ class IncidentReportViewModel @Inject constructor(
-         
-         viewModelScope.launch {
-             try {
--                val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId)
-+                val currentUser = userRepository.getCurrentUser()
-+                val businessId = currentUser?.businessId
-+                
-+                if (businessId == null) {
-+                    android.util.Log.e("IncidentReport", "No business context available")
-+                    _state.update { it.copy(error = "No business context available") }
-+                    return@launch
-+                }
-+                
-+                val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId, businessId)
-                 _state.update { currentState -> 
-                     currentState.copy(
-                         lastPreshiftCheck = lastCheck?.lastCheckDateTime?.let { dateString ->
-diff --git a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
-index 99ed634..a7e4928 100644
---- a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
-+++ b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
-@@ -15,6 +15,7 @@ import app.forku.core.network.NetworkConnectivityManager
- import app.forku.core.location.LocationManager
- import app.forku.presentation.user.login.LoginScreen
- import app.forku.presentation.dashboard.DashboardScreen
-+import app.forku.presentation.dashboard.SuperAdminDashboardScreen
- import app.forku.presentation.checklist.ChecklistScreen
- import app.forku.presentation.vehicle.list.VehicleListScreen
- import app.forku.presentation.vehicle.profile.VehicleProfileScreen
-@@ -26,7 +27,6 @@ import app.forku.presentation.incident.IncidentReportViewModel
- import app.forku.presentation.incident.list.IncidentListScreen
- import app.forku.presentation.user.profile.ProfileScreen
- import app.forku.presentation.vehicle.manual.PerformanceReportScreen
--
- import app.forku.presentation.incident.detail.IncidentDetailScreen
- import app.forku.presentation.tour.TourScreen
- import app.forku.presentation.user.register.RegisterScreen
-@@ -42,8 +42,7 @@ import app.forku.presentation.notification.NotificationScreen
- import app.forku.presentation.user.operator.OperatorsListScreen
- import app.forku.presentation.checklist.CheckDetailScreen
- import app.forku.presentation.safety.SafetyAlertsScreen
--
--
-+import app.forku.presentation.business.BusinessManagementScreen
- 
- @Composable
- fun NavGraph(
-@@ -64,6 +63,7 @@ fun NavGraph(
-             !tourCompleted -> Screen.Tour.route
-             loginState is LoginState.Success || hasToken -> {
-                 when (currentUser?.role) {
-+                    UserRole.SUPERADMIN -> Screen.SuperAdminDashboard.route
-                     UserRole.ADMIN -> Screen.AdminDashboard.route
-                     else -> Screen.Dashboard.route
-                 }
-@@ -75,6 +75,7 @@ fun NavGraph(
-             LoginScreen(
-                 onLoginSuccess = { user ->
-                     val route = when (user.role) {
-+                        UserRole.SUPERADMIN -> Screen.SuperAdminDashboard.route
-                         UserRole.ADMIN -> Screen.AdminDashboard.route
-                         else -> Screen.Dashboard.route
-                     }
-@@ -429,5 +430,67 @@ fun NavGraph(
-                 networkManager = networkManager
-             )
-         }
-+
-+        composable(Screen.SuperAdminDashboard.route) {
-+            SuperAdminDashboardScreen(
-+                navController = navController,
-+                onNavigate = { route ->
-+                    navController.navigate(route)
-+                },
-+                networkManager = networkManager
-+            )
-+        }
-+
-+        // SuperAdmin specific routes
-+        composable(Screen.UserManagement.route) {
-+            // TODO: Implement UserManagementScreen
-+        }
-+
-+        composable(Screen.BusinessManagement.route) {
-+            BusinessManagementScreen(
-+                navController = navController,
-+                networkManager = networkManager
-+            )
-+        }
-+
-+        composable(Screen.RoleManagement.route) {
-+            // TODO: Implement RoleManagementScreen
-+        }
-+
-+        composable(Screen.PermissionsManagement.route) {
-+            // TODO: Implement PermissionsManagementScreen
-+        }
-+
-+        composable(Screen.AddUser.route) {
-+            // TODO: Implement AddUserScreen
-+        }
-+
-+        composable(Screen.AdminManagement.route) {
-+            // TODO: Implement AdminManagementScreen
-+        }
-+
-+        composable(Screen.AddVehicle.route) {
-+            // TODO: Implement AddVehicleScreen
-+        }
-+
-+        composable(Screen.MaintenanceSchedule.route) {
-+            // TODO: Implement MaintenanceScheduleScreen
-+        }
-+
-+        composable(Screen.VehicleReports.route) {
-+            // TODO: Implement VehicleReportsScreen
-+        }
-+
-+        composable(Screen.SystemSettings.route) {
-+            // TODO: Implement SystemSettingsScreen
-+        }
-+
-+        composable(Screen.SystemBackup.route) {
-+            // TODO: Implement SystemBackupScreen
-+        }
-+
-+        composable(Screen.AuditLog.route) {
-+            // TODO: Implement AuditLogScreen
-+        }
-     }
- }
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/presentation/navigation/Screen.kt b/app/src/main/java/app/forku/presentation/navigation/Screen.kt
-index 38c5cfe..00caf16 100644
---- a/app/src/main/java/app/forku/presentation/navigation/Screen.kt
-+++ b/app/src/main/java/app/forku/presentation/navigation/Screen.kt
-@@ -74,6 +74,7 @@ sealed class Screen(val route: String) {
-     data object IncidentDetail : Screen("incident_detail/{incidentId}")
-     data object Tour : Screen("tour")
-     data object AdminDashboard : Screen("admin_dashboard")
-+    data object SuperAdminDashboard : Screen("super_admin_dashboard")
-     data object OperatorsList : Screen("operator_session_list")
-     data object Notifications : Screen("notifications")
-     data object AllChecklist : Screen("all_checklist")
-@@ -91,6 +92,20 @@ sealed class Screen(val route: String) {
-             "certification/$certificationId/edit"
-     }
-     data object CertificationCreate : Screen("certification/create")
-+    
-+    // SuperAdmin specific routes
-+    data object UserManagement : Screen("user_management")
-+    data object RoleManagement : Screen("role_management")
-+    data object PermissionsManagement : Screen("permissions_management")
-+    data object BusinessManagement : Screen("business_management")
-+    data object AddUser : Screen("add_user")
-+    data object AdminManagement : Screen("admin_management")
-+    data object AddVehicle : Screen("add_vehicle")
-+    data object MaintenanceSchedule : Screen("maintenance_schedule")
-+    data object VehicleReports : Screen("vehicle_reports")
-+    data object SystemSettings : Screen("system_settings")
-+    data object SystemBackup : Screen("system_backup")
-+    data object AuditLog : Screen("audit_log")
- 
-     companion object {
-         fun Profile.withOperatorId(operatorId: String?) = 
-diff --git a/app/src/main/java/app/forku/presentation/safety/SafetyAlertsViewModel.kt b/app/src/main/java/app/forku/presentation/safety/SafetyAlertsViewModel.kt
-index 2f13c41..cface9d 100644
---- a/app/src/main/java/app/forku/presentation/safety/SafetyAlertsViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/safety/SafetyAlertsViewModel.kt
-@@ -34,18 +34,29 @@ class SafetyAlertsViewModel @Inject constructor(
-             try {
-                 _state.value = _state.value.copy(isLoading = true)
- 
-+                val currentUser = userRepository.getCurrentUser()
-+                val businessId = currentUser?.businessId
-+                
-+                if (businessId == null) {
-+                    _state.value = _state.value.copy(
-+                        error = "No business context available",
-+                        isLoading = false
-+                    )
-+                    return@launch
-+                }
-+
-                 // Get all checks
-                 val checks = checklistRepository.getAllChecks()
--                
-+
-                 // Process checks to find safety alerts (failed non-critical items)
-                 val alerts = mutableListOf<SafetyAlert>()
--                
-+
-                 checks.forEach { check ->
-                     // Get vehicle info
--                    val vehicle = vehicleRepository.getVehicle(check.vehicleId)
-+                    val vehicle = vehicleRepository.getVehicle(check.vehicleId, businessId)
-                     // Get operator info
-                     val operator = userRepository.getUserById(check.userId)
--                    
-+
-                     // Find failed non-critical items
-                     check.items
-                         .filter { !it.isCritical && it.userAnswer == Answer.FAIL }
-@@ -65,11 +76,12 @@ class SafetyAlertsViewModel @Inject constructor(
- 
-                 _state.value = _state.value.copy(
-                     safetyAlerts = alerts.sortedByDescending { it.date },
--                    isLoading = false
-+                    isLoading = false,
-+                    error = null
-                 )
-             } catch (e: Exception) {
-                 _state.value = _state.value.copy(
--                    error = e.message,
-+                    error = "Failed to load safety alerts",
-                     isLoading = false
-                 )
-             }
-diff --git a/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryViewModel.kt b/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryViewModel.kt
-index daf10a0..4f61387 100644
---- a/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryViewModel.kt
-@@ -172,7 +172,12 @@ class CicoHistoryViewModel @Inject constructor(
-                 // Process sessions with vehicle and operator details
-                 val processedSessions = sessions.mapNotNull { session ->
-                     try {
--                        val vehicle = vehicleRepository.getVehicle(session.vehicleId)
-+                        val businessId = currentUser?.businessId
-+                        if (businessId == null) {
-+                            android.util.Log.e("CICO", "No business context available for vehicle ${session.vehicleId}")
-+                            return@mapNotNull null
-+                        }
-+                        val vehicle = vehicleRepository.getVehicle(session.vehicleId, businessId)
-                         val operatorResult = loadOperatorWithRetry(session.userId)
-                         
-                         val operator = operatorResult.getOrNull()
-diff --git a/app/src/main/java/app/forku/presentation/user/operator/OperatorsListViewModel.kt b/app/src/main/java/app/forku/presentation/user/operator/OperatorsListViewModel.kt
-index e1ff2b0..fc3099e 100644
---- a/app/src/main/java/app/forku/presentation/user/operator/OperatorsListViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/user/operator/OperatorsListViewModel.kt
-@@ -55,11 +55,23 @@ class OperatorsListViewModel @Inject constructor(
-     fun loadOperators(showLoading: Boolean = true) {
-         viewModelScope.launch {
-             try {
--                _state.value = _state.value.copy(
--                    isLoading = showLoading,
--                    isRefreshing = showLoading
--                )
--
-+                if (showLoading) {
-+                    _state.value = _state.value.copy(isLoading = true)
-+                }
-+                
-+                // Get current user's business context
-+                val currentUser = userRepository.getCurrentUser()
-+                val businessId = currentUser?.businessId
-+                
-+                if (businessId == null) {
-+                    android.util.Log.e("OperatorsList", "No business context available")
-+                    _state.value = _state.value.copy(
-+                        error = "No business context available",
-+                        isLoading = false
-+                    )
-+                    return@launch
-+                }
-+                
-                 // Get both operators and admins
-                 val operators = try {
-                     userRepository.getUsersByRole(UserRole.OPERATOR)
-@@ -79,7 +91,7 @@ class OperatorsListViewModel @Inject constructor(
-                 
-                 // Get all vehicles and their active sessions with retry
-                 val vehicles = try {
--                    vehicleRepository.getVehicles()
-+                    vehicleRepository.getVehicles(businessId)
-                 } catch (e: Exception) {
-                     android.util.Log.e("OperatorsList", "Error getting vehicles", e)
-                     emptyList()
-@@ -91,7 +103,7 @@ class OperatorsListViewModel @Inject constructor(
-                         async {
-                             try {
-                                 delay(100) // Add small delay between requests to prevent rate limiting
--                                vehicleSessionRepository.getActiveSessionForVehicle(vehicle.id)
-+                                vehicleSessionRepository.getActiveSessionForVehicle(vehicle.id, businessId)
-                             } catch (e: Exception) {
-                                 android.util.Log.e("OperatorsList", "Error getting session for vehicle ${vehicle.id}", e)
-                                 null
-diff --git a/app/src/main/java/app/forku/presentation/user/profile/ProfileViewModel.kt b/app/src/main/java/app/forku/presentation/user/profile/ProfileViewModel.kt
-index eb45484..9dee9b5 100644
---- a/app/src/main/java/app/forku/presentation/user/profile/ProfileViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/user/profile/ProfileViewModel.kt
-@@ -122,7 +122,13 @@ class ProfileViewModel @Inject constructor(
-             val OPERATING = userSessions.find { it.status == VehicleSessionStatus.OPERATING }
-             
-             val activeVehicle = OPERATING?.let { session ->
--                vehicleRepository.getVehicle(session.vehicleId)
-+                val businessId = user.businessId
-+                if (businessId != null) {
-+                    vehicleRepository.getVehicle(session.vehicleId, businessId)
-+                } else {
-+                    android.util.Log.e("ProfileViewModel", "No business context available for vehicle ${session.vehicleId}")
-+                    null
-+                }
-             }
-             
-             // Update user with current active status based on vehicle session
-diff --git a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListViewModel.kt b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListViewModel.kt
-index 5b5523d..8c9c2e4 100644
---- a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListViewModel.kt
-@@ -55,14 +55,26 @@ class VehicleListViewModel @Inject constructor(
-                     isRefreshing = showLoading
-                 )
- 
-+                val currentUser = userRepository.getCurrentUser()
-+                val businessId = currentUser?.businessId
-+                
-+                if (businessId == null) {
-+                    _state.value = _state.value.copy(
-+                        error = "No business context available",
-+                        isLoading = false,
-+                        isRefreshing = false
-+                    )
-+                    return@launch
-+                }
-+
-                 // Get all vehicles
--                val vehicles = vehicleRepository.getVehicles()
-+                val vehicles = vehicleRepository.getVehicles(businessId)
-                 
-                 // Get all active sessions with rate limiting
-                 val activeSessions = vehicles.map { vehicle ->
-                     async {
-                         try {
--                            val session = vehicleSessionRepository.getActiveSessionForVehicle(vehicle.id)
-+                            val session = vehicleSessionRepository.getActiveSessionForVehicle(vehicle.id, businessId)
-                             if (session != null) {
-                                 val operator = try {
-                                     // Add delay between requests to avoid rate limiting
-@@ -137,7 +149,7 @@ class VehicleListViewModel @Inject constructor(
-                         try {
-                             // Add delay between requests to avoid rate limiting
-                             kotlinx.coroutines.delay(300)
--                            val lastCheck = checklistRepository.getLastPreShiftCheck(vehicle.id)
-+                            val lastCheck = checklistRepository.getLastPreShiftCheck(vehicle.id, businessId)
-                             vehicle.id to lastCheck
-                         } catch (e: Exception) {
-                             // If there's an error getting the check, return null
-diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt
-index 11d6d7e..5bda21d 100644
---- a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt
-@@ -95,9 +95,23 @@ class VehicleProfileViewModel @Inject constructor(
-             try {
-                 _state.update { it.copy(isLoading = showLoading) }
-                 
-+                // Get current user and business context
-+                val currentUser = userRepository.getCurrentUser()
-+                val businessId = currentUser?.businessId
-+                
-+                if (businessId == null) {
-+                    _state.update { 
-+                        it.copy(
-+                            error = "No business context available",
-+                            isLoading = false
-+                        )
-+                    }
-+                    return@launch
-+                }
-+                
-                 // Get vehicle details with retry
-                 val vehicle = retryOnFailure {
--                    vehicleRepository.getVehicle(vehicleId)
-+                    vehicleRepository.getVehicle(vehicleId, businessId)
-                 }
-                 
-                 if (vehicle == null) {
-@@ -106,12 +120,12 @@ class VehicleProfileViewModel @Inject constructor(
-                 
-                 // Get active session with retry
-                 val activeSession = retryOnFailure {
--                    vehicleSessionRepository.getActiveSessionForVehicle(vehicleId)
-+                    vehicleSessionRepository.getActiveSessionForVehicle(vehicleId, businessId)
-                 }
-                 
-                 // Get last pre-shift check with retry
-                 val lastPreShiftCheck = retryOnFailure {
--                    checklistRepository.getLastPreShiftCheck(vehicleId)
-+                    checklistRepository.getLastPreShiftCheck(vehicleId, businessId)
-                 }
-                 
-                 // Fetch operator details if there's an active session
-@@ -233,13 +247,27 @@ class VehicleProfileViewModel @Inject constructor(
-             try {
-                 _state.update { it.copy(isLoading = true) }
-                 
-+                // Get current user and business context
-+                val currentUser = userRepository.getCurrentUser()
-+                val businessId = currentUser?.businessId
-+                
-+                if (businessId == null) {
-+                    _state.update { 
-+                        it.copy(
-+                            error = "No business context available",
-+                            isLoading = false
-+                        )
-+                    }
-+                    return@launch
-+                }
-+                
-                 // Check vehicle status first
-                 val vehicleStatus = getVehicleStatusUseCase(vehicleId)
-                 if (!vehicleStatus.isAvailable()) {
-                     throw Exception(vehicleStatus.getErrorMessage())
-                 }
-                 
--                val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId)
-+                val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId, businessId)
-                 
-                 if (lastCheck?.status == CheckStatus.COMPLETED_PASS.toString()) {
-                     val session = vehicleSessionRepository.startSession(
-@@ -299,7 +327,15 @@ class VehicleProfileViewModel @Inject constructor(
-     }
- 
-     suspend fun getLastPreShiftCheck(vehicleId: String): PreShiftCheck? {
--        return checklistRepository.getLastPreShiftCheck(vehicleId)
-+        val currentUser = userRepository.getCurrentUser()
-+        val businessId = currentUser?.businessId
-+        
-+        if (businessId == null) {
-+            android.util.Log.e("VehicleProfile", "No business context available")
-+            return null
-+        }
-+        
-+        return checklistRepository.getLastPreShiftCheck(vehicleId, businessId)
-     }
- 
-     fun endVehicleSession() {
-@@ -308,7 +344,19 @@ class VehicleProfileViewModel @Inject constructor(
-                 _state.update { it.copy(isLoading = true) }
-                 
-                 val currentUser = userRepository.getCurrentUser()
--                if (currentUser?.role != UserRole.ADMIN) {
-+                val businessId = currentUser?.businessId
-+                
-+                if (businessId == null) {
-+                    _state.update { 
-+                        it.copy(
-+                            error = "No business context available",
-+                            isLoading = false
-+                        )
-+                    }
-+                    return@launch
-+                }
-+                
-+                if (currentUser.role != UserRole.ADMIN) {
-                     _state.update { 
-                         it.copy(
-                             error = "Only administrators can end sessions",
-@@ -338,7 +386,7 @@ class VehicleProfileViewModel @Inject constructor(
- 
-                 // Update vehicle status to AVAILABLE
-                 state.value.vehicle?.id?.let { vehicleId ->
--                    vehicleRepository.updateVehicleStatus(vehicleId, VehicleStatus.AVAILABLE)
-+                    vehicleRepository.updateVehicleStatus(vehicleId, VehicleStatus.AVAILABLE, businessId)
-                 }
-                 
-                 // Reload vehicle state to reflect all changes
-@@ -362,7 +410,19 @@ class VehicleProfileViewModel @Inject constructor(
-                 _state.update { it.copy(isLoading = true) }
-                 
-                 val currentUser = userRepository.getCurrentUser()
--                if (currentUser?.role != UserRole.ADMIN) {
-+                val businessId = currentUser?.businessId
-+                
-+                if (businessId == null) {
-+                    _state.update { 
-+                        it.copy(
-+                            error = "No business context available",
-+                            isLoading = false
-+                        )
-+                    }
-+                    return@launch
-+                }
-+                
-+                if (currentUser.role != UserRole.ADMIN) {
-                     _state.update { 
-                         it.copy(
-                             error = "Only administrators can change vehicle status",
-@@ -392,7 +452,7 @@ class VehicleProfileViewModel @Inject constructor(
-                 }
- 
-                 // Update vehicle status
--                vehicleRepository.updateVehicleStatus(vehicleId, newStatus)
-+                vehicleRepository.updateVehicleStatus(vehicleId, newStatus, businessId)
-                 
-                 // Reload vehicle state to reflect changes
-                 loadVehicle(showLoading = false)
-diff --git a/current_diff_forku.txt b/current_diff_forku.txt
-index 6c52ea6..9cbd646 100644
---- a/current_diff_forku.txt
-+++ b/current_diff_forku.txt
-@@ -1,4874 +0,0 @@
--diff --git a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
--index ed2879e..aadd6bc 100644
----- a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
--+++ b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
--@@ -1,5 +1,6 @@
-- package app.forku.presentation.checklist
-- 
--+import android.util.Log
-- import androidx.activity.compose.BackHandler
-- import androidx.compose.foundation.background
-- import androidx.compose.foundation.layout.*
--@@ -42,10 +43,14 @@ fun ChecklistScreen(
--     networkManager: NetworkConnectivityManager,
--     locationManager: LocationManager
-- ) {
---    var showConfirmationDialog = remember { mutableStateOf(false) }
--+    Log.d("QRFlow", "ChecklistScreen Composable started")
--+    
--+    var showConfirmationDialog by remember { mutableStateOf(false) }
--     val state by viewModel.state.collectAsState()
---    val scrollState = rememberScrollState()
--+    val showDiscardDialog by viewModel.showDiscardDialog.collectAsState()
--+    val navigationEvent by viewModel.navigationEvent.collectAsState()
--     val scope = rememberCoroutineScope()
--+    val scrollState = rememberScrollState()
--     
--     // Remember the last answered question index and description states
--     val lastAnsweredIndex = remember { mutableStateOf(-1) }
--@@ -100,29 +105,48 @@ fun ChecklistScreen(
--         }
--     }
-- 
---    // Handle back button press
---    BackHandler {
---        when (state?.message) {
---            "admin_dashboard" -> navController.navigate(Screen.AdminDashboard.route) {
---                popUpTo(Screen.AdminDashboard.route) { inclusive = true }
--+    // Handle navigation events
--+    LaunchedEffect(navigationEvent) {
--+        Log.d("QRFlow", "ChecklistScreen - Navigation event received: $navigationEvent")
--+        val event = navigationEvent
--+        when (event) {
--+            is NavigationEvent.Back -> {
--+                Log.d("QRFlow", "ChecklistScreen - Navigating back")
--+                navController.popBackStack()
--+                viewModel.resetNavigation()
--             }
---            "dashboard" -> navController.navigate(Screen.Dashboard.route) {
---                popUpTo(Screen.Dashboard.route) { inclusive = true }
--+            is NavigationEvent.AfterSubmit -> {
--+                Log.d("QRFlow", "ChecklistScreen - Navigating after submit, isAdmin: ${event.isAdmin}")
--+                if (event.isAdmin) {
--+                    navController.navigate(Screen.AdminDashboard.route) {
--+                        popUpTo(Screen.AdminDashboard.route) { inclusive = true }
--+                    }
--+                } else {
--+                    navController.navigate(Screen.Dashboard.route) {
--+                        popUpTo(Screen.Dashboard.route) { inclusive = true }
--+                    }
--+                }
--+                viewModel.resetNavigation()
--+            }
--+            null -> {
--+                Log.d("QRFlow", "ChecklistScreen - No navigation event")
--             }
---            else -> onBackPressed()
--         }
--     }
---    
---    if (showConfirmationDialog.value) {
---        AppModal(
---            onDismiss = { showConfirmationDialog.value = false },
---            onConfirm = {
---                showConfirmationDialog.value = false
---                viewModel.submitCheck()
---            },
---            title = "Submit Checklist",
---            message = "Are you sure you want to submit this checklist?"
---        )
--+
--+    // Handle back button press
--+    BackHandler {
--+        Log.d("QRFlow", "ChecklistScreen - Back button pressed")
--+        navController.previousBackStackEntry?.destination?.route?.let { previousRoute ->
--+            Log.d("QRFlow", "ChecklistScreen - Previous route: $previousRoute")
--+            navController.popBackStack()
--+        } ?: run {
--+            Log.d("QRFlow", "ChecklistScreen - No previous route, navigating to scanner")
--+            navController.navigate(Screen.QRScanner.route) {
--+                popUpTo(navController.graph.startDestinationId) { inclusive = true }
--+            }
--+        }
--+        viewModel.resetNavigation()
--     }
-- 
--     BaseScreen(
--@@ -240,12 +264,14 @@ fun ChecklistScreen(
-- 
--                                 // Only show submit button when all items are answered
--                                 if (currentState.showSubmitButton && currentState.allAnswered) {
--+                                    Spacer(Modifier.height(4.dp))
--                                     Button(
---                                        onClick = { showConfirmationDialog.value = true },
--+                                        onClick = { showConfirmationDialog = true },
--                                         enabled = currentState.showSubmitButton && currentState.allAnswered,
--                                         modifier = Modifier
--                                             .fillMaxWidth()
---                                            .padding(16.dp),
--+                                            .height(56.dp)
--+                                            .padding(horizontal = 16.dp, vertical = 3.dp),
--                                         colors = ButtonDefaults.buttonColors(
--                                             containerColor = MaterialTheme.colorScheme.primary
--                                         )
--@@ -266,26 +292,31 @@ fun ChecklistScreen(
--                         }
--                     }
--                 }
---            }
---        }
---    )
-- 
---    // Handle navigation from viewModel
---    LaunchedEffect(viewModel.navigateBack.collectAsState().value) {
---        if (viewModel.navigateBack.value) {
---            // Check state message for navigation route
---            when (state?.message) {
---                "admin_dashboard" -> navController.navigate(Screen.AdminDashboard.route) {
---                    popUpTo(Screen.AdminDashboard.route) { inclusive = true }
--+                // Show modals on top of the content
--+                if (showConfirmationDialog) {
--+                    AppModal(
--+                        onDismiss = { showConfirmationDialog = false },
--+                        onConfirm = {
--+                            showConfirmationDialog = false
--+                            viewModel.submitCheck()
--+                        },
--+                        title = "Submit Checklist",
--+                        message = "Are you sure you want to submit this checklist?"
--+                    )
--                 }
---                "dashboard" -> navController.navigate(Screen.Dashboard.route) {
---                    popUpTo(Screen.Dashboard.route) { inclusive = true }
--+
--+                if (showDiscardDialog) {
--+                    AppModal(
--+                        onDismiss = { viewModel.onDiscardDismissed() },
--+                        onConfirm = { viewModel.onDiscardConfirmed() },
--+                        title = "Discard Checklist",
--+                        message = "Are you sure you want to discard this checklist? All progress will be lost."
--+                    )
--                 }
---                else -> onBackPressed()
--             }
---            viewModel.resetNavigation()
--         }
---    }
--+    )
-- }
-- 
-- @Composable
--diff --git a/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt b/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt
--index e1b5f7a..13a967f 100644
----- a/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt
--+++ b/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt
--@@ -48,8 +48,11 @@ class ChecklistViewModel @Inject constructor(
--     private val _state = MutableStateFlow<ChecklistState?>(null)
--     val state = _state.asStateFlow()
-- 
---    private val _navigateBack = MutableStateFlow(false)
---    val navigateBack = _navigateBack.asStateFlow()
--+    private val _showDiscardDialog = MutableStateFlow(false)
--+    val showDiscardDialog = _showDiscardDialog.asStateFlow()
--+
--+    private val _navigationEvent = MutableStateFlow<NavigationEvent?>(null)
--+    val navigationEvent = _navigationEvent.asStateFlow()
-- 
--     private var timerJob: kotlinx.coroutines.Job? = null
-- 
--@@ -376,12 +379,33 @@ class ChecklistViewModel @Inject constructor(
--         return userRepository.getCurrentUser() != null
--     }
-- 
--+    fun hasUnsavedChanges(): Boolean {
--+        return state.value?.let { currentState ->
--+            currentState.checkItems.any { it.userAnswer != null } && !currentState.isSubmitted
--+        } ?: false
--+    }
--+
--     fun onBackPressed() {
---        _navigateBack.value = true
--+        if (hasUnsavedChanges()) {
--+            _showDiscardDialog.value = true
--+        } else {
--+            _navigationEvent.value = NavigationEvent.Back
--+        }
--+    }
--+
--+    fun onDiscardConfirmed() {
--+        _showDiscardDialog.value = false
--+        // Cancel any ongoing operations
--+        timerJob?.cancel()
--+        _navigationEvent.value = NavigationEvent.Back
--+    }
--+
--+    fun onDiscardDismissed() {
--+        _showDiscardDialog.value = false
--     }
-- 
--     fun resetNavigation() {
---        _navigateBack.value = false
--+        _navigationEvent.value = null
--     }
-- 
--     fun submitCheck() {
--@@ -468,14 +492,12 @@ class ChecklistViewModel @Inject constructor(
--                         isCompleted = true,
--                         checkItems = updatedCheck.items,
--                         checkStatus = updatedCheck.status,
---                        isSubmitted = true,
---                        // Set navigation route based on user role
---                        message = if (isAdmin) "admin_dashboard" else "dashboard"
--+                        isSubmitted = true
--                     )
--                 }
-- 
---                // Navigate back
---                _navigateBack.update { true }
--+                // Trigger navigation based on user role
--+                _navigationEvent.value = NavigationEvent.AfterSubmit(isAdmin)
-- 
--             } catch (e: Exception) {
--                 _state.update {
--@@ -519,4 +541,9 @@ class ChecklistViewModel @Inject constructor(
--             }
--         }
--     }
--+}
--+
--+sealed class NavigationEvent {
--+    object Back : NavigationEvent()
--+    data class AfterSubmit(val isAdmin: Boolean) : NavigationEvent()
-- }
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
--index 1c3b3b2..99ed634 100644
----- a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
--+++ b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
--@@ -124,7 +124,7 @@ fun NavGraph(
--         composable(Screen.QRScanner.route) {
--             QRScannerScreen(
--                 onNavigateToPreShiftCheck = { vehicleId ->
---                    navController.navigate("checklist/${vehicleId}?fromScanner=true")
--+                    navController.navigate(Screen.Checklist.createRoute(vehicleId, fromScanner = true))
--                 },
--                 onNavigateToVehicleProfile = { vehicleId ->
--                     navController.navigate(Screen.VehicleProfile.route.replace("{vehicleId}", vehicleId))
--@@ -132,7 +132,8 @@ fun NavGraph(
--                 onNavigateBack = {
--                     navController.popBackStack()
--                 },
---                networkManager = networkManager
--+                networkManager = networkManager,
--+                navController = navController
--             )
--         }
-- 
--@@ -161,7 +162,7 @@ fun NavGraph(
--                 navController = navController,
--                 onBackPressed = {
--                     if (fromScanner) {
---                        navController.navigate(Screen.VehicleProfile.route.replace("{vehicleId}", vehicleId)) {
--+                        navController.navigate(Screen.QRScanner.route) {
--                             popUpTo(Screen.QRScanner.route) { inclusive = true }
--                         }
--                     } else {
--diff --git a/app/src/main/java/app/forku/presentation/navigation/Screen.kt b/app/src/main/java/app/forku/presentation/navigation/Screen.kt
--index 9f553ef..38c5cfe 100644
----- a/app/src/main/java/app/forku/presentation/navigation/Screen.kt
--+++ b/app/src/main/java/app/forku/presentation/navigation/Screen.kt
--@@ -7,10 +7,17 @@ sealed class Screen(val route: String) {
--     data object QRScanner : Screen("qr_scanner")
--     data object VehicleProfile : Screen("vehicle_profile/{vehicleId}")
--     data object Checklist : Screen("checklist/{vehicleId}") {
---        fun createRoute(vehicleId: String, checkId: String? = null): String = buildString {
--+        fun createRoute(vehicleId: String, checkId: String? = null, fromScanner: Boolean = false): String = buildString {
--             append("checklist/$vehicleId")
---            if (checkId != null) {
---                append("?checkId=$checkId")
--+            if (checkId != null || fromScanner) {
--+                append("?")
--+                if (checkId != null) {
--+                    append("checkId=$checkId")
--+                    if (fromScanner) append("&")
--+                }
--+                if (fromScanner) {
--+                    append("fromScanner=true")
--+                }
--             }
--         }
--     }
--diff --git a/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt b/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt
--index a194784..068a51f 100644
----- a/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt
--+++ b/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt
--@@ -4,6 +4,7 @@ import android.Manifest
-- import android.content.Context
-- import android.util.Log
-- import android.widget.Toast
--+import androidx.activity.compose.BackHandler
-- import androidx.camera.core.*
-- import androidx.camera.lifecycle.ProcessCameraProvider
-- import androidx.camera.view.PreviewView
--@@ -33,6 +34,9 @@ import com.google.accompanist.permissions.rememberPermissionState
-- import com.google.mlkit.vision.barcode.BarcodeScanning
-- import com.google.mlkit.vision.common.InputImage
-- import java.util.concurrent.Executors
--+import androidx.navigation.NavController
--+import app.forku.presentation.common.components.BaseScreen
--+import app.forku.presentation.navigation.Screen
-- 
-- @OptIn(ExperimentalPermissionsApi::class, ExperimentalMaterial3Api::class)
-- @Composable
--@@ -41,7 +45,8 @@ fun QRScannerScreen(
--     onNavigateToVehicleProfile: (String) -> Unit,
--     onNavigateBack: () -> Unit,
--     viewModel: QRScannerViewModel = hiltViewModel(),
---    networkManager: NetworkConnectivityManager
--+    networkManager: NetworkConnectivityManager,
--+    navController: NavController
-- ) {
--     val state by viewModel.state.collectAsStateWithLifecycle()
--     val context = LocalContext.current
--@@ -49,14 +54,22 @@ fun QRScannerScreen(
--     val cameraProviderFuture = remember { ProcessCameraProvider.getInstance(context) }
--     val executor = remember { Executors.newSingleThreadExecutor() }
--     
--+    // Control flags for scanning and navigation
--+    var isScanning by remember { mutableStateOf(true) }
--+    var hasNavigated by remember { mutableStateOf(false) }
--+    var lastScannedCode by remember { mutableStateOf<String?>(null) }
--+    var isProcessingNavigation by remember { mutableStateOf(false) }
--+    
--+    Log.d("QRFlow", "Screen State - isScanning: $isScanning, hasNavigated: $hasNavigated, isProcessingNavigation: $isProcessingNavigation")
--+    
--     DisposableEffect(lifecycleOwner) {
--         onDispose {
--             try {
---                // Unbind all use cases and release camera resources
--+                Log.d("QRFlow", "Disposing camera resources")
--                 cameraProviderFuture.get()?.unbindAll()
--                 executor.shutdown()
--             } catch (e: Exception) {
---                Log.e("QRScanner", "Failed to cleanup camera resources", e)
--+                Log.e("QRFlow", "Failed to cleanup camera resources", e)
--             }
--         }
--     }
--@@ -67,17 +80,49 @@ fun QRScannerScreen(
-- 
--     val previewView = remember { PreviewView(context) }
-- 
---    // Handle navigation events
--+    // Handle navigation events with protection against multiple navigations
--     LaunchedEffect(state) {
---        state.vehicle?.id?.let { vehicleId ->
---            if (state.navigateToChecklist) {
---                onNavigateToPreShiftCheck(vehicleId)
---            } else if (state.navigateToProfile) {
---                onNavigateToVehicleProfile(vehicleId)
--+        Log.d("QRFlow", "Navigation LaunchedEffect triggered - hasNavigated: $hasNavigated, isProcessingNavigation: $isProcessingNavigation")
--+        Log.d("QRFlow", "Current state: navigateToChecklist: ${state.navigateToChecklist}, vehicle: ${state.vehicle?.id}")
--+        
--+        if (!hasNavigated && !isProcessingNavigation) {
--+            state.vehicle?.id?.let { vehicleId ->
--+                if (state.navigateToChecklist) {
--+                    Log.d("QRFlow", "Starting navigation to Checklist with vehicleId: $vehicleId")
--+                    isProcessingNavigation = true
--+                    hasNavigated = true
--+                    navController.navigate("checklist/${vehicleId}") {
--+                        popUpTo("scanner") { inclusive = true }
--+                    }
--+                    Log.d("QRFlow", "Navigation command executed - hasNavigated: $hasNavigated")
--+                    // Reset the state after navigation
--+                    viewModel.resetNavigationState()
--+                }
--             }
--         }
--     }
-- 
--+    // Reset scanning state when returning to this screen
--+    LaunchedEffect(Unit) {
--+        Log.d("QRFlow", "QRScanner screen entered/re-entered")
--+        isScanning = true
--+        hasNavigated = false
--+        isProcessingNavigation = false
--+        lastScannedCode = null
--+        viewModel.resetNavigationState()
--+    }
--+
--+    // Reset scanning state when state.error is not null
--+    LaunchedEffect(state.error) {
--+        if (state.error != null) {
--+            Log.d("QRFlow", "Error detected, resetting states - Error: ${state.error}")
--+            isScanning = true
--+            hasNavigated = false
--+            isProcessingNavigation = false
--+            lastScannedCode = null
--+        }
--+    }
--+
--     // Request camera permission
--     LaunchedEffect(Unit) {
--         if (!cameraPermissionState.status.isGranted) {
--@@ -85,161 +130,127 @@ fun QRScannerScreen(
--         }
--     }
-- 
---    LaunchedEffect(cameraProviderFuture) {
---        val cameraProvider = cameraProviderFuture.get()
---        val preview = Preview.Builder().build()
---        preview.setSurfaceProvider(previewView.surfaceProvider)
---
---        val imageAnalysis = ImageAnalysis.Builder()
---            .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
---            .build()
---
---        imageAnalysis.setAnalyzer(executor) { imageProxy ->
---            val mediaImage = imageProxy.image
---            if (mediaImage != null) {
---                val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
---                val scanner = BarcodeScanning.getClient()
---                
---                scanner.process(image)
---                    .addOnSuccessListener { barcodes ->
---                        barcodes.firstOrNull()?.rawValue?.let { code ->
---                            viewModel.onQrScanned(code)
---                        }
---                    }
---                    .addOnCompleteListener {
---                        imageProxy.close()
---                    }
---            } else {
---                imageProxy.close()
---            }
---        }
--+    BaseScreen(
--+        navController = navController,
--+        showTopBar = true,
--+        showBottomBar = false,
--+        showBackButton = true,
--+        topBarTitle = "Scan Vehicle QR",
--+        networkManager = networkManager,
--+        content = { padding ->
--+            Box(
--+                modifier = Modifier
--+                    .fillMaxSize()
--+                    .padding(padding)
--+            ) {
--+                if (cameraPermissionState.status.isGranted) {
--+                    AndroidView(
--+                        factory = { previewView },
--+                        modifier = Modifier.fillMaxSize()
--+                    ) { preview ->
--+                        cameraProviderFuture.addListener({
--+                            Log.d("QRFlow", "Setting up camera preview")
--+                            val cameraProvider = cameraProviderFuture.get()
--+                            val preview = Preview.Builder().build()
--+                            preview.setSurfaceProvider(previewView.surfaceProvider)
-- 
---        try {
---            cameraProvider.unbindAll()
---            cameraProvider.bindToLifecycle(
---                lifecycleOwner,
---                CameraSelector.DEFAULT_BACK_CAMERA,
---                preview,
---                imageAnalysis
---            )
---        } catch (e: Exception) {
---            e.printStackTrace()
---        }
---    }
--+                            val imageAnalysis = ImageAnalysis.Builder()
--+                                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
--+                                .build()
-- 
---    Scaffold(
---        topBar = {
---            TopAppBar(
---                title = { Text("Scan Vehicle QR") },
---                navigationIcon = {
---                    IconButton(onClick = onNavigateBack) {
---                        Icon(Icons.Default.ArrowBack, "Back")
---                    }
---                }
---            )
---        }
---    ) { padding ->
---        Box(
---            modifier = Modifier
---                .fillMaxSize()
---                .padding(padding)
---        ) {
---            if (cameraPermissionState.status.isGranted) {
---                AndroidView(
---                    factory = { previewView },
---                    modifier = Modifier.fillMaxSize()
---                ) { preview ->
---                    setupQrCodeScanning(
---                        context = context,
---                        lifecycleOwner = lifecycleOwner,
---                        previewView = preview,
---                        onQrCodeScanned = { code ->
---                            viewModel.onQrScanned(code)
---                        }
---                    )
---                }
--+                            imageAnalysis.setAnalyzer(executor) { imageProxy ->
--+                                if (!isScanning || hasNavigated) {
--+                                    Log.d("QRFlow", "Skipping image analysis - isScanning: $isScanning, hasNavigated: $hasNavigated")
--+                                    imageProxy.close()
--+                                    return@setAnalyzer
--+                                }
-- 
---                // QR frame overlay
---                Box(
---                    modifier = Modifier
---                        .fillMaxSize(),
---                    contentAlignment = Alignment.Center
---                ) {
---                    QRCodeFrame()
---                }
---            } else {
---                Column(
---                    modifier = Modifier
---                        .fillMaxSize()
---                        .padding(16.dp),
---                    horizontalAlignment = Alignment.CenterHorizontally,
---                    verticalArrangement = Arrangement.Center
---                ) {
---                    Text("Camera permission is required to scan QR codes")
---                    Spacer(modifier = Modifier.height(16.dp))
---                    Button(onClick = { cameraPermissionState.launchPermissionRequest() }) {
---                        Text("Grant Permission")
---                    }
---                }
---            }
--+                                val mediaImage = imageProxy.image
--+                                if (mediaImage != null) {
--+                                    val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
--+                                    val scanner = BarcodeScanning.getClient()
--+                                    
--+                                    scanner.process(image)
--+                                        .addOnSuccessListener { barcodes ->
--+                                            barcodes.firstOrNull()?.rawValue?.let { code ->
--+                                                Log.d("QRFlow", "QR Code detected: $code")
--+                                                // Only process if this code hasn't been scanned before and we're not navigating
--+                                                if (lastScannedCode != code && isScanning && !hasNavigated && !isProcessingNavigation) {
--+                                                    Log.d("QRFlow", "Processing new QR code - lastScannedCode: $lastScannedCode")
--+                                                    lastScannedCode = code
--+                                                    isScanning = false
--+                                                    viewModel.onQrScanned(code)
--+                                                    Log.d("QRFlow", "QR code processed - isScanning: $isScanning, hasNavigated: $hasNavigated")
--+                                                } else {
--+                                                    Log.d("QRFlow", "Skipping QR code - already processed or navigation in progress")
--+                                                }
--+                                            }
--+                                        }
--+                                        .addOnCompleteListener {
--+                                            imageProxy.close()
--+                                        }
--+                                } else {
--+                                    imageProxy.close()
--+                                }
--+                            }
-- 
---            if (state.error != null) {
---                Toast.makeText(context, state.error, Toast.LENGTH_SHORT).show()
---            }
---        }
---    }
---}
--+                            try {
--+                                Log.d("QRFlow", "Binding camera lifecycle")
--+                                cameraProvider.unbindAll()
--+                                cameraProvider.bindToLifecycle(
--+                                    lifecycleOwner,
--+                                    CameraSelector.DEFAULT_BACK_CAMERA,
--+                                    preview,
--+                                    imageAnalysis
--+                                )
--+                            } catch (e: Exception) {
--+                                Log.e("QRFlow", "Error binding camera lifecycle", e)
--+                                e.printStackTrace()
--+                            }
--+                        }, ContextCompat.getMainExecutor(context))
--+                    }
-- 
---private fun setupQrCodeScanning(
---    context: Context,
---    lifecycleOwner: LifecycleOwner,
---    previewView: PreviewView,
---    onQrCodeScanned: (String) -> Unit
---) {
---    val cameraProviderFuture = ProcessCameraProvider.getInstance(context)
---    val executor = Executors.newSingleThreadExecutor()
---    
---    cameraProviderFuture.addListener({
---        val cameraProvider = cameraProviderFuture.get()
---        val preview = Preview.Builder().build()
---        preview.setSurfaceProvider(previewView.surfaceProvider)
---
---        val imageAnalysis = ImageAnalysis.Builder()
---            .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
---            .build()
---
---        imageAnalysis.setAnalyzer(executor) { imageProxy ->
---            val mediaImage = imageProxy.image
---            if (mediaImage != null) {
---                val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
---                val scanner = BarcodeScanning.getClient()
---                
---                scanner.process(image)
---                    .addOnSuccessListener { barcodes ->
---                        barcodes.firstOrNull()?.rawValue?.let { code ->
---                            onQrCodeScanned(code)
---                        }
--+                    Box(
--+                        modifier = Modifier
--+                            .fillMaxSize(),
--+                        contentAlignment = Alignment.Center
--+                    ) {
--+                        QRCodeFrame()
--                     }
---                    .addOnCompleteListener {
---                        imageProxy.close()
--+                } else {
--+                    Log.d("QRFlow", "Camera permission not granted")
--+                    Column(
--+                        modifier = Modifier
--+                            .fillMaxSize()
--+                            .padding(16.dp),
--+                        horizontalAlignment = Alignment.CenterHorizontally,
--+                        verticalArrangement = Arrangement.Center
--+                    ) {
--+                        Text("Camera permission is required to scan QR codes")
--+                        Spacer(modifier = Modifier.height(16.dp))
--+                        Button(onClick = { cameraPermissionState.launchPermissionRequest() }) {
--+                            Text("Grant Permission")
--+                        }
--                     }
---            } else {
---                imageProxy.close()
--+                }
--+
--+                if (state.error != null) {
--+                    Log.d("QRFlow", "Showing error toast: ${state.error}")
--+                    Toast.makeText(context, state.error, Toast.LENGTH_SHORT).show()
--+                }
--             }
--         }
--+    )
-- 
---        try {
---            cameraProvider.unbindAll()
---            cameraProvider.bindToLifecycle(
---                lifecycleOwner,
---                CameraSelector.DEFAULT_BACK_CAMERA,
---                preview,
---                imageAnalysis
---            )
---        } catch (e: Exception) {
---            e.printStackTrace()
--+    BackHandler {
--+        Log.d("QRFlow", "Back button pressed - isProcessingNavigation: $isProcessingNavigation")
--+        if (!isProcessingNavigation) {
--+            Log.d("QRFlow", "Executing back navigation")
--+            onNavigateBack()
--+        } else {
--+            Log.d("QRFlow", "Back navigation ignored - navigation in progress")
--         }
---    }, ContextCompat.getMainExecutor(context))
--+    }
-- }
-- 
-- @Composable
--diff --git a/app/src/main/java/app/forku/presentation/scanner/QRScannerViewModel.kt b/app/src/main/java/app/forku/presentation/scanner/QRScannerViewModel.kt
--index 38d2efb..d7b363e 100644
----- a/app/src/main/java/app/forku/presentation/scanner/QRScannerViewModel.kt
--+++ b/app/src/main/java/app/forku/presentation/scanner/QRScannerViewModel.kt
--@@ -7,6 +7,7 @@ import app.forku.domain.repository.vehicle.VehicleRepository
-- import app.forku.domain.repository.checklist.ChecklistRepository
-- import app.forku.domain.repository.session.VehicleSessionRepository
-- import dagger.hilt.android.lifecycle.HiltViewModel
--+import kotlinx.coroutines.delay
-- import kotlinx.coroutines.flow.MutableStateFlow
-- import kotlinx.coroutines.flow.asStateFlow
-- import kotlinx.coroutines.flow.update
--@@ -24,6 +25,9 @@ class QRScannerViewModel @Inject constructor(
--     val state = _state.asStateFlow()
-- 
--     private var cameraProvider: ProcessCameraProvider? = null
--+    private var isProcessingQR = false
--+    private var lastScannedCode: String? = null
--+    private val scanCooldown = 2000L // 2 seconds cooldown between scans
--     
--     override fun onCleared() {
--         super.onCleared()
--@@ -32,8 +36,15 @@ class QRScannerViewModel @Inject constructor(
--     }
-- 
--     fun onQrScanned(code: String) {
--+        // If we're already processing a QR or this is the same code within cooldown, ignore
--+        if (isProcessingQR || code == lastScannedCode) {
--+            return
--+        }
--+
--         viewModelScope.launch {
--             try {
--+                isProcessingQR = true
--+                lastScannedCode = code
--                 _state.update { it.copy(isLoading = true) }
--                 
--                 // Get vehicle without availability check first
--@@ -54,6 +65,11 @@ class QRScannerViewModel @Inject constructor(
--                         navigateToProfile = !shouldNavigateToChecklist // Only navigate to profile if not going to checklist
--                     )
--                 }
--+
--+                // Reset the scanning lock after cooldown
--+                delay(scanCooldown)
--+                isProcessingQR = false
--+                lastScannedCode = null
--             } catch (e: Exception) {
--                 _state.update { 
--                     it.copy(
--@@ -61,7 +77,24 @@ class QRScannerViewModel @Inject constructor(
--                         isLoading = false
--                     )
--                 }
--+                isProcessingQR = false
--+                lastScannedCode = null
--             }
--         }
--     }
--+
--+    fun resetNavigationState() {
--+        _state.update { 
--+            it.copy(
--+                vehicle = null,
--+                navigateToChecklist = false,
--+                navigateToProfile = false,
--+                canStartCheck = false,
--+                isLoading = false,
--+                error = null
--+            )
--+        }
--+        isProcessingQR = false
--+        lastScannedCode = null
--+    }
-- }
--diff --git a/current_diff_forku.txt b/current_diff_forku.txt
--index 8eb7ec3..76917d1 100644
----- a/current_diff_forku.txt
--+++ b/current_diff_forku.txt
--@@ -1,4109 +0,0 @@
---diff --git a/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt
---index da4487b..ade55de 100644
------ a/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt
---+++ b/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt
---@@ -186,14 +186,14 @@ class ChecklistRepositoryImpl @Inject constructor(
---     override suspend fun createGlobalCheck(check: PreShiftCheck): PreShiftCheck {
---         val dto = check.toDto()
---         val response = api.createGlobalCheck(dto)
----        if (!response.isSuccessful) throw Exception("Failed to save global check")
---+        if (!response.isSuccessful) throw Exception("Failed to save global checklist")
---         return response.body()?.toDomain() ?: throw Exception("Failed to save global check: Empty response")
---     }
--- 
---     override suspend fun updateGlobalCheck(checkId: String, check: PreShiftCheck): PreShiftCheck {
---         val dto = check.toDto()
---         val response = api.updateGlobalCheck(checkId, dto)
----        if (!response.isSuccessful) throw Exception("Failed to update global check")
---+        if (!response.isSuccessful) throw Exception("Failed to update global checklist")
---         return response.body()?.toDomain() ?: throw Exception("Failed to update global check: Empty response")
---     }
--- 
---diff --git a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
---index d126b87..ed2879e 100644
------ a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
---+++ b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
---@@ -130,7 +130,7 @@ fun ChecklistScreen(
---         showTopBar = true,
---         showBottomBar = false,
---         viewModel = viewModel,
----        topBarTitle = "Pre-Shift Check",
---+        topBarTitle = "Pre-Shift Checklist",
---         networkManager = networkManager,
---         onRefresh = { viewModel.loadChecklistData() },
---         content = { padding ->
---diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
---index bfc7034..d36fff1 100644
------ a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
---+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
---@@ -455,13 +455,13 @@ private fun DashboardNavigationButtons(
---                     imageVector = if (hasActiveSession) Icons.Default.Close else Icons.Default.QrCodeScanner,
---                     contentDescription = null,
---                     tint = MaterialTheme.colorScheme.primary.copy(alpha = iconAlpha.coerceIn(0f, 1f)),
----                    modifier = Modifier.size(28.dp)
---+                    modifier = Modifier.size(36.dp)
---                 )
---                 Spacer(modifier = Modifier.height(2.dp))
---                 Text(
---                     text = if (hasActiveSession) "Check Out" else "Check In",
---                     style = MaterialTheme.typography.labelSmall.copy(
----                        fontSize = 10.sp
---+                        fontSize = 16.sp
---                     ),
---                     color = MaterialTheme.colorScheme.primary.copy(alpha = iconAlpha.coerceIn(0f, 1f))
---                 )
---diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
---index 4a01a84..fa4ed2d 100644
------ a/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
---+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
---@@ -161,11 +161,11 @@ class DashboardViewModel @Inject constructor(
---                 getVehicleUseCase(it.vehicleId)
---             }
---             
----            android.util.Log.d("DashboardViewModel", "Getting last pre-shift check")
---+            android.util.Log.d("DashboardViewModel", "Getting last pre-shift checklist")
---             val lastPreShiftCheck = try {
---                 getLastPreShiftCheckCurrentUserUseCase()
---             } catch (e: Exception) {
----                android.util.Log.e("DashboardViewModel", "Error getting last pre-shift check", e)
---+                android.util.Log.e("DashboardViewModel", "Error getting last pre-shift checklist", e)
---                 null
---             }
---             
---diff --git a/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt b/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
---index d2c3471..7e68bd3 100644
------ a/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
---+++ b/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
---@@ -183,7 +183,7 @@ private fun SessionContent(
---                             ) {
---                                 Row {
---                                     Text(
----                                        text = "Last Check",
---+                                        text = "Checklist",
---                                         style = MaterialTheme.typography.bodySmall.copy(
---                                             fontSize = 11.sp
---                                         )
---diff --git a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
---index 75f4e82..441cc9d 100644
------ a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
---+++ b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
---@@ -216,7 +216,7 @@ class IncidentReportViewModel @Inject constructor(
---                 }
---                 hasLoadedChecks = true
---             } catch (e: Exception) {
----                _state.update { it.copy(error = "Failed to load preshift check") }
---+                _state.update { it.copy(error = "Failed to load preshift checklist") }
---             }
---         }
---     }
---diff --git a/app/src/main/java/app/forku/presentation/incident/components/VehicleInfoSection.kt b/app/src/main/java/app/forku/presentation/incident/components/VehicleInfoSection.kt
---index 060ba24..1bdf118 100644
------ a/app/src/main/java/app/forku/presentation/incident/components/VehicleInfoSection.kt
---+++ b/app/src/main/java/app/forku/presentation/incident/components/VehicleInfoSection.kt
---@@ -93,7 +93,7 @@ fun VehicleInfoSection(
---         CustomOutlinedTextField(
---             value = state.lastPreshiftCheck?.let { getRelativeTimeSpanFromDateTime(it) } ?: "No preshift check recorded",
---             onValueChange = { /* Read-only */ },
----            label = "Last Check",
---+            label = "Checklist",
---             enabled = false,
---             modifier = Modifier
---                 .fillMaxWidth()
---diff --git a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleItem.kt b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleItem.kt
---index 919fa27..2026e1b 100644
------ a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleItem.kt
---+++ b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleItem.kt
---@@ -208,7 +208,7 @@ fun VehicleItem(
---                         modifier = Modifier.padding(top = 1.dp)
---                     ) {
---                         Text(
----                            text = "Last Check: ",
---+                            text = "Checklist: ",
---                             style = TextStyle(
---                                 fontSize = textConfigs.preshiftCheck.fontSize.sp,
---                                 lineHeight = textConfigs.preshiftCheck.lineHeight.sp,
---diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
---index f152051..cfe53d3 100644
------ a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
---+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
---@@ -184,7 +184,7 @@ fun VehicleProfileScreen(
--- 
---                                 // Options available to all users
---                                 add(DropdownMenuOption(
----                                    text = if (state.hasActivePreShiftCheck) "Continue Pre-Shift Check" else "Start Pre-Shift Check",
---+                                    text = if (state.hasActivePreShiftCheck) "Continue Checklist" else "Start Checklist",
---                                     onClick = { onPreShiftCheck(vehicle?.id ?: "") },
---                                     leadingIcon = Icons.Default.CheckCircle,
---                                     enabled = vehicle?.status == VehicleStatus.AVAILABLE && !state.hasActiveSession
---diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
---index 7b88430..c26e91d 100644
------ a/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
---+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
---@@ -277,7 +277,7 @@ fun VehicleDetailsSection(
---                 Row {
---                     Column {
---                         Text(
----                            text = "Last Check ",
---+                            text = "Checklist ",
---                             color = Color.Gray,
---                             fontSize = 12.sp
---                         )
---diff --git a/current_diff_forku.txt b/current_diff_forku.txt
---index 15174cb..8167669 100644
------ a/current_diff_forku.txt
---+++ b/current_diff_forku.txt
---@@ -1,3954 +0,0 @@
----diff --git a/.cursorrules b/.cursorrules
----index f6b91ae..1b078fe 100644
------- a/.cursorrules
----+++ b/.cursorrules
----@@ -9,8 +9,8 @@ Could you provide a structured summary of our work session today? Please include
----    - Initial complexity assessment (Low/Medium/High)
---- 
---- 3. Time & Value Analysis:
-----   - Time spent with AI assistance and multiply by 8: [X] minutes/hours
-----   - Estimated traditional development and multiply by 8: [X] minutes/hours
----+   - Time spent with AI assistance: [X] minutes/hours
----+   - Estimated traditional development: [X] minutes/hours
----    - Key factors in time savings:
----      • [Specific ways AI accelerated the work]
----      • [Tools or approaches that were particularly effective]
----diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
----index 4178654..96e11f5 100644
------- a/.idea/deploymentTargetSelector.xml
----+++ b/.idea/deploymentTargetSelector.xml
----@@ -4,7 +4,7 @@
----     <selectionStates>
----       <SelectionState runConfigName="app">
----         <option name="selectionMode" value="DROPDOWN" />
-----        <DropdownSelection timestamp="2025-03-09T03:11:00.924348Z">
----+        <DropdownSelection timestamp="2025-03-12T20:10:44.969999Z">
----           <Target type="DEFAULT_BOOT">
----             <handle>
----               <DeviceId pluginId="PhysicalDevice" identifier="serial=R58T127FYWT" />
----diff --git a/app/build.gradle.kts b/app/build.gradle.kts
----index 99013c4..c3a3079 100644
------- a/app/build.gradle.kts
----+++ b/app/build.gradle.kts
----@@ -8,6 +8,7 @@ plugins {
----     alias(libs.plugins.hilt.android)
----     alias(libs.plugins.kotlin.ksp)
----     alias(libs.plugins.kotlin.serialization)
----+    alias(libs.plugins.google.services)
----     kotlin("kapt")
---- }
---- 
----@@ -29,6 +30,10 @@ android {
----             useSupportLibrary = true
----         }
---- 
----+        ndk {
----+            abiFilters += listOf("arm64-v8a", "armeabi-v7a", "x86_64", "x86")
----+        }
----+
----         ksp {
----             arg("room.schemaLocation", "$projectDir/schemas")
----         }
----@@ -171,4 +176,8 @@ dependencies {
----     implementation(libs.androidx.compose.material.icons.core)
----     implementation(libs.androidx.compose.material.icons.extended)
---- 
----+    // Firebase
----+    implementation(platform(libs.firebase.bom))
----+    implementation(libs.firebase.analytics)
----+    implementation(libs.firebase.messaging)
---- }
----\ No newline at end of file
----diff --git a/app/google-services.json b/app/google-services.json
----new file mode 100644
----index 0000000..bd43030
------- /dev/null
----+++ b/app/google-services.json
----@@ -0,0 +1,29 @@
----+{
----+  "project_info": {
----+    "project_number": "238145798774",
----+    "project_id": "forku-1800d",
----+    "storage_bucket": "forku-1800d.firebasestorage.app"
----+  },
----+  "client": [
----+    {
----+      "client_info": {
----+        "mobilesdk_app_id": "1:238145798774:android:f68955833a23698cbc1557",
----+        "android_client_info": {
----+          "package_name": "app.forku"
----+        }
----+      },
----+      "oauth_client": [],
----+      "api_key": [
----+        {
----+          "current_key": "AIzaSyDENsT7S-iAo5fm2o64F3S5YTi5LXwaXQ4"
----+        }
----+      ],
----+      "services": {
----+        "appinvite_service": {
----+          "other_platform_oauth_client": []
----+        }
----+      }
----+    }
----+  ],
----+  "configuration_version": "1"
----+}
----\ No newline at end of file
----diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
----index 741ebff..7503870 100644
------- a/app/src/main/AndroidManifest.xml
----+++ b/app/src/main/AndroidManifest.xml
----@@ -18,6 +18,7 @@
---- 
----     <application
----         android:name=".ForkUApplication"
----+        android:enableOnBackInvokedCallback="true"
----         android:allowBackup="true"
----         android:dataExtractionRules="@xml/data_extraction_rules"
----         android:fullBackupContent="@xml/backup_rules"
----@@ -51,6 +52,14 @@
----                 android:resource="@xml/file_paths" />
----         </provider>
---- 
----+        <service
----+            android:name=".core.notification.ForkUMessagingService"
----+            android:exported="false">
----+            <intent-filter>
----+                <action android:name="com.google.firebase.MESSAGING_EVENT" />
----+            </intent-filter>
----+        </service>
----+
----     </application>
---- 
---- </manifest>
----\ No newline at end of file
----diff --git a/app/src/main/java/app/forku/ForkUApplication.kt b/app/src/main/java/app/forku/ForkUApplication.kt
----index 6bfa0ce..1f1d635 100644
------- a/app/src/main/java/app/forku/ForkUApplication.kt
----+++ b/app/src/main/java/app/forku/ForkUApplication.kt
----@@ -7,6 +7,7 @@ import kotlinx.coroutines.CoroutineScope
---- import kotlinx.coroutines.Dispatchers
---- import kotlinx.coroutines.launch
---- import javax.inject.Inject
----+import com.google.firebase.FirebaseApp
---- 
---- @HiltAndroidApp
---- class ForkUApplication : Application() {
----@@ -15,6 +16,13 @@ class ForkUApplication : Application() {
---- 
----     override fun onCreate() {
----         super.onCreate()
----+        
----+        // Initialize Firebase first
----+        if (FirebaseApp.getApps(this).isEmpty()) {
----+            FirebaseApp.initializeApp(this)
----+        }
----+        
----+        // Then initialize other components
----         initializeAuth()
----     }
---- 
----diff --git a/app/src/main/java/app/forku/MainActivity.kt b/app/src/main/java/app/forku/MainActivity.kt
----index a36874f..11eff28 100644
------- a/app/src/main/java/app/forku/MainActivity.kt
----+++ b/app/src/main/java/app/forku/MainActivity.kt
----@@ -5,9 +5,13 @@ import android.widget.Toast
---- import androidx.activity.ComponentActivity
---- import androidx.activity.compose.setContent
---- import androidx.activity.viewModels
----+import androidx.compose.foundation.layout.fillMaxSize
----+import androidx.compose.material3.MaterialTheme
----+import androidx.compose.material3.Surface
---- import androidx.compose.runtime.collectAsState
---- import androidx.compose.runtime.getValue
-----import app.forku.data.local.TokenManager
----+import androidx.compose.ui.Modifier
----+import app.forku.data.datastore.AuthDataStore
---- import app.forku.data.local.TourPreferences
---- import app.forku.presentation.user.login.LoginState
---- import app.forku.presentation.user.login.LoginViewModel
----@@ -21,15 +25,21 @@ import javax.inject.Inject
---- import android.view.View
---- import androidx.compose.ui.graphics.toArgb
---- import app.forku.presentation.common.theme.BackgroundGray
----+import androidx.lifecycle.lifecycleScope
----+import app.forku.core.network.NetworkConnectivityManager
----+import kotlinx.coroutines.launch
---- 
---- @AndroidEntryPoint
---- class MainActivity : ComponentActivity() {
----     @Inject
-----    lateinit var tokenManager: TokenManager
----+    lateinit var authDataStore: AuthDataStore
---- 
----     @Inject
----     lateinit var tourPreferences: TourPreferences
---- 
----+    @Inject
----+    lateinit var networkManager: NetworkConnectivityManager
----+
----     private val loginViewModel: LoginViewModel by viewModels()
---- 
----     override fun onCreate(savedInstanceState: Bundle?) {
----@@ -39,9 +49,15 @@ class MainActivity : ComponentActivity() {
----                 View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR
---- 
----         super.onCreate(savedInstanceState)
----+        
----+        // Inicializar el token al inicio
----+        lifecycleScope.launch {
----+            authDataStore.initializeToken()
----+        }
----+
----         setContent {
----             val loginState by loginViewModel.state.collectAsState()
-----            val hasToken = tokenManager.getToken() != null
----+            val hasToken = authDataStore.getToken() != null
----             val tourCompleted = tourPreferences.hasTourCompleted()
---- 
----             ForkUTheme {
----@@ -61,7 +77,8 @@ class MainActivity : ComponentActivity() {
----                                 !tourCompleted -> Screen.Tour.route
----                                 loginState is LoginState.Success || hasToken -> Screen.Dashboard.route
----                                 else -> Screen.Login.route
-----                            }
----+                            },
----+                            networkManager = networkManager
----                         )
----                     }
----                 }
----diff --git a/app/src/main/java/app/forku/core/Constants.kt b/app/src/main/java/app/forku/core/Constants.kt
----index 3b5bd8e..49b7af7 100644
------- a/app/src/main/java/app/forku/core/Constants.kt
----+++ b/app/src/main/java/app/forku/core/Constants.kt
----@@ -1,8 +1,8 @@
---- package app.forku.core
---- 
---- object Constants {
-----    const val BASE_URL = "https://67ce79d2125cd5af757aa258.mockapi.io/forku/api/v2/" //Dev
-----    //const val BASE_URL = "https://67b8faf351192bd378dc5bdf.mockapi.io/forku/api/v1/" //Test
----+    //const val BASE_URL = "https://67ce79d2125cd5af757aa258.mockapi.io/forku/api/v2/" //Test
----+    const val BASE_URL = "https://67d20f4190e0670699bc531f.mockapi.io/forku/api/dev/" //Dev
----     const val API_VERSION = "v1"
---- 
---- }
----\ No newline at end of file
----diff --git a/app/src/main/java/app/forku/core/location/LocationManager.kt b/app/src/main/java/app/forku/core/location/LocationManager.kt
----index 86fffd9..a63c9b8 100644
------- a/app/src/main/java/app/forku/core/location/LocationManager.kt
----+++ b/app/src/main/java/app/forku/core/location/LocationManager.kt
----@@ -143,4 +143,39 @@ class LocationManager @Inject constructor(
----     fun clearError() {
----         _locationState.update { it.copy(error = null) }
----     }
----+
----+    fun startLocationUpdates() {
----+        coroutineScope.launch {
----+            try {
----+                val locationRequest = LocationRequest.Builder(10000)
----+                    .setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY)
----+                    .setMinUpdateIntervalMillis(5000)
----+                    .build()
----+
----+                requestLocationSettings()
----+            } catch (e: SecurityException) {
----+                _locationState.update { it.copy(
----+                    error = "Location permission error",
----+                    hasLocationPermission = false
----+                )}
----+            }
----+        }
----+    }
----+
----+    fun requestSingleUpdate() {
----+        try {
----+            val locationRequest = LocationRequest.Builder(10000)
----+                .setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY)
----+                .setMinUpdateIntervalMillis(5000)
----+                .setMaxUpdateDelayMillis(10000)
----+                .build()
----+
----+            requestLocation(locationRequest)
----+        } catch (e: SecurityException) {
----+            _locationState.update { it.copy(
----+                error = "Location permission error",
----+                hasLocationPermission = false
----+            )}
----+        }
----+    }
---- } 
----\ No newline at end of file
----diff --git a/app/src/main/java/app/forku/data/api/dto/incident/IncidentDto.kt b/app/src/main/java/app/forku/data/api/dto/incident/IncidentDto.kt
----index 34b49bb..5f24239 100644
------- a/app/src/main/java/app/forku/data/api/dto/incident/IncidentDto.kt
----+++ b/app/src/main/java/app/forku/data/api/dto/incident/IncidentDto.kt
----@@ -29,7 +29,6 @@ data class IncidentDto(
----     val loadWeight: String?,
----     
----     // People involved
-----    val operatorId: String?,
----     val othersInvolved: List<String>,
----     val injuries: String,
----     val injuryLocations: List<String>,
----diff --git a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
----index 605dd8f..64b228a 100644
------- a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
----+++ b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
----@@ -7,14 +7,14 @@ data class UserDto(
----     val email: String,
----     val password: String,
----     val username: String,
-----    val name: String,
----+    val firstName: String,
----+    val lastName: String,
----     val photoUrl: String?,
----     val role: String,
-----    val permissions: List<String>,
----     val certifications: List<CertificationDto>,
-----    val last_medical_check: String?,
-----    val last_login: String?,
-----    val is_active: Boolean = true
----+    val lastMedicalCheck: String?,
----+    val lastLogin: String?,
----+    val isActive: Boolean = true
---- )
---- 
---- data class CertificationDto(
----diff --git a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
----index 76fccaf..ab7d1a1 100644
------- a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
----+++ b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
----@@ -27,10 +27,10 @@ class AuthDataStore @Inject constructor(
----         val REFRESH_TOKEN = stringPreferencesKey("refresh_token")
----         val EMAIL = stringPreferencesKey("email")
----         val USERNAME = stringPreferencesKey("username")
-----        val NAME = stringPreferencesKey("name")
----+        val FIRST_NAME = stringPreferencesKey("first_name")
----+        val LAST_NAME = stringPreferencesKey("last_name")
----         val PHOTO_URL = stringPreferencesKey("photo_url")
----         val ROLE = stringPreferencesKey("role")
-----        val PERMISSIONS = stringSetPreferencesKey("permissions")
----         val USER_KEY = stringPreferencesKey("user")
----         val TOKEN_KEY = stringPreferencesKey("token")
----     }
----@@ -38,9 +38,13 @@ class AuthDataStore @Inject constructor(
----     @Volatile
----     private var cachedToken: String? = null
---- 
-----    fun getToken(): String? = cachedToken
----+    fun getToken(): String? {
----+        android.util.Log.d("AuthDataStore", "Getting cached token: $cachedToken")
----+        return cachedToken
----+    }
---- 
----     suspend fun setToken(token: String?) {
----+        android.util.Log.d("AuthDataStore", "Setting token: ${token?.take(10)}...")
----         cachedToken = token
----         context.dataStore.edit { preferences ->
----             if (token != null) {
----@@ -52,33 +56,84 @@ class AuthDataStore @Inject constructor(
----     }
---- 
----     suspend fun setCurrentUser(user: User) {
----+        android.util.Log.d("AuthDataStore", """
----+            Setting current user:
----+            - ID: ${user.id}
----+            - Name: ${user.fullName}
----+            - Token: ${user.token.take(10)}...
----+            - Role: ${user.role}
----+        """.trimIndent())
----+        
----         context.dataStore.edit { preferences ->
----             preferences[PreferencesKeys.USER_ID] = user.id
----             preferences[PreferencesKeys.TOKEN] = user.token
----             preferences[PreferencesKeys.REFRESH_TOKEN] = user.refreshToken
----             preferences[PreferencesKeys.EMAIL] = user.email
----             preferences[PreferencesKeys.USERNAME] = user.username
-----            preferences[PreferencesKeys.NAME] = user.name
----+            preferences[PreferencesKeys.FIRST_NAME] = user.firstName
----+            preferences[PreferencesKeys.LAST_NAME] = user.lastName
----             preferences[PreferencesKeys.PHOTO_URL] = user.photoUrl ?: ""
----             preferences[PreferencesKeys.ROLE] = user.role.name
-----            preferences[PreferencesKeys.PERMISSIONS] = user.permissions.toSet()
----             preferences[PreferencesKeys.TOKEN_KEY] = user.token
----         }
----         cachedToken = user.token
----+        android.util.Log.d("AuthDataStore", "User data stored successfully")
----     }
---- 
----     suspend fun getCurrentUser(): User? {
----         return try {
----             val preferences = context.dataStore.data.first()
-----            val userId = preferences[PreferencesKeys.USER_ID] ?: return null
-----            val token = preferences[PreferencesKeys.TOKEN] ?: return null
-----            val refreshToken = preferences[PreferencesKeys.REFRESH_TOKEN] ?: return null
-----            val email = preferences[PreferencesKeys.EMAIL] ?: return null
-----            val username = preferences[PreferencesKeys.USERNAME] ?: return null
-----            val name = preferences[PreferencesKeys.NAME] ?: return null
----+            
----+            // Log all stored preferences for debugging
----+            android.util.Log.d("AuthDataStore", """
----+                Stored preferences:
----+                - USER_ID: ${preferences[PreferencesKeys.USER_ID]}
----+                - TOKEN: ${preferences[PreferencesKeys.TOKEN]?.take(10)}...
----+                - TOKEN_KEY: ${preferences[PreferencesKeys.TOKEN_KEY]?.take(10)}...
----+                - EMAIL: ${preferences[PreferencesKeys.EMAIL]}
----+                - USERNAME: ${preferences[PreferencesKeys.USERNAME]}
----+                - FIRST_NAME: ${preferences[PreferencesKeys.FIRST_NAME]}
----+                - LAST_NAME: ${preferences[PreferencesKeys.LAST_NAME]}
----+                - ROLE: ${preferences[PreferencesKeys.ROLE]}
----+            """.trimIndent())
----+            
----+            val userId = preferences[PreferencesKeys.USER_ID]
----+            android.util.Log.d("AuthDataStore", "Getting current user - Found ID: $userId")
----+            
----+            if (userId == null) {
----+                android.util.Log.e("AuthDataStore", "No user ID found in preferences")
----+                return null
----+            }
----+            
----+            val token = preferences[PreferencesKeys.TOKEN] ?: run {
----+                android.util.Log.e("AuthDataStore", "No token found for user $userId")
----+                return null
----+            }
----+            val refreshToken = preferences[PreferencesKeys.REFRESH_TOKEN] ?: run {
----+                android.util.Log.e("AuthDataStore", "No refresh token found for user $userId")
----+                return null
----+            }
----+            val email = preferences[PreferencesKeys.EMAIL] ?: run {
----+                android.util.Log.e("AuthDataStore", "No email found for user $userId")
----+                return null
----+            }
----+            val username = preferences[PreferencesKeys.USERNAME] ?: run {
----+                android.util.Log.e("AuthDataStore", "No username found for user $userId")
----+                return null
----+            }
----+            val firstName = preferences[PreferencesKeys.FIRST_NAME] ?: run {
----+                android.util.Log.e("AuthDataStore", "No first name found for user $userId")
----+                return null
----+            }
----+            val lastName = preferences[PreferencesKeys.LAST_NAME] ?: run {
----+                android.util.Log.e("AuthDataStore", "No last name found for user $userId")
----+                return null
----+            }
----             val photoUrl = preferences[PreferencesKeys.PHOTO_URL]
-----            val role = preferences[PreferencesKeys.ROLE]?.let { UserRole.fromString(it) } ?: return null
-----            val permissions = preferences[PreferencesKeys.PERMISSIONS]?.toList() ?: emptyList()
----+            val role = preferences[PreferencesKeys.ROLE]?.let { UserRole.fromString(it) } ?: run {
----+                android.util.Log.e("AuthDataStore", "No role found for user $userId")
----+                return null
----+            }
---- 
----             User(
----                 id = userId,
----@@ -86,26 +141,38 @@ class AuthDataStore @Inject constructor(
----                 refreshToken = refreshToken,
----                 email = email,
----                 username = username,
-----                name = name,
----+                firstName = "$firstName",
----+                lastName = "$lastName",
----                 photoUrl = photoUrl?.takeIf { it.isNotEmpty() },
----                 role = role,
-----                permissions = permissions,
----                 certifications = emptyList()
-----            )
----+            ).also {
----+                android.util.Log.d("AuthDataStore", """
----+                    User retrieved successfully:
----+                    - ID: ${it.id}
----+                    - Name: ${it.fullName}
----+                    - Token: ${it.token.take(10)}...
----+                    - Role: ${it.role}
----+                """.trimIndent())
----+            }
----         } catch (e: Exception) {
----+            android.util.Log.e("AuthDataStore", "Error getting current user", e)
----             null
----         }
----     }
---- 
----     suspend fun clearAuth() {
----+        android.util.Log.d("AuthDataStore", "Clearing all auth data")
----         context.dataStore.edit { preferences ->
----             preferences.clear()
----         }
----+        cachedToken = null
----     }
---- 
----     suspend fun initializeToken() {
----         cachedToken = context.dataStore.data.map { preferences ->
----             preferences[PreferencesKeys.TOKEN_KEY]
----         }.first()
----+        android.util.Log.d("AuthDataStore", "Initialized token: ${cachedToken?.take(10)}...")
----     }
---- } 
----\ No newline at end of file
----diff --git a/app/src/main/java/app/forku/data/local/TokenManager.kt b/app/src/main/java/app/forku/data/local/TokenManager.kt
----deleted file mode 100644
----index f1cab6d..0000000
------- a/app/src/main/java/app/forku/data/local/TokenManager.kt
----+++ /dev/null
----@@ -1,41 +0,0 @@
-----package app.forku.data.local
-----
-----import android.content.Context
-----import android.content.SharedPreferences
-----import dagger.hilt.android.qualifiers.ApplicationContext
-----import javax.inject.Inject
-----import javax.inject.Singleton
-----
-----@Singleton
-----class TokenManager @Inject constructor(
-----    @ApplicationContext context: Context
-----) {
-----    private val prefs: SharedPreferences = 
-----        context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE)
-----
-----    fun saveToken(token: String, refreshToken: String) {
-----        prefs.edit()
-----            .putString(KEY_TOKEN, token)
-----            .putString(KEY_REFRESH_TOKEN, refreshToken)
-----            .apply()
-----    }
-----
-----    fun getToken(): String? {
-----        return prefs.getString(KEY_TOKEN, null)
-----    }
-----
-----    fun getRefreshToken(): String? = prefs.getString(KEY_REFRESH_TOKEN, null)
-----
-----    fun clearToken() {
-----        prefs.edit()
-----            .remove(KEY_TOKEN)
-----            .remove(KEY_REFRESH_TOKEN)
-----            .apply()
-----    }
-----
-----    companion object {
-----        private const val PREF_NAME = "ForkUPrefs"
-----        private const val KEY_TOKEN = "auth_token"
-----        private const val KEY_REFRESH_TOKEN = "refresh_token"
-----    }
-----} 
----\ No newline at end of file
----diff --git a/app/src/main/java/app/forku/data/mapper/IncidentMapper.kt b/app/src/main/java/app/forku/data/mapper/IncidentMapper.kt
----index 7d433e5..1bd4db1 100644
------- a/app/src/main/java/app/forku/data/mapper/IncidentMapper.kt
----+++ b/app/src/main/java/app/forku/data/mapper/IncidentMapper.kt
----@@ -34,7 +34,6 @@ fun Incident.toDto(): IncidentDto {
----             type = type.name,
----             data = emptyMap()
----         ),
-----        operatorId = operatorId,
----         othersInvolved = othersInvolved,
----         injuries = injuries,
----         injuryLocations = injuryLocations,
----@@ -67,7 +66,6 @@ fun IncidentDto.toDomain(): Incident {
----         severityLevel = severityLevel?.let { IncidentSeverityLevel.valueOf(it) },
----         preshiftCheckStatus = preshiftCheckStatus,
----         typeSpecificFields = typeSpecificFields.toDomain(type),
-----        operatorId = operatorId,
----         othersInvolved = othersInvolved,
----         injuries = injuries,
----         injuryLocations = injuryLocations,
----diff --git a/app/src/main/java/app/forku/data/mapper/UserMapper.kt b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
----index cbe4973..0c8fdc1 100644
------- a/app/src/main/java/app/forku/data/mapper/UserMapper.kt
----+++ b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
----@@ -8,20 +8,22 @@ import app.forku.domain.model.user.UserRole
---- import app.forku.domain.model.user.Certification
---- 
---- fun UserDto.toDomain(): User {
----+    // Split the name into first and last name
----+
----     return User(
----         id = id,
----         token = token,
----         refreshToken = refreshToken,
----         email = email,
----         username = username,
-----        name = name,
----+        firstName = firstName,
----+        lastName = lastName,
----         photoUrl = photoUrl,
----         role = UserRole.fromString(role),
-----        permissions = permissions,
----         certifications = certifications.map { it.toDomain() },
-----        lastMedicalCheck = last_medical_check,
-----        lastLogin = last_login,
-----        isActive = is_active
----+        lastMedicalCheck = lastMedicalCheck,
----+        lastLogin = lastLogin,
----+        isActive = isActive
----     )
---- }
---- 
----@@ -41,14 +43,14 @@ fun User.toDto(): UserDto {
----         email = email,
----         password = "", // No incluimos el password en la conversión a DTO
----         username = username,
-----        name = name,
----+        firstName = firstName,
----+        lastName = lastName,
----         photoUrl = photoUrl,
----         role = role.name,
-----        permissions = permissions,
----         certifications = certifications.map { it.toDto() },
-----        last_medical_check = lastMedicalCheck,
-----        last_login = lastLogin,
-----        is_active = isActive
----+        lastMedicalCheck = lastMedicalCheck,
----+        lastLogin = lastLogin,
----+        isActive = isActive
----     )
---- }
---- 
----diff --git a/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt
----index c225d34..55de3ef 100644
------- a/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt
----+++ b/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt
----@@ -14,6 +14,9 @@ class IncidentRepositoryImpl @Inject constructor(
---- ) : IncidentRepository {
----     override suspend fun reportIncident(incident: Incident): Result<Incident> {
----         return try {
----+            val currentUser = authDataStore.getCurrentUser() 
----+                ?: return Result.failure(Exception("User not authenticated"))
----+            
----             val response = api.reportIncident(incident.toDto())
----             if (response.isSuccessful) {
----                 Result.success(response.body()?.toDomain() 
----diff --git a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
----index 3d5ffda..ab6730d 100644
------- a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
----+++ b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
----@@ -7,27 +7,22 @@ import app.forku.domain.model.user.User
---- import app.forku.domain.repository.user.UserRepository
---- import app.forku.data.datastore.AuthDataStore
---- import app.forku.data.mapper.toDto
-----import app.forku.domain.model.user.Permissions
---- import app.forku.domain.model.user.UserRole
----+import app.forku.data.local.TourPreferences
---- import java.util.UUID
---- import javax.inject.Inject
---- import kotlinx.coroutines.Dispatchers
---- import kotlinx.coroutines.withContext
---- import javax.inject.Singleton
-----import android.content.SharedPreferences
---- import kotlinx.coroutines.flow.Flow
---- 
---- @Singleton
---- class UserRepositoryImpl @Inject constructor(
----     private val api: GeneralApi,
----     private val authDataStore: AuthDataStore,
-----    private val sharedPreferences: SharedPreferences
----+    private val tourPreferences: TourPreferences
---- ) : UserRepository {
----     
-----    companion object {
-----        private const val PREF_TOUR_COMPLETED = "tour_completed"
-----    }
-----
----     override suspend fun getUserById(id: String): User? {
----         return try {
----             val response = api.getUser(id)
----@@ -43,20 +38,49 @@ class UserRepositoryImpl @Inject constructor(
----             // Obtener todos los usuarios
----             val response = api.getUsers()
----             if (!response.isSuccessful) {
-----                return@withContext Result.failure(Exception("Failed to fetch users"))
----+                android.util.Log.e("appflow UserRepository", "Server error: ${response.code()}")
----+                return@withContext Result.failure(Exception("Error de servidor. Por favor intenta más tarde"))
----+            }
----+
----+            // Log the response for debugging
----+            android.util.Log.d("appflow UserRepository", "Users response: ${response.body()}")
----+
----+            // Primero verificar si existe el email
----+            val userWithEmail = response.body()?.find { it.email == email }
----+            if (userWithEmail == null) {
----+                android.util.Log.e("appflow UserRepository", "User not found with email: $email")
----+                return@withContext Result.failure(Exception("El correo electrónico no está registrado"))
----             }
---- 
-----            // Buscar usuario por email y password
----+            // Log user found
----+            android.util.Log.d("appflow UserRepository", "Found user: $userWithEmail")
----+
----+            // Luego verificar la contraseña
----             val user = response.body()?.find { 
----                 it.email == email && it.password == password 
-----            }?.toDomain() ?: return@withContext Result.failure(Exception("Invalid credentials"))
----+            }?.toDomain()
----+            
----+            if (user == null) {
----+                android.util.Log.e("appflow UserRepository", "Invalid password for email: $email")
----+                return@withContext Result.failure(Exception("Contraseña incorrecta"))
----+            }
----+
----+            // Verificar si el usuario está activo
----+            if (!user.isActive) {
----+                android.util.Log.e("appflow UserRepository", "User account is inactive: $email")
----+                return@withContext Result.failure(Exception("Tu cuenta está desactivada. Contacta al administrador"))
----+            }
----+
----+            // Log successful login
----+            android.util.Log.d("appflow UserRepository", "Successful login for user: ${user.email}")
---- 
----             // Guardar usuario en AuthDataStore
----             authDataStore.setCurrentUser(user)
----             
----             Result.success(user)
----         } catch (e: Exception) {
-----            Result.failure(e)
----+            android.util.Log.e("UserRepository", "Error during login", e)
----+            Result.failure(Exception("Error de conexión. Verifica tu internet e intenta de nuevo"))
----         }
----     }
---- 
----@@ -79,29 +103,24 @@ class UserRepositoryImpl @Inject constructor(
----             }
---- 
----             // Por defecto, los nuevos usuarios se registran con rol USER
-----            val role = UserRole.USER
-----            val permissions = when (role) {
-----                UserRole.ADMIN -> Permissions.ADMIN_PERMISSIONS
-----                UserRole.OPERATOR -> Permissions.OPERATOR_PERMISSIONS
-----                UserRole.USER -> Permissions.USER_PERMISSIONS
-----            }
-----
----+            val role = UserRole.OPERATOR
----+            
----             // Crear nuevo usuario
----             val newUser = UserDto(
----                 id = UUID.randomUUID().toString(),
----                 email = email,
----                 password = password,
----                 username = email,
-----                name = "$firstName $lastName",
----+                firstName = firstName,
----+                lastName = lastName,
----                 token = UUID.randomUUID().toString(),
----                 refreshToken = UUID.randomUUID().toString(),
----                 photoUrl = null,
----                 role = role.name,
-----                permissions = permissions.toList(),
----                 certifications = listOf(),
-----                last_medical_check = null,
-----                last_login = null,
-----                is_active = true
----+                lastMedicalCheck = null,
----+                lastLogin = null,
----+                isActive = true
----             )
---- 
----             val response = api.createUser(newUser)
----@@ -152,28 +171,21 @@ class UserRepositoryImpl @Inject constructor(
----         try {
----             val user = getUserById(userId) ?: return@withContext Result.failure(Exception("User not found"))
----             
-----            // Asignar permisos según el nuevo rol
-----            val newPermissions = when (newRole) {
-----                UserRole.ADMIN -> Permissions.ADMIN_PERMISSIONS
-----                UserRole.OPERATOR -> Permissions.OPERATOR_PERMISSIONS
-----                UserRole.USER -> Permissions.USER_PERMISSIONS
-----            }
-----
----             val updatedUserDto = UserDto(
----                 id = user.id,
----                 email = user.email,
----                 password = "", // No incluimos el password en la actualización
----                 username = user.username,
-----                name = user.name,
----+                firstName = user.firstName,
----+                lastName = user.lastName,
----                 token = user.token,
----                 refreshToken = user.refreshToken,
----                 photoUrl = user.photoUrl,
----                 role = newRole.name,
-----                permissions = newPermissions.toList(),
----                 certifications = user.certifications.map { it.toDto() },
-----                last_medical_check = user.lastMedicalCheck,
-----                last_login = user.lastLogin,
-----                is_active = true
----+                lastMedicalCheck = user.lastMedicalCheck,
----+                lastLogin = user.lastLogin,
----+                isActive = true
----             )
---- 
----             val response = api.updateUser(userId, updatedUserDto)
----@@ -204,16 +216,16 @@ class UserRepositoryImpl @Inject constructor(
----                 email = user.email,
----                 password = "", // No incluimos el password en la actualización
----                 username = user.username,
-----                name = user.name,
----+                firstName = user.firstName,
----+                lastName = user.lastName,
----                 token = user.token,
----                 refreshToken = user.refreshToken,
----                 photoUrl = user.photoUrl,
----                 role = user.role.name,
-----                permissions = user.permissions,
----                 certifications = user.certifications.map { it.toDto() },
-----                last_medical_check = user.lastMedicalCheck,
-----                last_login = user.lastLogin,
-----                is_active = user.isActive
----+                lastMedicalCheck = user.lastMedicalCheck,
----+                lastLogin = user.lastLogin,
----+                isActive = user.isActive
----             )
---- 
----             val response = api.updateUser(user.id, userDto)
----@@ -274,11 +286,11 @@ class UserRepositoryImpl @Inject constructor(
----     }
---- 
----     override suspend fun getTourCompletionStatus(): Boolean {
-----        return sharedPreferences.getBoolean(PREF_TOUR_COMPLETED, false)
----+        return tourPreferences.hasTourCompleted()
----     }
---- 
----     override suspend fun setTourCompleted() {
-----        sharedPreferences.edit().putBoolean(PREF_TOUR_COMPLETED, true).apply()
----+        tourPreferences.setTourCompleted()
----     }
---- 
----     override suspend fun getAuthToken(): String? {
----diff --git a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
----index 6f4bcdf..5c9a76a 100644
------- a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
----+++ b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
----@@ -141,20 +141,23 @@ class VehicleSessionRepositoryImpl @Inject constructor(
----     }
---- 
----     override suspend fun getActiveSessionForVehicle(vehicleId: String): VehicleSession? {
-----        return try {
-----            val response = api.getAllSessions()
-----            if (response.isSuccessful) {
-----                val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
-----                sessions.find { 
-----                    it.vehicleId == vehicleId && 
-----                    it.status == SessionStatus.ACTIVE 
-----                }
-----            } else {
-----                null
----+        android.util.Log.d("VehicleSession", "Fetching active session for vehicle: $vehicleId")
----+        val response = api.getAllSessions()
----+        if (response.isSuccessful) {
----+            android.util.Log.d("VehicleSession", "API response successful. Status code: ${response.code()}")
----+            val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
----+            android.util.Log.d("VehicleSession", "Total sessions fetched: ${sessions.size}")
----+            
----+            val activeSession = sessions.find { 
----+                it.vehicleId == vehicleId && 
----+                it.status == SessionStatus.ACTIVE 
----             }
-----        } catch (e: Exception) {
-----            null
----+            
----+            android.util.Log.d("VehicleSession", "Active session for vehicle $vehicleId: $activeSession")
----+            return activeSession
----         }
----+        android.util.Log.w("VehicleSession", "Failed to fetch sessions. Status code: ${response.code()}")
----+        return null
----     }
---- 
----     override suspend fun getOperatorSessionHistory(): List<VehicleSession> {
----diff --git a/app/src/main/java/app/forku/data/repository/weather/WeatherRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/weather/WeatherRepositoryImpl.kt
----index 0e904ef..3459ca2 100644
------- a/app/src/main/java/app/forku/data/repository/weather/WeatherRepositoryImpl.kt
----+++ b/app/src/main/java/app/forku/data/repository/weather/WeatherRepositoryImpl.kt
----@@ -29,4 +29,18 @@ class WeatherRepositoryImpl @Inject constructor(
----     } catch (e: Exception) {
----         Result.failure(e)
----     }
----+
----+    override suspend fun getCurrentWeather(latitude: Double, longitude: Double): String {
----+        return try {
----+            val weatherResult = getWeatherByCoordinates(latitude, longitude)
----+            weatherResult.fold(
----+                onSuccess = { weather ->
----+                    "${weather.description}, ${weather.temperature}°F, ${weather.humidity}% humidity"
----+                },
----+                onFailure = { "Weather data unavailable" }
----+            )
----+        } catch (e: Exception) {
----+            "Weather data unavailable"
----+        }
----+    }
---- } 
----\ No newline at end of file
----diff --git a/app/src/main/java/app/forku/di/NetworkModule.kt b/app/src/main/java/app/forku/di/NetworkModule.kt
----index e65354c..a08dd80 100644
------- a/app/src/main/java/app/forku/di/NetworkModule.kt
----+++ b/app/src/main/java/app/forku/di/NetworkModule.kt
----@@ -9,6 +9,7 @@ import app.forku.data.repository.weather.WeatherRepositoryImpl
---- import dagger.Module
---- import dagger.Provides
---- import dagger.hilt.InstallIn
----+import dagger.hilt.android.qualifiers.ApplicationContext
---- import dagger.hilt.components.SingletonComponent
---- import okhttp3.OkHttpClient
---- import okhttp3.logging.HttpLoggingInterceptor
----@@ -16,6 +17,8 @@ import retrofit2.Retrofit
---- import retrofit2.converter.gson.GsonConverterFactory
---- import javax.inject.Singleton
---- import java.util.concurrent.TimeUnit
----+import android.content.Context
----+import app.forku.core.network.NetworkConnectivityManager
---- 
---- @Module
---- @InstallIn(SingletonComponent::class)
----@@ -71,4 +74,12 @@ object NetworkModule {
----     ): WeatherRepository {
----         return WeatherRepositoryImpl(weatherApi)
----     }
----+
----+    @Provides
----+    @Singleton
----+    fun provideNetworkConnectivityManager(
----+        @ApplicationContext context: Context
----+    ): NetworkConnectivityManager {
----+        return NetworkConnectivityManager(context)
----+    }
---- }
----\ No newline at end of file
----diff --git a/app/src/main/java/app/forku/domain/model/incident/Incident.kt b/app/src/main/java/app/forku/domain/model/incident/Incident.kt
----index 592df52..0f60440 100644
------- a/app/src/main/java/app/forku/domain/model/incident/Incident.kt
----+++ b/app/src/main/java/app/forku/domain/model/incident/Incident.kt
----@@ -33,7 +33,6 @@ data class Incident(
----     val severityLevel: IncidentSeverityLevel? = null,
----     val preshiftCheckStatus: String = "",
----     val typeSpecificFields: IncidentTypeFields? = null,
-----    val operatorId: String? = null,
----     val othersInvolved: List<String> = emptyList(),
----     val injuries: String = "",
----     val injuryLocations: List<String> = emptyList(),
----diff --git a/app/src/main/java/app/forku/domain/model/user/Operator.kt b/app/src/main/java/app/forku/domain/model/user/Operator.kt
----index 7b11f57..4486605 100644
------- a/app/src/main/java/app/forku/domain/model/user/Operator.kt
----+++ b/app/src/main/java/app/forku/domain/model/user/Operator.kt
----@@ -20,7 +20,6 @@ data class Operator(
----     val id: String get() = user.id
----     val username: String get() = user.username
----     val role: UserRole get() = user.role
-----    val permissions: List<String> get() = user.permissions
----     val certifications: List<Certification> get() = user.certifications
---- 
----     fun canOperateVehicle(vehicleType: VehicleType): Boolean {
----diff --git a/app/src/main/java/app/forku/domain/model/user/Permissions.kt b/app/src/main/java/app/forku/domain/model/user/Permissions.kt
----deleted file mode 100644
----index 30558b8..0000000
------- a/app/src/main/java/app/forku/domain/model/user/Permissions.kt
----+++ /dev/null
----@@ -1,51 +0,0 @@
-----package app.forku.domain.model.user
-----
-----object Permissions {
-----    // Admin Permissions
-----    const val MANAGE_USERS = "MANAGE_USERS"
-----    const val MANAGE_VEHICLES = "MANAGE_VEHICLES"
-----    const val VIEW_ALL_REPORTS = "VIEW_ALL_REPORTS"
-----    const val MANAGE_CERTIFICATIONS = "MANAGE_CERTIFICATIONS"
-----    const val MANAGE_TRAINING = "MANAGE_TRAINING"
-----    
-----    // Operator Permissions
-----    const val OPERATE_VEHICLE = "OPERATE_VEHICLE"
-----    const val REPORT_INCIDENT = "REPORT_INCIDENT"
-----    const val VIEW_OWN_REPORTS = "VIEW_OWN_REPORTS"
-----    const val TAKE_TRAINING = "TAKE_TRAINING"
-----    
-----    // Default permission sets by role
-----    val ADMIN_PERMISSIONS = setOf(
-----        MANAGE_USERS,
-----        MANAGE_VEHICLES,
-----        VIEW_ALL_REPORTS,
-----        MANAGE_CERTIFICATIONS,
-----        MANAGE_TRAINING
-----    )
-----    
-----    val OPERATOR_PERMISSIONS = setOf(
-----        OPERATE_VEHICLE,
-----        REPORT_INCIDENT,
-----        VIEW_OWN_REPORTS,
-----        TAKE_TRAINING
-----    )
-----    
-----    val USER_PERMISSIONS = setOf(
-----        TAKE_TRAINING
-----    )
-----}
-----
-----// Extension function to check if a user has a specific permission
-----fun User.hasPermission(permission: String): Boolean {
-----    return permissions.contains(permission)
-----}
-----
-----// Extension function to check if a user has all required permissions
-----fun User.hasAllPermissions(requiredPermissions: Set<String>): Boolean {
-----    return permissions.containsAll(requiredPermissions)
-----}
-----
-----// Extension function to check if a user has any of the specified permissions
-----fun User.hasAnyPermission(permissions: Set<String>): Boolean {
-----    return this.permissions.any { it in permissions }
-----} 
----\ No newline at end of file
----diff --git a/app/src/main/java/app/forku/domain/model/user/User.kt b/app/src/main/java/app/forku/domain/model/user/User.kt
----index 2d3ccf3..c939f70 100644
------- a/app/src/main/java/app/forku/domain/model/user/User.kt
----+++ b/app/src/main/java/app/forku/domain/model/user/User.kt
----@@ -6,10 +6,10 @@ data class User(
----     val refreshToken: String,
----     val email: String,
----     val username: String,
-----    val name: String,
----+    val firstName: String,
----+    val lastName: String,
----     val photoUrl: String?,
----     val role: UserRole,
-----    val permissions: List<String>,
----     val certifications: List<Certification>,
----     val experienceLevel: String = "Rookie",
----     val points: Int = 0,
----@@ -20,4 +20,7 @@ data class User(
----     val lastMedicalCheck: String? = null,
----     val lastLogin: String? = null,
----     val isActive: Boolean = true
-----)
----\ No newline at end of file
----+) {
----+    val fullName: String
----+        get() = "$firstName $lastName"
----+}
----\ No newline at end of file
----diff --git a/app/src/main/java/app/forku/domain/model/user/UserRole.kt b/app/src/main/java/app/forku/domain/model/user/UserRole.kt
----index 32f66d8..57ae288 100644
------- a/app/src/main/java/app/forku/domain/model/user/UserRole.kt
----+++ b/app/src/main/java/app/forku/domain/model/user/UserRole.kt
----@@ -2,8 +2,7 @@ package app.forku.domain.model.user
---- 
---- enum class UserRole {
----     ADMIN,
-----    OPERATOR,
-----    USER;
----+    OPERATOR;
---- 
----     companion object {
----         fun fromString(role: String): UserRole {
----diff --git a/app/src/main/java/app/forku/domain/model/vehicle/VehicleType.kt b/app/src/main/java/app/forku/domain/model/vehicle/VehicleType.kt
----index 359deb0..3f1944b 100644
------- a/app/src/main/java/app/forku/domain/model/vehicle/VehicleType.kt
----+++ b/app/src/main/java/app/forku/domain/model/vehicle/VehicleType.kt
----@@ -5,21 +5,31 @@ enum class VehicleType(
----     val displayName: String,
----     val requiresCertification: Boolean
---- ) {
-----    FORKLIFT("forklift_type", "Forklift", true),
-----    PALLET_JACK("pallet_jack_type", "Pallet Jack", false),
-----    REACH_TRUCK("reach_truck_type", "Reach Truck", true),
-----    ORDER_PICKER("order_picker_type", "Order Picker", true),
-----    TOW_TRACTOR("tow_tractor_type", "Tow Tractor", true),
-----    COUNTERBALANCE("counterbalance_type", "Counterbalance", true),
----+    COUNTERBALANCE_FORKLIFT("counterbalance_forklift", "Counterbalance Forklift", true),
----+    REACH_FORKLIFT("reach_forklift", "Reach Forklift", true),
----+    SIDE_LOADER("side_loader", "Side Loader", true),
----+    TELESCOPIC_HANDLER("telescopic_handler", "Telescopic Handler", true),
----+    ORDER_PICKER("order_picker", "Order Picker", true),
----+    ROUGH_TERRAIN_FORKLIFT("rough_terrain_forklift", "Rough Terrain Forklift", true),
----+    INDUSTRIAL_FORKLIFT("industrial_forklift", "Industrial Forklift", true),
----+    ARTICULATED_FORKLIFT("articulated_forklift", "Articulated Forklift", true),
----+    TURRET_TRUCK("turret_truck", "Turret Truck", true),
----+    PALLET_JACK("pallet_jack", "Pallet Jack", false),
----+    OTHER("other", "Other", true),
----     ALL("all", "All", false);
---- 
----     companion object {
-----        fun fromId(id: String) = values().find { it.id == id } ?: FORKLIFT
----+        fun fromId(id: String) = values().find { it.id == id } ?: OTHER
----         fun fromName(name: String) = try {
-----            valueOf(name.uppercase())
----+            // Intenta encontrar una coincidencia directa primero
----+            values().find { it.displayName.equals(name, ignoreCase = true) }
----+                // Si no encuentra coincidencia directa, intenta con el nombre enum
----+                ?: valueOf(name.uppercase().replace(" ", "_"))
----+                // Si aún no encuentra, devuelve OTHER
----+                ?: OTHER
----         } catch (e: IllegalArgumentException) {
-----            android.util.Log.w("VehicleType", "Unknown vehicle type: $name")
-----            FORKLIFT
----+            android.util.Log.w("VehicleType", "Unknown vehicle type: $name, using OTHER type")
----+            OTHER
----         }
----     }
---- }
----diff --git a/app/src/main/java/app/forku/domain/repository/weather/WeatherRepository.kt b/app/src/main/java/app/forku/domain/repository/weather/WeatherRepository.kt
----index a9d2e6f..1d556d2 100644
------- a/app/src/main/java/app/forku/domain/repository/weather/WeatherRepository.kt
----+++ b/app/src/main/java/app/forku/domain/repository/weather/WeatherRepository.kt
----@@ -4,4 +4,5 @@ import app.forku.domain.model.weather.Weather
---- 
---- interface WeatherRepository {
----     suspend fun getWeatherByCoordinates(latitude: Double, longitude: Double): Result<Weather>
----+    suspend fun getCurrentWeather(latitude: Double, longitude: Double): String
---- } 
----\ No newline at end of file
----diff --git a/app/src/main/java/app/forku/domain/usecase/incident/ReportIncidentUseCase.kt b/app/src/main/java/app/forku/domain/usecase/incident/ReportIncidentUseCase.kt
----index a9785ae..062bfa1 100644
------- a/app/src/main/java/app/forku/domain/usecase/incident/ReportIncidentUseCase.kt
----+++ b/app/src/main/java/app/forku/domain/usecase/incident/ReportIncidentUseCase.kt
----@@ -31,7 +31,7 @@ class ReportIncidentUseCase @Inject constructor(
----         preshiftCheckStatus: String,
----         typeSpecificFields: IncidentTypeFields?,
----         sessionId: String?,
-----        operatorId: String?,
----+        userId: String?,
----         othersInvolved: List<String>,
----         injuries: String,
----         injuryLocations: List<String>,
----@@ -66,7 +66,6 @@ class ReportIncidentUseCase @Inject constructor(
----                 severityLevel = severityLevel,
----                 preshiftCheckStatus = preshiftCheckStatus,
----                 typeSpecificFields = typeSpecificFields,
-----                operatorId = operatorId,
----                 othersInvolved = othersInvolved,
----                 injuries = injuries,
----                 injuryLocations = injuryLocations,
----diff --git a/app/src/main/java/app/forku/domain/usecase/session/StartVehicleSessionUseCase.kt b/app/src/main/java/app/forku/domain/usecase/session/StartVehicleSessionUseCase.kt
----index e12d582..cf455fa 100644
------- a/app/src/main/java/app/forku/domain/usecase/session/StartVehicleSessionUseCase.kt
----+++ b/app/src/main/java/app/forku/domain/usecase/session/StartVehicleSessionUseCase.kt
----@@ -1,8 +1,7 @@
---- package app.forku.domain.usecase.session
---- 
---- import app.forku.domain.model.session.VehicleSession
-----import app.forku.domain.model.user.Permissions
-----import app.forku.domain.model.user.hasPermission
----+import app.forku.domain.model.user.UserRole
---- import app.forku.domain.repository.session.SessionRepository
---- import app.forku.domain.repository.user.UserRepository
---- import javax.inject.Inject
----@@ -15,7 +14,7 @@ class StartVehicleSessionUseCase @Inject constructor(
----         val currentUser = userRepository.getCurrentUser()
----             ?: return Result.failure(Exception("User not logged in"))
---- 
-----        if (!currentUser.hasPermission(Permissions.OPERATE_VEHICLE)) {
----+        if (currentUser.role != UserRole.OPERATOR) {
----             return Result.failure(Exception("User does not have permission to operate vehicles"))
----         }
---- 
----diff --git a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
----index 8ffab1d..bed1351 100644
------- a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
----@@ -24,14 +24,17 @@ import androidx.navigation.NavController
---- import app.forku.presentation.common.components.BaseScreen
---- import androidx.compose.runtime.mutableStateOf
---- import androidx.compose.runtime.remember
----+import app.forku.core.network.NetworkConnectivityManager
---- import app.forku.presentation.common.components.AppModal
---- 
----+
---- @OptIn(ExperimentalMaterial3Api::class)
---- @Composable
---- fun ChecklistScreen(
----     viewModel: ChecklistViewModel = hiltViewModel(),
----     navController: NavController,
-----    onBackPressed: () -> Unit
----+    onBackPressed: () -> Unit,
----+    networkManager: NetworkConnectivityManager
---- ) {
----     var showConfirmationDialog = remember { mutableStateOf(false) }
----     
----@@ -54,7 +57,8 @@ fun ChecklistScreen(
----         showTopBar = true,
----         showBottomBar = true,
----         viewModel = viewModel,
-----        topBarTitle = "Vehicle Check",
----+        topBarTitle = "Pre-Shift Check",
----+        networkManager = networkManager,
----         onRefresh = { viewModel.loadChecklistData() },
----         content = { padding ->
----             Box(modifier = Modifier.fillMaxSize()) {
----@@ -116,10 +120,10 @@ fun ChecklistScreen(
---- 
---- 
----                                 // Only show submit button when all items are answered
-----                                if (currentState.showSubmitButton && currentState.allAnswered && !currentState.hasCriticalFail) {
----+                                if (currentState.showSubmitButton && currentState.allAnswered) {
----                                     Button(
----                                         onClick = { showConfirmationDialog.value = true },
-----                                        enabled = currentState.showSubmitButton && currentState.allAnswered && !currentState.hasCriticalFail,
----+                                        enabled = currentState.showSubmitButton && currentState.allAnswered,
----                                         modifier = Modifier
----                                             .fillMaxWidth()
----                                             .padding(16.dp),
----diff --git a/app/src/main/java/app/forku/presentation/common/components/BaseScreen.kt b/app/src/main/java/app/forku/presentation/common/components/BaseScreen.kt
----index b4c926d..b509b40 100644
------- a/app/src/main/java/app/forku/presentation/common/components/BaseScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/common/components/BaseScreen.kt
----@@ -16,23 +16,30 @@ import androidx.compose.ui.platform.LocalLifecycleOwner
---- import androidx.compose.ui.unit.dp
---- import androidx.lifecycle.Lifecycle
---- import androidx.lifecycle.LifecycleEventObserver
----+import app.forku.core.network.NetworkConnectivityManager
---- import app.forku.presentation.common.theme.BackgroundGray
---- import app.forku.presentation.dashboard.DashboardState
----+import androidx.compose.foundation.clickable
----+import androidx.compose.foundation.interaction.MutableInteractionSource
----+import androidx.compose.foundation.interaction.collectIsHoveredAsState
----+import androidx.compose.material3.surfaceColorAtElevation
---- 
---- @OptIn(ExperimentalMaterial3Api::class)
---- @Composable
---- fun BaseScreen(
----     navController: NavController,
----     modifier: Modifier = Modifier,
-----    showTopBar: Boolean = false,
----+    showTopBar: Boolean = true,
----     showBottomBar: Boolean = false,
----+    showBackButton: Boolean = true,
----     currentVehicleId: String? = null,
----     currentCheckId: String? = null,
----     dashboardState: DashboardState? = null,
----     viewModel: ViewModel? = null,
-----    topBarTitle: String = "",
----+    topBarTitle: String? = null,
----     onRefresh: (() -> Unit)? = null,
----     showLoadingOnRefresh: Boolean = false,
----+    networkManager: NetworkConnectivityManager,
----     content: @Composable (PaddingValues) -> Unit
---- ) {
----     val lifecycleOwner = LocalLifecycleOwner.current
----@@ -41,7 +48,6 @@ fun BaseScreen(
----     DisposableEffect(lifecycleOwner) {
----         val observer = LifecycleEventObserver { _, event ->
----             if (event == Lifecycle.Event.ON_RESUME) {
-----                // Refresh silencioso al volver a la pantalla
----                 onRefresh?.invoke()
----             }
----         }
----@@ -56,7 +62,8 @@ fun BaseScreen(
----         color = backgroundColor
----     ) {
----         Column(modifier = Modifier.fillMaxSize()) {
-----            Spacer(modifier = Modifier.height(24.dp))
----+            // Network Status Bar at the very top
----+            NetworkStatusBar(networkManager = networkManager)
----             
----             // Header section
----             if (showTopBar) {
----@@ -65,27 +72,46 @@ fun BaseScreen(
----                         .fillMaxWidth()
----                         .padding(horizontal = 16.dp)
----                 ) {
-----                    // Back button
-----                    TextButton(
-----                        onClick = { navController.navigateUp() },
-----                        contentPadding = PaddingValues(0.dp)
-----                    ) {
-----                        Icon(
-----                            Icons.Default.ArrowBack,
-----                            contentDescription = "Back",
-----                            tint = MaterialTheme.colorScheme.primary
-----                        )
-----                        Text(
-----                            "Back",
-----                            color = MaterialTheme.colorScheme.primary,
-----                            style = MaterialTheme.typography.bodyLarge,
-----                            modifier = Modifier.padding(start = 4.dp)
-----                        )
----+                    // Back button with additional top padding - only show if showBackButton is true
----+                    if (showBackButton) {
----+                        Box(
----+                            modifier = Modifier
----+                                .fillMaxWidth()
----+                                .padding(top = 24.dp)
----+                        ) {
----+                            // Custom back button implementation
----+                            Row(
----+                                modifier = Modifier
----+                                    .clickable(
----+                                        interactionSource = remember { MutableInteractionSource() },
----+                                        indication = null,
----+                                        enabled = true,
----+                                        onClickLabel = "Back",
----+                                        role = androidx.compose.ui.semantics.Role.Button,
----+                                        onClick = { navController.navigateUp() }
----+                                    )
----+                                    .padding(8.dp),
----+                                verticalAlignment = Alignment.CenterVertically
----+                            ) {
----+                                Icon(
----+                                    Icons.Default.ArrowBack,
----+                                    contentDescription = "Back",
----+                                    tint = MaterialTheme.colorScheme.primary,
----+                                    modifier = Modifier.size(24.dp)
----+                                )
----+                                Spacer(modifier = Modifier.width(4.dp))
----+                                Text(
----+                                    "Back",
----+                                    color = MaterialTheme.colorScheme.primary,
----+                                    style = MaterialTheme.typography.bodyLarge
----+                                )
----+                            }
----+                        }
----                     }
----                     
-----                    // Title with spacing
-----                    if (topBarTitle.isNotEmpty()) {
-----                        Spacer(modifier = Modifier.height(8.dp))
----+                    // Title with spacing - adjust padding based on whether back button is shown
----+                    if (topBarTitle?.isNotEmpty() == true) {
----+                        Spacer(modifier = Modifier.height(if (showBackButton) 8.dp else 24.dp))
----                         Box(
----                             modifier = Modifier
----                                 .fillMaxWidth()
----@@ -107,7 +133,7 @@ fun BaseScreen(
----                     .fillMaxSize()
----                     .weight(1f)
----             ) {
-----                content(PaddingValues(horizontal = 2.dp))
----+                content(PaddingValues(horizontal = 16.dp))
----             }
---- 
----             // Bottom Bar
----diff --git a/app/src/main/java/app/forku/presentation/common/components/PermissionGate.kt b/app/src/main/java/app/forku/presentation/common/components/PermissionGate.kt
----deleted file mode 100644
----index 5e2d9e6..0000000
------- a/app/src/main/java/app/forku/presentation/common/components/PermissionGate.kt
----+++ /dev/null
----@@ -1,32 +0,0 @@
-----package app.forku.presentation.common.components
-----
-----import androidx.compose.runtime.Composable
-----import app.forku.domain.model.user.User
-----import app.forku.domain.model.user.hasAllPermissions
-----import app.forku.domain.model.user.hasAnyPermission
-----
-----@Composable
-----fun PermissionGate(
-----    user: User?,
-----    requiredPermissions: Set<String>,
-----    requireAll: Boolean = true,
-----    unauthorizedContent: @Composable () -> Unit = {},
-----    content: @Composable () -> Unit
-----) {
-----    if (user == null) {
-----        unauthorizedContent()
-----        return
-----    }
-----
-----    val hasPermission = if (requireAll) {
-----        user.hasAllPermissions(requiredPermissions)
-----    } else {
-----        user.hasAnyPermission(requiredPermissions)
-----    }
-----
-----    if (hasPermission) {
-----        content()
-----    } else {
-----        unauthorizedContent()
-----    }
-----} 
----\ No newline at end of file
----diff --git a/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt
----index 5bca3df..6ab19b0 100644
------- a/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt
----@@ -1,114 +1,497 @@
---- package app.forku.presentation.dashboard
---- 
----+import androidx.compose.foundation.background
---- import androidx.compose.foundation.layout.*
----+import androidx.compose.foundation.lazy.LazyColumn
----+import androidx.compose.foundation.shape.CircleShape
----+import androidx.compose.foundation.shape.RoundedCornerShape
----+import androidx.compose.material.icons.Icons
----+import androidx.compose.material.icons.filled.*
---- import androidx.compose.material3.*
-----import androidx.compose.runtime.Composable
----+import androidx.compose.runtime.*
---- import androidx.compose.ui.Alignment
---- import androidx.compose.ui.Modifier
----+import androidx.compose.ui.draw.clip
----+import androidx.compose.ui.graphics.Color
----+import androidx.compose.ui.graphics.vector.ImageVector
----+import androidx.compose.ui.layout.ContentScale
----+import androidx.compose.ui.text.font.FontWeight
---- import androidx.compose.ui.unit.dp
----+import androidx.compose.ui.unit.sp
---- import androidx.navigation.NavController
----+import app.forku.core.network.NetworkConnectivityManager
----+import coil.compose.AsyncImage
----+import app.forku.presentation.common.components.BaseScreen
----+import androidx.compose.material.ExperimentalMaterialApi
----+import androidx.compose.material.pullrefresh.PullRefreshIndicator
----+import androidx.compose.material.pullrefresh.pullRefresh
----+import androidx.compose.material.pullrefresh.rememberPullRefreshState
---- import app.forku.presentation.navigation.Screen
---- 
----+@OptIn(ExperimentalMaterialApi::class)
---- @Composable
---- fun AdminDashboardScreen(
----     navController: NavController? = null,
----     onNavigate: (String) -> Unit = {},
-----    viewModel: DashboardViewModel = androidx.hilt.navigation.compose.hiltViewModel()
----+    viewModel: AdminDashboardViewModel = androidx.hilt.navigation.compose.hiltViewModel(),
----+    networkManager: NetworkConnectivityManager
---- ) {
-----    Column(
----+    val currentUser by viewModel.currentUser.collectAsState()
----+    val dashboardState by viewModel.state.collectAsState()
----+
----+    val pullRefreshState = rememberPullRefreshState(
----+        refreshing = dashboardState.isLoading,
----+        onRefresh = { viewModel.loadDashboardData() }
----+    )
----+    
----+    BaseScreen(
----+        navController = navController ?: return,
----+        showBottomBar = true,
----+        showTopBar = false,
----+        showBackButton = false,
----+        networkManager = networkManager
----+    ) { padding ->
----+        Box(
----+            modifier = Modifier
----+                .fillMaxSize()
----+                .pullRefresh(pullRefreshState)
----+        ) {
----+            LazyColumn(
----+                modifier = Modifier
----+                    .fillMaxSize()
----+                    .padding(padding)
----+                    .padding(horizontal = 16.dp),
----+                verticalArrangement = Arrangement.spacedBy(24.dp)
----+            ) {
----+                item { HeaderSection(userFirstName = currentUser?.firstName ?: "") }
----+                
----+                item { OperationStatusSection(dashboardState) }
----+                
----+                item { VehicleSessionSection(dashboardState, navController) }
----+                
----+                item { OperatorsSessionSection(dashboardState, navController) }
----+                
----+                // Add some padding at the bottom
----+                item { Spacer(modifier = Modifier.height(16.dp)) }
----+            }
----+
----+            PullRefreshIndicator(
----+                refreshing = dashboardState.isLoading,
----+                state = pullRefreshState,
----+                modifier = Modifier.align(Alignment.TopCenter)
----+            )
----+        }
----+    }
----+}
----+
----+@Composable
----+private fun HeaderSection(userFirstName: String) {
----+    Row(
----         modifier = Modifier
-----            .fillMaxSize()
-----            .padding(16.dp),
-----        horizontalAlignment = Alignment.CenterHorizontally,
-----        verticalArrangement = Arrangement.spacedBy(16.dp)
----+            .fillMaxWidth()
----+            .padding(top = 40.dp, bottom = 16.dp),
----+        horizontalArrangement = Arrangement.SpaceBetween,
----+        verticalAlignment = Alignment.CenterVertically
----+    ) {
----+        Column {
----+            Text(
----+                text = "Hi, $userFirstName!",
----+                fontSize = 24.sp,
----+                fontWeight = FontWeight.Bold
----+            )
----+            Text(
----+                text = "How are you today?",
----+                color = Color.Gray,
----+                fontSize = 16.sp
----+            )
----+        }
----+        IconButton(onClick = { /* Handle notifications */ }) {
----+            Icon(
----+                imageVector = Icons.Default.Notifications,
----+                contentDescription = "Notifications",
----+                tint = Color.Gray
----+            )
----+        }
----+    }
----+}
----+
----+@Composable
----+private fun OperationStatusSection(state: AdminDashboardState) {
----+    Card(
----+        modifier = Modifier.fillMaxWidth(),
----+        colors = CardDefaults.cardColors(containerColor = Color.White)
----     ) {
----+        Column(modifier = Modifier.padding(16.dp)) {
----+            Text(
----+                text = "Operation Status",
----+                fontSize = 20.sp,
----+                fontWeight = FontWeight.Bold
----+            )
----+            
----+            Spacer(modifier = Modifier.height(16.dp))
----+            
----+            Row(
----+                modifier = Modifier.fillMaxWidth(),
----+                horizontalArrangement = Arrangement.SpaceBetween
----+            ) {
----+                StatusItem(
----+                    icon = Icons.Default.DirectionsCar,
----+                    count = state.operatingVehiclesCount.toString(),
----+                    label = "Operating",
----+                    iconTint = Color(0xFF4CAF50)
----+                )
----+                StatusItem(
----+                    icon = Icons.Default.Warning,
----+                    count = state.totalIncidentsCount.toString(),
----+                    label = "Incidents",
----+                    iconTint = Color(0xFFFFA726)
----+                )
----+                StatusItem(
----+                    icon = Icons.Default.Security,
----+                    count = state.safetyAlertsCount.toString(),
----+                    label = "Safety Alerts",
----+                    iconTint = Color(0xFF2196F3)
----+                )
----+            }
----+
----+            if (state.isLoading) {
----+                LinearProgressIndicator(
----+                    modifier = Modifier
----+                        .fillMaxWidth()
----+                        .padding(top = 16.dp)
----+                )
----+            }
----+
----+            state.error?.let { error ->
----+                Text(
----+                    text = error,
----+                    color = Color.Red,
----+                    modifier = Modifier.padding(top = 8.dp)
----+                )
----+            }
----+        }
----+    }
----+}
----+
----+@Composable
----+private fun StatusItem(
----+    icon: ImageVector,
----+    count: String,
----+    total: String? = null,
----+    label: String,
----+    iconTint: Color
----+) {
----+    Column(
----+        horizontalAlignment = Alignment.CenterHorizontally
----+    ) {
----+        Icon(
----+            imageVector = icon,
----+            contentDescription = null,
----+            tint = iconTint,
----+            modifier = Modifier.size(24.dp)
----+        )
----+        if (total != null) {
----+            Text(
----+                text = total,
----+                fontSize = 12.sp,
----+                color = Color.Gray
----+            )
----+        }
----+        Text(
----+            text = count,
----+            fontSize = 32.sp,
----+            fontWeight = FontWeight.Bold
----+        )
----         Text(
-----            text = "Admin Dashboard",
-----            style = MaterialTheme.typography.headlineMedium
----+            text = label,
----+            fontSize = 14.sp,
----+            color = Color.Gray
----         )
----+    }
----+}
---- 
-----        // Sección de Gestión de Usuarios
-----        ElevatedCard(
-----            modifier = Modifier.fillMaxWidth()
----+@Composable
----+private fun VehicleSessionSection(
----+    state: AdminDashboardState,
----+    navController: NavController
----+) {
----+    Column {
----+        Row(
----+            modifier = Modifier.fillMaxWidth(),
----+            horizontalArrangement = Arrangement.SpaceBetween,
----+            verticalAlignment = Alignment.CenterVertically
----         ) {
-----            Column(
-----                modifier = Modifier.padding(16.dp)
----+            Text(
----+                text = "Vehicle In-Session",
----+                fontSize = 20.sp,
----+                fontWeight = FontWeight.Bold
----+            )
----+            TextButton(
----+                onClick = { navController.navigate(Screen.VehicleSessionList.route) }
----             ) {
-----                Text(
-----                    text = "User Management",
-----                    style = MaterialTheme.typography.titleMedium
-----                )
-----                Spacer(modifier = Modifier.height(8.dp))
-----                Button(
-----                    onClick = { onNavigate("manage_users") },
-----                    modifier = Modifier.fillMaxWidth()
----+                Text("View all")
----+                Icon(Icons.Default.ArrowForward, contentDescription = null)
----+            }
----+        }
----+        
----+        Spacer(modifier = Modifier.height(8.dp))
----+        
----+        if (state.activeVehicleSessions.isEmpty()) {
----+            Card(
----+                modifier = Modifier.fillMaxWidth(),
----+                colors = CardDefaults.cardColors(containerColor = Color.White)
----+            ) {
----+                Box(
----+                    modifier = Modifier
----+                        .fillMaxWidth()
----+                        .padding(32.dp),
----+                    contentAlignment = Alignment.Center
----                 ) {
-----                    Text("Manage Users")
----+                    Text(
----+                        text = "No active vehicle sessions",
----+                        color = Color.Gray,
----+                        fontSize = 16.sp
----+                    )
----+                }
----+            }
----+        } else {
----+            Card(
----+                modifier = Modifier.fillMaxWidth(),
----+                colors = CardDefaults.cardColors(containerColor = Color.White)
----+            ) {
----+                Column(modifier = Modifier.padding(16.dp)) {
----+                    state.activeVehicleSessions.forEachIndexed { index, session ->
----+                        VehicleSessionItem(
----+                            vehicleId = session.vehicleId,
----+                            vehicleType = session.vehicleType,
----+                            progress = session.progress,
----+                            operatorName = session.operatorName,
----+                            operatorImage = session.operatorImage ?: "",
----+                            vehicleImage = session.vehicleImage,
----+                            codename = session.codename
----+                        )
----+                        
----+                        if (index < state.activeVehicleSessions.size - 1) {
----+                            Spacer(modifier = Modifier.height(16.dp))
----+                        }
----+                    }
----                 }
----             }
----         }
---- 
-----        // Sección de Gestión de Vehículos
-----        ElevatedCard(
-----            modifier = Modifier.fillMaxWidth()
-----        ) {
----+        if (state.isLoading) {
----+            LinearProgressIndicator(
----+                modifier = Modifier
----+                    .fillMaxWidth()
----+                    .padding(top = 16.dp)
----+            )
----+        }
----+    }
----+}
----+
----+@Composable
----+private fun VehicleSessionItem(
----+    vehicleId: String,
----+    vehicleType: String,
----+    progress: Float,
----+    operatorName: String,
----+    operatorImage: String,
----+    vehicleImage: String?,
----+    codename: String
----+) {
----+    Row(
----+        modifier = Modifier.fillMaxWidth(),
----+        horizontalArrangement = Arrangement.SpaceBetween,
----+        verticalAlignment = Alignment.CenterVertically
----+    ) {
----+        Row(verticalAlignment = Alignment.CenterVertically) {
----+            AsyncImage(
----+                model = vehicleImage,
----+                contentDescription = "Vehicle image",
----+                modifier = Modifier
----+                    .size(60.dp)
----+                    .clip(RoundedCornerShape(8.dp)),
----+                contentScale = ContentScale.Crop
----+            )
----+            Spacer(modifier = Modifier.width(12.dp))
----+            Column(modifier = Modifier.weight(1f)) {
----+                Row(verticalAlignment = Alignment.CenterVertically) {
----+                    Text(
----+                        text = codename,
----+                        fontWeight = FontWeight.Bold
----+                    )
----+                    Spacer(modifier = Modifier.width(8.dp))
----+                    Text(
----+                        text = vehicleType,
----+                        color = Color.Gray,
----+                        fontSize = 14.sp
----+                    )
----+                }
----+                
----+                Spacer(modifier = Modifier.height(4.dp))
----+                
----+                Row(verticalAlignment = Alignment.CenterVertically) {
----+                    Text(
----+                        text = "${(progress * 100).toInt()}%",
----+                        fontWeight = FontWeight.Bold,
----+                        fontSize = 20.sp
----+                    )
----+                    Spacer(modifier = Modifier.width(8.dp))
----+                    LinearProgressIndicator(
----+                        progress = progress,
----+                        modifier = Modifier
----+                            .weight(1f)
----+                            .height(8.dp)
----+                            .clip(RoundedCornerShape(4.dp)),
----+                        color = when {
----+                            progress > 0.7f -> Color(0xFF4CAF50)
----+                            progress > 0.3f -> Color(0xFFFFA726)
----+                            else -> Color(0xFFF44336)
----+                        }
----+                    )
----+                }
----+            }
----+            
----+            Spacer(modifier = Modifier.width(16.dp))
----+            
----             Column(
-----                modifier = Modifier.padding(16.dp)
----+                horizontalAlignment = Alignment.End,
----+                modifier = Modifier.width(100.dp)
----             ) {
----+                AsyncImage(
----+                    model = operatorImage,
----+                    contentDescription = null,
----+                    modifier = Modifier
----+                        .size(40.dp)
----+                        .clip(CircleShape),
----+                    contentScale = ContentScale.Crop
----+                )
----                 Text(
-----                    text = "Vehicle Management",
-----                    style = MaterialTheme.typography.titleMedium
----+                    text = "Operator",
----+                    fontSize = 12.sp,
----+                    color = Color.Gray
----+                )
----+                Text(
----+                    text = operatorName,
----+                    fontSize = 14.sp,
----+                    fontWeight = FontWeight.Medium,
----+                    maxLines = 1
----                 )
-----                Spacer(modifier = Modifier.height(8.dp))
-----                Button(
-----                    onClick = { onNavigate(Screen.Vehicles.route) },
-----                    modifier = Modifier.fillMaxWidth()
-----                ) {
-----                    Text("Manage Vehicles")
-----                }
----             }
----         }
----+    }
----+}
---- 
-----        // Sección de Reportes
-----        ElevatedCard(
-----            modifier = Modifier.fillMaxWidth()
----+@Composable
----+private fun OperatorsSessionSection(state: AdminDashboardState, navController: NavController) {
----+    Column {
----+        Row(
----+            modifier = Modifier.fillMaxWidth(),
----+            horizontalArrangement = Arrangement.SpaceBetween,
----+            verticalAlignment = Alignment.CenterVertically
----         ) {
-----            Column(
-----                modifier = Modifier.padding(16.dp)
----+            Text(
----+                text = "Operators in-Session",
----+                fontSize = 20.sp,
----+                fontWeight = FontWeight.Bold
----+            )
----+            TextButton(onClick = { navController.navigate(Screen.OperatorSessionList.route) }) {
----+                Text("View all")
----+                Icon(Icons.Default.ArrowForward, contentDescription = null)
----+            }
----+        }
----+        
----+        Spacer(modifier = Modifier.height(8.dp))
----+
----+        if (state.activeOperators.isEmpty()) {
----+            Card(
----+                modifier = Modifier.fillMaxWidth(),
----+                colors = CardDefaults.cardColors(containerColor = Color.White)
----             ) {
-----                Text(
-----                    text = "Reports",
-----                    style = MaterialTheme.typography.titleMedium
-----                )
-----                Spacer(modifier = Modifier.height(8.dp))
-----                Button(
-----                    onClick = { onNavigate("reports") },
-----                    modifier = Modifier.fillMaxWidth()
----+                Box(
----+                    modifier = Modifier
----+                        .fillMaxWidth()
----+                        .padding(32.dp),
----+                    contentAlignment = Alignment.Center
----                 ) {
-----                    Text("View Reports")
----+                    Text(
----+                        text = "No operators currently in session",
----+                        color = Color.Gray,
----+                        fontSize = 16.sp
----+                    )
----+                }
----+            }
----+        } else {
----+            Row(
----+                modifier = Modifier.fillMaxWidth(),
----+                horizontalArrangement = Arrangement.spacedBy(8.dp)
----+            ) {
----+                state.activeOperators.forEach { operator ->
----+                    OperatorItem(
----+                        name = operator.name,
----+                        image = operator.image ?: "",
----+                        isActive = operator.isActive
----+                    )
----                 }
----             }
----         }
---- 
-----        // Sección de Certificaciones
-----        ElevatedCard(
-----            modifier = Modifier.fillMaxWidth()
----+        if (state.isLoading) {
----+            LinearProgressIndicator(
----+                modifier = Modifier
----+                    .fillMaxWidth()
----+                    .padding(top = 16.dp)
----+            )
----+        }
----+    }
----+}
----+
----+@Composable
----+private fun OperatorItem(
----+    name: String,
----+    image: String,
----+    isActive: Boolean
----+) {
----+    Card(
----+        modifier = Modifier.width(111.dp),
----+        colors = CardDefaults.cardColors(containerColor = Color.White)
----         ) {
----             Column(
-----                modifier = Modifier.padding(16.dp)
-----            ) {
-----                Text(
-----                    text = "Certifications",
-----                    style = MaterialTheme.typography.titleMedium
----+            modifier = Modifier.padding(8.dp),
----+            horizontalAlignment = Alignment.CenterHorizontally
----+        ) {
----+            Box {
----+                AsyncImage(
----+                    model = image,
----+                    contentDescription = null,
----+                    modifier = Modifier
----+                        .size(80.dp)
----+                        .clip(RoundedCornerShape(8.dp)),
----+                    contentScale = ContentScale.Crop
----                 )
-----                Spacer(modifier = Modifier.height(8.dp))
-----                Button(
-----                    onClick = { onNavigate("certifications") },
-----                    modifier = Modifier.fillMaxWidth()
-----                ) {
-----                    Text("Manage Certifications")
----+                if (isActive) {
----+                    Box(
----+                        modifier = Modifier
----+                            .size(12.dp)
----+                            .clip(CircleShape)
----+                            .background(Color(0xFF4CAF50))
----+                            .align(Alignment.BottomEnd)
----+                    )
----                 }
----             }
----+            
----+            Spacer(modifier = Modifier.height(4.dp))
----+            
----+            Text(
----+                text = name,
----+                fontSize = 14.sp,
----+                fontWeight = FontWeight.Medium
----+            )
----+            Text(
----+                text = if (isActive) "Active" else "Inactive",
----+                fontSize = 12.sp,
----+                color = if (isActive) Color(0xFF4CAF50) else Color.Gray
----+            )
----         }
----     }
---- } 
----\ No newline at end of file
----diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
----index 75f43a2..b918ddb 100644
------- a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
----@@ -39,17 +39,21 @@ import androidx.compose.material.icons.filled.QrCodeScanner
---- import androidx.compose.material.icons.filled.Report
---- import androidx.compose.runtime.setValue
---- import androidx.compose.ui.unit.sp
----+import app.forku.core.network.NetworkConnectivityManager
---- import app.forku.domain.model.vehicle.toColor
---- import app.forku.presentation.dashboard.components.SessionCard
-----import app.forku.domain.model.user.Permissions
-----import app.forku.presentation.common.components.PermissionGate
----+import androidx.compose.foundation.interaction.MutableInteractionSource
----+import androidx.compose.foundation.interaction.collectIsHoveredAsState
----+import androidx.compose.foundation.clickable
----+
---- 
---- @OptIn(ExperimentalMaterialApi::class)
---- @Composable
---- fun DashboardScreen(
----     navController: NavController,
----+    onNavigate: (String) -> Unit,
----     viewModel: DashboardViewModel = hiltViewModel(),
-----    onNavigate: (String) -> Unit
----+    networkManager: NetworkConnectivityManager
---- ) {
----     val dashboardState by viewModel.state.collectAsState()
----     val currentUser by viewModel.currentUser.collectAsState()
----@@ -57,6 +61,11 @@ fun DashboardScreen(
----     // Add loading state observation
----     var isCheckoutLoading by remember { mutableStateOf(false) }
---- 
----+    val pullRefreshState = rememberPullRefreshState(
----+        refreshing = dashboardState.isLoading,
----+        onRefresh = { viewModel.refreshWithLoading() }
----+    )
----+
----     // Handle loading state during checkout
----     LaunchedEffect(dashboardState.currentSession) {
----         if (dashboardState.currentSession == null && isCheckoutLoading) {
----@@ -76,51 +85,26 @@ fun DashboardScreen(
----         viewModel.refresh()
----     }
---- 
-----    val pullRefreshState = rememberPullRefreshState(
-----        refreshing = dashboardState.isLoading,
-----        onRefresh = { viewModel.refreshWithLoading() }
-----    )
-----
-----    Column {
-----        // Contenido común para todos los usuarios
-----        CommonContent()
-----
-----        // Funcionalidades específicas para Admin
-----        PermissionGate(
-----            user = currentUser,
-----            requiredPermissions = setOf(Permissions.MANAGE_USERS),
-----        ) {
-----            UserManagementSection()
-----        }
-----
-----        // Funcionalidades específicas para Operator
-----        PermissionGate(
-----            user = currentUser,
-----            requiredPermissions = setOf(Permissions.OPERATE_VEHICLE),
-----        ) {
-----            VehicleOperationSection()
-----        }
-----    }
-----
----     BaseScreen(
----         navController = navController,
----         showBottomBar = true,
----+        showBackButton = false,
----         currentVehicleId = dashboardState.currentSession?.vehicleId,
----         currentCheckId = dashboardState.lastPreShiftCheck?.id,
-----        dashboardState = dashboardState
----+        dashboardState = dashboardState,
----+        networkManager = networkManager
----     ) { padding ->
----         Box(
----             modifier = Modifier
----                 .fillMaxSize()
-----                .padding(padding)
----                 .pullRefresh(pullRefreshState)
----         ) {
----             Column(
----                 modifier = Modifier
----                     .fillMaxSize()
-----                    .padding(16.dp),
-----                horizontalAlignment = Alignment.CenterHorizontally,
-----                verticalArrangement = Arrangement.Center
----+                    .padding(padding)
----+                    .padding(top = 32.dp),
----+                horizontalAlignment = Alignment.CenterHorizontally
----             ) {
----                 SessionCard(
----                     vehicle = dashboardState.displayVehicle,
----@@ -155,28 +139,6 @@ fun DashboardScreen(
----                 )
----             }
---- 
-----            // Show loading indicator
-----            if (isCheckoutLoading) {
-----                CircularProgressIndicator(
-----                    modifier = Modifier.align(Alignment.Center)
-----                )
-----            }
-----
-----            // Show error if any
-----            dashboardState.error?.let { error ->
-----                Snackbar(
-----                    modifier = Modifier.align(Alignment.BottomCenter),
-----                    action = {
-----                        TextButton(onClick = { viewModel.clearError() }) {
-----                            Text("Retry")
-----                        }
-----                    }
-----                ) {
-----                    Text(error)
-----                }
-----            }
-----
-----            // Pull to refresh indicator
----             PullRefreshIndicator(
----                 refreshing = dashboardState.isLoading,
----                 state = pullRefreshState,
----@@ -282,15 +244,18 @@ private fun NavigationButton(
---- ) {
----     val buttonSize = if (isCenter) 120.dp else 90.dp
----     val iconSize = if (isCenter) 32.dp else 24.dp
----+    val interactionSource = remember { MutableInteractionSource() }
----     
-----    OutlinedButton(
-----        onClick = onClick,
-----        modifier = modifier.size(buttonSize),
----+    Surface(
----+        modifier = modifier
----+            .size(buttonSize)
----+            .clickable(
----+                interactionSource = interactionSource,
----+                indication = null,
----+                onClick = onClick
----+            ),
----         shape = CircleShape,
-----        colors = ButtonDefaults.outlinedButtonColors(
-----            containerColor = Color.White,
-----            contentColor = Color.Black
-----        ),
----+        color = Color.White,
----         border = BorderStroke(
----             width = if (isCenter) 3.dp else 0.dp,
----             color = if (isCenter) VehicleStatus.AVAILABLE.toColor().copy(alpha = 0.1f) else Color.Gray.copy(alpha = 0.3f)
----@@ -299,7 +264,9 @@ private fun NavigationButton(
----         Column(
----             horizontalAlignment = Alignment.CenterHorizontally,
----             verticalArrangement = Arrangement.Center,
-----            modifier = Modifier.padding(0.dp).fillMaxWidth()
----+            modifier = Modifier
----+                .padding(0.dp)
----+                .fillMaxWidth()
----         ) {
----             Icon(
----                 imageVector = icon,
----@@ -321,11 +288,6 @@ private fun CommonContent() {
----     // Implementation of CommonContent
---- }
---- 
-----@Composable
-----private fun UserManagementSection() {
-----    // Implementation of UserManagementSection
-----}
-----
---- @Composable
---- private fun VehicleOperationSection() {
----     // Implementation of VehicleOperationSection
----diff --git a/app/src/main/java/app/forku/presentation/dashboard/OperatorDashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/OperatorDashboardScreen.kt
----deleted file mode 100644
----index 667aa83..0000000
------- a/app/src/main/java/app/forku/presentation/dashboard/OperatorDashboardScreen.kt
----+++ /dev/null
----@@ -1,139 +0,0 @@
-----package app.forku.presentation.dashboard
-----
-----import androidx.compose.foundation.layout.*
-----import androidx.compose.material3.*
-----import androidx.compose.runtime.Composable
-----import androidx.compose.runtime.collectAsState
-----import androidx.compose.runtime.getValue
-----import androidx.compose.ui.Alignment
-----import androidx.compose.ui.Modifier
-----import androidx.compose.ui.unit.dp
-----import androidx.navigation.NavController
-----import app.forku.presentation.navigation.Screen
-----import androidx.hilt.navigation.compose.hiltViewModel
-----
-----@Composable
-----fun OperatorDashboardScreen(
-----    navController: NavController? = null,
-----    onNavigate: (String) -> Unit = {},
-----    viewModel: DashboardViewModel = hiltViewModel()
-----) {
-----    val dashboardState by viewModel.state.collectAsState()
-----    val currentUser by viewModel.currentUser.collectAsState()
-----
-----    Column(
-----        modifier = Modifier
-----            .fillMaxSize()
-----            .padding(16.dp),
-----        horizontalAlignment = Alignment.CenterHorizontally,
-----        verticalArrangement = Arrangement.spacedBy(16.dp)
-----    ) {
-----        Text(
-----            text = "Operator Dashboard",
-----            style = MaterialTheme.typography.headlineMedium
-----        )
-----
-----        // Sección de Vehículo Actual
-----        if (dashboardState.currentSession != null) {
-----            ElevatedCard(
-----                modifier = Modifier.fillMaxWidth()
-----            ) {
-----                Column(
-----                    modifier = Modifier.padding(16.dp)
-----                ) {
-----                    Text(
-----                        text = "Current Vehicle",
-----                        style = MaterialTheme.typography.titleMedium
-----                    )
-----                    Spacer(modifier = Modifier.height(8.dp))
-----                    dashboardState.displayVehicle?.let { vehicle ->
-----                        Text("Vehicle: ${vehicle.codename}")
-----                        Text("Status: ${vehicle.status}")
-----                    }
-----                    Button(
-----                        onClick = { viewModel.endCurrentSession() },
-----                        modifier = Modifier.fillMaxWidth()
-----                    ) {
-----                        Text("End Session")
-----                    }
-----                }
-----            }
-----        }
-----
-----        // Sección de Inicio de Sesión
-----        if (dashboardState.currentSession == null) {
-----            ElevatedCard(
-----                modifier = Modifier.fillMaxWidth()
-----            ) {
-----                Column(
-----                    modifier = Modifier.padding(16.dp)
-----                ) {
-----                    Text(
-----                        text = "Start Session",
-----                        style = MaterialTheme.typography.titleMedium
-----                    )
-----                    Spacer(modifier = Modifier.height(8.dp))
-----                    Button(
-----                        onClick = { onNavigate(Screen.QRScanner.route) },
-----                        modifier = Modifier.fillMaxWidth()
-----                    ) {
-----                        Text("Scan Vehicle QR")
-----                    }
-----                }
-----            }
-----        }
-----
-----        // Sección de Reportes de Incidentes
-----        ElevatedCard(
-----            modifier = Modifier.fillMaxWidth()
-----        ) {
-----            Column(
-----                modifier = Modifier.padding(16.dp)
-----            ) {
-----                Text(
-----                    text = "Incident Reporting",
-----                    style = MaterialTheme.typography.titleMedium
-----                )
-----                Spacer(modifier = Modifier.height(8.dp))
-----                Button(
-----                    onClick = { onNavigate(Screen.SafetyReporting.route) },
-----                    modifier = Modifier.fillMaxWidth()
-----                ) {
-----                    Text("Report Incident")
-----                }
-----            }
-----        }
-----
-----        // Sección de Historial
-----        ElevatedCard(
-----            modifier = Modifier.fillMaxWidth()
-----        ) {
-----            Column(
-----                modifier = Modifier.padding(16.dp)
-----            ) {
-----                Text(
-----                    text = "History",
-----                    style = MaterialTheme.typography.titleMedium
-----                )
-----                Spacer(modifier = Modifier.height(8.dp))
-----                Row(
-----                    modifier = Modifier.fillMaxWidth(),
-----                    horizontalArrangement = Arrangement.spacedBy(8.dp)
-----                ) {
-----                    Button(
-----                        onClick = { onNavigate(Screen.IncidentsHistory.route) },
-----                        modifier = Modifier.weight(1f)
-----                    ) {
-----                        Text("Incidents")
-----                    }
-----                    Button(
-----                        onClick = { onNavigate(Screen.OperatorsCICOHistory.route) },
-----                        modifier = Modifier.weight(1f)
-----                    ) {
-----                        Text("Sessions")
-----                    }
-----                }
-----            }
-----        }
-----    }
-----} 
----\ No newline at end of file
----diff --git a/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt b/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
----index fbd9008..c001ac3 100644
------- a/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
----+++ b/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
----@@ -82,7 +82,7 @@ private fun SessionContent(
----     ) {
----         
----         Text(
-----            text = if (isActive) "Active Session" else "Welcome ${user?.name ?: ""}!",
----+            text = if (isActive) "Active Session" else "Welcome ${user?.firstName ?: ""}!",
----             style = MaterialTheme.typography.titleMedium,
----             color = MaterialTheme.colorScheme.primary
----         )
----diff --git a/app/src/main/java/app/forku/presentation/incident/IncidentReportScreen.kt b/app/src/main/java/app/forku/presentation/incident/IncidentReportScreen.kt
----index df23c00..7e56d44 100644
------- a/app/src/main/java/app/forku/presentation/incident/IncidentReportScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/incident/IncidentReportScreen.kt
----@@ -26,6 +26,7 @@ import app.forku.domain.model.incident.IncidentType
---- import app.forku.domain.model.incident.toDisplayText
---- import android.Manifest
---- import android.content.pm.PackageManager
----+import app.forku.core.network.NetworkConnectivityManager
---- import app.forku.presentation.common.components.ForkuButton
---- import app.forku.presentation.common.components.LocationPermissionHandler
---- 
----@@ -35,7 +36,8 @@ fun IncidentReportScreen(
----     incidentType: String,
----     onNavigateBack: () -> Unit,
----     viewModel: IncidentReportViewModel = hiltViewModel(),
-----    navController: NavController
----+    navController: NavController,
----+    networkManager: NetworkConnectivityManager
---- ) {
----     val state by viewModel.state.collectAsState()
----     val locationState by viewModel.locationState.collectAsState()
----@@ -115,7 +117,8 @@ fun IncidentReportScreen(
----         navController = navController,
----         viewModel = viewModel,
----         showBottomBar = false,
-----        topBarTitle = "${IncidentType.valueOf(incidentType).toDisplayText()} Incident"
----+        topBarTitle = "${IncidentType.valueOf(incidentType).toDisplayText()} Incident",
----+        networkManager = networkManager
----     ) { padding ->
----         Column(
----             modifier = Modifier
----diff --git a/app/src/main/java/app/forku/presentation/incident/IncidentReportState.kt b/app/src/main/java/app/forku/presentation/incident/IncidentReportState.kt
----index 2746af5..b9b6eb2 100644
------- a/app/src/main/java/app/forku/presentation/incident/IncidentReportState.kt
----+++ b/app/src/main/java/app/forku/presentation/incident/IncidentReportState.kt
----@@ -34,7 +34,8 @@ data class IncidentReportState(
----     val sessionId: String? = null,
----     
----     // People involved
-----    val operatorId: String? = null,
----+    val userId: String? = null,
----+    val reporterName: String? = null,
----     val othersInvolved: List<String> = emptyList(),
----     val injuries: String = "",
----     val injuryLocations: List<String> = emptyList(),
----@@ -73,7 +74,11 @@ data class IncidentReportState(
----     
----     // Add to IncidentReportState
----     val availableVehicles: List<Vehicle> = emptyList(),
-----    val showVehicleSelector: Boolean = false
----+    val showVehicleSelector: Boolean = false,
----+
----+    // Weather and location loading state
----+    val weatherLoaded: Boolean = false,
----+    val locationLoaded: Boolean = false
---- )
---- 
---- sealed class ValidationResult {
----@@ -92,36 +97,48 @@ fun IncidentReportState.validate(): ValidationResult {
---- }
---- 
---- fun IncidentReportState.validateCollision(): ValidationResult {
----+    val fields = typeSpecificFields as? IncidentTypeFields.CollisionFields
----     return when {
----         description.isBlank() -> ValidationResult.Error("Description is required")
-----        location.isBlank() -> ValidationResult.Error("Location is required")
----         vehicleId == null -> ValidationResult.Error("Vehicle information is required")
-----        operatorId == null -> ValidationResult.Error("Operator information is required")
----+        userId == null -> ValidationResult.Error("Operator information is required")
----+        fields?.collisionType == null -> ValidationResult.Error("Collision type is required")
----+        fields.damageOccurrence == null -> ValidationResult.Error("Damage occurrence is required")
----+        fields.immediateCause == null -> ValidationResult.Error("Immediate cause is required")
----         else -> ValidationResult.Success
----     }
---- }
---- 
---- fun IncidentReportState.validateNearMiss(): ValidationResult {
----+    val fields = typeSpecificFields as? IncidentTypeFields.NearMissFields
----     return when {
----         description.isBlank() -> ValidationResult.Error("Description is required")
-----        location.isBlank() -> ValidationResult.Error("Location is required")
----+        userId == null -> ValidationResult.Error("Operator information is required")
----+        fields?.nearMissType == null -> ValidationResult.Error("Near miss type is required")
----+        fields.immediateCause == null -> ValidationResult.Error("Immediate cause is required")
----         else -> ValidationResult.Success
----     }
---- }
---- 
---- fun IncidentReportState.validateHazard(): ValidationResult {
----+    val fields = typeSpecificFields as? IncidentTypeFields.HazardFields
----     return when {
----         description.isBlank() -> ValidationResult.Error("Description is required")
-----        location.isBlank() -> ValidationResult.Error("Location is required")
----+        userId == null -> ValidationResult.Error("Operator information is required")
----+        fields?.hazardType == null -> ValidationResult.Error("Hazard type is required")
----         else -> ValidationResult.Success
----     }
---- }
---- 
---- fun IncidentReportState.validateVehicleFail(): ValidationResult {
----+    val fields = typeSpecificFields as? IncidentTypeFields.VehicleFailFields
----     return when {
----         description.isBlank() -> ValidationResult.Error("Description is required")
----         vehicleId == null -> ValidationResult.Error("Vehicle information is required")
-----        location.isBlank() -> ValidationResult.Error("Location is required")
----+        userId == null -> ValidationResult.Error("Operator information is required")
----+        fields?.failureType == null -> ValidationResult.Error("Failure type is required")
----+        fields.damageOccurrence == null -> ValidationResult.Error("Damage occurrence is required")
----+        fields.immediateCause == null -> ValidationResult.Error("Immediate cause is required")
----         else -> ValidationResult.Success
----     }
---- }
----diff --git a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
----index 4e22b85..970a413 100644
------- a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
----+++ b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
----@@ -19,6 +19,8 @@ import javax.inject.Inject
---- import android.net.Uri
---- import app.forku.core.location.LocationManager
---- import app.forku.core.location.LocationState
----+import app.forku.data.repository.notification.NotificationRepository
----+import app.forku.domain.model.incident.toDisplayText
---- import app.forku.domain.model.vehicle.Vehicle
---- import app.forku.domain.repository.vehicle.VehicleRepository
---- import java.time.LocalDateTime
----@@ -34,6 +36,7 @@ import kotlinx.coroutines.cancel
---- import kotlinx.coroutines.delay
---- import app.forku.domain.repository.user.UserRepository
---- 
----+
---- @HiltViewModel
---- class IncidentReportViewModel @Inject constructor(
----     private val reportIncidentUseCase: ReportIncidentUseCase,
----@@ -43,7 +46,8 @@ class IncidentReportViewModel @Inject constructor(
----     private val userRepository: UserRepository,
----     private val vehicleRepository: VehicleRepository,
----     private val checklistRepository: ChecklistRepository,
-----    private val locationManager: LocationManager
----+    private val locationManager: LocationManager,
----+    private val notificationRepository: NotificationRepository
---- ) : ViewModel() {
---- 
----     private val _state = MutableStateFlow(IncidentReportState())
----@@ -87,18 +91,23 @@ class IncidentReportViewModel @Inject constructor(
----     private fun observeLocationUpdates() {
----         viewModelScope.launch {
----             locationState.collect { locationStateValue ->
-----                locationStateValue.location?.let { location ->
----+                if (locationStateValue.location != null) {
----                     _state.update { it.copy(
-----                        location = location,
-----                        locationCoordinates = location
----+                        location = locationStateValue.location,
----+                        locationCoordinates = locationStateValue.location,
----+                        locationLoaded = true
----                     )}
----                 }
----+                
----+                if (locationStateValue.latitude != null && locationStateValue.longitude != null) {
----+                    if (!state.value.weatherLoaded) {
----+                        fetchWeather(locationStateValue.latitude, locationStateValue.longitude)
----+                    }
----+                }
----+
----                 locationStateValue.error?.let { error ->
----                     _state.update { it.copy(error = error) }
----                 }
-----                if (locationStateValue.latitude != null && locationStateValue.longitude != null) {
-----                    fetchWeather(locationStateValue.latitude, locationStateValue.longitude)
-----                }
----             }
----         }
----     }
----@@ -116,9 +125,42 @@ class IncidentReportViewModel @Inject constructor(
----                 val vehicles = vehicleRepository.getVehicles()
----                 _state.update { it.copy(availableVehicles = vehicles) }
---- 
----+                // Get current user first
----+                var currentUser = userRepository.getCurrentUser()
----+                android.util.Log.d("IncidentReport", "Initial current user fetch: $currentUser")
----+                
----+                // If no user found, try to refresh
----+                if (currentUser == null) {
----+                    android.util.Log.d("IncidentReport", "No user found, attempting to refresh")
----+                    val refreshResult = userRepository.refreshCurrentUser()
----+                    currentUser = refreshResult.getOrNull()
----+                    android.util.Log.d("IncidentReport", "After refresh, current user: $currentUser")
----+                }
----+                
----+                // Set user information regardless of session
----+                currentUser?.let { user ->
----+                    android.util.Log.d("IncidentReport", """
----+                        Setting user info:
----+                        - ID: ${user.id}
----+                        - Name: ${user.fullName}
----+                        - Token: ${user.token.take(10)}...
----+                        - Role: ${user.role}
----+                    """.trimIndent())
----+                    
----+                    _state.update { currentState ->
----+                        currentState.copy(
----+                            userId = user.id,
----+                            reporterName = user.fullName
----+                        )
----+                    }
----+                } ?: run {
----+                    android.util.Log.e("IncidentReport", "No user found after refresh attempt")
----+                    _state.update { it.copy(error = "User not authenticated") }
----+                }
----+
----                 // Then try to get current session
----                 val session = sessionRepository.getCurrentSession()
-----                val currentUser = userRepository.getCurrentUser()
----+                android.util.Log.d("IncidentReport", "Current session: $session")
----                 
----                 session?.vehicleId?.let { vehicleId ->
----                     try {
----@@ -131,7 +173,6 @@ class IncidentReportViewModel @Inject constructor(
----                                 vehicleType = vehicle.type,
----                                 vehicleName = vehicle.codename,
----                                 sessionId = session.id,
-----                                operatorId = currentUser?.id,
----                                 lastPreshiftCheck = lastCheck?.lastCheckDateTime?.let { dateString ->
----                                     LocalDateTime.parse(dateString, DateTimeFormatter.ISO_DATE_TIME)
----                                 },
----@@ -143,6 +184,7 @@ class IncidentReportViewModel @Inject constructor(
----                     }
----                 }
----             } catch (e: Exception) {
----+                android.util.Log.e("IncidentReport", "Error in loadInitialData", e)
----                 _state.update { it.copy(error = "Failed to load initial data") }
----             }
----         }
----@@ -214,7 +256,7 @@ class IncidentReportViewModel @Inject constructor(
----                                 preshiftCheckStatus = state.value.preshiftCheckStatus,
----                                 typeSpecificFields = state.value.typeSpecificFields,
----                                 sessionId = state.value.sessionId,
-----                                operatorId = state.value.operatorId,
----+                                userId = state.value.userId,
----                                 othersInvolved = state.value.othersInvolved,
----                                 injuries = state.value.injuries,
----                                 injuryLocations = state.value.injuryLocations,
----@@ -228,7 +270,14 @@ class IncidentReportViewModel @Inject constructor(
----                                 locationCoordinates = state.value.locationCoordinates
----                             )
---- 
-----                            result.onSuccess {
----+                            result.onSuccess { incident ->
----+                                // Show notification for the new incident
----+                                notificationRepository.simulateIncidentNotification(
----+                                    incidentId = incident.id ?: "unknown",
----+                                    title = "New ${incident.type.toDisplayText()} Reported",
----+                                    message = "Location: ${incident.location}"
----+                                )
----+                                
----                                 _state.update { it.copy(
----                                     isLoading = false,
----                                     showSuccessDialog = true
----@@ -282,27 +331,42 @@ class IncidentReportViewModel @Inject constructor(
----     }
---- 
----     fun onLocationPermissionGranted() {
-----        locationManager.onLocationPermissionGranted()
----+        viewModelScope.launch {
----+            try {
----+                locationManager.startLocationUpdates()
----+                // Esperar un momento para que la ubicación se actualice
----+                delay(1000)
----+                // Forzar una actualización de ubicación
----+                locationManager.requestSingleUpdate()
----+            } catch (e: Exception) {
----+                _state.update { it.copy(error = "Error starting location updates: ${e.message}") }
----+            }
----+        }
----     }
---- 
----     fun onLocationPermissionDenied() {
-----        locationManager.onLocationPermissionDenied()
----+        _state.update { it.copy(
----+            error = "Location permission is required to report incidents"
----+        )}
----     }
---- 
----     fun onLocationSettingsDenied() {
-----        locationManager.onLocationSettingsDenied()
----+        _state.update { it.copy(
----+            error = "Location settings need to be enabled to report incidents"
----+        )}
----     }
---- 
----     private fun fetchWeather(latitude: Double, longitude: Double) {
----         viewModelScope.launch {
-----            weatherRepository.getWeatherByCoordinates(latitude, longitude)
-----                .onSuccess { weather ->
-----                    val weatherDescription = "${weather.description}, ${weather.temperature}°F"
-----                    _state.update { it.copy(weather = weatherDescription) }
-----                }
-----                .onFailure { error ->
-----                    android.util.Log.e("Weather", "Failed to fetch weather", error)
-----                }
----+            try {
----+                val weather = weatherRepository.getCurrentWeather(latitude, longitude)
----+                _state.update { it.copy(
----+                    weather = weather,
----+                    weatherLoaded = true
----+                )}
----+            } catch (e: Exception) {
----+                _state.update { it.copy(error = "Error fetching weather: ${e.message}") }
----+            }
----         }
----     }
---- 
----diff --git a/app/src/main/java/app/forku/presentation/incident/components/DamageAndImpactSection.kt b/app/src/main/java/app/forku/presentation/incident/components/DamageAndImpactSection.kt
----index 56259be..a2206a7 100644
------- a/app/src/main/java/app/forku/presentation/incident/components/DamageAndImpactSection.kt
----+++ b/app/src/main/java/app/forku/presentation/incident/components/DamageAndImpactSection.kt
----@@ -29,10 +29,10 @@ fun DamageAndImpactSection(
----         // Damage Occurrence Dropdown
----         var expanded by remember { mutableStateOf(false) }
----         val currentDamage = when (val fields = state.typeSpecificFields) {
-----            is IncidentTypeFields.CollisionFields -> fields.damageOccurrence?.name
-----            is IncidentTypeFields.VehicleFailFields -> fields.damageOccurrence?.name
----+            is IncidentTypeFields.CollisionFields -> fields.damageOccurrence
----+            is IncidentTypeFields.VehicleFailFields -> fields.damageOccurrence
----             else -> null
-----        }?.replace("_", " ")
----+        }
---- 
----         ExposedDropdownMenuBox(
----             expanded = expanded,
----@@ -40,10 +40,10 @@ fun DamageAndImpactSection(
----             modifier = Modifier.fillMaxWidth()
----         ) {
----             CustomOutlinedTextField(
-----                value = currentDamage ?: "",
----+                value = currentDamage?.name?.replace("_", " ") ?: "",
----                 onValueChange = {},
----                 readOnly = true,
-----                label = "Damage Occurrence",
----+                label = "Damage Occurrence *",
----                 trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },
----                 modifier = Modifier
----                     .menuAnchor()
----diff --git a/app/src/main/java/app/forku/presentation/incident/components/IncidentDetailsSection.kt b/app/src/main/java/app/forku/presentation/incident/components/IncidentDetailsSection.kt
----index 4c923c5..c3aaea2 100644
------- a/app/src/main/java/app/forku/presentation/incident/components/IncidentDetailsSection.kt
----+++ b/app/src/main/java/app/forku/presentation/incident/components/IncidentDetailsSection.kt
----@@ -99,7 +99,7 @@ fun IncidentDetailsSection(
----         FormFieldDivider()
---- 
----         // Hidden Weather Conditions field - maintains state but not visible
-----        if (false) {  // This ensures the composable is never rendered
----+        if (true) {  // This ensures the composable is never rendered
----             CustomOutlinedTextField(
----                 value = state.weather,
----                 onValueChange = { },
----@@ -114,7 +114,7 @@ fun IncidentDetailsSection(
----         }
---- 
----         // Hidden Location field - maintains state but not visible
-----        if (false) {  // This ensures the composable is never rendered
----+        if (true) {  // This ensures the composable is never rendered
----             CustomOutlinedTextField(
----                 value = state.location,
----                 onValueChange = { },
----diff --git a/app/src/main/java/app/forku/presentation/incident/components/PeopleSpecificFields.kt b/app/src/main/java/app/forku/presentation/incident/components/PeopleSpecificFields.kt
----index ab25923..5cc7784 100644
------- a/app/src/main/java/app/forku/presentation/incident/components/PeopleSpecificFields.kt
----+++ b/app/src/main/java/app/forku/presentation/incident/components/PeopleSpecificFields.kt
----@@ -76,9 +76,9 @@ fun BasicPeopleFields(
----     Column(modifier = modifier.fillMaxWidth()) {
---- 
----         // Reporter field (read-only)
-----        if(false){
----+        if(true){
----             CustomOutlinedTextField(
-----                value = state.operatorId ?: "Unknown",
----+                value = state.userId ?: "Unknown",
----                 onValueChange = { },
----                 label = "Reported By",
----                 readOnly = true,
----diff --git a/app/src/main/java/app/forku/presentation/incident/detail/IncidentDetailScreen.kt b/app/src/main/java/app/forku/presentation/incident/detail/IncidentDetailScreen.kt
----index b6066c9..c20f32d 100644
------- a/app/src/main/java/app/forku/presentation/incident/detail/IncidentDetailScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/incident/detail/IncidentDetailScreen.kt
----@@ -5,25 +5,37 @@ import androidx.compose.material3.*
---- import androidx.compose.runtime.Composable
---- import androidx.compose.runtime.LaunchedEffect
---- import androidx.compose.runtime.getValue
----+import androidx.compose.ui.Alignment
---- import androidx.compose.ui.Modifier
---- import androidx.compose.ui.unit.dp
---- import androidx.hilt.navigation.compose.hiltViewModel
---- import androidx.lifecycle.compose.collectAsStateWithLifecycle
---- import androidx.navigation.NavController
----+import app.forku.core.network.NetworkConnectivityManager
---- import app.forku.presentation.common.components.BaseScreen
---- import app.forku.presentation.common.components.LoadingOverlay
---- import app.forku.presentation.common.components.ErrorScreen
---- import app.forku.presentation.common.utils.getRelativeTimeSpanString
----+import androidx.compose.material.ExperimentalMaterialApi
----+import androidx.compose.material.pullrefresh.PullRefreshIndicator
----+import androidx.compose.material.pullrefresh.pullRefresh
----+import androidx.compose.material.pullrefresh.rememberPullRefreshState
---- 
-----@OptIn(ExperimentalMaterial3Api::class)
----+@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class)
---- @Composable
---- fun IncidentDetailScreen(
----     incidentId: String,
----     viewModel: IncidentDetailViewModel = hiltViewModel(),
-----    navController: NavController
----+    navController: NavController,
----+    networkManager: NetworkConnectivityManager
---- ) {
----     val state by viewModel.state.collectAsStateWithLifecycle()
---- 
----+    val pullRefreshState = rememberPullRefreshState(
----+        refreshing = state.isLoading,
----+        onRefresh = { viewModel.loadIncidentDetail(incidentId) }
----+    )
----+
----     // Cargar los detalles cuando se inicia la pantalla
----     LaunchedEffect(incidentId) {
----         viewModel.loadIncidentDetail(incidentId)
----@@ -33,10 +45,12 @@ fun IncidentDetailScreen(
----         navController = navController,
----         showTopBar = true,
----         topBarTitle = "Incident Details",
----+        networkManager = networkManager,
----         content = { padding ->
----             Box(
----                 modifier = Modifier
----                     .fillMaxSize()
----+                    .pullRefresh(pullRefreshState)
----                     .padding(padding)
----             ) {
----                 when {
----diff --git a/app/src/main/java/app/forku/presentation/incident/list/IncidentHistoryScreen.kt b/app/src/main/java/app/forku/presentation/incident/list/IncidentHistoryScreen.kt
----index bbb1311..dbec231 100644
------- a/app/src/main/java/app/forku/presentation/incident/list/IncidentHistoryScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/incident/list/IncidentHistoryScreen.kt
----@@ -10,6 +10,7 @@ import androidx.compose.material.icons.filled.ArrowBack
---- import androidx.compose.material3.*
---- import androidx.compose.runtime.Composable
---- import androidx.compose.runtime.getValue
----+import androidx.compose.ui.Alignment
---- import androidx.compose.ui.Modifier
---- import androidx.compose.ui.text.style.TextOverflow
---- import androidx.compose.ui.unit.dp
----@@ -19,57 +20,79 @@ import app.forku.presentation.common.components.LoadingOverlay
---- import app.forku.presentation.common.components.ErrorScreen
---- import app.forku.presentation.common.utils.getRelativeTimeSpanString
---- import androidx.navigation.NavController
----+import app.forku.core.network.NetworkConnectivityManager
---- import app.forku.presentation.common.components.BaseScreen
---- import app.forku.presentation.navigation.Screen
----+import androidx.compose.material.ExperimentalMaterialApi
----+import androidx.compose.material.pullrefresh.PullRefreshIndicator
----+import androidx.compose.material.pullrefresh.pullRefresh
----+import androidx.compose.material.pullrefresh.rememberPullRefreshState
---- 
-----
-----@OptIn(ExperimentalMaterial3Api::class)
----+@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class)
---- @Composable
---- fun IncidentHistoryScreen(
----     viewModel: IncidentHistoryViewModel = hiltViewModel(),
----     onNavigateBack: () -> Unit,
----     onNavigateToReport: () -> Unit,
-----    navController: NavController
----+    navController: NavController,
----+    networkManager: NetworkConnectivityManager
---- ) {
----     val state by viewModel.state.collectAsStateWithLifecycle()
---- 
----+    val pullRefreshState = rememberPullRefreshState(
----+        refreshing = state.isLoading,
----+        onRefresh = { viewModel.loadIncidents() }
----+    )
----+
----     BaseScreen(
----         navController = navController,
----         showTopBar = true,
----         topBarTitle = "Incident Reports",
----         content = { padding ->
-----            when {
-----                state.isLoading -> LoadingOverlay()
-----                state.error != null -> ErrorScreen(
-----                    message = state.error ?: "Unknown error occurred",
-----                    onRetry = { viewModel.loadIncidents() }
-----                )
-----                else -> {
-----                    LazyColumn(
-----                        modifier = Modifier
-----                            .fillMaxSize()
-----                            .padding(padding)
-----                    ) {
-----                        items(
-----                            items = state.incidents,
-----                            key = { it.id }
-----                        ) { incident ->
-----                            IncidentHistoryItem(
-----                                incident = incident,
-----                                onClick = {
-----                                    navController.navigate(
-----                                        Screen.IncidentDetail.route.replace(
-----                                            "{incidentId}",
-----                                            incident.id
----+            Box(
----+                modifier = Modifier
----+                    .fillMaxSize()
----+                    .pullRefresh(pullRefreshState)
----+            ) {
----+                when {
----+                    state.error != null -> ErrorScreen(
----+                        message = state.error ?: "Unknown error occurred",
----+                        onRetry = { viewModel.loadIncidents() }
----+                    )
----+                    else -> {
----+                        LazyColumn(
----+                            modifier = Modifier
----+                                .fillMaxSize()
----+                                .padding(padding)
----+                        ) {
----+                            items(
----+                                items = state.incidents,
----+                                key = { it.id }
----+                            ) { incident ->
----+                                IncidentHistoryItem(
----+                                    incident = incident,
----+                                    onClick = {
----+                                        navController.navigate(
----+                                            Screen.IncidentDetail.route.replace(
----+                                                "{incidentId}",
----+                                                incident.id
----+                                            )
----                                         )
-----                                    )
-----                                }
-----                            )
----+                                    }
----+                                )
----+                            }
----                         }
----                     }
----                 }
----+
----+                PullRefreshIndicator(
----+                    refreshing = state.isLoading,
----+                    state = pullRefreshState,
----+                    modifier = Modifier.align(Alignment.TopCenter)
----+                )
----             }
-----        }
----+        },
----+        networkManager = networkManager
----     )
---- }
---- 
----diff --git a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
----index 3c1a0cb..c3808f8 100644
------- a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
----+++ b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
----@@ -11,6 +11,7 @@ import androidx.navigation.compose.NavHost
---- import androidx.navigation.compose.composable
---- import androidx.navigation.compose.rememberNavController
---- import androidx.navigation.navArgument
----+import app.forku.core.network.NetworkConnectivityManager
---- import app.forku.presentation.user.login.LoginScreen
---- import app.forku.presentation.dashboard.DashboardScreen
---- import app.forku.presentation.checklist.ChecklistScreen
----@@ -29,13 +30,12 @@ import app.forku.presentation.incident.detail.IncidentDetailScreen
---- import app.forku.presentation.tour.TourScreen
---- import app.forku.presentation.user.register.RegisterScreen
---- import app.forku.presentation.dashboard.AdminDashboardScreen
-----import app.forku.presentation.dashboard.OperatorDashboardScreen
---- import app.forku.presentation.dashboard.UnauthorizedScreen
-----import app.forku.domain.model.user.Permissions
-----import app.forku.presentation.common.components.PermissionGate
---- import app.forku.presentation.dashboard.DashboardViewModel
---- import app.forku.presentation.user.login.LoginState
-----
----+import app.forku.domain.model.user.UserRole
----+import app.forku.presentation.user.session.OperatorSessionListScreen
----+import app.forku.presentation.vehicle.session.VehicleSessionListScreen
---- 
---- sealed class Screen(val route: String) {
----     data object Login : Screen("login")
----@@ -54,13 +54,15 @@ sealed class Screen(val route: String) {
----     data object IncidentDetail : Screen("incident_detail/{incidentId}")
----     data object Tour : Screen("tour")
----     data object AdminDashboard : Screen("admin_dashboard")
-----    data object OperatorDashboard : Screen("operator_dashboard")
----+    data object VehicleSessionList : Screen("vehicle_session_list")
----+    data object OperatorSessionList : Screen("operator_session_list")
---- }
---- 
---- @Composable
---- fun NavGraph(
----     navController: NavHostController = rememberNavController(),
-----    startDestination: String = Screen.Tour.route
----+    startDestination: String = Screen.Tour.route,
----+    networkManager: NetworkConnectivityManager
---- ) {
----     val viewModel = hiltViewModel<DashboardViewModel>()
----     val currentUser by viewModel.currentUser.collectAsState()
----@@ -72,48 +74,63 @@ fun NavGraph(
----         navController = navController,
----         startDestination = when {
----             !tourCompleted -> Screen.Tour.route
-----            loginState is LoginState.Success || hasToken -> Screen.Dashboard.route
----+            loginState is LoginState.Success || hasToken -> {
----+                when (currentUser?.role) {
----+                    UserRole.ADMIN -> Screen.AdminDashboard.route
----+                    else -> Screen.Dashboard.route
----+                }
----+            }
----             else -> Screen.Login.route
----         }
----     ) {
----         composable(Screen.Login.route) {
----             LoginScreen(
-----                onLoginSuccess = {
-----                    navController.navigate(Screen.Dashboard.route) {
----+                onLoginSuccess = { user ->
----+                    val route = when (user.role) {
----+                        UserRole.ADMIN -> Screen.AdminDashboard.route
----+                        else -> Screen.Dashboard.route
----+                    }
----+                    navController.navigate(route) {
----                         popUpTo(Screen.Login.route) { inclusive = true }
----                     }
-----                }
----+                },
----+                networkManager = networkManager,
----+                navController = navController
----+            )
----+        }
----+
----+        composable(Screen.Register.route) {
----+            RegisterScreen(
----+                navController = navController,
----+                networkManager = networkManager
----+            )
----+        }
----+
----+        composable(Screen.Tour.route) {
----+            TourScreen(
----+                navController = navController,
----+                networkManager = networkManager
----             )
----         }
---- 
----         composable(Screen.Dashboard.route) {
-----            val currentUser = viewModel.getCurrentUser()
-----            when {
-----                currentUser?.permissions?.containsAll(Permissions.ADMIN_PERMISSIONS) == true -> {
-----                    AdminDashboardScreen(
-----                        navController = navController,
-----                        onNavigate = { route ->
-----                            navController.navigate(route)
-----                        }
-----                    )
-----                }
-----                currentUser?.permissions?.containsAll(Permissions.OPERATOR_PERMISSIONS) == true -> {
-----                    OperatorDashboardScreen(
-----                        navController = navController,
-----                        onNavigate = { route ->
-----                            navController.navigate(route)
-----                        }
-----                    )
-----                }
-----                else -> {
-----                    DashboardScreen(
-----                        navController = navController,
-----                        onNavigate = { route ->
-----                            navController.navigate(route)
-----                        }
-----                    )
-----                }
-----            }
----+            DashboardScreen(
----+                navController = navController,
----+                onNavigate = { route ->
----+                    navController.navigate(route)
----+                },
----+                networkManager = networkManager
----+            )
----+        }
----+
----+        composable(Screen.AdminDashboard.route) {
----+            AdminDashboardScreen(
----+                navController = navController,
----+                onNavigate = { route ->
----+                    navController.navigate(route)
----+                },
----+                networkManager = networkManager
----+            )
----         }
---- 
----         composable(Screen.QRScanner.route) {
----@@ -126,7 +143,8 @@ fun NavGraph(
----                 },
----                 onNavigateBack = {
----                     navController.popBackStack()
-----                }
----+                },
----+                networkManager = networkManager
----             )
----         }
---- 
----@@ -155,7 +173,8 @@ fun NavGraph(
----                     } else {
----                         navController.popBackStack()
----                     }
-----                }
----+                },
----+                networkManager = networkManager
----             )
----         }
---- 
----@@ -164,7 +183,8 @@ fun NavGraph(
----                 navController = navController,
----                 onVehicleClick = { vehicleId ->
----                     navController.navigate(Screen.VehicleProfile.route.replace("{vehicleId}", vehicleId))
-----                }
----+                },
----+                networkManager = networkManager
----             )
----         }
---- 
----@@ -184,7 +204,8 @@ fun NavGraph(
----                 onScanQrCode = {
----                     navController.navigate(Screen.QRScanner.route)
----                 },
-----                navController = navController
----+                navController = navController,
----+                networkManager = networkManager
----             )
----         }
---- 
----@@ -204,7 +225,8 @@ fun NavGraph(
----                 incidentType = incidentType,
----                 onNavigateBack = { navController.popBackStack() },
----                 viewModel = viewModel,
-----                navController = navController
----+                navController = navController,
----+                networkManager = networkManager
----             )
----         }
---- 
----@@ -213,14 +235,16 @@ fun NavGraph(
----                 navController = navController,
----                 onNavigateBack = { navController.navigateUp() },
----                 onNavigateToIncidents = { navController.navigate(Screen.IncidentsHistory.route) },
-----                onNavigateToCicoHistory = { navController.navigate(Screen.OperatorsCICOHistory.route) }
----+                onNavigateToCicoHistory = { navController.navigate(Screen.OperatorsCICOHistory.route) },
----+                networkManager = networkManager
----             )
----         }
---- 
----         composable(Screen.OperatorsCICOHistory.route) {
----             CicoHistoryScreen(
----                 onNavigateBack = { navController.navigateUp() },
-----                navController = navController
----+                navController = navController,
----+                networkManager = networkManager
----             )
----         }
---- 
----@@ -230,13 +254,15 @@ fun NavGraph(
----                 onNavigateToReport = {
----                     //navController.navigate(Screen.IncidentReport.route)
----                 },
-----                navController = navController
----+                navController = navController,
----+                networkManager = networkManager
----             )
----         }
---- 
----         composable(Screen.PerformanceReport.route) {
----             PerformanceReportScreen(
-----                navController = navController
----+                navController = navController,
----+                networkManager = networkManager
----             )
----         }
---- 
----@@ -247,46 +273,26 @@ fun NavGraph(
----             val incidentId = backStackEntry.arguments?.getString("incidentId") ?: return@composable
----             IncidentDetailScreen(
----                 incidentId = incidentId,
-----                navController = navController
----+                navController = navController,
----+                networkManager = networkManager
----             )
----         }
---- 
-----        composable(Screen.Tour.route) {
-----            TourScreen(navController = navController)
-----        }
-----
-----        composable("register") {
-----            RegisterScreen(
-----                navController = navController
----+        composable(Screen.VehicleSessionList.route) {
----+            VehicleSessionListScreen(
----+                navController = navController,
----+                onVehicleClick = { vehicleId ->
----+                    navController.navigate(Screen.VehicleProfile.route.replace("{vehicleId}", vehicleId))
----+                },
----+                networkManager = networkManager
----             )
----         }
---- 
-----        // Rutas protegidas para Admin
-----        composable(Screen.AdminDashboard.route) {
-----            val currentUser = viewModel.getCurrentUser()
-----            PermissionGate(
-----                user = currentUser,
-----                requiredPermissions = Permissions.ADMIN_PERMISSIONS,
-----                unauthorizedContent = { 
-----                    UnauthorizedScreen()
-----                }
-----            ) {
-----                AdminDashboardScreen()
-----            }
-----        }
-----
-----        // Rutas protegidas para Operator
-----        composable(Screen.OperatorDashboard.route) {
-----            val currentUser = viewModel.getCurrentUser()
-----            PermissionGate(
-----                user = currentUser,
-----                requiredPermissions = Permissions.OPERATOR_PERMISSIONS,
-----                unauthorizedContent = { 
-----                    UnauthorizedScreen()
-----                }
-----            ) {
-----                OperatorDashboardScreen()
-----            }
----+        composable(Screen.OperatorSessionList.route) {
----+            OperatorSessionListScreen(
----+                navController = navController,
----+                networkManager = networkManager
----+            )
----         }
----     }
---- }
----\ No newline at end of file
----diff --git a/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt b/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt
----index 556167a..a194784 100644
------- a/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt
----@@ -26,6 +26,7 @@ import androidx.core.content.ContextCompat
---- import androidx.hilt.navigation.compose.hiltViewModel
---- import androidx.lifecycle.LifecycleOwner
---- import androidx.lifecycle.compose.collectAsStateWithLifecycle
----+import app.forku.core.network.NetworkConnectivityManager
---- import com.google.accompanist.permissions.ExperimentalPermissionsApi
---- import com.google.accompanist.permissions.isGranted
---- import com.google.accompanist.permissions.rememberPermissionState
----@@ -39,7 +40,8 @@ fun QRScannerScreen(
----     onNavigateToPreShiftCheck: (String) -> Unit,
----     onNavigateToVehicleProfile: (String) -> Unit,
----     onNavigateBack: () -> Unit,
-----    viewModel: QRScannerViewModel = hiltViewModel()
----+    viewModel: QRScannerViewModel = hiltViewModel(),
----+    networkManager: NetworkConnectivityManager
---- ) {
----     val state by viewModel.state.collectAsStateWithLifecycle()
----     val context = LocalContext.current
----diff --git a/app/src/main/java/app/forku/presentation/tour/TourScreen.kt b/app/src/main/java/app/forku/presentation/tour/TourScreen.kt
----index 2bfc4bc..5cdb21d 100644
------- a/app/src/main/java/app/forku/presentation/tour/TourScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/tour/TourScreen.kt
----@@ -16,8 +16,12 @@ import androidx.compose.ui.unit.dp
---- import androidx.hilt.navigation.compose.hiltViewModel
---- import androidx.navigation.NavController
---- import app.forku.R
----+import app.forku.core.network.NetworkConnectivityManager
----+import app.forku.presentation.common.components.BaseScreen
---- import app.forku.presentation.navigation.Screen
---- import kotlinx.coroutines.launch
----+import androidx.compose.animation.*
----+import androidx.compose.animation.core.*
---- 
---- data class TourPage(
----     val title: String,
----@@ -29,107 +33,122 @@ data class TourPage(
---- @Composable
---- fun TourScreen(
----     navController: NavController,
-----    viewModel: TourViewModel = hiltViewModel()
----+    viewModel: TourViewModel = hiltViewModel(),
----+    networkManager: NetworkConnectivityManager
---- ) {
-----    val state by viewModel.state.collectAsState()
-----    val scope = rememberCoroutineScope()
-----    
-----    val pages = listOf(
-----        TourPage(
-----            "Driver safety and team compliance on any device.",
-----            "Learn why you're here.",
-----            R.drawable.tour_1
-----        ),
-----        TourPage(
-----            "Track compliance and safety in any workplace.",
-----            "Reflections and goals",
-----            R.drawable.tour_2
-----        ),
-----        TourPage(
-----            "Track tasks with your team or while working solo.",
-----            "Goals and Reflection",
-----            R.drawable.tour_3
-----        ),
-----        TourPage(
-----            "Follow your goals and find your motivation.",
-----            "Register to begin",
-----            R.drawable.tour_4
----+    BaseScreen(
----+        navController = navController,
----+        showTopBar = false,
----+        networkManager = networkManager
----+    ) { padding ->
----+        val state by viewModel.state.collectAsState()
----+        val scope = rememberCoroutineScope()
----+        
----+        val pages = listOf(
----+            TourPage(
----+                "Driver safety and team compliance on any device.",
----+                "Learn why you're here.",
----+                R.drawable.tour_1
----+            ),
----+            TourPage(
----+                "Track compliance and safety in any workplace.",
----+                "Reflections and goals",
----+                R.drawable.tour_2
----+            ),
----+            TourPage(
----+                "Track tasks with your team or while working solo.",
----+                "Goals and Reflection",
----+                R.drawable.tour_3
----+            ),
----+            TourPage(
----+                "Follow your goals and find your motivation.",
----+                "Register to begin",
----+                R.drawable.tour_4
----+            )
----         )
-----    )
-----
-----    val pagerState = rememberPagerState(pageCount = { pages.size })
---- 
-----    LaunchedEffect(pagerState.currentPage) {
-----        viewModel.onEvent(TourEvent.NextPage)
-----    }
----+        val pagerState = rememberPagerState(pageCount = { pages.size })
---- 
-----    Column(
-----        modifier = Modifier
-----            .fillMaxSize()
-----            .background(MaterialTheme.colorScheme.background)
-----    ) {
-----        HorizontalPager(
-----            state = pagerState,
-----            modifier = Modifier
-----                .weight(1f)
-----                .fillMaxWidth()
-----        ) { page ->
-----            TourPage(pages[page])
----+        LaunchedEffect(pagerState.currentPage) {
----+            viewModel.onEvent(TourEvent.NextPage)
----         }
---- 
-----        // Page indicator
-----        Row(
-----            Modifier
-----                .height(50.dp)
-----                .fillMaxWidth(),
-----            horizontalArrangement = Arrangement.Center,
-----            verticalAlignment = Alignment.CenterVertically
----+        Column(
----+            modifier = Modifier
----+                .fillMaxSize()
----+                .background(MaterialTheme.colorScheme.background)
----         ) {
-----            repeat(pagerState.pageCount) { iteration ->
-----                val color = if (pagerState.currentPage == iteration) {
-----                    MaterialTheme.colorScheme.primary
-----                } else {
-----                    MaterialTheme.colorScheme.onBackground.copy(alpha = 0.5f)
-----                }
-----                Box(
-----                    modifier = Modifier
-----                        .padding(2.dp)
-----                        .background(color, MaterialTheme.shapes.small)
-----                        .size(8.dp)
-----                )
----+            HorizontalPager(
----+                state = pagerState,
----+                modifier = Modifier
----+                    .weight(1f)
----+                    .fillMaxWidth()
----+            ) { page ->
----+                TourPage(pages[page])
----             }
-----        }
---- 
-----        // Buttons
-----        Row(
-----            modifier = Modifier
-----                .fillMaxWidth()
-----                .padding(16.dp),
-----            horizontalArrangement = Arrangement.spacedBy(8.dp)
-----        ) {
-----            Button(
-----                onClick = { 
-----                    navController.navigate("register") {
-----                        popUpTo("tour") { inclusive = true }
-----                    }
-----                },
-----                modifier = Modifier.weight(1f)
----+            // Page indicator
----+            Row(
----+                Modifier
----+                    .height(50.dp)
----+                    .fillMaxWidth(),
----+                horizontalArrangement = Arrangement.Center,
----+                verticalAlignment = Alignment.CenterVertically
----             ) {
-----                Text("Register")
-----            }
-----            
-----            Button(
-----                onClick = { 
-----                    navController.navigate("login") {
-----                        popUpTo("tour") { inclusive = true }
----+                repeat(pagerState.pageCount) { iteration ->
----+                    val color = if (pagerState.currentPage == iteration) {
----+                        MaterialTheme.colorScheme.primary
----+                    } else {
----+                        MaterialTheme.colorScheme.onBackground.copy(alpha = 0.5f)
----                     }
-----                },
-----                modifier = Modifier.weight(1f),
-----                colors = ButtonDefaults.buttonColors(
-----                    containerColor = MaterialTheme.colorScheme.secondary
-----                )
----+                    Box(
----+                        modifier = Modifier
----+                            .padding(2.dp)
----+                            .background(color, MaterialTheme.shapes.small)
----+                            .size(8.dp)
----+                    )
----+                }
----+            }
----+
----+            // Buttons - only show when on the last page
----+            AnimatedVisibility(
----+                visible = pagerState.currentPage == pages.size - 1,
----+                enter = fadeIn() + expandVertically(),
----+                exit = fadeOut() + shrinkVertically()
----             ) {
-----                Text("Login")
----+                Row(
----+                    modifier = Modifier
----+                        .fillMaxWidth()
----+                        .padding(16.dp),
----+                    horizontalArrangement = Arrangement.spacedBy(8.dp)
----+                ) {
----+                    Button(
----+                        onClick = { 
----+                            viewModel.onEvent(TourEvent.Register)
----+                            navController.navigate(Screen.Register.route) {
----+                                popUpTo(Screen.Tour.route) { inclusive = true }
----+                            }
----+                        },
----+                        modifier = Modifier.weight(1f)
----+                    ) {
----+                        Text("Register")
----+                    }
----+                    
----+                    Button(
----+                        onClick = { 
----+                            viewModel.onEvent(TourEvent.Login)
----+                            navController.navigate(Screen.Login.route) {
----+                                popUpTo(Screen.Tour.route) { inclusive = true }
----+                            }
----+                        },
----+                        modifier = Modifier.weight(1f),
----+                        colors = ButtonDefaults.buttonColors(
----+                            containerColor = MaterialTheme.colorScheme.secondary
----+                        )
----+                    ) {
----+                        Text("Login")
----+                    }
----+                }
----             }
----         }
----     }
----diff --git a/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt b/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt
----index 6c851b9..92af767 100644
------- a/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt
----+++ b/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt
----@@ -2,7 +2,7 @@ package app.forku.presentation.tour
---- 
---- import androidx.lifecycle.ViewModel
---- import androidx.lifecycle.viewModelScope
-----import app.forku.data.local.TokenManager
----+import app.forku.data.datastore.AuthDataStore
---- import app.forku.data.local.TourPreferences
---- import dagger.hilt.android.lifecycle.HiltViewModel
---- import kotlinx.coroutines.flow.MutableStateFlow
----@@ -13,7 +13,7 @@ import javax.inject.Inject
---- 
---- @HiltViewModel
---- class TourViewModel @Inject constructor(
-----    private val tokenManager: TokenManager,
----+    private val authDataStore: AuthDataStore,
----     private val tourPreferences: TourPreferences
---- ) : ViewModel() {
---- 
----diff --git a/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryScreen.kt b/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryScreen.kt
----index 080812a..0dfd262 100644
------- a/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryScreen.kt
----@@ -15,6 +15,7 @@ import androidx.lifecycle.compose.collectAsStateWithLifecycle
---- import app.forku.presentation.common.components.LoadingOverlay
---- import app.forku.presentation.common.components.ErrorScreen
---- import androidx.navigation.NavController
----+import app.forku.core.network.NetworkConnectivityManager
---- import app.forku.presentation.common.components.BaseScreen
---- 
---- @OptIn(ExperimentalMaterial3Api::class)
----@@ -22,7 +23,8 @@ import app.forku.presentation.common.components.BaseScreen
---- fun CicoHistoryScreen(
----     viewModel: CicoHistoryViewModel = hiltViewModel(),
----     onNavigateBack: () -> Unit,
-----    navController: NavController
----+    navController: NavController,
----+    networkManager: NetworkConnectivityManager
---- ) {
----     val state by viewModel.state.collectAsStateWithLifecycle()
---- 
----@@ -49,7 +51,8 @@ fun CicoHistoryScreen(
----                     }
----                 }
----             }
-----        }
----+        },
----+        networkManager = networkManager
----     )
---- }
---- 
----diff --git a/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt b/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt
----index c79467a..507d9d0 100644
------- a/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt
----@@ -13,21 +13,29 @@ import androidx.compose.ui.unit.dp
---- import androidx.compose.ui.unit.sp
---- import androidx.hilt.navigation.compose.hiltViewModel
---- import androidx.lifecycle.compose.collectAsStateWithLifecycle
----+import app.forku.core.network.NetworkConnectivityManager
---- import app.forku.presentation.common.components.LoadingOverlay
----+import app.forku.domain.model.user.User
----+import app.forku.domain.model.user.UserRole
----+import androidx.navigation.NavController
----+import app.forku.presentation.navigation.Screen
----+
---- 
---- @OptIn(ExperimentalMaterial3Api::class)
---- @Composable
---- fun LoginScreen(
----     viewModel: LoginViewModel = hiltViewModel(),
-----    onLoginSuccess: () -> Unit
----+    onLoginSuccess: (User) -> Unit,
----+    networkManager: NetworkConnectivityManager,
----+    navController: NavController
---- ) {
-----    var username by remember { mutableStateOf("") }
----+    val state by viewModel.state.collectAsState()
----+    var email by remember { mutableStateOf("") }
----     var password by remember { mutableStateOf("") }
-----    val state by viewModel.state.collectAsStateWithLifecycle()
---- 
----     LaunchedEffect(state) {
----         if (state is LoginState.Success) {
-----            onLoginSuccess()
----+            onLoginSuccess((state as LoginState.Success).user)
----         }
----     }
---- 
----@@ -61,8 +69,8 @@ fun LoginScreen(
----             Spacer(modifier = Modifier.height(32.dp))
---- 
----             OutlinedTextField(
-----                value = username,
-----                onValueChange = { username = it },
----+                value = email,
----+                onValueChange = { email = it },
----                 label = { Text("Phone or email") },
----                 modifier = Modifier.fillMaxWidth(),
----                 colors = OutlinedTextFieldDefaults.colors(
----@@ -104,13 +112,13 @@ fun LoginScreen(
----             Spacer(modifier = Modifier.height(24.dp))
---- 
----             Button(
-----                onClick = { viewModel.login(username, password) },
----+                onClick = { viewModel.login(email, password) },
----                 modifier = Modifier.fillMaxWidth(),
----                 colors = ButtonDefaults.buttonColors(
----                     containerColor = Color(0xFFFFA726),
----                     contentColor = Color.Black
----                 ),
-----                enabled = username.isNotBlank() && password.isNotBlank() && state !is LoginState.Loading
----+                enabled = email.isNotBlank() && password.isNotBlank() && state !is LoginState.Loading
----             ) {
----                 if (state is LoginState.Loading) {
----                     CircularProgressIndicator(
----@@ -121,6 +129,28 @@ fun LoginScreen(
----                     Text("Log in")
----                 }
----             }
----+
----+            Spacer(modifier = Modifier.height(16.dp))
----+
----+            Row(
----+                modifier = Modifier.fillMaxWidth(),
----+                horizontalArrangement = Arrangement.Center,
----+                verticalAlignment = Alignment.CenterVertically
----+            ) {
----+                Text(
----+                    text = "Don't have an account? ",
----+                    color = MaterialTheme.colorScheme.onBackground
----+                )
----+                TextButton(
----+                    onClick = { navController.navigate(Screen.Register.route) },
----+                    colors = ButtonDefaults.textButtonColors(
----+                        contentColor = Color(0xFFFFA726)
----+                    )
----+                ) {
----+                    Text("Register")
----+                }
----+            }
----+
----             Spacer(modifier = Modifier.height(24.dp))
----         }
---- 
----diff --git a/app/src/main/java/app/forku/presentation/user/login/LoginState.kt b/app/src/main/java/app/forku/presentation/user/login/LoginState.kt
----index 2966f24..64b0c8e 100644
------- a/app/src/main/java/app/forku/presentation/user/login/LoginState.kt
----+++ b/app/src/main/java/app/forku/presentation/user/login/LoginState.kt
----@@ -3,10 +3,9 @@ package app.forku.presentation.user.login
---- import app.forku.domain.model.user.User
---- 
---- sealed class LoginState {
-----    data object Idle : LoginState()
----     data object Initial : LoginState()
----+    data object Idle : LoginState()
----     data object Loading : LoginState()
----     data class Success(val user: User) : LoginState()
----     data class Error(val message: String) : LoginState()
-----
---- }
----diff --git a/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt b/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt
----index b0a03c0..63b1f44 100644
------- a/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt
----+++ b/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt
----@@ -8,7 +8,8 @@ import dagger.hilt.android.lifecycle.HiltViewModel
---- import javax.inject.Inject
---- import java.net.UnknownHostException
---- import java.net.SocketTimeoutException
-----import app.forku.data.local.TokenManager
----+import app.forku.data.datastore.AuthDataStore
----+import app.forku.data.local.TourPreferences
---- import kotlinx.coroutines.flow.MutableStateFlow
---- import kotlinx.coroutines.flow.asStateFlow
---- import kotlinx.coroutines.launch
----@@ -16,7 +17,8 @@ import kotlinx.coroutines.launch
---- @HiltViewModel
---- class LoginViewModel @Inject constructor(
----     private val loginUseCase: LoginUseCase,
-----    private val tokenManager: TokenManager
----+    private val authDataStore: AuthDataStore,
----+    private val tourPreferences: TourPreferences
---- ) : ViewModel() {
----     private val _state = MutableStateFlow<LoginState>(LoginState.Idle)
----     val state = _state.asStateFlow()
----@@ -29,10 +31,8 @@ class LoginViewModel @Inject constructor(
---- 
----                 val result = loginUseCase(sanitizedEmail, sanitizedPassword)
----                 result.onSuccess { user ->
-----                    tokenManager.saveToken(
-----                        token = user.id,
-----                        refreshToken = "temp_refresh_token"
-----                    )
----+                    authDataStore.setCurrentUser(user)
----+                    tourPreferences.setTourCompleted()
----                     _state.value = LoginState.Success(user)
----                 }.onFailure { error ->
----                     val errorMessage = when (error) {
----@@ -55,7 +55,7 @@ class LoginViewModel @Inject constructor(
---- 
----     fun logout() {
----         viewModelScope.launch {
-----            tokenManager.clearToken()
----+            authDataStore.clearAuth()
----             _state.value = LoginState.Idle
----         }
----     }
----diff --git a/app/src/main/java/app/forku/presentation/user/profile/ProfileScreen.kt b/app/src/main/java/app/forku/presentation/user/profile/ProfileScreen.kt
----index bc05dd9..8cb9827 100644
------- a/app/src/main/java/app/forku/presentation/user/profile/ProfileScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/user/profile/ProfileScreen.kt
----@@ -45,6 +45,7 @@ import app.forku.presentation.user.profile.components.ProfileSections
---- import app.forku.presentation.user.profile.components.StatsGrid
---- import coil.compose.AsyncImage
---- import androidx.navigation.NavController
----+import app.forku.core.network.NetworkConnectivityManager
---- import app.forku.presentation.common.components.BaseScreen
---- import app.forku.presentation.navigation.Screen
---- 
----@@ -55,7 +56,8 @@ fun ProfileScreen(
----     onNavigateBack: () -> Unit,
----     onNavigateToIncidents: () -> Unit,
----     onNavigateToCicoHistory: () -> Unit,
-----    navController: NavController
----+    navController: NavController,
----+    networkManager: NetworkConnectivityManager
---- ) {
----     val state by viewModel.state.collectAsStateWithLifecycle()
----     BaseScreen(
----@@ -91,7 +93,8 @@ fun ProfileScreen(
----                     )
----                 }
----             }
-----        }
----+        },
----+        networkManager = networkManager
----     )
---- }
---- 
----@@ -175,7 +178,7 @@ private fun ProfileHeader(
----                             color = Color.Gray
----                         )
----                         Text(
-----                            text = state.user?.name ?: "",
----+                            text = state.user?.fullName ?: "",
----                             style = MaterialTheme.typography.titleLarge
----                         )
----                         Spacer(modifier = Modifier.height(8.dp))
----diff --git a/app/src/main/java/app/forku/presentation/user/register/RegisterScreen.kt b/app/src/main/java/app/forku/presentation/user/register/RegisterScreen.kt
----index c49528f..efb9a72 100644
------- a/app/src/main/java/app/forku/presentation/user/register/RegisterScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/user/register/RegisterScreen.kt
----@@ -23,13 +23,16 @@ import androidx.compose.ui.text.input.VisualTransformation
---- import androidx.compose.ui.unit.dp
---- import androidx.hilt.navigation.compose.hiltViewModel
---- import androidx.navigation.NavController
----+import app.forku.core.network.NetworkConnectivityManager
---- import app.forku.presentation.common.components.LoadingScreen
---- import app.forku.presentation.navigation.Screen
---- 
----+
---- @Composable
---- fun RegisterScreen(
----     navController: NavController,
-----    viewModel: RegisterViewModel = hiltViewModel()
----+    viewModel: RegisterViewModel = hiltViewModel(),
----+    networkManager: NetworkConnectivityManager
---- ) {
----     val state by viewModel.state.collectAsState()
----     val focusManager = LocalFocusManager.current
----diff --git a/app/src/main/java/app/forku/presentation/vehicle/components/VehicleQrCodeModal.kt b/app/src/main/java/app/forku/presentation/vehicle/components/VehicleQrCodeModal.kt
----index 8f755e7..8a4db90 100644
------- a/app/src/main/java/app/forku/presentation/vehicle/components/VehicleQrCodeModal.kt
----+++ b/app/src/main/java/app/forku/presentation/vehicle/components/VehicleQrCodeModal.kt
----@@ -1,10 +1,13 @@
---- package app.forku.presentation.vehicle.components
---- 
---- import androidx.compose.foundation.layout.*
----+import androidx.compose.material.icons.Icons
----+import androidx.compose.material.icons.filled.Share
---- import androidx.compose.material3.*
---- import androidx.compose.runtime.Composable
---- import androidx.compose.ui.Alignment
---- import androidx.compose.ui.Modifier
----+import androidx.compose.ui.platform.LocalContext
---- import androidx.compose.ui.unit.dp
---- import app.forku.presentation.common.components.AppModal
---- 
----@@ -12,6 +15,7 @@ import app.forku.presentation.common.components.AppModal
---- fun VehicleQrCodeModal(
----     vehicleId: String,
----     onDismiss: () -> Unit,
----+    onShare: () -> Unit,
----     modifier: Modifier = Modifier.size(256.dp)
---- ) {
----     AppModal(
----@@ -31,6 +35,20 @@ fun VehicleQrCodeModal(
----                     modifier = Modifier.size(256.dp)
----                 )
----                 Spacer(modifier = Modifier.height(16.dp))
----+                Button(
----+                    onClick = onShare,
----+                    colors = ButtonDefaults.buttonColors(
----+                        containerColor = MaterialTheme.colorScheme.secondary
----+                    )
----+                ) {
----+                    Icon(
----+                        imageVector = Icons.Default.Share,
----+                        contentDescription = "Share QR Code",
----+                        modifier = Modifier.size(18.dp)
----+                    )
----+                    Spacer(modifier = Modifier.width(8.dp))
----+                    Text("Share QR Code")
----+                }
----             }
----         }
----     )
----diff --git a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListScreen.kt b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListScreen.kt
----index 2299b6f..53a8a6d 100644
------- a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListScreen.kt
----@@ -25,13 +25,15 @@ import androidx.compose.material.ExperimentalMaterialApi
---- import androidx.compose.material.pullrefresh.PullRefreshIndicator
---- import androidx.compose.material.pullrefresh.pullRefresh
---- import androidx.compose.material.pullrefresh.rememberPullRefreshState
----+import app.forku.core.network.NetworkConnectivityManager
---- 
---- @OptIn(ExperimentalMaterialApi::class)
---- @Composable
---- fun VehicleListScreen(
----     navController: NavController,
----     viewModel: VehicleListViewModel = hiltViewModel(),
-----    onVehicleClick: (String) -> Unit
----+    onVehicleClick: (String) -> Unit,
----+    networkManager: NetworkConnectivityManager
---- ) {
----     val state by viewModel.state.collectAsStateWithLifecycle()
----     
----@@ -46,7 +48,8 @@ fun VehicleListScreen(
----         topBarTitle = "Vehicles",
----         showBottomBar = true,
----         onRefresh = { viewModel.loadVehicles(true) },
-----        showLoadingOnRefresh = false
----+        showLoadingOnRefresh = false,
----+        networkManager = networkManager
----     ) { padding ->
----         Box(
----             modifier = Modifier
----diff --git a/app/src/main/java/app/forku/presentation/vehicle/manual/PerformanceReportScreen.kt b/app/src/main/java/app/forku/presentation/vehicle/manual/PerformanceReportScreen.kt
----index 48fb55b..b9de615 100644
------- a/app/src/main/java/app/forku/presentation/vehicle/manual/PerformanceReportScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/vehicle/manual/PerformanceReportScreen.kt
----@@ -7,12 +7,14 @@ import androidx.compose.runtime.Composable
---- import androidx.compose.ui.Modifier
---- import androidx.compose.ui.viewinterop.AndroidView
---- import androidx.navigation.NavController
----+import app.forku.core.network.NetworkConnectivityManager
---- import app.forku.presentation.common.components.BaseScreen
---- 
---- @Composable
---- fun PerformanceReportScreen(
----     navController: NavController,
-----    pdfUrl: String = "https://drive.google.com/file/d/1UXNMsRFqJH4fPfjtDvbvX-N57tGu-uUJ/preview"
----+    pdfUrl: String = "https://drive.google.com/file/d/1UXNMsRFqJH4fPfjtDvbvX-N57tGu-uUJ/preview",
----+    networkManager: NetworkConnectivityManager
---- ) {
----     BaseScreen(
----         navController = navController,
----@@ -29,6 +31,7 @@ fun PerformanceReportScreen(
----                 },
----                 modifier = Modifier.fillMaxSize()
----             )
-----        }
----+        },
----+        networkManager = networkManager
----     )
---- } 
----\ No newline at end of file
----diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
----index de8a1e0..5f06274 100644
------- a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
----@@ -23,6 +23,7 @@ import androidx.hilt.navigation.compose.hiltViewModel
---- import app.forku.domain.model.vehicle.VehicleStatus
---- import app.forku.presentation.vehicle.profile.components.VehicleProfileSummary
---- import androidx.navigation.NavController
----+import app.forku.core.network.NetworkConnectivityManager
---- 
---- 
---- @OptIn(ExperimentalMaterial3Api::class)
----@@ -33,7 +34,8 @@ fun VehicleProfileScreen(
----     onNavigateBack: () -> Unit,
----     onPreShiftCheck: (String) -> Unit,
----     onScanQrCode: () -> Unit,
-----    navController: NavController
----+    navController: NavController,
----+    networkManager: NetworkConnectivityManager
---- ) {
----     val state by viewModel.state.collectAsStateWithLifecycle()
----     var showMenu by remember { mutableStateOf(false) }
----@@ -149,7 +151,8 @@ fun VehicleProfileScreen(
----                         if (state.showQrCode) {
----                             VehicleQrCodeModal(
----                                 vehicleId = vehicle.id,
-----                                onDismiss = viewModel::toggleQrCode
----+                                onDismiss = viewModel::toggleQrCode,
----+                                onShare = viewModel::shareQrCode
----                             )
----                         }
---- 
----diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt
----index 9eee7cc..25bfabc 100644
------- a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt
----+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt
----@@ -1,5 +1,10 @@
---- package app.forku.presentation.vehicle.profile
---- 
----+import android.content.Context
----+import android.content.Intent
----+import android.graphics.Bitmap
----+import android.net.Uri
----+import androidx.core.content.FileProvider
---- import androidx.lifecycle.SavedStateHandle
---- import androidx.lifecycle.ViewModel
---- import androidx.lifecycle.viewModelScope
----@@ -9,6 +14,7 @@ import app.forku.domain.repository.vehicle.VehicleRepository
---- import app.forku.domain.usecase.vehicle.GetVehicleUseCase
---- import app.forku.domain.model.session.SessionStatus
---- import dagger.hilt.android.lifecycle.HiltViewModel
----+import dagger.hilt.android.qualifiers.ApplicationContext
---- import kotlinx.coroutines.flow.MutableStateFlow
---- import kotlinx.coroutines.flow.asStateFlow
---- import kotlinx.coroutines.flow.update
----@@ -21,7 +27,9 @@ import app.forku.domain.repository.checklist.ChecklistRepository
---- import app.forku.domain.model.vehicle.getErrorMessage
---- import app.forku.domain.model.vehicle.isAvailable
---- import app.forku.domain.repository.user.UserRepository
-----
----+import app.forku.presentation.vehicle.components.QrCodeGenerator
----+import java.io.File
----+import java.io.FileOutputStream
---- 
---- @HiltViewModel
---- class VehicleProfileViewModel @Inject constructor(
----@@ -32,7 +40,8 @@ class VehicleProfileViewModel @Inject constructor(
----     private val getVehicleStatusUseCase: GetVehicleStatusUseCase,
----     private val checklistRepository: ChecklistRepository,
----     private val userRepository: UserRepository,
-----    savedStateHandle: SavedStateHandle
----+    savedStateHandle: SavedStateHandle,
----+    @ApplicationContext private val context: Context
---- ) : ViewModel() {
----     private val _state = MutableStateFlow(VehicleProfileState())
----     val state = _state.asStateFlow()
----@@ -109,6 +118,50 @@ class VehicleProfileViewModel @Inject constructor(
----         _state.update { it.copy(showQrCode = !it.showQrCode) }
----     }
---- 
----+    fun shareQrCode() {
----+        viewModelScope.launch {
----+            try {
----+                state.value.vehicle?.let { vehicle ->
----+                    // Generate QR code bitmap
----+                    val qrBitmap = QrCodeGenerator.generateVehicleQrCode(vehicle.id)
----+                    
----+                    // Save bitmap to temporary file
----+                    val cachePath = File(context.cacheDir, "qr_codes")
----+                    cachePath.mkdirs()
----+                    
----+                    val file = File(cachePath, "vehicle_qr_${vehicle.id}.png")
----+                    FileOutputStream(file).use { out ->
----+                        qrBitmap.compress(Bitmap.CompressFormat.PNG, 100, out)
----+                    }
----+                    
----+                    // Get content URI using FileProvider
----+                    val contentUri = FileProvider.getUriForFile(
----+                        context,
----+                        "${context.packageName}.fileprovider",
----+                        file
----+                    )
----+                    
----+                    // Create share intent
----+                    val shareIntent = Intent(Intent.ACTION_SEND).apply {
----+                        type = "image/png"
----+                        putExtra(Intent.EXTRA_STREAM, contentUri)
----+                        putExtra(Intent.EXTRA_SUBJECT, "Vehicle QR Code")
----+                        putExtra(Intent.EXTRA_TEXT, "Scan this QR code to access vehicle information")
----+                        addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
----+                    }
----+                    
----+                    // Start share activity
----+                    val chooserIntent = Intent.createChooser(shareIntent, "Share QR Code")
----+                    chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
----+                    context.startActivity(chooserIntent)
----+                }
----+            } catch (e: Exception) {
----+                // Handle error
----+                _state.update { it.copy(error = "Error sharing QR code: ${e.message}") }
----+            }
----+        }
----+    }
----+
----     fun startSessionFromCheck() {
----         viewModelScope.launch {
----             try {
----diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
----index 0644154..8b0d38d 100644
------- a/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
----+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
----@@ -200,7 +200,7 @@ fun VehicleDetailsSection(
----                 ) {
----                     activeOperator?.role?.let {
----                         OperatorProfile(
-----                            name = activeOperator?.name ?: "No operator assigned",
----+                            name = activeOperator?.fullName ?: "No operator assigned",
----                             imageUrl = activeOperator.photoUrl,
----                             modifier = Modifier.padding(0.dp, 8.dp),
----                             role = it.name
----diff --git a/app/src/main/res/xml/file_paths.xml b/app/src/main/res/xml/file_paths.xml
----index fcbcd7a..3720d23 100644
------- a/app/src/main/res/xml/file_paths.xml
----+++ b/app/src/main/res/xml/file_paths.xml
----@@ -6,4 +6,7 @@
----     <external-cache-path
----         name="external_cached_photos"
----         path="." />
----+    <cache-path
----+        name="qr_codes"
----+        path="qr_codes/"/>
---- </paths>
----\ No newline at end of file
----diff --git a/build.gradle.kts b/build.gradle.kts
----index 221d560..d3c4b1b 100644
------- a/build.gradle.kts
----+++ b/build.gradle.kts
----@@ -1,7 +1,12 @@
---- // Top-level build file where you can add configuration options common to all sub-projects/modules.
----+@Suppress("DSL_SCOPE_VIOLATION") // Remove when fixed https://youtrack.jetbrains.com/issue/KTIJ-19369
---- plugins {
----     alias(libs.plugins.android.application) apply false
----     alias(libs.plugins.kotlin.android) apply false
----     alias(libs.plugins.hilt.android) apply false
----     alias(libs.plugins.kotlin.ksp) apply false
-----}
----\ No newline at end of file
----+    alias(libs.plugins.kotlin.serialization) apply false
----+    alias(libs.plugins.google.services) apply false
----+}
----+
----+true // Needed to make the Suppress annotation work for the plugins block
----\ No newline at end of file
----diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
----index 6e81f17..6b24877 100644
------- a/gradle/libs.versions.toml
----+++ b/gradle/libs.versions.toml
----@@ -6,6 +6,10 @@ kotlinxSerialization = "1.6.0"
---- ksp = "1.9.22-1.0.17"
---- location = "21.0.1"
---- 
----+# Firebase
----+firebase-bom = "32.7.2"
----+google-services = "4.4.1"
----+
---- # Core Android libraries
---- core-ktx = "1.12.0"
---- appcompat = "1.6.1"
----@@ -127,10 +131,19 @@ kotlin-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-j
---- androidx-compose-material-icons-core = { group = "androidx.compose.material", name = "material-icons-core", version.ref = "compose-material" }
---- androidx-compose-material-icons-extended = { group = "androidx.compose.material", name = "material-icons-extended", version.ref = "compose-material" }
---- 
----+# Firebase
----+firebase-bom = { group = "com.google.firebase", name = "firebase-bom", version.ref = "firebase-bom" }
----+firebase-analytics = { group = "com.google.firebase", name = "firebase-analytics" }
----+firebase-auth = { group = "com.google.firebase", name = "firebase-auth" }
----+firebase-firestore = { group = "com.google.firebase", name = "firebase-firestore" }
----+firebase-storage = { group = "com.google.firebase", name = "firebase-storage" }
----+firebase-messaging = { group = "com.google.firebase", name = "firebase-messaging" }
----+
---- 
---- [plugins]
---- android-application = { id = "com.android.application", version.ref = "agp" }
---- kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
---- hilt-android = { id = "com.google.dagger.hilt.android", version.ref = "hilt" }
---- kotlin-ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
-----kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
----\ No newline at end of file
----+kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
----+google-services = { id = "com.google.gms.google-services", version.ref = "google-services" }
----\ No newline at end of file
