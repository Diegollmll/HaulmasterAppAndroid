diff --git a/MobileDevelopmentContext/GoForkuApi.pdf b/MobileDevelopmentContext/GoForkuApi.pdf
deleted file mode 100644
index cc2b7ea..0000000
Binary files a/MobileDevelopmentContext/GoForkuApi.pdf and /dev/null differ
diff --git a/MobileDevelopmentContext/GoForkuApi.png b/MobileDevelopmentContext/GoForkuApi.png
deleted file mode 100644
index 22e42c7..0000000
Binary files a/MobileDevelopmentContext/GoForkuApi.png and /dev/null differ
diff --git a/MobileDevelopmentContext/godev-collectiveintelligence-au-forkuapp.png b/MobileDevelopmentContext/godev-collectiveintelligence-au-forkuapp.png
deleted file mode 100644
index c90729f..0000000
Binary files a/MobileDevelopmentContext/godev-collectiveintelligence-au-forkuapp.png and /dev/null differ
diff --git a/app/src/main/java/app/forku/ForkUApplication.kt b/app/src/main/java/app/forku/ForkUApplication.kt
index 4f2a6bb..e0773d0 100644
--- a/app/src/main/java/app/forku/ForkUApplication.kt
+++ b/app/src/main/java/app/forku/ForkUApplication.kt
@@ -84,7 +84,7 @@ class ForkUApplication : Application(), ProviderInstallListener {
 
     private fun initializeAuth() {
         CoroutineScope(Dispatchers.IO).launch {
-            authDataStore.initializeToken()
+            authDataStore.initializeApplicationToken()
         }
     }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/MainActivity.kt b/app/src/main/java/app/forku/MainActivity.kt
index 4a746a1..a3d4a2d 100644
--- a/app/src/main/java/app/forku/MainActivity.kt
+++ b/app/src/main/java/app/forku/MainActivity.kt
@@ -32,6 +32,15 @@ import app.forku.core.location.LocationManager
 import app.forku.presentation.dashboard.DashboardViewModel
 import androidx.hilt.navigation.compose.hiltViewModel
 import app.forku.domain.model.user.UserRole
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.lifecycle.Lifecycle
+import androidx.lifecycle.repeatOnLifecycle
+import androidx.navigation.compose.rememberNavController
+import app.forku.core.auth.AuthenticationState
+import app.forku.core.auth.TokenErrorHandler
+import kotlinx.coroutines.flow.collectLatest
 
 @AndroidEntryPoint
 class MainActivity : ComponentActivity() {
@@ -46,6 +55,9 @@ class MainActivity : ComponentActivity() {
 
     @Inject
     lateinit var locationManager: LocationManager
+    
+    @Inject
+    lateinit var tokenErrorHandler: TokenErrorHandler
 
     private val loginViewModel: LoginViewModel by viewModels()
 
@@ -57,9 +69,9 @@ class MainActivity : ComponentActivity() {
 
         super.onCreate(savedInstanceState)
         
-        // Inicializar el token al inicio
+        // Initialize token at startup
         lifecycleScope.launch {
-            authDataStore.initializeToken()
+            authDataStore.initializeApplicationToken()
         }
 
         setContent {
@@ -68,10 +80,51 @@ class MainActivity : ComponentActivity() {
             val userRole = currentUser?.role
             val isAuthenticated by dashboardViewModel.hasToken.collectAsState()
             val tourCompleted by dashboardViewModel.tourCompleted.collectAsState()
-
+            
             val loginState by loginViewModel.state.collectAsState()
-            val hasToken = authDataStore.getToken() != null
-            val tourCompletedFromPrefs = tourPreferences.hasTourCompleted()
+            val navController = rememberNavController()
+            
+            // State to track if we're showing an auth error
+            val authErrorMessage = remember { mutableStateOf<String?>(null) }
+            
+            // Observe authentication state in composition
+            val authState by tokenErrorHandler.authenticationState.collectAsState()
+            
+            // Watch for authentication events that require logging out
+            LaunchedEffect(authState) {
+                when (authState) {
+                    is AuthenticationState.RequiresAuthentication -> {
+                        // Set error message and show it
+                        val message = (authState as AuthenticationState.RequiresAuthentication).message
+                        Toast.makeText(
+                            this@MainActivity,
+                            "Session expired: $message. Please log in again.",
+                            Toast.LENGTH_LONG
+                        ).show()
+                        
+                        // Clear auth data
+                        authDataStore.clearAuth()
+                        
+                        // Navigate to login screen
+                        if (navController.currentDestination?.route != Screen.Login.route) {
+                            navController.navigate(Screen.Login.route) {
+                                // Pop up to the start destination to clean up the back stack
+                                popUpTo(navController.graph.startDestinationId) {
+                                    saveState = false
+                                }
+                                // Avoid multiple copies of the same destination
+                                launchSingleTop = true
+                                // Restore state when navigating back
+                                restoreState = false
+                            }
+                        }
+                    }
+                    AuthenticationState.Authenticated -> {
+                        // Clear any error message
+                        authErrorMessage.value = null
+                    }
+                }
+            }
 
             ForkUTheme {
                 when (loginState) {
@@ -85,7 +138,15 @@ class MainActivity : ComponentActivity() {
                         Toast.makeText(this, error, Toast.LENGTH_LONG).show()
                     }
                     else -> {
+                        // Reset auth state when login succeeds
+                        if (loginState is LoginState.Success) {
+                            LaunchedEffect(Unit) {
+                                tokenErrorHandler.resetAuthenticationState()
+                            }
+                        }
+                        
                         NavGraph(
+                            navController = navController,
                             networkManager = networkManager,
                             locationManager = locationManager,
                             userRole = userRole ?: UserRole.OPERATOR,
diff --git a/app/src/main/java/app/forku/data/api/BusinessApi.kt b/app/src/main/java/app/forku/data/api/BusinessApi.kt
index 64e7be2..a7af94f 100644
--- a/app/src/main/java/app/forku/data/api/BusinessApi.kt
+++ b/app/src/main/java/app/forku/data/api/BusinessApi.kt
@@ -1,52 +1,79 @@
 package app.forku.data.api
 
 import app.forku.data.api.dto.user.UserDto
-import app.forku.data.api.dto.BusinessDto
-import app.forku.data.api.dto.BusinessStats
-
+import app.forku.data.api.dto.business.BusinessItemDto
+import app.forku.data.api.dto.business.BusinessStats
+import retrofit2.Response
 import retrofit2.http.*
 
 interface BusinessApi {
-    @GET("business")
-    suspend fun getAllBusinesses(): List<BusinessDto>
-
-    @GET("business")
-    suspend fun getAllBusinesses(
-        @Query("superAdminId") superAdminId: String? = null,
-        @Query("systemOwnerId") systemOwnerId: String? = null,
-        @Query("status") status: String? = null
-    ): List<BusinessDto>
-
-    @GET("business/{id}")
-    suspend fun getBusinessById(@Path("id") id: String): BusinessDto
+    @GET("api/business/byid/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getBusinessById(@Path("id") id: String): Response<BusinessItemDto>
 
-    @POST("business")
-    suspend fun createBusiness(@Body request: CreateBusinessRequest): retrofit2.Response<BusinessDto>
+    @GET("api/business/list")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getAllBusinesses(): Response<List<BusinessItemDto>>
 
-    @PUT("business/{id}")
-    suspend fun updateBusiness(
-        @Path("id") id: String,
-        @Body request: UpdateBusinessRequest
-    ): BusinessDto
+    @GET("dataset/api/business/count")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getBusinessCount(): Response<Int>
 
-    @DELETE("business/{id}")
-    suspend fun deleteBusiness(@Path("id") id: String)
+    @POST("api/business")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun saveBusiness(@Body business: BusinessItemDto): Response<BusinessItemDto>
 
-    @GET("user")
-    suspend fun getBusinessUsers(@Query("businessId") businessId: String): List<UserDto>
+    @DELETE("dataset/api/business/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun deleteBusiness(@Path("id") id: String): Response<Unit>
 
-    @GET("business/system-owner/{systemOwnerId}")
-    suspend fun getBusinessesBySystemOwnerId(@Path("systemOwnerId") systemOwnerId: String): List<BusinessDto>
+    @GET("dataset/api/business/list")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getAllBusinessesDataset(): Response<List<BusinessItemDto>>
 
-    @GET("business/super-admin/{superAdminId}")
-    suspend fun getBusinessesBySuperAdminId(@Path("superAdminId") superAdminId: String): List<BusinessDto>
+    @GET("dataset/api/business/byid/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getBusinessByIdDataset(@Path("id") id: String): Response<BusinessItemDto>
 
-    @GET("business/stats/system-owner/{systemOwnerId}")
-    suspend fun getSystemOwnerBusinessStats(@Path("systemOwnerId") systemOwnerId: String): BusinessStats
+    @POST("dataset/api/business")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun createBusinessDataset(@Body business: BusinessItemDto): Response<BusinessItemDto>
 
-    @GET("business/stats/super-admin/{superAdminId}")
-    suspend fun getSuperAdminBusinessStats(@Path("superAdminId") superAdminId: String): BusinessStats
+    @GET("api/business/{businessId}/user")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getBusinessUsers(@Path("businessId") businessId: String): Response<List<UserDto>>
 
-    @GET("vehicle")
-    suspend fun getBusinessVehicles(@Query("businessId") businessId: String): List<String>
+    @GET("api/business/{businessId}/vehicle")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getBusinessVehicles(@Path("businessId") businessId: String): Response<List<String>>
 }
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/ChecklistApi.kt b/app/src/main/java/app/forku/data/api/ChecklistApi.kt
index 050ac5e..fecf81b 100644
--- a/app/src/main/java/app/forku/data/api/ChecklistApi.kt
+++ b/app/src/main/java/app/forku/data/api/ChecklistApi.kt
@@ -1,30 +1,63 @@
 package app.forku.data.api
 
-import app.forku.data.api.dto.checklist.ChecklistResponseDto
-import app.forku.data.api.dto.checklist.PreShiftCheckDto
+import app.forku.data.api.dto.checklist.ChecklistDto
 import retrofit2.Response
 import retrofit2.http.*
 
 interface ChecklistApi {
-    @GET("checklist_questionary")
-    suspend fun getChecklistQuestionary(): Response<ChecklistResponseDto>
-
-    @GET("checks")
-    suspend fun getAllChecks(@Query("businessId") businessId: String): Response<List<PreShiftCheckDto>>
-
-    @GET("checks/{checkId}")
-    suspend fun getCheckById(
-        @Path("checkId") checkId: String
-    ): Response<PreShiftCheckDto>
-
-    @POST("checks")
-    suspend fun createGlobalCheck(
-        @Body check: PreShiftCheckDto
-    ): Response<PreShiftCheckDto>
-
-    @PUT("checks/{checkId}")
-    suspend fun updateGlobalCheck(
-        @Path("checkId") checkId: String,
-        @Body check: PreShiftCheckDto
-    ): Response<PreShiftCheckDto>
+    @GET("api/checklist/list")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getList(): Response<List<ChecklistDto>>
+
+    @GET("api/checklist/byid/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getById(@Path("id") id: String): Response<ChecklistDto>
+
+    @POST("api/checklist")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun save(@Body checklist: ChecklistDto): Response<ChecklistDto>
+
+    @DELETE("dataset/api/checklist/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun delete(@Path("id") id: String): Response<Unit>
+
+    @GET("dataset/api/checklist/count")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getCount(): Response<Int>
+
+    @GET("dataset/api/checklist/list")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getListDataset(): Response<List<ChecklistDto>>
+
+    @GET("dataset/api/checklist/byid/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getByIdDataset(@Path("id") id: String): Response<ChecklistDto>
+
+    @POST("dataset/api/checklist")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun saveDataset(@Body checklist: ChecklistDto): Response<ChecklistDto>
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/CountryApi.kt b/app/src/main/java/app/forku/data/api/CountryApi.kt
index e18bec7..88f569f 100644
--- a/app/src/main/java/app/forku/data/api/CountryApi.kt
+++ b/app/src/main/java/app/forku/data/api/CountryApi.kt
@@ -5,21 +5,45 @@ import retrofit2.Response
 import retrofit2.http.*
 
 interface CountryApi {
-    @GET("country")
+    @GET("api/country/list")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun getAllCountries(): Response<List<CountryDto>>
     
-    @GET("country/{id}")
-    suspend fun getCountry(@Path("id") id: String): Response<CountryDto>
+    @GET("api/country/byid/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getCountryById(@Path("id") id: String): Response<CountryDto>
     
-    @POST("country")
+    @POST("api/country")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun createCountry(@Body country: CountryDto): Response<CountryDto>
     
-    @PUT("country/{id}")
-    suspend fun updateCountry(
-        @Path("id") id: String,
-        @Body country: CountryDto
-    ): Response<CountryDto>
+    @POST("api/country")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun updateCountry(@Body country: CountryDto): Response<CountryDto>
     
-    @DELETE("country/{id}")
+    @DELETE("dataset/api/country/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun deleteCountry(@Path("id") id: String): Response<Unit>
+    
+    @GET("dataset/api/country/count")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getCountryCount(): Response<Int>
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/CountryStateApi.kt b/app/src/main/java/app/forku/data/api/CountryStateApi.kt
new file mode 100644
index 0000000..bac99d9
--- /dev/null
+++ b/app/src/main/java/app/forku/data/api/CountryStateApi.kt
@@ -0,0 +1,71 @@
+package app.forku.data.api
+
+import app.forku.data.api.dto.country.CountryStateDto
+import retrofit2.Response
+import retrofit2.http.*
+
+interface CountryStateApi {
+    @GET("api/countrystate/list")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getAllStates(): Response<List<CountryStateDto>>
+
+    @GET("api/countrystate/byid/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getStateById(@Path("id") id: String): Response<CountryStateDto>
+
+    @POST("api/countrystate")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun createState(@Body state: CountryStateDto): Response<CountryStateDto>
+
+    @POST("api/countrystate")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun updateState(@Body state: CountryStateDto): Response<CountryStateDto>
+
+    @DELETE("dataset/api/countrystate/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun deleteState(@Path("id") id: String): Response<Unit>
+
+    @GET("dataset/api/countrystate/count")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getStateCount(): Response<Int>
+
+    // Additional endpoints for dataset format if needed
+    @GET("dataset/api/countrystate/list")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getAllStatesDataset(): Response<List<CountryStateDto>>
+
+    @GET("dataset/api/countrystate/byid/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getStateByIdDataset(@Path("id") id: String): Response<CountryStateDto>
+
+    @POST("dataset/api/countrystate")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun createStateDataset(@Body state: CountryStateDto): Response<CountryStateDto>
+} 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/FeedbackApi.kt b/app/src/main/java/app/forku/data/api/FeedbackApi.kt
index 3c2c20d..79bcb03 100644
--- a/app/src/main/java/app/forku/data/api/FeedbackApi.kt
+++ b/app/src/main/java/app/forku/data/api/FeedbackApi.kt
@@ -1,24 +1,53 @@
 package app.forku.data.api
 
 import app.forku.data.api.dto.FeedbackDto
+import retrofit2.Response
 import retrofit2.http.*
 
 interface FeedbackApi {
-    @POST("feedback")
-    suspend fun submitFeedback(@Body feedback: FeedbackDto): FeedbackDto
+    @POST("api/feedback")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun submitFeedback(@Body feedback: FeedbackDto): Response<FeedbackDto>
 
-    @GET("feedback")
-    suspend fun getFeedbacks(): List<FeedbackDto>
+    @GET("api/feedback/list")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getFeedbacks(): Response<List<FeedbackDto>>
 
-    @GET("feedback/{id}")
-    suspend fun getFeedback(@Path("id") id: String): FeedbackDto
+    @GET("api/feedback/byid/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getFeedback(@Path("id") id: String): Response<FeedbackDto>
 
-    @PUT("feedback/{id}")
+    @PUT("api/feedback/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun updateFeedback(
         @Path("id") id: String,
         @Body feedback: FeedbackDto
-    ): FeedbackDto
+    ): Response<FeedbackDto>
 
-    @DELETE("feedback/{id}")
-    suspend fun deleteFeedback(@Path("id") id: String)
+    @DELETE("dataset/api/feedback/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun deleteFeedback(@Path("id") id: String): Response<Unit>
+
+    // Feedback analytics endpoint (example: get feedback stats)
+    @GET("api/feedback/analytics")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getFeedbackAnalytics(): Response<Map<String, Any>>
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/GOSecurityProviderApi.kt b/app/src/main/java/app/forku/data/api/GOSecurityProviderApi.kt
index 8071e74..52cd375 100644
--- a/app/src/main/java/app/forku/data/api/GOSecurityProviderApi.kt
+++ b/app/src/main/java/app/forku/data/api/GOSecurityProviderApi.kt
@@ -3,17 +3,22 @@ package app.forku.data.api
 import app.forku.data.api.dto.gosecurityprovider.AuthenticationRequest
 import app.forku.data.api.dto.gosecurityprovider.AuthenticationResponse
 import retrofit2.Response
-import retrofit2.http.Body
-import retrofit2.http.POST
+import retrofit2.http.*
+import okhttp3.RequestBody
 
 interface GOSecurityProviderApi {
     /**
      * Authenticate with the GO Security Provider
-     * @param request Authentication credentials
+     * @param username Username for authentication
+     * @param password Password for authentication
+     * @param useCookies Whether to use cookies (defaults to true)
      * @return Authentication response
      */
+    @Multipart
     @POST("api/gosecurityprovider/authenticate")
     suspend fun authenticate(
-        @Body request: AuthenticationRequest
+        @Part("username") username: RequestBody,
+        @Part("password") password: RequestBody,
+        @Part("useCookies") useCookies: RequestBody
     ): Response<AuthenticationResponse>
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/GOServicesApi.kt b/app/src/main/java/app/forku/data/api/GOServicesApi.kt
index ae4743f..ac439c4 100644
--- a/app/src/main/java/app/forku/data/api/GOServicesApi.kt
+++ b/app/src/main/java/app/forku/data/api/GOServicesApi.kt
@@ -3,6 +3,7 @@ package app.forku.data.api
 import app.forku.data.api.dto.goservices.CsrfTokenDto
 import retrofit2.Response
 import retrofit2.http.GET
+import retrofit2.http.Headers
 
 interface GOServicesApi {
     /**
@@ -11,4 +12,11 @@ interface GOServicesApi {
      */
     @GET("dataset/api/goservices/csrf-token")
     suspend fun getCsrfToken(): Response<CsrfTokenDto>
+
+    @GET("dataset/api/goservices/settings")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getSettings(): Response<Map<String, Any>>
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/IncidentApi.kt b/app/src/main/java/app/forku/data/api/IncidentApi.kt
index 098909c..3c25ecc 100644
--- a/app/src/main/java/app/forku/data/api/IncidentApi.kt
+++ b/app/src/main/java/app/forku/data/api/IncidentApi.kt
@@ -5,16 +5,45 @@ import retrofit2.Response
 import retrofit2.http.*
 
 interface IncidentApi {
-    @POST("incidents")
-    suspend fun reportIncident(
-        @Body incident: IncidentDto
-    ): Response<IncidentDto>
+    @GET("api/incident/list")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getAllIncidents(): Response<List<IncidentDto>>
 
-    @GET("incidents")
-    suspend fun getIncidents(): Response<List<IncidentDto>>
+    @GET("api/incident/byid/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getIncidentById(@Path("id") id: String): Response<IncidentDto>
 
-    @GET("incidents/{id}")
-    suspend fun getIncidentById(
-        @Path("id") id: String
-    ): Response<IncidentDto>
+    @POST("api/incident")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun saveIncident(@Body incident: IncidentDto): Response<IncidentDto>
+
+    @DELETE("dataset/api/incident/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun deleteIncident(@Path("id") id: String): Response<Unit>
+
+    @GET("dataset/api/incident/count")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getIncidentCount(): Response<Int>
+
+    // Add endpoints for incident types and multimedia if needed
+    // Example:
+    // @GET("api/incidenttype/list")
+    // suspend fun getIncidentTypes(): Response<List<IncidentTypeDto>>
+    // @GET("api/incidentmultimedia/list")
+    // suspend fun getIncidentMultimedia(): Response<List<IncidentMultimediaDto>>
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/NotificationApi.kt b/app/src/main/java/app/forku/data/api/NotificationApi.kt
index 89ebccb..88d8e4d 100644
--- a/app/src/main/java/app/forku/data/api/NotificationApi.kt
+++ b/app/src/main/java/app/forku/data/api/NotificationApi.kt
@@ -5,27 +5,63 @@ import retrofit2.Response
 import retrofit2.http.*
 
 interface NotificationApi {
-    @GET("notifications")
+    @GET("api/notification/list")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun getNotifications(): Response<List<NotificationDto>>
 
-    @GET("notifications/{id}")
+    @GET("api/notification/byid/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun getNotification(
         @Path("id") id: String
     ): Response<NotificationDto>
 
-    @POST("notifications")
+    @POST("api/notification")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun createNotification(
         @Body notification: NotificationDto
     ): Response<NotificationDto>
 
-    @PUT("notifications/{id}")
+    @PUT("api/notification/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun updateNotification(
         @Path("id") id: String,
         @Body notification: NotificationDto
     ): Response<NotificationDto>
 
-    @DELETE("notifications/{id}")
+    @DELETE("dataset/api/notification/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun deleteNotification(
         @Path("id") id: String
     ): Response<Unit>
+
+    @GET("api/notification/preferences")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getNotificationPreferences(): Response<Map<String, Any>>
+
+    @POST("api/notification/preferences")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun saveNotificationPreferences(
+        @Body preferences: Map<String, Any>
+    ): Response<Unit>
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/SessionApi.kt b/app/src/main/java/app/forku/data/api/SessionApi.kt
index 565a6c3..6ae9441 100644
--- a/app/src/main/java/app/forku/data/api/SessionApi.kt
+++ b/app/src/main/java/app/forku/data/api/SessionApi.kt
@@ -1,32 +1,32 @@
 package app.forku.data.api
 
-import app.forku.data.api.dto.session.SessionDto
+import app.forku.data.api.dto.session.VehicleSessionDto
 import app.forku.data.api.dto.session.StartSessionRequestDto
 import retrofit2.Response
 import retrofit2.http.*
 
 interface SessionApi {
     @GET("sessions")
-    suspend fun getAllSessions(): Response<List<SessionDto>>
+    suspend fun getAllSessions(): Response<List<VehicleSessionDto>>
 
     @GET("users/{userId}/sessions")
     suspend fun getUserSessions(
         @Path("userId") userId: String
-    ): Response<List<SessionDto>>
+    ): Response<List<VehicleSessionDto>>
 
     @GET("sessions/{sessionId}")
     suspend fun getSessionById(
         @Path("sessionId") sessionId: String
-    ): Response<SessionDto>
+    ): Response<VehicleSessionDto>
 
     @POST("sessions")
     suspend fun createSession(
         @Body session: StartSessionRequestDto
-    ): Response<SessionDto>
+    ): Response<VehicleSessionDto>
 
     @PUT("sessions/{sessionId}")
     suspend fun updateSession(
         @Path("sessionId") sessionId: String,
-        @Body session: SessionDto
-    ): Response<SessionDto>
+        @Body session: VehicleSessionDto
+    ): Response<VehicleSessionDto>
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/SiteApi.kt b/app/src/main/java/app/forku/data/api/SiteApi.kt
index 00f1954..c26c030 100644
--- a/app/src/main/java/app/forku/data/api/SiteApi.kt
+++ b/app/src/main/java/app/forku/data/api/SiteApi.kt
@@ -5,31 +5,18 @@ import retrofit2.Response
 import retrofit2.http.*
 
 interface SiteApi {
-    @GET("business/{businessId}/site")
-    suspend fun getSitesByBusiness(@Path("businessId") businessId: String): Response<List<SiteDto>>
+    @GET("api/site/list")
+    suspend fun getAllSites(): Response<List<SiteDto>>
 
-    @GET("business/{businessId}/site/{id}")
-    suspend fun getSiteById(
-        @Path("businessId") businessId: String,
-        @Path("id") id: String
-    ): Response<SiteDto>
+    @GET("api/site/byid/{id}")
+    suspend fun getSiteById(@Path("id") id: String): Response<SiteDto>
 
-    @POST("business/{businessId}/site")
-    suspend fun createSite(
-        @Path("businessId") businessId: String,
-        @Body site: SiteDto
-    ): Response<SiteDto>
+    @POST("api/site")
+    suspend fun saveSite(@Body site: SiteDto): Response<SiteDto>
 
-    @PUT("business/{businessId}/site/{siteId}")
-    suspend fun updateSite(
-        @Path("businessId") businessId: String,
-        @Path("siteId") siteId: String,
-        @Body site: SiteDto
-    ): Response<SiteDto>
+    @DELETE("dataset/api/site/{id}")
+    suspend fun deleteSite(@Path("id") id: String): Response<Unit>
 
-    @DELETE("business/{businessId}/site/{siteId}")
-    suspend fun deleteSite(
-        @Path("businessId") businessId: String,
-        @Path("siteId") siteId: String
-    ): Response<Unit>
+    @GET("dataset/api/site/count")
+    suspend fun getSiteCount(): Response<Int>
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/StateApi.kt b/app/src/main/java/app/forku/data/api/StateApi.kt
deleted file mode 100644
index baf43df..0000000
--- a/app/src/main/java/app/forku/data/api/StateApi.kt
+++ /dev/null
@@ -1,28 +0,0 @@
-package app.forku.data.api
-
-import app.forku.data.api.dto.country.StateDto
-import retrofit2.Response
-import retrofit2.http.*
-
-interface StateApi {
-    @GET("country-state")
-    suspend fun getAllStates(): Response<List<StateDto>>
-
-    @GET("country-state")
-    suspend fun getStatesByCountry(@Query("countryId") countryId: String): Response<List<StateDto>>
-
-    @GET("country-state/{id}")
-    suspend fun getStateById(@Path("id") id: String): Response<StateDto>
-
-    @POST("country-state")
-    suspend fun createState(@Body state: StateDto): Response<StateDto>
-
-    @PUT("country-state/{id}")
-    suspend fun updateState(
-        @Path("id") id: String,
-        @Body state: StateDto
-    ): Response<StateDto>
-
-    @DELETE("country-state/{id}")
-    suspend fun deleteState(@Path("id") id: String): Response<Unit>
-} 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/UserApi.kt b/app/src/main/java/app/forku/data/api/UserApi.kt
index 57a9c2e..e0089cd 100644
--- a/app/src/main/java/app/forku/data/api/UserApi.kt
+++ b/app/src/main/java/app/forku/data/api/UserApi.kt
@@ -9,7 +9,11 @@ interface UserApi {
      * Get all users
      * @return List of users
      */
-    @GET("user")
+    @GET("api/gouser/list")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun getUsers(): Response<List<UserDto>>
 
     /**
@@ -17,7 +21,11 @@ interface UserApi {
      * @param id User ID
      * @return User details
      */
-    @GET("user/{id}")
+    @GET("api/gouser/byid/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun getUser(@Path("id") id: String): Response<UserDto>
 
     /**
@@ -25,25 +33,51 @@ interface UserApi {
      * @param user User data
      * @return Created user
      */
-    @POST("user")
+    @POST("api/gouser")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun createUser(@Body user: UserDto): Response<UserDto>
 
     /**
-     * Update user
-     * @param id User ID
+     * Update user (now saveUser)
      * @param user Updated user data
      * @return Updated user
      */
-    @PUT("user/{id}")
-    suspend fun updateUser(
-        @Path("id") id: String,
-        @Body user: UserDto
-    ): Response<UserDto>
+    @POST("api/gouser")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun saveUser(@Body user: UserDto): Response<UserDto>
 
     /**
      * Delete user
      * @param id User ID
      */
-    @DELETE("user/{id}")
+    @DELETE("api/gouser/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun deleteUser(@Path("id") id: String): Response<Unit>
+
+    /**
+     * Get the total count of users in the system
+     * @return The total number of users
+     */
+    @GET("dataset/api/gouser/count")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getUserCount(): Response<Int>
+
+    @GET("api/gouser/search")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun searchUsers(@Query("query") query: String): Response<List<UserDto>>
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/VehicleApi.kt b/app/src/main/java/app/forku/data/api/VehicleApi.kt
index a5f8cc0..2094f5c 100644
--- a/app/src/main/java/app/forku/data/api/VehicleApi.kt
+++ b/app/src/main/java/app/forku/data/api/VehicleApi.kt
@@ -5,133 +5,153 @@ import retrofit2.Response
 import retrofit2.http.*
 
 interface VehicleApi {
-    /**
-     * Get all vehicles, optionally filtered by business ID or site ID.
-     *
-     * @param businessId Optional Business ID to filter vehicles.
-     * @param siteId Optional Site ID to filter vehicles.
-     * @return List of vehicles.
-     */
-    @GET("vehicle")
-    suspend fun getVehicles(
-        @Query("businessId") businessId: String? = null,
-        @Query("siteId") siteId: String? = null
-    ): Response<List<VehicleDto>>
 
-    /**
-     * Get a specific vehicle by its ID.
-     *
-     * @param vehicleId The ID of the vehicle to retrieve.
-     * @return The vehicle details.
-     */
-    @GET("vehicle/{vehicleId}")
-    suspend fun getVehicleById(
-        @Path("vehicleId") vehicleId: String
-    ): Response<VehicleDto>
+//    /**
+//     * Get vehicle by ID
+//     * @param businessId Business ID
+//     * @param vehicleId Vehicle ID
+//     * @return Vehicle details
+//     */
+//    @GET("business/{businessId}/vehicle/{vehicleId}")
+//    suspend fun getVehicle(
+//        @Path("businessId") businessId: String,
+//        @Path("vehicleId") vehicleId: String
+//    ): Response<VehicleDto>
 
-    /**
-     * Get all vehicles across all businesses (SuperAdmin only)
-     * @return List of all vehicles
-     */
-    @GET("vehicle")
-    suspend fun getAllVehicles(): Response<List<VehicleDto>>
+//    /**
+//     * Create new vehicle
+//     * @param businessId Business ID
+//     * @param vehicle Vehicle data
+//     * @return Created vehicle
+//     */
+//    @POST("business/{businessId}/vehicle")
+//    suspend fun createVehicle(
+//        @Path("businessId") businessId: String,
+//        @Body vehicle: VehicleDto
+//    ): Response<VehicleDto>
 
-    /**
-     * Get vehicle by ID
-     * @param businessId Business ID
-     * @param vehicleId Vehicle ID
-     * @return Vehicle details
-     */
-    @GET("business/{businessId}/vehicle/{vehicleId}")
-    suspend fun getVehicle(
-        @Path("businessId") businessId: String,
-        @Path("vehicleId") vehicleId: String
-    ): Response<VehicleDto>
+//    /**
+//     * Update vehicle
+//     * @param businessId Business ID
+//     * @param vehicleId Vehicle ID
+//     * @param vehicle Updated vehicle data
+//     * @return Updated vehicle
+//     */
+//    @PUT("business/{businessId}/vehicle/{vehicleId}")
+//    suspend fun updateVehicle(
+//        @Path("businessId") businessId: String,
+//        @Path("vehicleId") vehicleId: String,
+//        @Body vehicle: VehicleDto
+//    ): Response<VehicleDto>
 
-    /**
-     * Create new vehicle
-     * @param businessId Business ID
-     * @param vehicle Vehicle data
-     * @return Created vehicle
-     */
-    @POST("business/{businessId}/vehicle")
-    suspend fun createVehicle(
-        @Path("businessId") businessId: String,
-        @Body vehicle: VehicleDto
-    ): Response<VehicleDto>
+//    /**
+//     * Delete vehicle
+//     * @param businessId Business ID
+//     * @param vehicleId Vehicle ID
+//     */
+//    @DELETE("business/{businessId}/vehicle/{vehicleId}")
+//    suspend fun deleteVehicle(
+//        @Path("businessId") businessId: String,
+//        @Path("vehicleId") vehicleId: String
+//    ): Response<Unit>
 
-    /**
-     * Update vehicle
-     * @param businessId Business ID
-     * @param vehicleId Vehicle ID
-     * @param vehicle Updated vehicle data
-     * @return Updated vehicle
-     */
-    @PUT("business/{businessId}/vehicle/{vehicleId}")
-    suspend fun updateVehicle(
-        @Path("businessId") businessId: String,
-        @Path("vehicleId") vehicleId: String,
-        @Body vehicle: VehicleDto
-    ): Response<VehicleDto>
+//    /**
+//     * Get vehicle by QR code
+//     * @param businessId Business ID
+//     * @param qrCode QR code
+//     * @return Vehicle details
+//     */
+//    @GET("business/{businessId}/vehicle/qr/{qrCode}")
+//    suspend fun getVehicleByQr(
+//        @Path("businessId") businessId: String,
+//        @Path("qrCode") qrCode: String
+//    ): Response<VehicleDto>
+
+//    /**
+//     * Update vehicle status
+//     * @param businessId Business ID
+//     * @param vehicleId Vehicle ID
+//     * @param status New status
+//     * @return Updated vehicle
+//     */
+//    @PUT("business/{businessId}/vehicle/{vehicleId}/status")
+//    suspend fun updateVehicleStatus(
+//        @Path("businessId") businessId: String,
+//        @Path("vehicleId") vehicleId: String,
+//        @Query("status") status: String
+//    ): Response<VehicleDto>
+
+//    /**
+//     * Create new vehicle globally (without specific business)
+//     * Used by SYSTEM_OWNER/SUPERADMIN
+//     * @param vehicle Vehicle data
+//     * @return Created vehicle
+//     */
+//    @POST("vehicle")
+//    suspend fun createVehicleGlobally(
+//        @Body vehicle: VehicleDto
+//    ): Response<VehicleDto>
+
+//    /**
+//     * Update vehicle globally (without specific business in path)
+//     * Used by SYSTEM_OWNER/SUPERADMIN
+//     * @param vehicleId Vehicle ID
+//     * @param vehicle Updated vehicle data
+//     * @return Updated vehicle
+//     */
+//    @PUT("vehicle/{vehicleId}")
+//    suspend fun updateVehicleGlobally(
+//        @Path("vehicleId") vehicleId: String,
+//        @Body vehicle: VehicleDto
+//    ): Response<VehicleDto>
 
     /**
-     * Delete vehicle
-     * @param businessId Business ID
-     * @param vehicleId Vehicle ID
+     * Get all vehicles (json structured format)
      */
-    @DELETE("business/{businessId}/vehicle/{vehicleId}")
-    suspend fun deleteVehicle(
-        @Path("businessId") businessId: String,
-        @Path("vehicleId") vehicleId: String
-    ): Response<Unit>
+    @GET("api/vehicle/list")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getAllVehicles(): Response<List<VehicleDto>>
 
     /**
-     * Get vehicle by QR code
-     * @param businessId Business ID
-     * @param qrCode QR code
-     * @return Vehicle details
+     * Get vehicle by ID (json structured format)
      */
-    @GET("business/{businessId}/vehicle/qr/{qrCode}")
-    suspend fun getVehicleByQr(
-        @Path("businessId") businessId: String,
-        @Path("qrCode") qrCode: String
-    ): Response<VehicleDto>
+    @GET("api/vehicle/byid/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getVehicleById(@Path("id") id: String): Response<VehicleDto>
 
     /**
-     * Update vehicle status
-     * @param businessId Business ID
-     * @param vehicleId Vehicle ID
-     * @param status New status
-     * @return Updated vehicle
+     * Get vehicle count (dataset format)
      */
-    @PUT("business/{businessId}/vehicle/{vehicleId}/status")
-    suspend fun updateVehicleStatus(
-        @Path("businessId") businessId: String,
-        @Path("vehicleId") vehicleId: String,
-        @Query("status") status: String
-    ): Response<VehicleDto>
+    @GET("dataset/api/vehicle/count")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getVehicleCount(): Response<Int>
 
     /**
-     * Create new vehicle globally (without specific business)
-     * Used by SYSTEM_OWNER/SUPERADMIN
-     * @param vehicle Vehicle data
-     * @return Created vehicle
+     * Create or update vehicle (json structured format)
      */
-    @POST("vehicle")
-    suspend fun createVehicleGlobally(
-        @Body vehicle: VehicleDto
-    ): Response<VehicleDto>
+    @POST("api/vehicle")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun saveVehicle(@Body vehicle: VehicleDto): Response<VehicleDto>
 
     /**
-     * Update vehicle globally (without specific business in path)
-     * Used by SYSTEM_OWNER/SUPERADMIN
-     * @param vehicleId Vehicle ID
-     * @param vehicle Updated vehicle data
-     * @return Updated vehicle
+     * Delete vehicle by ID (dataset format)
      */
-    @PUT("vehicle/{vehicleId}")
-    suspend fun updateVehicleGlobally(
-        @Path("vehicleId") vehicleId: String,
-        @Body vehicle: VehicleDto
-    ): Response<VehicleDto>
+    @DELETE("dataset/api/vehicle/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun deleteVehicle(@Path("id") id: String): Response<Unit>
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/VehicleCategoryApi.kt b/app/src/main/java/app/forku/data/api/VehicleCategoryApi.kt
index f3ce526..f1f41a7 100644
--- a/app/src/main/java/app/forku/data/api/VehicleCategoryApi.kt
+++ b/app/src/main/java/app/forku/data/api/VehicleCategoryApi.kt
@@ -1,26 +1,20 @@
 package app.forku.data.api
 
-import app.forku.data.api.dto.VehicleCategoryDto
+import app.forku.data.api.dto.vehicle.VehicleCategoryDto
 import retrofit2.Response
 import retrofit2.http.*
 
 interface VehicleCategoryApi {
-    @GET("vehicle-category")
+    @GET("api/vehiclecategory/list")
     suspend fun getVehicleCategories(): Response<List<VehicleCategoryDto>>
     
-    @GET("vehicle-category/{id}")
+    @GET("api/vehiclecategory/byid/{id}")
     suspend fun getVehicleCategory(@Path("id") id: String): Response<VehicleCategoryDto>
     
-    @POST("vehicle-category")
-    suspend fun createVehicleCategory(@Body request: CreateVehicleCategoryRequest): Response<VehicleCategoryDto>
+    @POST("api/vehiclecategory")
+    suspend fun saveVehicleCategory(@Body category: VehicleCategoryDto): Response<VehicleCategoryDto>
     
-    @PUT("vehicle-category/{id}")
-    suspend fun updateVehicleCategory(
-        @Path("id") id: String,
-        @Body request: UpdateVehicleCategoryRequest
-    ): Response<VehicleCategoryDto>
-    
-    @DELETE("vehicle-category/{id}")
+    @DELETE("dataset/api/vehiclecategory/{id}")
     suspend fun deleteVehicleCategory(@Path("id") id: String): Response<Unit>
 }
 
diff --git a/app/src/main/java/app/forku/data/api/VehicleComponentApi.kt b/app/src/main/java/app/forku/data/api/VehicleComponentApi.kt
index be765b5..8f66566 100644
--- a/app/src/main/java/app/forku/data/api/VehicleComponentApi.kt
+++ b/app/src/main/java/app/forku/data/api/VehicleComponentApi.kt
@@ -3,23 +3,34 @@ package app.forku.data.api
 import app.forku.data.api.dto.vehicle.VehicleComponentDto
 import retrofit2.Response
 import retrofit2.http.*
+import retrofit2.http.Headers
 
 interface VehicleComponentApi {
-    @GET("vehicle-component")
+    @GET("api/vehiclecomponent/list")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun getAllComponents(): Response<List<VehicleComponentDto>>
 
-    @GET("vehicle-component/{id}")
+    @GET("api/vehiclecomponent/byid/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun getComponentById(@Path("id") id: String): Response<VehicleComponentDto>
 
-    @POST("vehicle-component")
-    suspend fun createComponent(@Body component: VehicleComponentDto): Response<VehicleComponentDto>
+    @POST("api/vehiclecomponent")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun saveComponent(@Body component: VehicleComponentDto): Response<VehicleComponentDto>
 
-    @PUT("vehicle-component/{id}")
-    suspend fun updateComponent(
-        @Path("id") id: String,
-        @Body component: VehicleComponentDto
-    ): Response<VehicleComponentDto>
-
-    @DELETE("vehicle-component/{id}")
+    @DELETE("dataset/api/vehiclecomponent/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun deleteComponent(@Path("id") id: String): Response<Unit>
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/VehicleSessionApi.kt b/app/src/main/java/app/forku/data/api/VehicleSessionApi.kt
index 185a063..eb1c42c 100644
--- a/app/src/main/java/app/forku/data/api/VehicleSessionApi.kt
+++ b/app/src/main/java/app/forku/data/api/VehicleSessionApi.kt
@@ -1,23 +1,36 @@
 package app.forku.data.api
 
 import app.forku.data.api.dto.session.StartSessionRequestDto
-import app.forku.data.api.dto.VehicleSessionDto
+import app.forku.data.api.dto.session.VehicleSessionDto
 import retrofit2.Response
 import retrofit2.http.*
 
 interface VehicleSessionApi {
-    @GET("sessions")
+    @GET("api/vehiclesession/list")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
     suspend fun getAllSessions(@Query("businessId") businessId: String): Response<List<VehicleSessionDto>>
 
-    @GET("sessions/{sessionId}")
-    suspend fun getSessionById(@Path("sessionId") sessionId: String): Response<VehicleSessionDto>
+    @GET("api/vehiclesession/byid/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun getSessionById(@Path("id") id: String): Response<VehicleSessionDto>
 
-    @POST("sessions")
-    suspend fun createSession(@Body session: StartSessionRequestDto): Response<VehicleSessionDto>
+    @POST("api/vehiclesession")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun saveSession(@Body session: VehicleSessionDto): Response<VehicleSessionDto>
 
-    @PUT("sessions/{sessionId}")
-    suspend fun updateSession(
-        @Path("sessionId") sessionId: String,
-        @Body session: VehicleSessionDto
-    ): Response<VehicleSessionDto>
+    @DELETE("dataset/api/vehiclesession/{id}")
+    @Headers(
+        "Content-Type: application/json",
+        "Accept: text/plain"
+    )
+    suspend fun deleteSession(@Path("id") id: String): Response<Unit>
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/VehicleTypeApi.kt b/app/src/main/java/app/forku/data/api/VehicleTypeApi.kt
index 0f8e1b0..8ffcfcb 100644
--- a/app/src/main/java/app/forku/data/api/VehicleTypeApi.kt
+++ b/app/src/main/java/app/forku/data/api/VehicleTypeApi.kt
@@ -5,24 +5,18 @@ import retrofit2.Response
 import retrofit2.http.*
 
 interface VehicleTypeApi {
-    @GET("vehicle-type")
+    @GET("api/vehicletype/list")
     suspend fun getAllVehicleTypes(): Response<List<VehicleTypeDto>>
 
-    @GET("vehicle-type/{id}")
+    @GET("api/vehicletype/byid/{id}")
     suspend fun getVehicleTypeById(@Path("id") id: String): Response<VehicleTypeDto>
 
-    @GET("vehicle-type")
-    suspend fun getVehicleTypesByCategory(@Query("categoryId") categoryId: String): Response<List<VehicleTypeDto>>
-
-    @POST("vehicle-type")
-    suspend fun createVehicleType(@Body vehicleType: VehicleTypeDto): Response<VehicleTypeDto>
-
-    @PUT("vehicle-type/{id}")
-    suspend fun updateVehicleType(
-        @Path("id") id: String,
-        @Body vehicleType: VehicleTypeDto
-    ): Response<VehicleTypeDto>
+    @POST("api/vehicletype")
+    suspend fun saveVehicleType(@Body vehicleType: VehicleTypeDto): Response<VehicleTypeDto>
 
-    @DELETE("vehicle-type/{id}")
+    @DELETE("dataset/api/vehicletype/{id}")
     suspend fun deleteVehicleType(@Path("id") id: String): Response<Unit>
+
+    @GET("api/vehicletype/list")
+    suspend fun getVehicleTypesByCategory(@Query("categoryId") categoryId: String): Response<List<VehicleTypeDto>>
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/dto/BusinessDto.kt b/app/src/main/java/app/forku/data/api/dto/BusinessDto.kt
deleted file mode 100644
index e13fd39..0000000
--- a/app/src/main/java/app/forku/data/api/dto/BusinessDto.kt
+++ /dev/null
@@ -1,32 +0,0 @@
-package app.forku.data.api.dto
-
-import com.google.gson.annotations.SerializedName
-
-data class BusinessDto(
-    @SerializedName("id")
-    val id: String,
-    
-    @SerializedName("name")
-    val name: String,
-    
-    @SerializedName("total_users")
-    val totalUsers: Int,
-    
-    @SerializedName("total_vehicles")
-    val totalVehicles: Int,
-    
-    @SerializedName("status")
-    val status: String,
-
-    @SerializedName("systemOwnerId")
-    val systemOwnerId: String,
-
-    @SerializedName("superAdminId")
-    val superAdminId: String,
-
-    @SerializedName("created_at")
-    val createdAt: String,
-
-    @SerializedName("updated_at")
-    val updatedAt: String
-) 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/dto/BusinessStats.kt b/app/src/main/java/app/forku/data/api/dto/BusinessStats.kt
deleted file mode 100644
index fbf403b..0000000
--- a/app/src/main/java/app/forku/data/api/dto/BusinessStats.kt
+++ /dev/null
@@ -1,50 +0,0 @@
-package app.forku.data.api.dto
-
-import com.google.gson.annotations.SerializedName
-
-data class BusinessStats(
-    @SerializedName("total_businesses")
-    val totalBusinesses: Int = 0,
-
-    @SerializedName("active_businesses")
-    val activeBusinesses: Int = 0,
-
-    @SerializedName("pending_businesses")
-    val pendingBusinesses: Int = 0,
-
-    @SerializedName("suspended_businesses")
-    val suspendedBusinesses: Int = 0,
-
-    @SerializedName("total_users")
-    val totalUsers: Int = 0,
-
-    @SerializedName("total_vehicles")
-    val totalVehicles: Int = 0,
-
-    @SerializedName("average_users_per_business")
-    val averageUsersPerBusiness: Double = 0.0,
-
-    @SerializedName("average_vehicles_per_business")
-    val averageVehiclesPerBusiness: Double = 0.0,
-
-    @SerializedName("last_business_created")
-    val lastBusinessCreated: String? = null,
-
-    @SerializedName("last_business_updated")
-    val lastBusinessUpdated: String? = null,
-
-    @SerializedName("business_growth_rate")
-    val businessGrowthRate: Double = 0.0,
-
-    @SerializedName("user_growth_rate")
-    val userGrowthRate: Double = 0.0,
-
-    @SerializedName("vehicle_growth_rate")
-    val vehicleGrowthRate: Double = 0.0,
-
-    @SerializedName("most_active_business")
-    val mostActiveBusiness: String? = null,
-
-    @SerializedName("most_vehicles_business")
-    val mostVehiclesBusiness: String? = null
-) 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/dto/VehicleCategoryDto.kt b/app/src/main/java/app/forku/data/api/dto/VehicleCategoryDto.kt
deleted file mode 100644
index a5f49fc..0000000
--- a/app/src/main/java/app/forku/data/api/dto/VehicleCategoryDto.kt
+++ /dev/null
@@ -1,48 +0,0 @@
-package app.forku.data.api.dto
-
-import app.forku.domain.model.vehicle.VehicleCategory
-import kotlinx.serialization.SerialName
-import kotlinx.serialization.Serializable
-
-@Serializable
-data class VehicleCategoryDto(
-    @SerialName("id")
-    val id: String,
-    
-    @SerialName("name")
-    val name: String,
-    
-    @SerialName("description")
-    val description: String? = null,
-    
-    @SerialName("created_at")
-    val createdAt: Long,
-    
-    @SerialName("updated_at")
-    val updatedAt: Long,
-    
-    @SerialName("requires_certification")
-    val requiresCertification: Boolean = false
-)
-
-fun VehicleCategoryDto.toDomain(): VehicleCategory = VehicleCategory(
-    id = id,
-    name = name,
-    description = description,
-    createdAt = createdAt,
-    updatedAt = updatedAt,
-    requiresCertification = requiresCertification
-)
-
-fun VehicleCategory.toDto(): VehicleCategoryDto = VehicleCategoryDto(
-    id = id,
-    name = name,
-    description = description,
-    createdAt = createdAt,
-    updatedAt = updatedAt,
-    requiresCertification = requiresCertification
-)
-
-fun List<VehicleCategoryDto>.toDomainModel(): List<VehicleCategory> {
-    return map { it.toDomain() }
-} 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/dto/VehicleSessionDto.kt b/app/src/main/java/app/forku/data/api/dto/VehicleSessionDto.kt
deleted file mode 100644
index b718c7e..0000000
--- a/app/src/main/java/app/forku/data/api/dto/VehicleSessionDto.kt
+++ /dev/null
@@ -1,17 +0,0 @@
-package app.forku.data.api.dto
-
-data class VehicleSessionDto(
-    val id: String,
-    val vehicleId: String,
-    val userId: String,
-    val checkId: String,
-    val startTime: String,
-    val endTime: String?,
-    val timestamp: String,
-    val status: String,
-    val startLocationCoordinates: String?,
-    val endLocationCoordinates: String?,
-    val closeMethod: String?,
-    val closedBy: String?,
-    val notes: String?
-) 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/dto/VehicleTypeDto.kt b/app/src/main/java/app/forku/data/api/dto/VehicleTypeDto.kt
deleted file mode 100644
index d58b7d1..0000000
--- a/app/src/main/java/app/forku/data/api/dto/VehicleTypeDto.kt
+++ /dev/null
@@ -1,20 +0,0 @@
-package app.forku.data.api.dto
-
-import com.google.gson.annotations.SerializedName
-
-data class VehicleTypeDto(
-    @SerializedName("id")
-    val id: String? = null,
-    
-    @SerializedName("name")
-    val name: String,
-    
-    @SerializedName("description")
-    val description: String? = null,
-    
-    @SerializedName("isActive")
-    val isActive: Boolean = true,
-    
-    @SerializedName("categoryId")
-    val categoryId: String? = null
-) 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/dto/certification/CertificationDto.kt b/app/src/main/java/app/forku/data/api/dto/certification/CertificationDto.kt
index f30cf89..1c7f71d 100644
--- a/app/src/main/java/app/forku/data/api/dto/certification/CertificationDto.kt
+++ b/app/src/main/java/app/forku/data/api/dto/certification/CertificationDto.kt
@@ -12,4 +12,16 @@ data class CertificationDto(
     val certificationCode: String?,
     val documentUrl: String?,
     val timestamp: String
-) 
\ No newline at end of file
+)
+
+
+//data class CertificationDto(
+//    val vehicleTypeId: String,
+//    val isValid: Boolean,
+//    val expiresAt: String,
+//    val issuedAt: String? = null,
+//    val issuedBy: String? = null,
+//    val certificationNumber: String? = null,
+//    val notes: String? = null,
+//    val metadata: Map<String, String>? = null
+//)
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/dto/country/CountryDto.kt b/app/src/main/java/app/forku/data/api/dto/country/CountryDto.kt
index 3ac8aca..b637075 100644
--- a/app/src/main/java/app/forku/data/api/dto/country/CountryDto.kt
+++ b/app/src/main/java/app/forku/data/api/dto/country/CountryDto.kt
@@ -1,23 +1,54 @@
 package app.forku.data.api.dto.country
 
 import app.forku.domain.model.country.Country
+import app.forku.data.api.dto.site.SiteItemDto
 import com.google.gson.annotations.SerializedName
 
 data class CountryDto(
-    @SerializedName("id")
+    @SerializedName("\$type")
+    val type: String = "CountryDataObject",
+    
+    @SerializedName("Id")
     val id: String,
-    @SerializedName("name")
+    
+    @SerializedName("Name")
     val name: String,
-    @SerializedName("code")
+    
+    @SerializedName("Code")
     val code: String,
-    @SerializedName("phone_code")
+    
+    @SerializedName("PhoneCode")
     val phoneCode: String,
-    @SerializedName("currency")
+    
+    @SerializedName("Currency")
     val currency: String,
-    @SerializedName("currency_symbol")
+    
+    @SerializedName("CurrencySymbol")
     val currencySymbol: String,
-    @SerializedName("is_active")
-    val isActive: Boolean = true
+    
+    @SerializedName("IsActive")
+    val isActive: Boolean = true,
+    
+    @SerializedName("businessItems")
+    val businessItems: List<BusinessItemDto> = emptyList(),
+    
+    @SerializedName("countryStateItems")
+    val countryStateItems: List<CountryStateDto> = emptyList(),
+    
+    @SerializedName("siteItems")
+    val siteItems: List<String> = emptyList(),
+    
+    @SerializedName("IsMarkedForDeletion")
+    val isMarkedForDeletion: Boolean = false,
+    
+    @SerializedName("isDirty")
+    val isDirty: Boolean = false,
+    
+    @SerializedName("isNew")
+    val isNew: Boolean = false,
+    
+    @SerializedName("InternalObjectId")
+    val internalObjectId: Int = 0
 ) {
     fun toDomain(): Country = Country(
         id = id,
@@ -30,6 +61,144 @@ data class CountryDto(
     )
 }
 
+data class BusinessItemDto(
+    @SerializedName("Id")
+    val id: String,
+    
+    @SerializedName("Name")
+    val name: String,
+    
+    @SerializedName("Status")
+    val status: Int = 0,
+    
+    @SerializedName("BusinessConfigurationId")
+    val businessConfigurationId: String,
+    
+    @SerializedName("CountryId")
+    val countryId: String,
+    
+    @SerializedName("CountryStateId")
+    val countryStateId: String,
+    
+    @SerializedName("_businessConfiguration_NewObjectId")
+    val businessConfigurationNewObjectId: Int = 0,
+    
+    @SerializedName("_country_NewObjectId")
+    val countryNewObjectId: Int = 0,
+    
+    @SerializedName("_stateProvince_NewObjectId")
+    val stateProvinceNewObjectId: Int = 0,
+    
+    @SerializedName("businessConfiguration")
+    val businessConfiguration: BusinessConfigurationDto? = null,
+    
+    @SerializedName("country")
+    val country: String? = null,
+    
+    @SerializedName("siteItems")
+    val siteItems: List<SiteItemDto> = emptyList(),
+    
+    @SerializedName("isMarkedForDeletion")
+    val isMarkedForDeletion: Boolean = false,
+    
+    @SerializedName("isDirty")
+    val isDirty: Boolean = false,
+    
+    @SerializedName("isNew")
+    val isNew: Boolean = false,
+    
+    @SerializedName("internalObjectId")
+    val internalObjectId: Int = 0
+)
+
+data class BusinessConfigurationDto(
+    @SerializedName("Id")
+    val id: String,
+    
+    @SerializedName("Name")
+    val name: String,
+    
+    @SerializedName("BusinessLogo")
+    val businessLogo: String? = null,
+    
+    @SerializedName("BusinessLogoFileSize")
+    val businessLogoFileSize: Int = 0,
+    
+    @SerializedName("BusinessLogoInternalName")
+    val businessLogoInternalName: String? = null,
+    
+    @SerializedName("EmailNotificationsEnabled")
+    val emailNotificationsEnabled: Boolean = true,
+    
+    @SerializedName("PushNotificationsEnabled")
+    val pushNotificationsEnabled: Boolean = true,
+    
+    @SerializedName("OperatingHours")
+    val operatingHours: String? = null,
+    
+    @SerializedName("PrimaryColor")
+    val primaryColor: String? = null,
+    
+    @SerializedName("SecondaryColor")
+    val secondaryColor: String? = null,
+    
+    @SerializedName("TimezoneId")
+    val timezoneId: String? = null,
+    
+    @SerializedName("WorkWeekDefinition")
+    val workWeekDefinition: String? = null,
+    
+    @SerializedName("_timezone_NewObjectId")
+    val timezoneNewObjectId: Int = 0,
+    
+    @SerializedName("business")
+    val business: String? = null,
+    
+    @SerializedName("timezone")
+    val timezone: TimezoneDto? = null,
+    
+    @SerializedName("isMarkedForDeletion")
+    val isMarkedForDeletion: Boolean = false,
+    
+    @SerializedName("isDirty")
+    val isDirty: Boolean = false,
+    
+    @SerializedName("isNew")
+    val isNew: Boolean = false,
+    
+    @SerializedName("internalObjectId")
+    val internalObjectId: Int = 0
+)
+
+data class TimezoneDto(
+    @SerializedName("Id")
+    val id: String,
+    
+    @SerializedName("Name")
+    val name: String,
+    
+    @SerializedName("Offset")
+    val offset: String,
+    
+    @SerializedName("businessConfiguration")
+    val businessConfiguration: String? = null,
+    
+    @SerializedName("site")
+    val site: String? = null,
+    
+    @SerializedName("isMarkedForDeletion")
+    val isMarkedForDeletion: Boolean = false,
+    
+    @SerializedName("isDirty")
+    val isDirty: Boolean = false,
+    
+    @SerializedName("isNew")
+    val isNew: Boolean = false,
+    
+    @SerializedName("internalObjectId")
+    val internalObjectId: Int = 0
+)
+
 fun Country.toDto(): CountryDto = CountryDto(
     id = id,
     name = name,
@@ -37,5 +206,6 @@ fun Country.toDto(): CountryDto = CountryDto(
     phoneCode = phoneCode,
     currency = currency,
     currencySymbol = currencySymbol,
-    isActive = isActive
+    isActive = isActive,
+    isDirty = true
 ) 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/dto/country/StateDto.kt b/app/src/main/java/app/forku/data/api/dto/country/StateDto.kt
deleted file mode 100644
index 6ee43e6..0000000
--- a/app/src/main/java/app/forku/data/api/dto/country/StateDto.kt
+++ /dev/null
@@ -1,28 +0,0 @@
-package app.forku.data.api.dto.country
-
-import app.forku.domain.model.country.State
-import com.google.gson.annotations.SerializedName
-
-data class StateDto(
-    val id: String,
-    val countryId: String,
-    val name: String,
-    val code: String,
-    val isActive: Boolean = true
-)
-
-fun StateDto.toDomain(): State = State(
-    id = id,
-    countryId = countryId,
-    name = name,
-    code = code,
-    isActive = isActive
-)
-
-fun State.toDto(): StateDto = StateDto(
-    id = id,
-    countryId = countryId,
-    name = name,
-    code = code,
-    isActive = isActive
-) 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/dto/gosecurityprovider/AuthenticationRequest.kt b/app/src/main/java/app/forku/data/api/dto/gosecurityprovider/AuthenticationRequest.kt
index cbbe5fd..d2a1daa 100644
--- a/app/src/main/java/app/forku/data/api/dto/gosecurityprovider/AuthenticationRequest.kt
+++ b/app/src/main/java/app/forku/data/api/dto/gosecurityprovider/AuthenticationRequest.kt
@@ -6,5 +6,7 @@ data class AuthenticationRequest(
     @SerializedName("username")
     val username: String,
     @SerializedName("password")
-    val password: String
+    val password: String,
+    @SerializedName("useCookies")
+    val useCookies: Boolean = true
 ) 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/dto/gosecurityprovider/AuthenticationResponse.kt b/app/src/main/java/app/forku/data/api/dto/gosecurityprovider/AuthenticationResponse.kt
index cf93205..84b2399 100644
--- a/app/src/main/java/app/forku/data/api/dto/gosecurityprovider/AuthenticationResponse.kt
+++ b/app/src/main/java/app/forku/data/api/dto/gosecurityprovider/AuthenticationResponse.kt
@@ -3,10 +3,89 @@ package app.forku.data.api.dto.gosecurityprovider
 import com.google.gson.annotations.SerializedName
 
 data class AuthenticationResponse(
-    @SerializedName("success")
-    val success: Boolean,
-    @SerializedName("message")
-    val message: String? = null,
-    @SerializedName("token")
-    val token: String? = null
+    @SerializedName("\$type")
+    val type: String = "GOSecurityTokensContainer",
+    
+    @SerializedName("InternalObjectId")
+    val internalObjectId: Int,
+    
+    @SerializedName("PrimaryKey")
+    val primaryKey: PrimaryKey,
+    
+    @SerializedName("ObjectsDataSet")
+    val objectsDataSet: ObjectsDataSet
+) {
+    fun getApplicationToken(): String? {
+        return objectsDataSet
+            .gOSecurityTokensObjectsDataSet
+            ?.gOSecurityTokensObjects
+            ?.token
+            ?.applicationToken
+    }
+    
+    fun getAuthenticationToken(): String? {
+        return objectsDataSet
+            .gOSecurityTokensObjectsDataSet
+            ?.gOSecurityTokensObjects
+            ?.token
+            ?.authenticationToken
+    }
+}
+
+data class PrimaryKey(
+    @SerializedName("\$type")
+    val type: String = "IdentifyingFieldsCollection`2",
+    
+    @SerializedName("Id1")
+    val id1: String,
+    
+    @SerializedName("Id2")
+    val id2: String
+)
+
+data class ObjectsDataSet(
+    @SerializedName("\$type")
+    val type: String = "ObjectsDataSet",
+    
+    @SerializedName("GOSecurityTokensObjectsDataSet")
+    val gOSecurityTokensObjectsDataSet: GOSecurityTokensObjectsDataSet?
+)
+
+data class GOSecurityTokensObjectsDataSet(
+    @SerializedName("\$type")
+    val type: String = "GOSecurityTokensObjectsDataSet",
+    
+    @SerializedName("GOSecurityTokensObjects")
+    val gOSecurityTokensObjects: GOSecurityTokensObjects?
+)
+
+data class GOSecurityTokensObjects(
+    @SerializedName("\$type")
+    val type: String = "ConcurrentDictionary`2",
+    
+    @SerializedName("1")
+    val token: GOSecurityTokensDataObject?
+)
+
+data class GOSecurityTokensDataObject(
+    @SerializedName("\$type")
+    val type: String = "GOSecurityTokensDataObject",
+    
+    @SerializedName("ApplicationToken")
+    val applicationToken: String?,
+    
+    @SerializedName("AuthenticationToken")
+    val authenticationToken: String?,
+    
+    @SerializedName("IsMarkedForDeletion")
+    val isMarkedForDeletion: Boolean = false,
+    
+    @SerializedName("IsDirty")
+    val isDirty: Boolean = true,
+    
+    @SerializedName("IsNew")
+    val isNew: Boolean = true,
+    
+    @SerializedName("InternalObjectId")
+    val internalObjectId: Int
 ) 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/dto/session/SessionDto.kt b/app/src/main/java/app/forku/data/api/dto/session/VehicleSessionDto.kt
similarity index 84%
rename from app/src/main/java/app/forku/data/api/dto/session/SessionDto.kt
rename to app/src/main/java/app/forku/data/api/dto/session/VehicleSessionDto.kt
index a0bb697..ee1c2b6 100644
--- a/app/src/main/java/app/forku/data/api/dto/session/SessionDto.kt
+++ b/app/src/main/java/app/forku/data/api/dto/session/VehicleSessionDto.kt
@@ -1,8 +1,6 @@
 package app.forku.data.api.dto.session
 
-import androidx.datastore.preferences.protobuf.Timestamp
-
-data class SessionDto(
+data class VehicleSessionDto(
     val id: String,
     val vehicleId: String,
     val userId: String,
diff --git a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
index f986da4..489d803 100644
--- a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
+++ b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
@@ -1,27 +1,74 @@
 package app.forku.data.api.dto.user
 
+import com.google.gson.annotations.SerializedName
+
 data class UserDto(
-    val id: String,
-    val token: String,
-    val refreshToken: String,
-    val email: String,
-    val password: String,
-    val username: String,
-    val firstName: String,
-    val lastName: String,
-    val photoUrl: String?,
-    val role: String,
-    val certifications: List<CertificationDto>,
-    val lastMedicalCheck: String?,
-    val lastLogin: String?,
-    val isActive: Boolean = true,
-    val isApproved: Boolean = false,
-    val businessId: String? = null,
-    val systemOwnerId: String? = null
+    @SerializedName("Id")
+    val id: String? = null,
+    @SerializedName("UserName")
+    val username: String? = null,
+    @SerializedName("EmailAddress")
+    val email: String? = null,
+    @SerializedName("FirstName")
+    val firstName: String? = null,
+    @SerializedName("LastName")
+    val lastName: String? = null,
+    @SerializedName("FullName")
+    val fullName: String? = null,
+    @SerializedName("Password")
+    val password: String? = null,
+    @SerializedName("PasswordExpiry")
+    val passwordExpiry: String? = null,
+    @SerializedName("PasswordExpiry_WithTimezoneOffset")
+    val passwordExpiryWithTimezoneOffset: String? = null,
+    @SerializedName("Blocked")
+    val blocked: Boolean? = null,
+    @SerializedName("UserValidated")
+    val userValidated: Boolean? = null,
+    @SerializedName("Unregistered")
+    val unregistered: Boolean? = null,
+    @SerializedName("IsMarkedForDeletion")
+    val isMarkedForDeletion: Boolean? = null,
+    @SerializedName("IsDirty")
+    val isDirty: Boolean? = null,
+    @SerializedName("IsNew")
+    val isNew: Boolean? = null,
+    @SerializedName("InternalObjectId")
+    val internalObjectId: Int? = null,
+    @SerializedName("EmailChangeValidationInProgress")
+    val emailChangeValidationInProgress: Boolean? = null,
+    @SerializedName("EmailValidated")
+    val emailValidated: Boolean? = null,
+    @SerializedName("NewEmailAddress")
+    val newEmailAddress: String? = null,
+    @SerializedName("NewEmailValidated")
+    val newEmailValidated: Boolean? = null,
+    // Array/relations (all optional, default to emptyList if not present)
+    @SerializedName("answeredChecklistItemItems")
+    val answeredChecklistItemItems: List<Any>? = emptyList(),
+    @SerializedName("certificationItems2")
+    val certificationItems2: List<Any>? = emptyList(),
+    @SerializedName("checklistAnswerItems")
+    val checklistAnswerItems: List<Any>? = emptyList(),
+    @SerializedName("feedbackItems")
+    val feedbackItems: List<Any>? = emptyList(),
+    @SerializedName("incidentItems")
+    val incidentItems: List<Any>? = emptyList(),
+    @SerializedName("notificationItems")
+    val notificationItems: List<Any>? = emptyList(),
+    @SerializedName("userBusinesses")
+    val userBusinesses: List<Any>? = emptyList(),
+    @SerializedName("userChecklistItems")
+    val userChecklistItems: List<Any>? = emptyList(),
+    @SerializedName("userCollisionIncidentItems")
+    val userCollisionIncidentItems: List<Any>? = emptyList(),
+    @SerializedName("userGroupItems")
+    val userGroupItems: List<Any>? = emptyList(),
+    @SerializedName("userMultimediaItems")
+    val userMultimediaItems: List<Any>? = emptyList(),
+    @SerializedName("userNearMissIncidentItems")
+    val userNearMissIncidentItems: List<Any>? = emptyList(),
+    @SerializedName("userRoleItems")
+    val userRoleItems: List<Any>? = emptyList()
 )
 
-data class CertificationDto(
-    val vehicleTypeId: String,
-    val isValid: Boolean,
-    val expiresAt: String
-)
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/dto/vehicle/VehicleDto.kt b/app/src/main/java/app/forku/data/api/dto/vehicle/VehicleDto.kt
index 2646b9d..3d9423b 100644
--- a/app/src/main/java/app/forku/data/api/dto/vehicle/VehicleDto.kt
+++ b/app/src/main/java/app/forku/data/api/dto/vehicle/VehicleDto.kt
@@ -5,42 +5,42 @@ import app.forku.domain.model.vehicle.VehicleStatus
 import com.google.gson.annotations.SerializedName
 
 data class VehicleDto(
-    @SerializedName("id")
+    @SerializedName("Id")
     val id: String? = null,  // Allow null for creation
     
-    @SerializedName("businessId")
+    @SerializedName("BusinessId")
     val businessId: String? = null,
     
-    @SerializedName("vehicleTypeId")
+    @SerializedName("VehicleTypeId")
     val vehicleTypeId: String,
     
-    @SerializedName("categoryId")
+    @SerializedName("CategoryId")
     val categoryId: String,
     
-    @SerializedName("status")
+    @SerializedName("Status")
     val status: String = "AVAILABLE",
     
-    @SerializedName("serialNumber")
+    @SerializedName("SerialNumber")
     val serialNumber: String = "",
     
-    @SerializedName("description")
+    @SerializedName("Description")
     val description: String,
     
-    @SerializedName("bestSuitedFor")
+    @SerializedName("BestSuitedFor")
     val bestSuitedFor: String,
     
-    @SerializedName("photoModel")
+    @SerializedName("PhotoModel")
     val photoModel: String,
     
-    @SerializedName("codename")
+    @SerializedName("Codename")
     val codename: String,
     
-    @SerializedName("model")
+    @SerializedName("Model")
     val model: String,
     
-    @SerializedName("energyType")
+    @SerializedName("EnergyType")
     val energyType: String,
     
-    @SerializedName("nextService")
+    @SerializedName("NextService")
     val nextService: String
 )
diff --git a/app/src/main/java/app/forku/data/api/interceptor/AuthInterceptor.kt b/app/src/main/java/app/forku/data/api/interceptor/AuthInterceptor.kt
index 959e059..958079b 100644
--- a/app/src/main/java/app/forku/data/api/interceptor/AuthInterceptor.kt
+++ b/app/src/main/java/app/forku/data/api/interceptor/AuthInterceptor.kt
@@ -1,22 +1,426 @@
 package app.forku.data.api.interceptor
 
-import android.content.Context
+import android.util.Log
+import app.forku.data.api.dto.goservices.CsrfTokenDto
+import app.forku.data.datastore.AuthDataStore
+import app.forku.data.service.GOServicesManager
 import okhttp3.Interceptor
 import okhttp3.Response
 import javax.inject.Inject
+import javax.inject.Provider
 import javax.inject.Singleton
+import okhttp3.Request
+import java.util.Base64
+import org.json.JSONObject
+import kotlinx.coroutines.runBlocking
+import com.google.gson.Gson
+import okhttp3.Protocol
+import okhttp3.ResponseBody.Companion.toResponseBody
+import okhttp3.MediaType.Companion.toMediaType
+import java.io.IOException
+import java.util.concurrent.TimeUnit
+import app.forku.core.utils.ApiUtils
+
+private const val TAG = "AuthInterceptor"
+
+/**
+ * Error response body format for token-related errors
+ */
+private data class TokenErrorResponse(
+    val code: String,
+    val message: String
+)
+
+/**
+ * Constants for token errors
+ */
+private object TokenErrors {
+    const val EXPIRED_TOKEN = "expiredSecurityToken"
+    const val INVALID_TOKEN = "invalidSecurityToken"
+    const val NULL_TOKEN = "nullSecurityToken"
+    const val MISSING_CSRF = "missingCsrfToken"
+}
 
 @Singleton
 class AuthInterceptor @Inject constructor(
-    private val context: Context
+    private val authDataStore: AuthDataStore,
+    private val goServicesManagerProvider: Provider<GOServicesManager>
 ) : Interceptor {
-    override fun intercept(chain: Interceptor.Chain): Response {
-        val request = chain.request().newBuilder()
-            .addHeader("Accept", "application/json")
-            .addHeader("Content-Type", "application/json")
-            // Add any other default headers here
+    private val gson = Gson()
+    private var lastKeepAliveTime = 0L
+    private val keepAliveIntervalMillis = TimeUnit.MINUTES.toMillis(5) // Keep-alive every 5 minutes
+
+    private fun isTokenExpired(token: String): Boolean {
+        try {
+            val parts = token.split(".")
+            if (parts.size != 3) {
+                Log.d(TAG, "Token format invalid - parts count: ${parts.size}")
+                return true
+            }
+            
+            val payload = String(Base64.getUrlDecoder().decode(parts[1]))
+            val json = JSONObject(payload)
+            val exp = json.getLong("exp")
+            val now = System.currentTimeMillis()
+            val expMillis = exp * 1000
+            
+            Log.d(TAG, """
+                Token expiration check:
+                - Current time: $now
+                - Expiration time: $expMillis
+                - Time until expiration: ${expMillis - now} ms
+                - Is expired: ${(expMillis <= now + 30000)}
+            """.trimIndent())
+            
+            return (expMillis <= now + 30000)
+        } catch (e: Exception) {
+            Log.e(TAG, "Error checking token expiration", e)
+            return true
+        }
+    }
+
+    private fun buildCookieString(
+        applicationToken: String?,
+        bearerToken: String?,
+        antiforgeryCookie: String? // Use the actual cookie value
+    ): String {
+        val cookies = mutableListOf<String>()
+        
+        Log.d(TAG, """
+            Building cookie string with:
+            - Application token present: ${applicationToken != null}
+            - Bearer token present: ${bearerToken != null}
+            - Antiforgery cookie present: ${antiforgeryCookie != null}
+        """.trimIndent())
+        
+        // Add ApplicationToken cookie first
+        applicationToken?.let {
+            cookies.add("ApplicationToken=$it")
+        }
+        
+        // Add BearerToken cookie second
+        bearerToken?.let {
+            cookies.add("BearerToken=$it")
+        }
+        
+        // Add Antiforgery cookie last (as obtained from server)
+        antiforgeryCookie?.let {
+            if (!it.contains(";") && !it.contains(",")) {
+                cookies.add(it)
+            } else {
+                Log.w(TAG, "Potentially invalid Antiforgery cookie format: $it")
+                val firstPart = it.split(";").firstOrNull()?.split(",")?.firstOrNull()
+                firstPart?.let { validPart -> cookies.add(validPart) }
+            }
+        }
+        
+        return cookies.joinToString("; ").also {
+            Log.d(TAG, "Final cookie string: ${it.take(50)}...")
+        }
+    }
+
+    // Return Pair<CsrfToken, AntiforgeryCookieValue>
+    private suspend fun getCsrfTokenAndCookie(): Pair<String?, String?> {
+        Log.d(TAG, "Attempting to get new CSRF token and cookie via GOServicesManager...")
+        
+        val goServicesManager = goServicesManagerProvider.get()
+        return try {
+            // GOServicesManager handles fetching and saving both internally now
+            val tokenResult = goServicesManager.getCsrfToken(forceRefresh = true)
+            
+            if (tokenResult.isSuccess) {
+                val token = tokenResult.getOrNull()
+                val cookie = authDataStore.getAntiforgeryCookie() // Get the potentially updated cookie
+            if (token != null && cookie != null) {
+                 Log.d(TAG, "Successfully obtained new CSRF token and cookie")
+                 Pair(token, cookie)
+            } else {
+                     Log.e(TAG, "GOServicesManager succeeded but token or cookie is still null. Token: ${token != null}, Cookie: ${cookie != null}")
+                     Pair(null, null) // Indicate failure if either is null
+                }
+            } else {
+                 Log.e(TAG, "Failed to get CSRF token/cookie via GOServicesManager: ${tokenResult.exceptionOrNull()?.message}")
+                 Pair(null, null) // Explicitly return nulls on failure
+            }
+        } catch (e: Exception) {
+            Log.e(TAG, "Exception during getCsrfTokenAndCookie", e)
+            Pair(null, null) // Return nulls on exception
+        }
+    }
+
+    /**
+     * Attempts to perform a session keep-alive call
+     * @return true if successful, false otherwise
+     */
+    private suspend fun performKeepAlive(chain: Interceptor.Chain, csrfToken: String, antiforgeryCookie: String): Boolean {
+        Log.d(TAG, "Performing session keep-alive")
+        
+        val currentTime = System.currentTimeMillis()
+        // Only do keep-alive if it's been at least 5 minutes since the last one
+        if (currentTime - lastKeepAliveTime < keepAliveIntervalMillis) {
+            Log.d(TAG, "Skipping keep-alive as one was performed recently (${(currentTime - lastKeepAliveTime) / 1000} seconds ago)")
+            return true
+        }
+        
+        try {
+            val originalRequest = chain.request()
+            val keepAliveUrl = ApiUtils.buildApiUrl(
+                originalRequest.url.scheme,
+                originalRequest.url.host,
+                "gosecurityprovider/keepalive"
+            )
+            
+            // Create keep-alive request with CSRF token and cookie
+            val keepAliveRequest = Request.Builder()
+                .url(keepAliveUrl)
+                .header("Content-Type", "application/json")
+                .header("Accept", "*/*")
+                .header("X-CSRF-TOKEN", csrfToken)
+                .header("Cookie", antiforgeryCookie)
+                .build()
+            
+            val keepAliveResponse = chain.proceed(keepAliveRequest)
+            
+            Log.d(TAG, "Keep-alive response: ${keepAliveResponse.code}")
+            
+            val successful = keepAliveResponse.isSuccessful
+            if (successful) {
+                lastKeepAliveTime = currentTime
+            }
+            
+            // Always close the response
+            keepAliveResponse.close()
+            
+            return successful
+        } catch (e: Exception) {
+            Log.e(TAG, "Error performing keep-alive", e)
+            return false
+        }
+    }
+
+    /**
+     * Creates a standardized 401 response with error details in the body
+     */
+    private fun createAuthErrorResponse(
+        request: Request, 
+        errorCode: String, 
+        errorMessage: String
+    ): Response {
+        Log.w(TAG, "Creating auth error response: $errorCode - $errorMessage")
+        
+        val errorBody = TokenErrorResponse(errorCode, errorMessage)
+        val jsonBody = gson.toJson(errorBody)
+        
+        return Response.Builder()
+            .request(request)
+            .protocol(Protocol.HTTP_1_1)
+            .code(401) // Unauthorized
+            .message("Authentication Required")
+            .body(jsonBody.toResponseBody("application/json".toMediaType()))
+            .header("Content-Type", "application/json")
             .build()
+    }
+
+    private fun buildErrorResponse(request: Request, errorCode: Int, errorMessage: String): Response {
+        val errorJson = JSONObject().apply {
+            put("code", errorCode)
+            put("message", errorMessage)
+        }.toString()
+
+        val errorUrl = ApiUtils.buildApiUrl(
+            request.url.scheme,
+            request.url.host,
+            "error"
+        )
+
+        return Response.Builder()
+            .request(request)
+            .protocol(Protocol.HTTP_1_1)
+            .code(errorCode)
+            .message(errorMessage)
+            .body(errorJson.toResponseBody("application/json".toMediaType()))
+            .request(Request.Builder().url(errorUrl).build())
+            .build()
+    }
+
+    override fun intercept(chain: Interceptor.Chain): Response = runBlocking {
+        val originalRequest = chain.request()
+        
+        Log.d(TAG, """
+            Starting request interception:
+            - URL: ${originalRequest.url}
+            - Method: ${originalRequest.method}
+        """.trimIndent())
+        
+        // Skip auth for authentication and CSRF endpoints
+        val urlString = originalRequest.url.toString()
+        if (urlString.contains("authenticate") || 
+            urlString.contains("register") ||
+            urlString.contains("csrf-token") ||
+            urlString.contains("keepalive")) {
+            Log.d(TAG, "Skipping auth for authentication, keepalive, or CSRF endpoint")
+            return@runBlocking chain.proceed(originalRequest)
+        }
+
+        // Get all tokens from storage
+        val applicationToken = authDataStore.getApplicationToken()
+        val bearerToken = authDataStore.getAuthenticationToken()
+        val csrfToken = authDataStore.getCsrfToken()
+        val antiforgeryCookie = authDataStore.getAntiforgeryCookie()
+        
+        // --- Token Validation ---
+        
+        // Check for missing application token
+        if (applicationToken == null) {
+            Log.w(TAG, "Application token is null")
+            authDataStore.clearAuth() // Clean up any stale data
+            return@runBlocking createAuthErrorResponse(
+                originalRequest,
+                TokenErrors.NULL_TOKEN,
+                "Authentication token not found. Please log in."
+            )
+        }
+        
+        // Check for expired token
+        if (isTokenExpired(applicationToken)) {
+            Log.w(TAG, "Application token has expired")
+            authDataStore.clearAuth() // Clean up stale token
+            return@runBlocking createAuthErrorResponse(
+                originalRequest,
+                TokenErrors.EXPIRED_TOKEN,
+                "Your session has expired. Please log in again."
+            )
+        }
+        
+        // Check for missing CSRF token or cookie
+        if (csrfToken == null || antiforgeryCookie == null) {
+            Log.w(TAG, "CSRF token or Antiforgery cookie is missing. Attempting to fetch.")
+            val (newCsrfToken, newAntiforgeryCookie) = getCsrfTokenAndCookie()
+
+            if (newCsrfToken == null || newAntiforgeryCookie == null) {
+                 Log.e(TAG, "Failed to obtain necessary CSRF token/cookie")
+                 authDataStore.clearAuth() // Could indicate session issues, clear auth
+                 return@runBlocking createAuthErrorResponse(
+                     originalRequest,
+                     TokenErrors.MISSING_CSRF,
+                     "Security token missing. Please log in again."
+                 )
+            }
+            
+            // Continue with the newly fetched tokens
+            val keepAliveSuccess = performKeepAlive(chain, newCsrfToken, newAntiforgeryCookie)
+            if (!keepAliveSuccess) {
+                Log.w(TAG, "Keep-alive failed after fetching new CSRF token")
+                // We still proceed with the original request, as the keep-alive is just preventive
+            }
+            
+            // --- Build Request with Valid Credentials ---
+            val requestBuilder = originalRequest.newBuilder()
+                .header("Content-Type", "application/json")
+                .header("Accept", "text/plain")
+                .header("X-CSRF-TOKEN", newCsrfToken)
+            
+            // Build cookie header
+            val cookieString = buildCookieString(applicationToken, bearerToken, newAntiforgeryCookie)
+            if (cookieString.isNotEmpty()) {
+                requestBuilder.header("Cookie", cookieString)
+            }
+            
+            val response = chain.proceed(requestBuilder.build())
+            
+            // Handle 403 responses by attempting to refresh tokens
+            if (response.code == 403) {
+                Log.w(TAG, "Received 403 response, attempting to refresh tokens")
+                response.close()
+                
+                // Try to get new tokens
+                val (refreshedCsrfToken, refreshedCookie) = getCsrfTokenAndCookie()
+                if (refreshedCsrfToken != null && refreshedCookie != null) {
+                    // Build new request with refreshed tokens
+                    val refreshedRequestBuilder = originalRequest.newBuilder()
+                        .header("Content-Type", "application/json")
+                        .header("Accept", "text/plain")
+                        .header("X-CSRF-TOKEN", refreshedCsrfToken)
+                    
+                    val refreshedCookieString = buildCookieString(applicationToken, bearerToken, refreshedCookie)
+                    if (refreshedCookieString.isNotEmpty()) {
+                        refreshedRequestBuilder.header("Cookie", refreshedCookieString)
+                    }
+                    
+                    return@runBlocking chain.proceed(refreshedRequestBuilder.build())
+                }
+                
+                // If refresh failed, return 401 to trigger re-authentication
+                return@runBlocking createAuthErrorResponse(
+                    originalRequest,
+                    TokenErrors.EXPIRED_TOKEN,
+                    "Your session has expired. Please log in again."
+                )
+            }
+            
+            return@runBlocking response
+        }
+        
+        // --- Session Maintenance via Keep-Alive ---
+        
+        // Try keep-alive occasionally to maintain session, but don't fail if it doesn't work
+        val shouldPerformKeepAlive = System.currentTimeMillis() - lastKeepAliveTime >= keepAliveIntervalMillis
+        if (shouldPerformKeepAlive) {
+            try {
+                performKeepAlive(chain, csrfToken, antiforgeryCookie)
+            } catch (e: Exception) {
+                Log.w(TAG, "Keep-alive attempt failed, continuing with original request", e)
+                // Continue with the original request regardless
+            }
+        }
+        
+        // --- Build Request with Valid Credentials ---
+        val requestBuilder = originalRequest.newBuilder()
+            .header("Content-Type", "application/json")
+            .header("Accept", "text/plain")
+            .header("X-CSRF-TOKEN", csrfToken)
+        
+        // Build cookie header
+        val cookieString = buildCookieString(applicationToken, bearerToken, antiforgeryCookie)
+        if (cookieString.isNotEmpty()) {
+            requestBuilder.header("Cookie", cookieString)
+        } else {
+            Log.w(TAG, "Cookie string is empty despite having credentials. Check cookie building logic.")
+        }
+        
+        Log.d(TAG, "Proceeding with authenticated request to ${originalRequest.url}")
+        val response = chain.proceed(requestBuilder.build())
+        
+        // Handle 403 responses by attempting to refresh tokens
+        if (response.code == 403) {
+            Log.w(TAG, "Received 403 response, attempting to refresh tokens")
+            response.close()
+            
+            // Try to get new tokens
+            val (refreshedCsrfToken, refreshedCookie) = getCsrfTokenAndCookie()
+            if (refreshedCsrfToken != null && refreshedCookie != null) {
+                // Build new request with refreshed tokens
+                val refreshedRequestBuilder = originalRequest.newBuilder()
+                    .header("Content-Type", "application/json")
+                    .header("Accept", "text/plain")
+                    .header("X-CSRF-TOKEN", refreshedCsrfToken)
+                
+                val refreshedCookieString = buildCookieString(applicationToken, bearerToken, refreshedCookie)
+                if (refreshedCookieString.isNotEmpty()) {
+                    refreshedRequestBuilder.header("Cookie", refreshedCookieString)
+                }
+                
+                return@runBlocking chain.proceed(refreshedRequestBuilder.build())
+            }
+            
+            // If refresh failed, return 401 to trigger re-authentication
+            return@runBlocking createAuthErrorResponse(
+                originalRequest,
+                TokenErrors.EXPIRED_TOKEN,
+                "Your session has expired. Please log in again."
+            )
+        }
         
-        return chain.proceed(request)
+        return@runBlocking response
     }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/api/interceptor/CsrfTokenInterceptor.kt b/app/src/main/java/app/forku/data/api/interceptor/CsrfTokenInterceptor.kt
index 357b720..1466994 100644
--- a/app/src/main/java/app/forku/data/api/interceptor/CsrfTokenInterceptor.kt
+++ b/app/src/main/java/app/forku/data/api/interceptor/CsrfTokenInterceptor.kt
@@ -1,8 +1,7 @@
 package app.forku.data.api.interceptor
 
-import app.forku.data.datastore.GOServicesPreferences
-import kotlinx.coroutines.flow.first
-import kotlinx.coroutines.runBlocking
+import android.util.Log
+import app.forku.data.datastore.AuthDataStore
 import okhttp3.Interceptor
 import okhttp3.Response
 import javax.inject.Inject
@@ -10,20 +9,54 @@ import javax.inject.Singleton
 
 @Singleton
 class CsrfTokenInterceptor @Inject constructor(
-    private val preferences: GOServicesPreferences
+    private val authDataStore: AuthDataStore
 ) : Interceptor {
+    private var csrfCookie: String? = null
 
     override fun intercept(chain: Interceptor.Chain): Response {
-        val token = runBlocking { preferences.csrfToken.first() }
+        val originalRequest = chain.request()
+        val csrfToken = authDataStore.getCsrfToken()
         
-        val request = if (token != null) {
-            chain.request().newBuilder()
-                .addHeader("X-CSRF-TOKEN", token)
-                .build()
+        Log.d("CsrfTokenInterceptor", """
+            Request details:
+            - URL: ${originalRequest.url}
+            - Method: ${originalRequest.method}
+            - Content-Type: ${originalRequest.header("Content-Type")}
+            - CSRF Token: ${csrfToken?.take(10)}...
+            - CSRF Cookie: ${csrfCookie?.take(10)}...
+        """.trimIndent())
+
+        val builder = originalRequest.newBuilder()
+        
+        if (csrfToken != null) {
+            builder.addHeader("X-CSRF-TOKEN", csrfToken)
+            builder.addHeader("RequestVerificationToken", csrfToken)
         } else {
-            chain.request()
+            Log.w("CsrfTokenInterceptor", "No CSRF token available!")
+        }
+        
+        // Add the CSRF cookie if available
+        if (csrfCookie != null) {
+            builder.addHeader("Cookie", csrfCookie!!)
+        }
+
+        val response = chain.proceed(builder.build())
+        
+        // Store the CSRF cookie from the response if present
+        response.headers("Set-Cookie").forEach { cookie ->
+            if (cookie.startsWith(".AspNetCore.Antiforgery")) {
+                csrfCookie = cookie.split(";")[0]
+                Log.d("CsrfTokenInterceptor", "Stored CSRF cookie: ${csrfCookie?.take(10)}...")
+            }
         }
         
-        return chain.proceed(request)
+        Log.d("CsrfTokenInterceptor", """
+            Response details:
+            - Code: ${response.code}
+            - Message: ${response.message}
+            - Headers: ${response.headers}
+        """.trimIndent())
+
+        return response
     }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
index bd492e5..06eac79 100644
--- a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
+++ b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
@@ -25,10 +25,15 @@ class AuthDataStore @Inject constructor(
 ) {
     private object PreferencesKeys {
         val USER_KEY = stringPreferencesKey("user")
-        val TOKEN_KEY = stringPreferencesKey("auth_token")
+        
+        // Token keys with clear naming
+        val APPLICATION_TOKEN = stringPreferencesKey("application_token")
+        val AUTHENTICATION_TOKEN = stringPreferencesKey("authentication_token")
+        val CSRF_TOKEN = stringPreferencesKey("csrf_token")
+        val ANTIFORGERY_COOKIE = stringPreferencesKey("antiforgery_cookie")
+        
+        // User properties
         val USER_ID = stringPreferencesKey("userId")
-        val TOKEN = stringPreferencesKey("token")
-        val REFRESH_TOKEN = stringPreferencesKey("refreshToken")
         val EMAIL = stringPreferencesKey("email")
         val USERNAME = stringPreferencesKey("username")
         val FIRST_NAME = stringPreferencesKey("firstName")
@@ -43,42 +48,100 @@ class AuthDataStore @Inject constructor(
         val SYSTEM_OWNER_ID = stringPreferencesKey("systemOwnerId")
     }
 
-    private var cachedToken: String? = null
+    private var cachedApplicationToken: String? = null
+    private var cachedAuthenticationToken: String? = null
+    private var cachedCsrfToken: String? = null
+    private var cachedAntiforgeryCookie: String? = null
     private var lastActiveTime: Long = 0
     private val gson = Gson()
 
-    val token: Flow<String?> = context.dataStore.data
+    // Application Token methods (main JWT token with user claims)
+    val applicationToken: Flow<String?> = context.dataStore.data
         .map { preferences ->
-            preferences[PreferencesKeys.TOKEN_KEY]
+            preferences[PreferencesKeys.APPLICATION_TOKEN]
         }
 
-    suspend fun initializeToken() {
-        android.util.Log.d("AuthDataStore", "Initializing token...")
-        cachedToken = context.dataStore.data.map { preferences ->
-            preferences[PreferencesKeys.TOKEN_KEY]
+    suspend fun initializeApplicationToken() {
+        android.util.Log.d("AuthDataStore", "Initializing application token...")
+        cachedApplicationToken = context.dataStore.data.map { preferences ->
+            preferences[PreferencesKeys.APPLICATION_TOKEN]
         }.first()
-        android.util.Log.d("AuthDataStore", "Token initialized: ${cachedToken?.take(10)}...")
+        android.util.Log.d("AuthDataStore", "Application token initialized: ${cachedApplicationToken?.take(10)}...")
+    }
+    
+    fun getApplicationToken(): String? {
+        android.util.Log.d("AuthDataStore", "Getting cached application token: ${cachedApplicationToken?.take(10)}")
+        return cachedApplicationToken
+    }
+    
+    suspend fun saveApplicationToken(token: String) {
+        context.dataStore.edit { preferences ->
+            preferences[PreferencesKeys.APPLICATION_TOKEN] = token
+        }
+        cachedApplicationToken = token
+        android.util.Log.d("AuthDataStore", "Saved application token: ${token.take(10)}...")
     }
 
-    fun getToken(): String? {
-        android.util.Log.d("AuthDataStore", "Getting cached token: $cachedToken")
-        return cachedToken
+    // Authentication Token methods (refresh token)
+    suspend fun saveAuthenticationToken(token: String) {
+        context.dataStore.edit { preferences ->
+            preferences[PreferencesKeys.AUTHENTICATION_TOKEN] = token
+        }
+        cachedAuthenticationToken = token
+        android.util.Log.d("AuthDataStore", "Saved authentication token: ${token.take(10)}...")
+    }
+    
+    fun getAuthenticationToken(): String? {
+        return cachedAuthenticationToken
     }
 
-    suspend fun saveToken(token: String) {
+    // CSRF Token methods
+    suspend fun saveCsrfToken(token: String) {
         context.dataStore.edit { preferences ->
-            preferences[PreferencesKeys.TOKEN_KEY] = token
+            preferences[PreferencesKeys.CSRF_TOKEN] = token
         }
-        cachedToken = token
-        android.util.Log.d("AuthDataStore", "Saved token: ${token.take(10)}...")
+        cachedCsrfToken = token
+        android.util.Log.d("AuthDataStore", "Saved CSRF token: ${token.take(10)}...")
+    }
+    
+    fun getCsrfToken(): String? {
+        return cachedCsrfToken
+    }
+    
+    // Antiforgery Cookie methods
+    suspend fun saveAntiforgeryCookie(cookie: String) {
+        context.dataStore.edit { preferences ->
+            preferences[PreferencesKeys.ANTIFORGERY_COOKIE] = cookie
+        }
+        cachedAntiforgeryCookie = cookie
+        android.util.Log.d("AuthDataStore", "Saved Antiforgery cookie: ${cookie.take(20)}...")
+    }
+    
+    fun getAntiforgeryCookie(): String? {
+        return cachedAntiforgeryCookie
     }
 
-    suspend fun clearToken() {
+    // Backward compatibility method
+    fun getToken(): String? {
+        return cachedApplicationToken
+    }
+    
+    suspend fun saveToken(token: String) {
+        saveApplicationToken(token)
+    }
+    
+    suspend fun clearTokens() {
         context.dataStore.edit { preferences ->
-            preferences.remove(PreferencesKeys.TOKEN_KEY)
+            preferences.remove(PreferencesKeys.APPLICATION_TOKEN)
+            preferences.remove(PreferencesKeys.AUTHENTICATION_TOKEN)
+            preferences.remove(PreferencesKeys.CSRF_TOKEN)
+            preferences.remove(PreferencesKeys.ANTIFORGERY_COOKIE)
         }
-        cachedToken = null
-        android.util.Log.d("AuthDataStore", "Cleared token")
+        cachedApplicationToken = null
+        cachedAuthenticationToken = null
+        cachedCsrfToken = null
+        cachedAntiforgeryCookie = null
+        android.util.Log.d("AuthDataStore", "Cleared all tokens and cookies")
     }
 
     suspend fun setCurrentUser(user: User) {
@@ -96,8 +159,16 @@ class AuthDataStore @Inject constructor(
         context.dataStore.edit { preferences ->
             preferences[PreferencesKeys.USER_KEY] = gson.toJson(user)
             preferences[PreferencesKeys.USER_ID] = user.id
-            preferences[PreferencesKeys.TOKEN] = user.token
-            preferences[PreferencesKeys.REFRESH_TOKEN] = user.refreshToken
+            
+            // Store tokens in their specific keys
+            preferences[PreferencesKeys.APPLICATION_TOKEN] = user.token
+            preferences[PreferencesKeys.AUTHENTICATION_TOKEN] = user.refreshToken
+            
+            // Clear CSRF token and cookie on new login
+            preferences.remove(PreferencesKeys.CSRF_TOKEN)
+            preferences.remove(PreferencesKeys.ANTIFORGERY_COOKIE)
+            
+            // Store other user properties
             preferences[PreferencesKeys.EMAIL] = user.email
             preferences[PreferencesKeys.USERNAME] = user.username
             preferences[PreferencesKeys.FIRST_NAME] = user.firstName
@@ -113,7 +184,13 @@ class AuthDataStore @Inject constructor(
             preferences[PreferencesKeys.LAST_ACTIVE] = now.toString()
             lastActiveTime = now
         }
-        cachedToken = user.token
+        
+        // Update cached tokens
+        cachedApplicationToken = user.token
+        cachedAuthenticationToken = user.refreshToken
+        cachedCsrfToken = null
+        cachedAntiforgeryCookie = null
+        
         android.util.Log.d("AuthDataStore", "User data stored successfully")
     }
 
@@ -130,7 +207,10 @@ class AuthDataStore @Inject constructor(
         context.dataStore.edit { preferences ->
             preferences.clear()
         }
-        cachedToken = null
+        cachedApplicationToken = null
+        cachedAuthenticationToken = null
+        cachedCsrfToken = null
+        cachedAntiforgeryCookie = null
         lastActiveTime = 0
     }
 
diff --git a/app/src/main/java/app/forku/data/manager/VehicleSessionManager.kt b/app/src/main/java/app/forku/data/manager/VehicleSessionManager.kt
index a5fc4b5..68a93bf 100644
--- a/app/src/main/java/app/forku/data/manager/VehicleSessionManager.kt
+++ b/app/src/main/java/app/forku/data/manager/VehicleSessionManager.kt
@@ -1,6 +1,6 @@
 package app.forku.data.manager
 
-import app.forku.data.api.dto.VehicleSessionDto
+import app.forku.data.api.dto.session.VehicleSessionDto
 import kotlinx.coroutines.flow.Flow
 import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.map
diff --git a/app/src/main/java/app/forku/data/mapper/CertificationMapper.kt b/app/src/main/java/app/forku/data/mapper/CertificationMapper.kt
index 163acde..aa0a374 100644
--- a/app/src/main/java/app/forku/data/mapper/CertificationMapper.kt
+++ b/app/src/main/java/app/forku/data/mapper/CertificationMapper.kt
@@ -34,4 +34,4 @@ fun Certification.toDto(): CertificationDto {
         documentUrl = documentUrl,
         timestamp = timestamp
     )
-} 
\ No newline at end of file
+}
diff --git a/app/src/main/java/app/forku/data/mapper/SiteMapper.kt b/app/src/main/java/app/forku/data/mapper/SiteMapper.kt
index 04b0d37..66cb5aa 100644
--- a/app/src/main/java/app/forku/data/mapper/SiteMapper.kt
+++ b/app/src/main/java/app/forku/data/mapper/SiteMapper.kt
@@ -5,15 +5,15 @@ import app.forku.domain.model.Site
 
 fun SiteDto.toDomain(): Site {
     return Site(
-        id = id ?: "",
+        id = id,
         name = name,
         address = address,
-        businessId = businessId ?: "",
-        latitude = latitude ?: 0.0,
-        longitude = longitude ?: 0.0,
-        isActive = isActive ?: true,
-        createdAt = createdAt ?: "",
-        updatedAt = updatedAt ?: ""
+        businessId = businessId,
+        latitude = latitude,
+        longitude = longitude,
+        isActive = isActive,
+        createdAt = createdAt,
+        updatedAt = updatedAt
     )
 }
 
diff --git a/app/src/main/java/app/forku/data/mapper/UserMapper.kt b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
index 288a02a..77b7837 100644
--- a/app/src/main/java/app/forku/data/mapper/UserMapper.kt
+++ b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
@@ -1,70 +1,53 @@
 package app.forku.data.mapper
 
 import app.forku.data.api.dto.user.UserDto
-import app.forku.data.api.dto.user.CertificationDto
-
 import app.forku.domain.model.user.User
 import app.forku.domain.model.user.UserRole
-import app.forku.domain.model.user.Certification
+import android.util.Log
 
-fun UserDto.toDomain(): User {
-    // Split the name into first and last name
+fun UserDto.toDomain(roleOverride: UserRole? = null): User {
+    // Determine role from userRoleItems if available, else use override, else default to OPERATOR
+    val mappedRole = roleOverride ?: try {
+        val roleString = this.userRoleItems?.firstOrNull()?.toString()?.uppercase()
+        roleString?.let { UserRole.valueOf(it) } ?: UserRole.OPERATOR
+    } catch (e: Exception) {
+        Log.w("UserMapper", "Could not map user role from userRoleItems, defaulting to OPERATOR: "+e.message)
+        UserRole.OPERATOR
+    }
 
     return User(
-        id = id,
-        token = token,
-        refreshToken = refreshToken,
-        email = email,
-        username = username,
-        firstName = firstName,
-        lastName = lastName,
-        photoUrl = photoUrl,
-        role = UserRole.fromString(role),
-        certifications = certifications.map { it.toDomain() },
-        lastMedicalCheck = lastMedicalCheck,
-        lastLogin = lastLogin,
-        isActive = isActive,
-        isApproved = isApproved,
-        password = password,
-        businessId = businessId,
-        systemOwnerId = systemOwnerId
-    )
-}
-
-fun CertificationDto.toDomain(): Certification {
-    return Certification(
-        vehicleTypeId = vehicleTypeId,
-        isValid = isValid,
-        expiresAt = expiresAt
+        id = id ?: "",
+        token = "", // Not present in UserDto, set as empty
+        refreshToken = "", // Not present in UserDto, set as empty
+        email = email ?: "",
+        username = username ?: "",
+        firstName = firstName ?: "",
+        lastName = lastName ?: "",
+        photoUrl = null, // Not present in UserDto
+        role = mappedRole,
+        certifications = emptyList(), // If you want to map certifications, do it via CertificationMapper
+        lastMedicalCheck = null, // Not present in UserDto
+        lastLogin = null, // Not present in UserDto
+        isActive = !(blocked ?: false),
+        isApproved = userValidated ?: false,
+        password = password ?: "",
+        businessId = null, // Not present in UserDto
+        siteId = null, // Not present in UserDto
+        systemOwnerId = null // Not present in UserDto
     )
 }
 
 fun User.toDto(): UserDto {
+    // Only map fields that exist in UserDto
     return UserDto(
         id = id,
-        token = token,
-        refreshToken = refreshToken,
-        email = email,
-        password = password,
         username = username,
+        email = email,
         firstName = firstName,
         lastName = lastName,
-        photoUrl = photoUrl,
-        role = role.name,
-        certifications = certifications.map { it.toDto() },
-        lastMedicalCheck = lastMedicalCheck,
-        lastLogin = lastLogin,
-        isActive = isActive,
-        isApproved = isApproved,
-        businessId = businessId,
-        systemOwnerId = systemOwnerId
+        fullName = fullName,
+        password = password,
+        // Other fields can be added here if needed and present in UserDto
     )
 }
 
-fun Certification.toDto(): CertificationDto {
-    return CertificationDto(
-        vehicleTypeId = vehicleTypeId,
-        isValid = isValid,
-        expiresAt = expiresAt
-    )
-} 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/mapper/VehicleSessionMapper.kt b/app/src/main/java/app/forku/data/mapper/VehicleSessionMapper.kt
index 6de4c85..8592415 100644
--- a/app/src/main/java/app/forku/data/mapper/VehicleSessionMapper.kt
+++ b/app/src/main/java/app/forku/data/mapper/VehicleSessionMapper.kt
@@ -1,7 +1,6 @@
 package app.forku.data.mapper
 
-import app.forku.data.api.dto.VehicleSessionDto
-import app.forku.data.api.dto.session.SessionDto
+import app.forku.data.api.dto.session.VehicleSessionDto
 import app.forku.domain.model.session.VehicleSession
 import app.forku.domain.model.session.VehicleSessionStatus
 import app.forku.domain.model.session.VehicleSessionClosedMethod
@@ -31,25 +30,6 @@ object VehicleSessionMapper {
     }
 
     fun toDomain(dto: VehicleSessionDto): VehicleSession {
-        return VehicleSession(
-            id = dto.id,
-            vehicleId = dto.vehicleId,
-            userId = dto.userId,
-            checkId = dto.checkId,
-            startTime = dto.startTime,
-            endTime = dto.endTime,
-            status = VehicleSessionStatus.valueOf(dto.status),
-            startLocationCoordinates = dto.startLocationCoordinates,
-            endLocationCoordinates = dto.endLocationCoordinates,
-            durationMinutes = calculateDuration(dto.startTime, dto.endTime),
-            timestamp = dto.timestamp,
-            closeMethod = mapCloseMethod(dto.closeMethod),
-            closedBy = dto.closedBy,
-            notes = dto.notes
-        )
-    }
-
-    fun toDomain(dto: SessionDto): VehicleSession {
         return VehicleSession(
             id = dto.id,
             vehicleId = dto.vehicleId,
@@ -71,8 +51,8 @@ object VehicleSessionMapper {
         )
     }
 
-    fun toDto(domain: VehicleSession): SessionDto {
-        return SessionDto(
+    fun toDto(domain: VehicleSession): VehicleSessionDto {
+        return VehicleSessionDto(
             id = domain.id,
             vehicleId = domain.vehicleId,
             userId = domain.userId,
diff --git a/app/src/main/java/app/forku/data/repository/GOSecurityProviderRepository.kt b/app/src/main/java/app/forku/data/repository/GOSecurityProviderRepository.kt
index c6537ac..9dcd24f 100644
--- a/app/src/main/java/app/forku/data/repository/GOSecurityProviderRepository.kt
+++ b/app/src/main/java/app/forku/data/repository/GOSecurityProviderRepository.kt
@@ -2,41 +2,147 @@ package app.forku.data.repository
 
 import android.util.Log
 import app.forku.data.api.GOSecurityProviderApi
-import app.forku.data.api.dto.gosecurityprovider.AuthenticationRequest
+import app.forku.data.api.auth.TokenParser
 import app.forku.data.datastore.AuthDataStore
+import app.forku.domain.model.user.User
 import app.forku.domain.repository.IGOSecurityProviderRepository
+import okhttp3.MediaType.Companion.toMediaType
+import okhttp3.RequestBody.Companion.toRequestBody
+import okhttp3.Headers
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import okhttp3.MultipartBody
+import retrofit2.Response
+import retrofit2.Retrofit
+import retrofit2.converter.gson.GsonConverterFactory
 import javax.inject.Inject
 import javax.inject.Singleton
+import app.forku.data.api.dto.gosecurityprovider.AuthenticationResponse
+import com.google.gson.Gson
+import okhttp3.RequestBody
+import okio.Buffer
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.withContext
 
 @Singleton
 class GOSecurityProviderRepository @Inject constructor(
     private val api: GOSecurityProviderApi,
-    private val authDataStore: AuthDataStore
+    private val authDataStore: AuthDataStore,
+    private val okHttpClient: OkHttpClient,
+    private val retrofit: Retrofit
 ) : IGOSecurityProviderRepository {
 
-    override suspend fun authenticate(username: String, password: String): Result<String> {
-        return try {
-            Log.d("GOSecurityProvider", "Authenticating with GO Security Provider...")
-            val request = AuthenticationRequest(username, password)
-            val response = api.authenticate(request)
-            Log.d("GOSecurityProvider", "Authentication response received: isSuccessful=${response.isSuccessful}, code=${response.code()}")
-
-            if (response.isSuccessful) {
-                val authResponse = response.body()
-                if (authResponse?.success == true) {
+    override suspend fun authenticate(username: String, password: String): Result<User> = withContext(Dispatchers.IO) {
+        try {
+            Log.d("GOSecurityProvider", """
+                Authenticating with GO Security Provider...
+                - Username: $username
+                - Password length: ${password.length}
+            """.trimIndent())
+            
+            // Get CSRF token and cookie
+            val csrfToken = authDataStore.getCsrfToken()
+            val antiforgeryCookie = authDataStore.getAntiforgeryCookie()
+            
+            if (csrfToken == null || antiforgeryCookie == null) {
+                Log.e("GOSecurityProvider", "CSRF token or cookie is missing. Cannot authenticate.")
+                return@withContext Result.failure(Exception("Authentication failed: Missing CSRF token or cookie"))
+            }
+            
+            Log.d("GOSecurityProvider", """
+                Using CSRF token and cookie for authentication:
+                - CSRF token: ${csrfToken.take(10)}...
+                - Antiforgery cookie: ${antiforgeryCookie.take(20)}...
+            """.trimIndent())
+            
+            // Create request bodies
+            val mediaType = "text/plain".toMediaType()
+            val usernameBody = username.toRequestBody(mediaType)
+            val passwordBody = password.toRequestBody(mediaType)
+            val useCookiesBody = "true".toRequestBody(mediaType)
+            
+            // Add headers for CSRF protection manually
+            val headers = Headers.Builder()
+                .add("X-CSRF-TOKEN", csrfToken)
+                .add("Cookie", antiforgeryCookie)
+                .build()
+                
+            // Log the headers being used
+            Log.d("GOSecurityProvider", "Headers for authentication request: $headers")
+            
+            // Create a custom request using the OkHttpClient
+            val baseUrl = retrofit.baseUrl().toString()
+            val requestBody = MultipartBody.Builder()
+                .setType(MultipartBody.FORM)
+                .addFormDataPart("username", username)
+                .addFormDataPart("password", password)
+                .addFormDataPart("useCookies", "true")
+                .build()
+                
+            val request = Request.Builder()
+                .url("${baseUrl}api/gosecurityprovider/authenticate")
+                .headers(headers)
+                .post(requestBody)
+                .build()
+                
+            // Execute the request using suspending call
+            val okHttpResponse = okHttpClient.newCall(request).await()
+            
+            Log.d("GOSecurityProvider", "Manual authentication response: ${okHttpResponse.code}")
+            
+            if (okHttpResponse.isSuccessful) {
+                // Parse response body
+                val responseBodyString = okHttpResponse.body?.string()
+                val gson = Gson()
+                val authResponse = gson.fromJson(responseBodyString, AuthenticationResponse::class.java)
+                
+                val applicationToken = authResponse.getApplicationToken()
+                
+                if (applicationToken != null) {
                     Log.d("GOSecurityProvider", "Authentication successful")
-                    authResponse.token?.let { token ->
-                        // Store the token
-                        authDataStore.saveToken(token)
-                        Result.success(token)
-                    } ?: Result.failure(Exception("Authentication token is null"))
+                    
+                    // Parse the JWT token to extract user information
+                    val tokenClaims = TokenParser.parseJwtToken(applicationToken)
+                    Log.d("appflow", "Authentication tokenClaims.role:  ${tokenClaims.role}")
+
+                    // Create user from token claims
+                    val user = User(
+                        id = tokenClaims.userId,
+                        email = username,
+                        username = tokenClaims.username,
+                        firstName = tokenClaims.username,  // Using username as firstName if not available
+                        lastName = tokenClaims.familyName.ifEmpty { "" },
+                        token = applicationToken,
+                        refreshToken = authResponse.getAuthenticationToken() ?: "",
+                        photoUrl = null,
+                        role = tokenClaims.role,
+                        password = password,
+                        certifications = emptyList(),
+                        lastMedicalCheck = null,
+                        lastLogin = System.currentTimeMillis().toString(),
+                        isActive = true,
+                        isApproved = true,
+                        businessId = null,
+                        siteId = null,
+                        systemOwnerId = null
+                    )
+                    
+                    // Store both tokens separately and the user
+                    authDataStore.saveApplicationToken(applicationToken)
+                    authResponse.getAuthenticationToken()?.let { 
+                        authDataStore.saveAuthenticationToken(it)
+                    }
+                    authDataStore.setCurrentUser(user)
+                    
+                    Result.success(user)
                 } else {
-                    Log.e("GOSecurityProvider", "Authentication failed: ${authResponse?.message}")
-                    Result.failure(Exception(authResponse?.message ?: "Authentication failed"))
+                    Log.e("GOSecurityProvider", "Authentication token is null")
+                    Result.failure(Exception("Authentication token is null"))
                 }
             } else {
-                Log.e("GOSecurityProvider", "Authentication failed: ${response.code()}, message: ${response.message()}")
-                Result.failure(Exception("Authentication failed: ${response.code()}"))
+                val errorBody = okHttpResponse.body?.string()
+                Log.e("GOSecurityProvider", "Authentication failed: ${okHttpResponse.code}, error: $errorBody")
+                Result.failure(Exception("Authentication failed: ${okHttpResponse.code} - $errorBody"))
             }
         } catch (e: Exception) {
             Log.e("GOSecurityProvider", "Exception during authentication", e)
@@ -45,6 +151,13 @@ class GOSecurityProviderRepository @Inject constructor(
     }
 
     override suspend fun logout() {
-        authDataStore.clearToken()
+        authDataStore.clearTokens()
+        authDataStore.clearAuth()
+    }
+
+    private suspend fun okhttp3.Call.await(): okhttp3.Response {
+        return withContext(Dispatchers.IO) {
+            execute()
+        }
     }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/repository/GOServicesRepository.kt b/app/src/main/java/app/forku/data/repository/GOServicesRepository.kt
index eb83054..bcb3c81 100644
--- a/app/src/main/java/app/forku/data/repository/GOServicesRepository.kt
+++ b/app/src/main/java/app/forku/data/repository/GOServicesRepository.kt
@@ -2,7 +2,7 @@ package app.forku.data.repository
 
 import android.util.Log
 import app.forku.data.api.GOServicesApi
-import app.forku.data.datastore.GOServicesPreferences
+import app.forku.data.datastore.AuthDataStore
 import app.forku.domain.repository.IGOServicesRepository
 import kotlinx.coroutines.flow.first
 import javax.inject.Inject
@@ -11,44 +11,47 @@ import javax.inject.Singleton
 @Singleton
 class GOServicesRepository @Inject constructor(
     private val api: GOServicesApi,
-    private val preferences: GOServicesPreferences
+    private val authDataStore: AuthDataStore
 ) : IGOServicesRepository {
 
-    override suspend fun getCsrfToken(): Result<String> {
+    override suspend fun getCsrfTokenAndCookie(): Result<Pair<String?, String?>> {
         return try {
-            Log.d("GOServicesRepository", "Fetching CSRF token from API...")
+            Log.d("GOServicesRepository", "Fetching CSRF token and cookie from API...")
             val response = api.getCsrfToken()
             Log.d("GOServicesRepository", "API response received: isSuccessful=${response.isSuccessful}, code=${response.code()}")
             
             if (response.isSuccessful) {
                 val token = response.body()?.csrfToken
-                if (token != null) {
-                    Log.d("GOServicesRepository", "CSRF token received successfully, storing token...")
-                    preferences.setCsrfToken(token)
-                    Result.success(token)
+                val cookies = response.headers().values("Set-Cookie")
+                val cookie = cookies
+                    .firstOrNull { it.startsWith(".AspNetCore.Antiforgery") }
+                    ?.split(";")?.get(0)
+                
+                if (token != null && cookie != null) {
+                    Log.d("GOServicesRepository", "CSRF token and cookie received successfully, storing...")
+                    authDataStore.saveCsrfToken(token)
+                    authDataStore.saveAntiforgeryCookie(cookie)
+                    Result.success(Pair(token, cookie))
                 } else {
-                    Log.e("GOServicesRepository", "CSRF token is null in response")
-                    Result.failure(Exception("CSRF token is null"))
+                    Log.e("GOServicesRepository", "CSRF token or cookie is null in response: token=$token, cookie=$cookie")
+                    Result.failure(Exception("CSRF token or cookie is null"))
                 }
             } else {
-                Log.e("GOServicesRepository", "Failed to get CSRF token: ${response.code()}, message: ${response.message()}")
-                Result.failure(Exception("Failed to get CSRF token: ${response.code()}"))
+                Log.e("GOServicesRepository", "Failed to get CSRF token/cookie: ${response.code()}, message: ${response.message()}")
+                Result.failure(Exception("Failed to get CSRF token/cookie: ${response.code()}"))
             }
         } catch (e: Exception) {
-            Log.e("GOServicesRepository", "Exception while fetching CSRF token", e)
+            Log.e("GOServicesRepository", "Exception while fetching CSRF token/cookie", e)
             Result.failure(e)
         }
     }
 
     override suspend fun getStoredCsrfToken(): String? {
-        Log.d("GOServicesRepository", "Getting stored CSRF token...")
-        return preferences.csrfToken.first().also { token ->
-            Log.d("GOServicesRepository", "Stored token retrieved: ${token?.take(10)}...")
-        }
+        Log.d("GOServicesRepository", "Getting stored CSRF token from AuthDataStore...")
+        return authDataStore.getCsrfToken()
     }
 
     override suspend fun clearCsrfToken() {
-        Log.d("GOServicesRepository", "Clearing CSRF token...")
-        preferences.clearCsrfToken()
+        Log.d("GOServicesRepository", "Clearing CSRF token and cookie in AuthDataStore...")
     }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/repository/VehicleComponentRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/VehicleComponentRepositoryImpl.kt
index 74d087d..56d9e6b 100644
--- a/app/src/main/java/app/forku/data/repository/VehicleComponentRepositoryImpl.kt
+++ b/app/src/main/java/app/forku/data/repository/VehicleComponentRepositoryImpl.kt
@@ -37,8 +37,8 @@ class VehicleComponentRepositoryImpl @Inject constructor(
 
     override suspend fun createComponent(component: VehicleComponentDto): Response<VehicleComponentDto> {
         return try {
-            val response = api.createComponent(component)
-            Log.d(TAG, "POST create component - ${response.raw().request.url}")
+            val response = api.saveComponent(component)
+            Log.d(TAG, "POST save component (create) - ${response.raw().request.url}")
             response
         } catch (e: Exception) {
             Log.e(TAG, "Error creating component: ${e.message}", e)
@@ -48,8 +48,8 @@ class VehicleComponentRepositoryImpl @Inject constructor(
 
     override suspend fun updateComponent(id: String, component: VehicleComponentDto): Response<VehicleComponentDto> {
         return try {
-            val response = api.updateComponent(id, component)
-            Log.d(TAG, "PUT update component - ${response.raw().request.url}")
+            val response = api.saveComponent(component.copy(id = id))
+            Log.d(TAG, "POST save component (update) - ${response.raw().request.url}")
             response
         } catch (e: Exception) {
             Log.e(TAG, "Error updating component: ${e.message}", e)
diff --git a/app/src/main/java/app/forku/data/repository/business/BusinessRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/business/BusinessRepositoryImpl.kt
index 7ff581f..d88a41b 100644
--- a/app/src/main/java/app/forku/data/repository/business/BusinessRepositoryImpl.kt
+++ b/app/src/main/java/app/forku/data/repository/business/BusinessRepositoryImpl.kt
@@ -1,85 +1,98 @@
 package app.forku.data.repository.business
 
+import android.util.Log
 import app.forku.data.api.BusinessApi
-import app.forku.data.api.CreateBusinessRequest
+import app.forku.data.api.UserBusinessApi
+import app.forku.data.api.dto.business.BusinessItemDto
+import app.forku.data.api.dto.business.UserBusinessAssignmentDto
+import app.forku.data.api.dto.business.BusinessStats
+import app.forku.domain.model.user.User
+import app.forku.domain.model.user.UserRole
 import app.forku.domain.repository.business.BusinessRepository
+import app.forku.domain.repository.user.UserRepository
 import app.forku.presentation.dashboard.Business
-import app.forku.presentation.dashboard.BusinessStatus
 import retrofit2.HttpException
+import retrofit2.Response
 import javax.inject.Inject
-import android.util.Log
-import app.forku.data.api.dto.BusinessDto
-import app.forku.data.api.dto.BusinessStats
-import com.google.gson.Gson
-import app.forku.domain.model.user.UserRole
-import app.forku.domain.repository.user.UserRepository
+import app.forku.data.api.CreateBusinessRequest
 import app.forku.data.api.UpdateBusinessRequest
+import app.forku.domain.model.business.BusinessStatus
+import app.forku.data.api.BusinessConfigurationApi
+import app.forku.data.api.dto.business.BusinessConfigurationDto
+
 
 class BusinessRepositoryImpl @Inject constructor(
     private val api: BusinessApi,
-    private val gson: Gson,
-    private val userRepository: UserRepository
+    private val userBusinessApi: UserBusinessApi,
+    private val userRepository: UserRepository,
+    private val businessConfigurationApi: BusinessConfigurationApi
 ) : BusinessRepository {
 
-    override suspend fun getAllBusinesses(): List<Business> {
-        try {
-            val currentUser = userRepository.getCurrentUser()
-            Log.d("BusinessManagement", "Fetching businesses for user role: ${currentUser?.role}, userId: ${currentUser?.id}")
-            
-            val businessDtos = when (currentUser?.role) {
-                UserRole.SYSTEM_OWNER -> {
-                    Log.d("BusinessManagement", "Fetching all businesses as SYSTEM_OWNER")
-                    try {
-                        api.getAllBusinesses()
-                    } catch (e: HttpException) {
-                        Log.e("BusinessManagement", "HTTP error fetching businesses: ${e.code()}", e)
-                        if (e.code() == 404) {
-                            Log.d("BusinessManagement", "No businesses found, returning empty list")
-                            emptyList()
-                        } else {
-                            throw e
-                        }
-                    }
-                }
-                UserRole.SUPERADMIN -> {
-                    Log.d("BusinessManagement", "Fetching businesses for SUPERADMIN: ${currentUser.id}")
-                    try {
-                        api.getAllBusinesses(superAdminId = currentUser.id)
-                    } catch (e: HttpException) {
-                        Log.e("BusinessManagement", "HTTP error fetching businesses: ${e.code()}", e)
-                        if (e.code() == 404) {
-                            Log.d("BusinessManagement", "No businesses found, returning empty list")
-                            emptyList()
-                        } else {
-                            throw e
-                        }
-                    }
-                }
-                else -> {
-                    Log.e("BusinessManagement", "Unauthorized role: ${currentUser?.role}")
-                    throw SecurityException("Insufficient permissions to access businesses")
+    private suspend fun <T> executeApiCallForList(apiCall: suspend () -> Response<List<T>>): List<T> {
+        return try {
+            val response = apiCall()
+            if (!response.isSuccessful) {
+                Log.e("BusinessRepository", "API call failed with code: ${response.code()}")
+                if (response.code() == 404) {
+                    emptyList()
+                } else {
+                    throw HttpException(response)
                 }
+            } else {
+                response.body() ?: emptyList()
             }
+        } catch (e: Exception) {
+            Log.e("BusinessRepository", "Error executing API call", e)
+            throw e
+        }
+    }
+
+    private fun mapToDomain(businessDto: BusinessItemDto): Business {
+        return try {
+            Log.d("BusinessRepository", "Mapping DTO to Business")
             
-            Log.d("BusinessManagement", "Received ${businessDtos.size} businesses from API")
-            businessDtos.forEach { dto ->
-                Log.d("BusinessManagement", "Business DTO: id=${dto.id}, name=${dto.name}, status=${dto.status}")
-            }
-            
-            return businessDtos.map { dto ->
-                mapDtoToBusiness(dto).also { business ->
-                    Log.d("BusinessManagement", "Mapped business: id=${business.id}, name=${business.name}, status=${business.status}")
-                }
+            val businessStatus = when (businessDto.status) {
+                0 -> BusinessStatus.PENDING
+                1 -> BusinessStatus.ACTIVE
+                2 -> BusinessStatus.SUSPENDED
+                else -> BusinessStatus.PENDING
             }
+
+            Business(
+                id = businessDto.id,
+                name = businessDto.name,
+                totalUsers = 0,  // Will be updated separately
+                totalVehicles = 0,  // Will be updated separately
+                status = businessStatus,
+                createdAt = businessDto.createdAt,
+                updatedAt = businessDto.updatedAt,
+                createdBy = businessDto.createdBy,
+                updatedBy = businessDto.updatedBy,
+                settings = businessDto.settings ?: emptyMap(),
+                metadata = businessDto.metadata ?: emptyMap(),
+                superAdminId = businessDto.superAdminId
+            )
         } catch (e: Exception) {
-            Log.e("BusinessManagement", "Error fetching businesses", e)
-            return emptyList()
+            Log.e("BusinessRepository", "Error mapping DTO to Business", e)
+            throw e
+        }
+    }
+
+    override suspend fun getAllBusinesses(): List<Business> {
+        return executeApiCallForList {
+            Log.d("BusinessRepository", "Getting all businesses")
+            api.getAllBusinesses()
+        }.map { businessDto ->
+            mapToDomain(businessDto)
         }
     }
 
     override suspend fun getBusinessById(id: String): Business {
-        val dto = api.getBusinessById(id)
-        return mapDtoToBusiness(dto)
+        val response = api.getBusinessById(id)
+        if (!response.isSuccessful) {
+            throw Exception("Failed to get business: ${response.code()}")
+        }
+        return mapToDomain(response.body() ?: throw Exception("Business not found"))
     }
 
     override suspend fun createBusiness(name: String): Business {
@@ -87,47 +100,67 @@ class BusinessRepositoryImpl @Inject constructor(
             val currentUser = userRepository.getCurrentUser()
             when (currentUser?.role) {
                 UserRole.SYSTEM_OWNER, UserRole.SUPERADMIN -> {
-                    val request = CreateBusinessRequest(
+                    val businessDto = BusinessItemDto(
+                        id = "",  // Will be assigned by server
                         name = name,
-                        systemOwnerId = if (currentUser.role == UserRole.SYSTEM_OWNER) currentUser.id else null,
-                        superAdminId = if (currentUser.role == UserRole.SUPERADMIN) currentUser.id else null
+                        status = 0,  // PENDING status
+                        businessConfigurationId = null,
+                        countryId = null,
+                        countryStateId = null,
+                        isNew = true,
+                        isDirty = true
                     )
                     
-                    val response = api.createBusiness(request)
+                    val response = api.saveBusiness(businessDto)
                     if (!response.isSuccessful) {
-                        handleErrorResponse(response)
+                        throw Exception("Failed to create business: ${response.code()}")
                     }
                     
-                    val dto = response.body() ?: throw Exception("Empty response body")
-                    val business = mapDtoToBusiness(dto)
+                    val createdBusiness = mapToDomain(response.body() ?: throw Exception("Empty response body"))
 
-                    // Update user's systemOwnerId if they are a SYSTEM_OWNER
-                    if (currentUser.role == UserRole.SYSTEM_OWNER) {
-                        val updatedUser = currentUser.copy(
-                            systemOwnerId = currentUser.id,
-                            businessId = business.id
-                        )
-                        userRepository.updateUser(updatedUser)
+                    // Assign the user to the business if they're a SuperAdmin
+                    if (currentUser.role == UserRole.SUPERADMIN) {
+                        assignUserToBusiness(currentUser.id, createdBusiness.id)
                     }
 
-                    return business
+                    return createdBusiness
                 }
                 else -> throw SecurityException("Insufficient permissions to create business")
             }
         } catch (e: Exception) {
-            handleException(e, "create business")
+            Log.e("BusinessRepository", "Error creating business", e)
             throw e
         }
     }
 
-    override suspend fun getBusinessesBySystemOwnerId(systemOwnerId: String): List<Business> {
-        validateSystemOwnerAccess(systemOwnerId)
-        return api.getBusinessesBySystemOwnerId(systemOwnerId).map { mapDtoToBusiness(it) }
-    }
-
     override suspend fun getBusinessesBySuperAdminId(superAdminId: String): List<Business> {
-        validateSuperAdminAccess(superAdminId, null)
-        return api.getBusinessesBySuperAdminId(superAdminId).map { mapDtoToBusiness(it) }
+        try {
+            validateSuperAdminAccess(superAdminId, null)
+            Log.d("BusinessRepository", "Getting businesses for super admin: $superAdminId")
+            
+            // Get all user-business assignments
+            val assignments = userBusinessApi.getUserBusinessAssignments()
+            if (!assignments.isSuccessful) {
+                Log.e("BusinessRepository", "Failed to get user-business assignments: ${assignments.code()}")
+                return emptyList()
+            }
+            
+            // Filter assignments for this SuperAdmin
+            val superAdminAssignments = assignments.body()?.filter { it.userId == superAdminId } ?: emptyList()
+            
+            // Get all businesses using executeApiCallForList
+            return executeApiCallForList {
+                api.getAllBusinesses()
+            }.filter { businessDto ->
+                // Only keep businesses that have an assignment for this SuperAdmin
+                superAdminAssignments.any { it.businessId == businessDto.id }
+            }.map { businessDto ->
+                mapToDomain(businessDto)
+            }
+        } catch (e: Exception) {
+            Log.e("BusinessRepository", "Error getting businesses for SuperAdmin", e)
+            return emptyList()
+        }
     }
 
     override suspend fun transferBusinessToSuperAdmin(businessId: String, newSuperAdminId: String) {
@@ -139,32 +172,64 @@ class BusinessRepositoryImpl @Inject constructor(
             when {
                 currentUser?.role == UserRole.SYSTEM_OWNER -> {
                     Log.d("BusinessManagement", "System Owner transferring business")
-                    val request = UpdateBusinessRequest(
-                        name = business.name,
-                        status = business.status.name.uppercase(),
-                        superAdminId = newSuperAdminId.ifEmpty { "" }
-                    )
-                    try {
-                        val updatedBusiness = api.updateBusiness(businessId, request)
-                        Log.d("BusinessManagement", "Business transferred successfully. New SuperAdmin: ${updatedBusiness.superAdminId}")
-                    } catch (e: Exception) {
-                        Log.e("BusinessManagement", "Failed to transfer business", e)
-                        throw Exception("Failed to transfer business: ${e.message}")
+                    
+                    // Get current assignments for this business
+                    val assignments = userBusinessApi.getUserBusinessAssignments().body() ?: emptyList()
+                    
+                    // Find current SuperAdmin assignment if any
+                    val currentSuperAdminAssignment = assignments.find { assignment ->
+                        assignment.businessId == businessId && 
+                        assignment.role == UserRole.SUPERADMIN.name
+                    }
+                    
+                    // Remove current SuperAdmin if exists
+                    if (currentSuperAdminAssignment != null) {
+                        userBusinessApi.removeUserFromBusiness(businessId, currentSuperAdminAssignment.userId)
+                        Log.d("BusinessManagement", "Removed previous SuperAdmin assignment")
+                    }
+                    
+                    // If new SuperAdmin ID is not empty, create new assignment
+                    if (newSuperAdminId.isNotEmpty()) {
+                        val newAssignment = UserBusinessAssignmentDto(
+                            businessId = businessId,
+                            userId = newSuperAdminId,
+                            role = UserRole.SUPERADMIN.name
+                        )
+                        userBusinessApi.assignUserToBusiness(newAssignment)
+                        Log.d("BusinessManagement", "Created new SuperAdmin assignment")
                     }
+                    
+                    Log.d("BusinessManagement", "Business transfer completed successfully")
                 }
-                currentUser?.role == UserRole.SUPERADMIN && business.superAdminId == currentUser.id -> {
-                    Log.d("BusinessManagement", "Current SuperAdmin transferring their business")
-                    val request = UpdateBusinessRequest(
-                        name = business.name,
-                        status = business.status.name.uppercase(),
-                        superAdminId = newSuperAdminId.ifEmpty { "" }
-                    )
-                    try {
-                        val updatedBusiness = api.updateBusiness(businessId, request)
-                        Log.d("BusinessManagement", "Business transferred successfully. New SuperAdmin: ${updatedBusiness.superAdminId}")
-                    } catch (e: Exception) {
-                        Log.e("BusinessManagement", "Failed to transfer business", e)
-                        throw Exception("Failed to transfer business: ${e.message}")
+                currentUser?.role == UserRole.SUPERADMIN -> {
+                    // Get current assignments to verify ownership
+                    val assignments = userBusinessApi.getUserBusinessAssignments().body() ?: emptyList()
+                    val hasOwnership = assignments.any { 
+                        it.businessId == businessId && 
+                        it.userId == currentUser.id &&
+                        it.role == UserRole.SUPERADMIN.name
+                    }
+                    
+                    if (hasOwnership) {
+                        Log.d("BusinessManagement", "Current SuperAdmin transferring their business")
+                        
+                        // Remove current SuperAdmin assignment
+                        userBusinessApi.removeUserFromBusiness(businessId, currentUser.id)
+                        
+                        // If new SuperAdmin ID is not empty, create new assignment
+                        if (newSuperAdminId.isNotEmpty()) {
+                            val newAssignment = UserBusinessAssignmentDto(
+                                businessId = businessId,
+                                userId = newSuperAdminId,
+                                role = UserRole.SUPERADMIN.name
+                            )
+                            userBusinessApi.assignUserToBusiness(newAssignment)
+                            Log.d("BusinessManagement", "Created new SuperAdmin assignment")
+                        }
+                        
+                        Log.d("BusinessManagement", "Business transfer completed successfully")
+                    } else {
+                        throw SecurityException("Current SuperAdmin does not have ownership of this business")
                     }
                 }
                 else -> {
@@ -192,8 +257,13 @@ class BusinessRepositoryImpl @Inject constructor(
                     if (businessId == null) {
                         true // SuperAdmin can access their own general resources without a specific business
                     } else {
-                        val business = getBusinessById(businessId)
-                        business.superAdminId == superAdminId
+                        // Verificar si el SuperAdmin tiene asignación para este negocio
+                        val assignments = userBusinessApi.getUserBusinessAssignments().body() ?: emptyList()
+                        assignments.any { assignment ->
+                            assignment.userId == superAdminId &&
+                            assignment.businessId == businessId &&
+                            assignment.role == UserRole.SUPERADMIN.name
+                        }
                     }
                 }
                 
@@ -208,179 +278,85 @@ class BusinessRepositoryImpl @Inject constructor(
         }
     }
 
-    override suspend fun getSystemOwnerBusinessStats(systemOwnerId: String): BusinessStats {
-        validateSystemOwnerAccess(systemOwnerId)
-        return api.getSystemOwnerBusinessStats(systemOwnerId)
-    }
-
-    override suspend fun getSuperAdminBusinessStats(superAdminId: String): BusinessStats {
-        validateSuperAdminAccess(superAdminId, null)
-        return api.getSuperAdminBusinessStats(superAdminId)
-    }
-
-    private suspend fun validateSystemOwnerAccess(systemOwnerId: String) {
-        val currentUser = userRepository.getCurrentUser()
-        if (currentUser?.role != UserRole.SYSTEM_OWNER || currentUser.id != systemOwnerId) {
-            throw SecurityException("Insufficient permissions to access system owner resources")
-        }
-    }
-
-    private suspend fun mapDtoToBusiness(dto: BusinessDto): Business {
-        return try {
-            Log.d("BusinessManagement", "Starting to map DTO to Business")
-            Log.d("BusinessManagement", "Raw DTO data: " +
-                "id=${dto.id}, " +
-                "name=${dto.name}, " +
-                "status=${dto.status}, " +
-                "systemOwnerId=${dto.systemOwnerId}, " +
-                "superAdminId=${dto.superAdminId}, " +
-                "totalUsers=${dto.totalUsers}, " +
-                "totalVehicles=${dto.totalVehicles}")
-                
-            // No need to uppercase since the status is already in uppercase from the API
-            val businessStatus = try {
-                BusinessStatus.valueOf(dto.status)
-            } catch (e: IllegalArgumentException) {
-                Log.w("BusinessManagement", "Invalid status value: ${dto.status}, attempting to normalize")
-                BusinessStatus.valueOf(dto.status.trim())
-            }
+    override suspend fun validateSystemOwnerAccess(systemOwnerId: String): Boolean {
+        try {
+            val currentUser = userRepository.getCurrentUser()
+            Log.d("BusinessManagement", "Validating SystemOwner access for user: ${currentUser?.id}, role: ${currentUser?.role}")
             
-            Log.d("BusinessManagement", "Parsed business status: $businessStatus")
-
-            // Get real count of users for this business
-            val realUserCount = getBusinessUsers(dto.id).size
-            Log.d("BusinessManagement", "Real user count for business ${dto.id}: $realUserCount")
-                
-            Business(
-                id = dto.id,
-                name = dto.name,
-                totalUsers = realUserCount,
-                totalVehicles = dto.totalVehicles,
-                status = businessStatus,
-                systemOwnerId = dto.systemOwnerId,
-                superAdminId = dto.superAdminId,
-                createdAt = dto.createdAt,
-                updatedAt = dto.updatedAt
-            ).also { business ->
-                Log.d("BusinessManagement", "Successfully mapped Business: " +
-                    "id=${business.id}, " +
-                    "name=${business.name}, " +
-                    "status=${business.status}, " +
-                    "systemOwnerId=${business.systemOwnerId}, " +
-                    "superAdminId=${business.superAdminId}, " +
-                    "totalUsers=${business.totalUsers}, " +
-                    "totalVehicles=${business.totalVehicles}")
+            val hasAccess = currentUser?.role == UserRole.SYSTEM_OWNER && currentUser.id == systemOwnerId
+            
+            if (!hasAccess) {
+                Log.w("BusinessManagement", "Access denied for user ${currentUser?.id} to SystemOwner resources")
             }
+            
+            return hasAccess
         } catch (e: Exception) {
-            Log.e("BusinessManagement", "Error mapping DTO to Business: ${dto.id}", e)
-            Log.e("BusinessManagement", "Failed DTO data: $dto")
-            throw Exception("Failed to map business data: ${e.message}")
-        }
-    }
-
-    private fun handleErrorResponse(response: retrofit2.Response<BusinessDto>) {
-        val errorBody = response.errorBody()?.string()
-        Log.e("BusinessManagement", "Error response: ${response.code()} - $errorBody")
-        Log.e("BusinessManagement", "Request URL: ${response.raw().request.url}")
-        Log.e("BusinessManagement", "Request headers: ${response.raw().request.headers}")
-        throw Exception("Failed to create business: [${response.code()}] $errorBody")
-    }
-
-    private fun handleException(e: Exception, operation: String) {
-        when (e) {
-            is HttpException -> {
-                val errorBody = e.response()?.errorBody()?.string()
-                val errorCode = e.response()?.code()
-                Log.e("BusinessManagement", "HTTP error: $errorCode - $errorBody")
-                Log.e("BusinessManagement", "Request URL: ${e.response()?.raw()?.request?.url}")
-                Log.e("BusinessManagement", "Request headers: ${e.response()?.raw()?.request?.headers}")
-                throw Exception("Failed to $operation: [$errorCode] $errorBody")
-            }
-            else -> {
-                Log.e("BusinessManagement", "Unexpected error", e)
-                throw Exception("Failed to $operation: ${e.message}")
-            }
+            Log.e("BusinessManagement", "Error validating SystemOwner access", e)
+            return false
         }
     }
 
     override suspend fun updateBusiness(business: Business): Business {
         try {
             val currentUser = userRepository.getCurrentUser()
-            Log.d("BusinessManagement", "Attempting to update business: ${business.id}")
-            Log.d("BusinessManagement", "Update details: name=${business.name}, status=${business.status}, superAdminId=${business.superAdminId}")
-            Log.d("BusinessManagement", "Current user role: ${currentUser?.role}")
-
-            when (currentUser?.role) {
-                UserRole.SYSTEM_OWNER -> {
-                    Log.d("BusinessManagement", "System Owner updating business")
-                }
-                UserRole.SUPERADMIN -> {
-                    if (!validateSuperAdminAccess(currentUser.id, business.id)) {
-                        Log.e("BusinessManagement", "SuperAdmin attempted to update unauthorized business")
-                        throw SecurityException("Insufficient permissions to update this business")
-                    }
-                    Log.d("BusinessManagement", "SuperAdmin updating their business")
-                }
-                else -> {
-                    Log.e("BusinessManagement", "Unauthorized role attempted to update business: ${currentUser?.role}")
-                    throw SecurityException("Insufficient permissions to update business")
-                }
+            if (!validateAdminAccess(currentUser?.id ?: "", business.id)) {
+                throw SecurityException("Insufficient permissions to update business")
             }
 
-            // Create and log the request
-            val request = UpdateBusinessRequest(
-                name = business.name,
-                status = business.status.name.uppercase(),
-                superAdminId = business.superAdminId
-            )
-            
-            Log.d("BusinessManagement", "Sending API request: PUT /business/${business.id}")
-            Log.d("BusinessManagement", "Request body: $request")
-
-            val dto = api.updateBusiness(
+            val businessDto = BusinessItemDto(
                 id = business.id,
-                request = request
+                name = business.name,
+                status = when(business.status) {
+                    BusinessStatus.ACTIVE -> 1
+                    BusinessStatus.PENDING -> 0
+                    BusinessStatus.SUSPENDED -> 2
+                },
+                businessConfigurationId = null,
+                countryId = null,
+                countryStateId = null,
+                isDirty = true
             )
-            
-            Log.d("BusinessManagement", "API response received")
-            Log.d("BusinessManagement", "Response DTO: id=${dto.id}, name=${dto.name}, status=${dto.status}, superAdminId=${dto.superAdminId}")
 
-            return mapDtoToBusiness(dto).also { mappedBusiness ->
-                Log.d("BusinessManagement", "Final mapped business: " +
-                    "id=${mappedBusiness.id}, " +
-                    "name=${mappedBusiness.name}, " +
-                    "status=${mappedBusiness.status}, " +
-                    "systemOwnerId=${mappedBusiness.systemOwnerId}, " +
-                    "superAdminId=${mappedBusiness.superAdminId}")
+            // Usar saveBusiness para crear o actualizar
+            val response = api.saveBusiness(businessDto)
+            if (!response.isSuccessful) {
+                throw Exception("Failed to update business: ${response.code()}")
             }
+            
+            return mapToDomain(response.body() ?: throw Exception("Empty response body"))
         } catch (e: Exception) {
-            Log.e("BusinessManagement", "Error updating business", e)
-            Log.e("BusinessManagement", "Error details: ${e.message}")
-            if (e is HttpException) {
-                val errorBody = e.response()?.errorBody()?.string()
-                Log.e("BusinessManagement", "HTTP error response: $errorBody")
-            }
-            handleException(e, "update business")
+            Log.e("BusinessRepository", "Error updating business", e)
             throw e
         }
     }
 
     override suspend fun deleteBusiness(id: String) {
-        api.deleteBusiness(id)
+        try {
+            val currentUser = userRepository.getCurrentUser()
+            if (!validateAdminAccess(currentUser?.id ?: "", id)) {
+                throw SecurityException("Insufficient permissions to delete business")
+            }
+
+            val response = api.deleteBusiness(id)
+            if (!response.isSuccessful) {
+                throw Exception("Failed to delete business: ${response.code()}")
+            }
+        } catch (e: Exception) {
+            Log.e("BusinessRepository", "Error deleting business", e)
+            throw e
+        }
     }
 
     override suspend fun assignUserToBusiness(userId: String, businessId: String) {
         try {
-            Log.d("BusinessRepository", "Assigning user $userId to business $businessId")
-            
-            // Get the user first
-            val user = userRepository.getUserById(userId) ?: throw Exception("User not found")
-            
-            // Update the user's businessId
-            val updatedUser = user.copy(businessId = businessId)
-            userRepository.updateUser(updatedUser)
-            
-            Log.d("BusinessRepository", "Successfully assigned user to business")
+            val assignment = UserBusinessAssignmentDto(
+                businessId = businessId,
+                userId = userId
+            )
+            val response = userBusinessApi.assignUserToBusiness(assignment)
+            if (!response.isSuccessful) {
+                throw Exception("Failed to assign user to business: ${response.code()}")
+            }
         } catch (e: Exception) {
             Log.e("BusinessRepository", "Error assigning user to business", e)
             throw e
@@ -389,18 +365,9 @@ class BusinessRepositoryImpl @Inject constructor(
 
     override suspend fun removeUserFromBusiness(userId: String, businessId: String) {
         try {
-            Log.d("BusinessRepository", "Removing user $userId from business $businessId")
-            
-            // Get the user first
-            val user = userRepository.getUserById(userId) ?: throw Exception("User not found")
-            
-            // Only remove if the user belongs to this business
-            if (user.businessId == businessId) {
-                val updatedUser = user.copy(businessId = null)
-                userRepository.updateUser(updatedUser)
-                Log.d("BusinessRepository", "Successfully removed user from business")
-            } else {
-                Log.w("BusinessRepository", "User does not belong to this business")
+            val response = userBusinessApi.removeUserFromBusiness(businessId, userId)
+            if (!response.isSuccessful) {
+                throw Exception("Failed to remove user from business: ${response.code()}")
             }
         } catch (e: Exception) {
             Log.e("BusinessRepository", "Error removing user from business", e)
@@ -410,10 +377,12 @@ class BusinessRepositoryImpl @Inject constructor(
 
     override suspend fun getBusinessUsers(businessId: String): List<String> {
         return try {
-            Log.d("BusinessRepository", "Getting users for business: $businessId")
-            val users = api.getBusinessUsers(businessId).map { it.id }
-            Log.d("BusinessRepository", "Found ${users.size} users for business $businessId")
-            users
+            val response = api.getBusinessUsers(businessId)
+            if (!response.isSuccessful) {
+                emptyList()
+            } else {
+                response.body()?.mapNotNull { it.id } ?: emptyList()
+            }
         } catch (e: Exception) {
             Log.e("BusinessRepository", "Error getting business users", e)
             emptyList()
@@ -421,6 +390,141 @@ class BusinessRepositoryImpl @Inject constructor(
     }
 
     override suspend fun getBusinessVehicles(businessId: String): List<String> {
-        return api.getBusinessVehicles(businessId)
+        return try {
+            val response = api.getBusinessVehicles(businessId)
+            if (!response.isSuccessful) {
+                emptyList()
+            } else {
+                response.body() ?: emptyList()
+            }
+        } catch (e: Exception) {
+            Log.e("BusinessRepository", "Error getting business vehicles", e)
+            emptyList()
+        }
+    }
+
+    override suspend fun getBusinessesByRole(user: User): List<Business> {
+        return try {
+            Log.d("BusinessRepository", "Getting businesses for user ${user.id} with role ${user.role}")
+            
+            when (user.role) {
+                UserRole.SYSTEM_OWNER -> {
+                    // System Owner can see all businesses
+                    executeApiCallForList {
+                        api.getAllBusinesses()
+                    }.map { businessDto ->
+                        mapToDomain(businessDto)
+                    }
+                }
+                UserRole.SUPERADMIN, UserRole.ADMIN -> {
+                    // Get businesses through user-business assignments
+                    val assignments = userBusinessApi.getUserBusinessAssignments().body() ?: emptyList()
+                    val userAssignments = assignments.filter { it.userId == user.id }
+                    
+                    userAssignments.mapNotNull { assignment ->
+                        try {
+                            val business = getBusinessById(assignment.businessId)
+                            business
+                        } catch (e: Exception) {
+                            Log.e("BusinessRepository", "Error getting business ${assignment.businessId}", e)
+                            null
+                        }
+                    }
+                }
+                else -> {
+                    Log.w("BusinessRepository", "Unauthorized role ${user.role}, returning empty list")
+                    emptyList()
+                }
+            }
+        } catch (e: Exception) {
+            Log.e("BusinessRepository", "Error getting businesses by role", e)
+            throw e
+        }
+    }
+
+    override suspend fun validateUserAccess(userId: String, businessId: String): Boolean {
+        return try {
+            val response = userBusinessApi.getUserBusinessAssignment(businessId, userId)
+            response.isSuccessful && response.body() != null
+        } catch (e: Exception) {
+            Log.e("BusinessRepository", "Error validating user access", e)
+            false
+        }
+    }
+
+    override suspend fun validateAdminAccess(userId: String, businessId: String): Boolean {
+        val user = userRepository.getUserById(userId) ?: return false
+        return when (user.role) {
+            UserRole.SYSTEM_OWNER -> true
+            UserRole.SUPERADMIN, UserRole.ADMIN -> validateUserAccess(userId, businessId)
+            else -> false
+        }
+    }
+
+    override suspend fun getUserBusinesses(userId: String): List<Business> {
+        return try {
+            val assignments = userBusinessApi.getUserBusinessAssignments().body() ?: emptyList()
+            val userAssignments = assignments.filter { it.userId == userId }
+            
+            userAssignments.mapNotNull { assignment ->
+                try {
+                    getBusinessById(assignment.businessId)
+                } catch (e: Exception) {
+                    Log.e("BusinessRepository", "Error getting business ${assignment.businessId}", e)
+                    null
+                }
+            }
+        } catch (e: Exception) {
+            Log.e("BusinessRepository", "Error getting user businesses", e)
+            emptyList()
+        }
+    }
+
+    override suspend fun updateBusinessStatus(businessId: String, newStatus: BusinessStatus) {
+        val business = getBusinessById(businessId)
+        val updatedBusiness = business.copy(status = newStatus)
+        updateBusiness(updatedBusiness)
+    }
+
+    override suspend fun getBusinessStats(businessId: String): BusinessStats {
+        try {
+            Log.d("BusinessRepository", "Getting stats for business: $businessId")
+            
+            // Get business details
+            val business = getBusinessById(businessId)
+            
+            // Get users count
+            val users = executeApiCallForList {
+                api.getBusinessUsers(businessId)
+            }
+            
+            // Get vehicles count
+            val vehicles = executeApiCallForList {
+                api.getBusinessVehicles(businessId)
+            }
+            
+            // Get user assignments to understand roles distribution
+            val assignments = userBusinessApi.getUserBusinessAssignments().body() ?: emptyList()
+            val businessAssignments = assignments.filter { it.businessId == businessId }
+            
+            // Count by role
+            val adminCount = businessAssignments.count { it.role == UserRole.ADMIN.name }
+            val operatorCount = businessAssignments.count { it.role == UserRole.OPERATOR.name }
+            
+            return BusinessStats(
+                totalUsers = users.size,
+                totalVehicles = vehicles.size,
+                activeUsers = users.size, // Could be refined if we track active status
+                activeVehicles = vehicles.size, // Could be refined if we track active status
+                adminCount = adminCount,
+                operatorCount = operatorCount,
+                businessStatus = business.status,
+                lastUpdated = System.currentTimeMillis()
+            )
+            
+        } catch (e: Exception) {
+            Log.e("BusinessRepository", "Error getting business stats", e)
+            throw Exception("Failed to get business stats: ${e.message}")
+        }
     }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/repository/country/CountryRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/country/CountryRepositoryImpl.kt
index 9180743..d17316b 100644
--- a/app/src/main/java/app/forku/data/repository/country/CountryRepositoryImpl.kt
+++ b/app/src/main/java/app/forku/data/repository/country/CountryRepositoryImpl.kt
@@ -5,12 +5,14 @@ import app.forku.data.api.CountryApi
 import app.forku.data.api.dto.country.toDto
 import app.forku.domain.model.country.Country
 import app.forku.domain.repository.country.CountryRepository
+import app.forku.data.datastore.AuthDataStore
 import javax.inject.Inject
 import javax.inject.Singleton
 
 @Singleton
 class CountryRepositoryImpl @Inject constructor(
-    private val api: CountryApi
+    private val api: CountryApi,
+    private val authDataStore: AuthDataStore
 ) : CountryRepository {
 
     override suspend fun getAllCountries(): List<Country> {
@@ -31,9 +33,13 @@ class CountryRepositoryImpl @Inject constructor(
 
     override suspend fun getCountryById(id: String): Country? {
         return try {
-            val response = api.getCountry(id)
-            if (!response.isSuccessful) return null
-            response.body()?.toDomain()
+            val response = api.getCountryById(id)
+            if (!response.isSuccessful) {
+                Log.e("CountryRepository", "Error getting country by id: ${response.code()}")
+                null
+            } else {
+                response.body()?.toDomain()
+            }
         } catch (e: Exception) {
             Log.e("CountryRepository", "Error getting country by id", e)
             null
@@ -41,17 +47,30 @@ class CountryRepositoryImpl @Inject constructor(
     }
 
     override suspend fun createCountry(country: Country): Country {
-        val response = api.createCountry(country.toDto())
+        val token = authDataStore.getApplicationToken()
+        if (token.isNullOrBlank()) {
+            throw Exception("Authentication token is missing. Please log in.")
+        }
+        val response = api.createCountry(country.toDto().copy(
+            isNew = true,
+            isDirty = true
+        ))
         if (!response.isSuccessful) {
-            throw Exception("Failed to create country: ${response.code()}")
+            throw Exception("Failed to create country: \\${response.code()}")
         }
         return response.body()?.toDomain() ?: throw Exception("Empty response body")
     }
 
     override suspend fun updateCountry(country: Country): Country {
-        val response = api.updateCountry(country.id, country.toDto())
+        val token = authDataStore.getApplicationToken()
+        if (token.isNullOrBlank()) {
+            throw Exception("Authentication token is missing. Please log in.")
+        }
+        val response = api.updateCountry(country.toDto().copy(
+            isDirty = true
+        ))
         if (!response.isSuccessful) {
-            throw Exception("Failed to update country: ${response.code()}")
+            throw Exception("Failed to update country: \\${response.code()}")
         }
         return response.body()?.toDomain() ?: throw Exception("Empty response body")
     }
diff --git a/app/src/main/java/app/forku/data/repository/country/StateRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/country/StateRepositoryImpl.kt
index a7f3bfc..e49d23f 100644
--- a/app/src/main/java/app/forku/data/repository/country/StateRepositoryImpl.kt
+++ b/app/src/main/java/app/forku/data/repository/country/StateRepositoryImpl.kt
@@ -1,19 +1,21 @@
 package app.forku.data.repository.country
 
 import android.util.Log
-import app.forku.data.api.StateApi
+import app.forku.data.api.CountryStateApi
 import app.forku.data.api.dto.country.toDto
-import app.forku.data.api.dto.country.toDomain
-import app.forku.domain.model.country.State
+import app.forku.data.datastore.AuthDataStore
+
+import app.forku.domain.model.country.CountryState
 import app.forku.domain.repository.country.StateRepository
 import javax.inject.Inject
 
 class StateRepositoryImpl @Inject constructor(
-    private val stateApi: StateApi
+    private val countryStateApi: CountryStateApi,
+    private val authDataStore: AuthDataStore
 ) : StateRepository {
 
-    override suspend fun getAllStates(): List<State> {
-        val response = stateApi.getAllStates()
+    override suspend fun getAllStates(): List<CountryState> {
+        val response = countryStateApi.getAllStates()
         Log.d("StateRepository", "getAllStates response: ${response.code()}")
         return if (response.isSuccessful) {
             response.body()?.map { it.toDomain() } ?: emptyList()
@@ -23,21 +25,13 @@ class StateRepositoryImpl @Inject constructor(
         }
     }
 
-    override suspend fun getStatesByCountry(countryId: String): List<State> {
-        val response = stateApi.getStatesByCountry(countryId)
-        Log.d("StateRepository", "getStatesByCountry($countryId) response: ${response.code()}")
-        return if (response.isSuccessful) {
-            val states = response.body()?.map { it.toDomain() } ?: emptyList()
-            Log.d("StateRepository", "Found ${states.size} states for country $countryId")
-            states
-        } else {
-            Log.e("StateRepository", "Failed to get states for country $countryId: ${response.code()}")
-            emptyList()
-        }
+    override suspend fun getStatesByCountry(countryId: String): List<CountryState> {
+        // This endpoint is no longer available in the new API
+        return getAllStates().filter { it.countryId == countryId }
     }
 
-    override suspend fun getStateById(id: String): State {
-        val response = stateApi.getStateById(id)
+    override suspend fun getStateById(id: String): CountryState {
+        val response = countryStateApi.getStateById(id)
         Log.d("StateRepository", "getStateById($id) response: ${response.code()}")
         if (!response.isSuccessful) {
             Log.e("StateRepository", "Failed to get state $id: ${response.code()}")
@@ -46,8 +40,15 @@ class StateRepositoryImpl @Inject constructor(
         return response.body()?.toDomain() ?: throw Exception("State not found")
     }
 
-    override suspend fun createState(state: State) {
-        val response = stateApi.createState(state.toDto())
+    override suspend fun createState(countryState: CountryState) {
+        val token = authDataStore.getApplicationToken()
+        if (token.isNullOrBlank()) {
+            throw Exception("Authentication token is missing. Please log in.")
+        }
+        val response = countryStateApi.createState(countryState.toDto().copy(
+            isNew = true,
+            isDirty = true
+        ))
         Log.d("StateRepository", "createState response: ${response.code()}")
         if (!response.isSuccessful) {
             Log.e("StateRepository", "Failed to create state: ${response.code()}")
@@ -55,17 +56,23 @@ class StateRepositoryImpl @Inject constructor(
         }
     }
 
-    override suspend fun updateState(state: State) {
-        val response = stateApi.updateState(state.id, state.toDto())
-        Log.d("StateRepository", "updateState(${state.id}) response: ${response.code()}")
+    override suspend fun updateState(countryState: CountryState) {
+        val token = authDataStore.getApplicationToken()
+        if (token.isNullOrBlank()) {
+            throw Exception("Authentication token is missing. Please log in.")
+        }
+        val response = countryStateApi.updateState(countryState.toDto().copy(
+            isDirty = true
+        ))
+        Log.d("StateRepository", "updateState(${countryState.id}) response: ${response.code()}")
         if (!response.isSuccessful) {
-            Log.e("StateRepository", "Failed to update state ${state.id}: ${response.code()}")
+            Log.e("StateRepository", "Failed to update state ${countryState.id}: ${response.code()}")
             throw Exception("Failed to update state: ${response.code()}")
         }
     }
 
     override suspend fun deleteState(id: String) {
-        val response = stateApi.deleteState(id)
+        val response = countryStateApi.deleteState(id)
         Log.d("StateRepository", "deleteState($id) response: ${response.code()}")
         if (!response.isSuccessful) {
             Log.e("StateRepository", "Failed to delete state $id: ${response.code()}")
diff --git a/app/src/main/java/app/forku/data/repository/site/SiteRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/site/SiteRepositoryImpl.kt
index 833ae33..ca1ef95 100644
--- a/app/src/main/java/app/forku/data/repository/site/SiteRepositoryImpl.kt
+++ b/app/src/main/java/app/forku/data/repository/site/SiteRepositoryImpl.kt
@@ -9,23 +9,23 @@ class SiteRepositoryImpl @Inject constructor(
     private val api: SiteApi
 ) : SiteRepository {
 
-    override suspend fun getSitesByBusiness(businessId: String): List<SiteDto> {
-        return api.getSitesByBusiness(businessId).body() ?: emptyList()
+    override suspend fun getAllSites(): List<SiteDto> {
+        return api.getAllSites().body() ?: emptyList()
     }
 
-    override suspend fun getSiteById(businessId: String, id: String): SiteDto {
-        return api.getSiteById(businessId, id).body() ?: throw IllegalStateException("Site not found")
+    override suspend fun getSiteById(id: String): SiteDto {
+        return api.getSiteById(id).body() ?: throw IllegalStateException("Site not found")
     }
 
-    override suspend fun createSite(businessId: String, site: SiteDto): SiteDto {
-        return api.createSite(businessId, site).body() ?: throw IllegalStateException("Failed to create site")
+    override suspend fun saveSite(site: SiteDto): SiteDto {
+        return api.saveSite(site).body() ?: throw IllegalStateException("Failed to save site")
     }
 
-    override suspend fun updateSite(businessId: String, siteId: String, site: SiteDto): SiteDto {
-        return api.updateSite(businessId, siteId, site).body() ?: throw IllegalStateException("Failed to update site")
+    override suspend fun deleteSite(id: String) {
+        api.deleteSite(id)
     }
 
-    override suspend fun deleteSite(businessId: String, siteId: String) {
-        api.deleteSite(businessId, siteId)
+    override suspend fun getSiteCount(): Int {
+        return api.getSiteCount().body() ?: 0
     }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
index a8372be..4e51124 100644
--- a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
+++ b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
@@ -1,6 +1,8 @@
 package app.forku.data.repository.user
 
+import android.util.Log
 import app.forku.data.api.UserApi
+import app.forku.data.api.GOUserRoleApi
 import app.forku.data.api.dto.user.UserDto
 import app.forku.data.mapper.toDomain
 import app.forku.domain.model.user.User
@@ -15,23 +17,59 @@ import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.withContext
 import javax.inject.Singleton
 import kotlinx.coroutines.flow.Flow
-import android.util.Log
+import app.forku.data.repository.BaseRepository
+import app.forku.core.auth.TokenErrorHandler
 
 @Singleton
 class UserRepositoryImpl @Inject constructor(
     private val api: UserApi,
-    private val authDataStore: AuthDataStore,
-    private val tourPreferences: TourPreferences
-) : UserRepository {
+    private val goUserRoleApi: GOUserRoleApi,
+    authDataStore: AuthDataStore,
+    private val tourPreferences: TourPreferences,
+    tokenErrorHandler: TokenErrorHandler
+) : UserRepository, BaseRepository(authDataStore, tokenErrorHandler) {
     
-    override suspend fun getUserById(id: String): User? {
-        return try {
-            val response = api.getUser(id)
-            android.util.Log.d("UserRepository", "API response for user $id: ${response.body()}")
-            if (!response.isSuccessful) return null
-            response.body()?.toDomain()
+    private suspend fun getUserRoleFromGOApi(userId: String): UserRole {
+        try {
+            val response = goUserRoleApi.getUserRoles()
+            if (!response.isSuccessful) {
+                Log.e("UserRepository", "Failed to get user roles: ${response.code()}")
+                return UserRole.OPERATOR
+            }
+
+            val userRoles = response.body() ?: return UserRole.OPERATOR
+            val userRole = userRoles.find { it.GOUserId == userId }?.role?.Name
+                ?: return UserRole.OPERATOR
+
+            return when (userRole.lowercase()) {
+                "administrator" -> UserRole.SYSTEM_OWNER
+                "admin" -> UserRole.ADMIN
+                "operator" -> UserRole.OPERATOR
+                "superadmin" -> UserRole.SUPERADMIN
+                "systemowner", "system_owner" -> UserRole.SYSTEM_OWNER
+                else -> UserRole.OPERATOR
+            }
         } catch (e: Exception) {
-            android.util.Log.e("UserRepository", "Error getting user by id", e)
+            Log.e("UserRepository", "Error getting user role: ${e.message}")
+            return UserRole.OPERATOR
+        }
+    }
+
+    override suspend fun getUserById(userId: String): User? = withContext(Dispatchers.IO) {
+        try {
+            val response = api.getUser(userId)
+            if (!response.isSuccessful) {
+                Log.e("UserRepository", "Failed to get user: ${response.code()}")
+                return@withContext null
+            }
+
+            val userDto = response.body() ?: return@withContext null
+            val userRole = getUserRoleFromGOApi(userId)
+            
+            // Map to domain model, passing the role directly
+            userDto.toDomain(userRole)
+        } catch (e: Exception) {
+            Log.e("UserRepository", "Error getting user: ${e.message}")
             null
         }
     }
@@ -88,7 +126,7 @@ class UserRepositoryImpl @Inject constructor(
             )
 
             // Update user in API
-            val updateResponse = api.updateUser(updatedUser.id, updatedUser.toDto())
+            val updateResponse = api.saveUser( updatedUser.toDto())
             if (!updateResponse.isSuccessful) {
                 android.util.Log.e("appflow UserRepository", "Failed to update lastLogin timestamp")
             }
@@ -132,16 +170,7 @@ class UserRepositoryImpl @Inject constructor(
                 password = password,
                 username = email,
                 firstName = firstName,
-                lastName = lastName,
-                token = UUID.randomUUID().toString(),
-                refreshToken = UUID.randomUUID().toString(),
-                photoUrl = null,
-                role = role.name,
-                certifications = listOf(),
-                lastMedicalCheck = null,
-                lastLogin = null,
-                isActive = true,
-                isApproved = false
+                lastName = lastName
             )
 
             val response = api.createUser(newUser)
@@ -199,18 +228,10 @@ class UserRepositoryImpl @Inject constructor(
                 password = "", // No incluimos el password en la actualización
                 username = user.username,
                 firstName = user.firstName,
-                lastName = user.lastName,
-                token = user.token,
-                refreshToken = user.refreshToken,
-                photoUrl = user.photoUrl,
-                role = newRole.name,
-                certifications = user.certifications.map { it.toDto() },
-                lastMedicalCheck = user.lastMedicalCheck,
-                lastLogin = user.lastLogin,
-                isActive = true
+                lastName = user.lastName
             )
 
-            val response = api.updateUser(userId, updatedUserDto)
+            val response = api.saveUser(updatedUserDto)
             if (!response.isSuccessful) {
                 return@withContext Result.failure(Exception("Failed to update user role"))
             }
@@ -246,22 +267,11 @@ class UserRepositoryImpl @Inject constructor(
                 password = currentPassword, // Preserve the current password
                 username = user.username,
                 firstName = user.firstName,
-                lastName = user.lastName,
-                token = user.token,
-                refreshToken = user.refreshToken,
-                photoUrl = user.photoUrl,
-                role = user.role.name,
-                certifications = user.certifications.map { it.toDto() },
-                lastMedicalCheck = user.lastMedicalCheck,
-                lastLogin = user.lastLogin,
-                isActive = user.isActive,
-                isApproved = user.isApproved,
-                businessId = user.businessId,
-                systemOwnerId = user.systemOwnerId
+                lastName = user.lastName
             )
 
             Log.d("UserRepository", "Sending update request to API")
-            val response = api.updateUser(user.id, userDto)
+            val response = api.saveUser(userDto)
             
             if (!response.isSuccessful) {
                 Log.e("UserRepository", "Failed to update user: ${response.code()}")
@@ -292,8 +302,8 @@ class UserRepositoryImpl @Inject constructor(
             }
 
             response.body()
-                ?.filter { it.role.uppercase() == role.name }
                 ?.map { it.toDomain() }
+                ?.filter { it.role == role }
                 ?: emptyList()
         } catch (e: Exception) {
             emptyList()
@@ -301,23 +311,29 @@ class UserRepositoryImpl @Inject constructor(
     }
 
     override suspend fun getAllUsers(): List<User> = withContext(Dispatchers.IO) {
-        try {
-            Log.d("UserRepository", "Getting all users")
-            val response = api.getUsers()
-            if (!response.isSuccessful) {
-                Log.e("UserRepository", "Failed to get users: ${response.code()}")
-                return@withContext emptyList()
-            }
-
-            val users = response.body()?.map { it.toDomain() } ?: emptyList()
-            Log.d("UserRepository", "Successfully retrieved ${users.size} users")
-            users.forEach { user ->
-                Log.d("UserRepository", "User: ${user.firstName} ${user.lastName}, Role: ${user.role}")
+        executeApiCallForList {
+            Log.d("UserRepository", "Starting getAllUsers request")
+            
+            // Log the API endpoint being called
+            Log.d("UserRepository", "Making API call to: api/gouser/list")
+            
+            // Log any stored tokens for debugging auth issues
+            val applicationToken = authDataStore.getApplicationToken()
+            val authToken = authDataStore.getAuthenticationToken()
+            val csrfToken = authDataStore.getCsrfToken()
+            Log.d("UserRepository", """
+                Auth state:
+                - Application token present: ${applicationToken != null}
+                - Auth token present: ${authToken != null}
+                - CSRF token present: ${csrfToken != null}
+            """.trimIndent())
+            
+            api.getUsers()
+        }.map { userDto ->
+            Log.d("UserRepository", "Processing user DTO: id=${userDto.id}, email=${userDto.email}")
+            userDto.toDomain().also { user ->
+                Log.d("UserRepository", "Mapped to domain user: id=${user.id}, role=${user.role}")
             }
-            users
-        } catch (e: Exception) {
-            Log.e("UserRepository", "Error getting all users", e)
-            emptyList()
         }
     }
 
@@ -392,4 +408,33 @@ class UserRepositoryImpl @Inject constructor(
             emptyList()
         }
     }
+
+    override suspend fun getUserCount(): Int? = withContext(Dispatchers.IO) {
+        try {
+            Log.d("UserRepository", "Getting user count from API")
+            val response = api.getUserCount()
+            if (!response.isSuccessful) {
+                Log.e("UserRepository", "Failed to get user count: ${response.code()}")
+                Log.d("UserRepository", "Falling back to counting all users")
+                val users = getAllUsers()
+                Log.d("UserRepository", "Fallback count: ${users.size} users")
+                return@withContext users.size
+            }
+            
+            val count = response.body()
+            Log.d("UserRepository", "User count from API: $count")
+            return@withContext count
+        } catch (e: Exception) {
+            Log.e("UserRepository", "Error getting user count, falling back to getAllUsers()", e)
+            // Fallback to getting all users and counting them
+            try {
+                val users = getAllUsers()
+                Log.d("UserRepository", "Fallback count after exception: ${users.size} users")
+                return@withContext users.size
+            } catch (e2: Exception) {
+                Log.e("UserRepository", "Error in fallback count", e2)
+                return@withContext null
+            }
+        }
+    }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/repository/vehicle/VehicleCategoryRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle/VehicleCategoryRepositoryImpl.kt
index 808a1b7..9656bc8 100644
--- a/app/src/main/java/app/forku/data/repository/vehicle/VehicleCategoryRepositoryImpl.kt
+++ b/app/src/main/java/app/forku/data/repository/vehicle/VehicleCategoryRepositoryImpl.kt
@@ -4,7 +4,8 @@ import android.util.Log
 import app.forku.data.api.CreateVehicleCategoryRequest
 import app.forku.data.api.UpdateVehicleCategoryRequest
 import app.forku.data.api.VehicleCategoryApi
-import app.forku.data.api.dto.toDomain
+import app.forku.data.api.dto.vehicle.toDomain
+import app.forku.data.api.dto.vehicle.VehicleCategoryDto
 import app.forku.domain.model.vehicle.VehicleCategory
 import app.forku.domain.repository.vehicle.VehicleCategoryRepository
 import javax.inject.Inject
@@ -44,8 +45,15 @@ class VehicleCategoryRepositoryImpl @Inject constructor(
     override suspend fun createVehicleCategory(name: String, description: String?): VehicleCategory {
         Log.d("VehicleCategoryRepo", "Creating vehicle category: $name")
         try {
-            val request = CreateVehicleCategoryRequest(name = name, description = description)
-            val response = api.createVehicleCategory(request)
+            val dto = VehicleCategoryDto(
+                id = "",
+                name = name,
+                description = description,
+                createdAt = System.currentTimeMillis(),
+                updatedAt = System.currentTimeMillis(),
+                requiresCertification = false
+            )
+            val response = api.saveVehicleCategory(dto)
             if (!response.isSuccessful) {
                 Log.e("VehicleCategoryRepo", "Error creating category: ${response.code()}")
                 throw Exception("Failed to create vehicle category")
@@ -61,8 +69,15 @@ class VehicleCategoryRepositoryImpl @Inject constructor(
     override suspend fun updateVehicleCategory(id: String, name: String, description: String?): VehicleCategory {
         Log.d("VehicleCategoryRepo", "Updating vehicle category: $id")
         try {
-            val request = UpdateVehicleCategoryRequest(name = name, description = description)
-            val response = api.updateVehicleCategory(id, request)
+            val dto = VehicleCategoryDto(
+                id = id,
+                name = name,
+                description = description,
+                createdAt = System.currentTimeMillis(),
+                updatedAt = System.currentTimeMillis(),
+                requiresCertification = false
+            )
+            val response = api.saveVehicleCategory(dto)
             if (!response.isSuccessful) {
                 Log.e("VehicleCategoryRepo", "Error updating category: ${response.code()}")
                 throw Exception("Failed to update vehicle category")
diff --git a/app/src/main/java/app/forku/data/repository/vehicle/VehicleRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle/VehicleRepositoryImpl.kt
index d606638..1083879 100644
--- a/app/src/main/java/app/forku/data/repository/vehicle/VehicleRepositoryImpl.kt
+++ b/app/src/main/java/app/forku/data/repository/vehicle/VehicleRepositoryImpl.kt
@@ -72,31 +72,11 @@ class VehicleRepositoryImpl @Inject constructor(
     // API access functions
     private suspend fun fetchVehicleFromGlobalList(id: String): Vehicle {
         Log.d("VehicleRepo", "Fetching vehicle $id from global list")
-        val allVehiclesResponse = api.getAllVehicles()
-        if (!allVehiclesResponse.isSuccessful) {
-            throw Exception("Failed to fetch vehicle list: ${allVehiclesResponse.code()}")
-        }
-        
-        return allVehiclesResponse.body()
-            ?.mapNotNull { it.toDomain() }
-            ?.find { it.id == id }
-            ?: throw Exception("Vehicle not found in the global list")
-    }
-    
-    private suspend fun fetchVehicleFromBusiness(id: String, businessId: String): Vehicle {
-        Log.d("VehicleRepo", "Fetching vehicle $id for business $businessId")
-        val response = api.getVehicle(businessId, id)
-        
+        val response = api.getVehicleById(id)
         if (!response.isSuccessful) {
-            when (response.code()) {
-                404 -> throw Exception("Vehicle not found")
-                429 -> throw Exception("Rate limit exceeded. Please try again later.")
-                in 500..599 -> throw Exception("Server error. Please try again later.")
-                else -> throw Exception("Failed to get vehicle: ${response.code()}")
-            }
+            throw Exception("Failed to fetch vehicle: "+response.code())
         }
-        
-        return response.body()?.toDomain() ?: throw Exception("Vehicle data is missing")
+        return response.body()?.toDomain() ?: throw Exception("Vehicle not found")
     }
     
     // User role check
@@ -133,50 +113,17 @@ class VehicleRepositoryImpl @Inject constructor(
         businessId: String
     ): Vehicle = withContext(Dispatchers.IO) {
         mutex.withLock {
-            // 1. First try to get from cache if it's a specific business context
-            if (businessId != "0") {
-                getFromCache(id)?.let { return@withContext it }
-            }
-
+            getFromCache(id)?.let { return@withContext it }
             try {
-                // 2. Determine how to fetch based on context
-                var vehicle = if (businessId == "0") {
-                    // For admin global context
-                    fetchVehicleFromGlobalList(id)
-                } else {
-                    try {
-                        // Try to fetch from specific business
-                        fetchVehicleFromBusiness(id, businessId)
-                    } catch (e: Exception) {
-                        // 3. Fall back to global list for admins if vehicle not found in business
-                        if (e.message?.contains("Vehicle not found", ignoreCase = true) == true && 
-                            isAdminUser()) {
-                            
-                            Log.d("VehicleRepo", "Vehicle not found in business $businessId, trying global list")
-                            fetchVehicleFromGlobalList(id)
-                        } else {
-                            throw e
-                        }
-                    }
-                }
-
-                // NUEVO - Enriquecer vehículo con datos completos del tipo
+                var vehicle = fetchVehicleFromGlobalList(id)
                 vehicle = enrichVehicleWithTypeInfo(vehicle)
-
-                // 4. Update cache for specific business context
-                if (businessId != "0") {
-                    updateCache(id, vehicle)
-                }
-                
+                updateCache(id, vehicle)
                 vehicle
             } catch (e: Exception) {
-                // 5. Last resort: try to return cached version if available
                 getFromCache(id)?.let { 
                     Log.d("VehicleRepo", "Returning cached vehicle as fallback after error")
                     return@withContext it 
                 }
-                
-                // No cache available, rethrow
                 throw e
             }
         }
@@ -188,12 +135,8 @@ class VehicleRepositoryImpl @Inject constructor(
         businessId: String?
     ): Vehicle = withContext(Dispatchers.IO) {
         try {
-            // Use provided businessId or get from current user
-            val effectiveBusinessId = businessId ?: authDataStore.getCurrentUser()?.businessId
-                ?: throw Exception("User not authenticated or missing business ID")
-
-            // Get vehicle from API
-            val response = api.getVehicleByQr(effectiveBusinessId, code)
+            // Treat QR code as vehicle ID
+            val response = api.getVehicleById(code)
             if (!response.isSuccessful) {
                 when (response.code()) {
                     404 -> throw Exception("Vehículo no encontrado")
@@ -202,18 +145,15 @@ class VehicleRepositoryImpl @Inject constructor(
                     else -> throw Exception("Error al obtener el vehículo: ${response.code()}")
                 }
             }
-
             val vehicle = response.body()?.toDomain()
                 ?: throw Exception("Vehículo no encontrado")
-
             if (checkAvailability) {
                 // Check vehicle status
-                val status = vehicleStatusRepository.getVehicleStatus(vehicle.id, effectiveBusinessId)
+                val status = vehicleStatusRepository.getVehicleStatus(vehicle.id, vehicle.businessId ?: businessId ?: "")
                 if (!status.isAvailable()) {
                     throw Exception(status.getErrorMessage())
                 }
             }
-
             vehicle
         } catch (e: Exception) {
             android.util.Log.e("VehicleRepo", "Error getting vehicle by QR $code", e)
@@ -226,28 +166,16 @@ class VehicleRepositoryImpl @Inject constructor(
         siteId: String?
     ): List<Vehicle> = withContext(Dispatchers.IO) {
         try {
-            val response = api.getVehicles(businessId, siteId)
-            android.util.Log.d("VehicleRepo", "Raw API response: ${response.body()}")
-            
+            val response = api.getAllVehicles()
             if (!response.isSuccessful) {
-                when (response.code()) {
-                    429 -> throw Exception("Rate limit exceeded. Please try again later.")
-                    in 500..599 -> throw Exception("Server error. Please try again later.")
-                    else -> throw Exception("Failed to get vehicles: ${response.code()}")
-                }
+                throw Exception("Failed to get vehicles: "+response.code())
             }
-
             val vehicles = response.body()?.map { it.toDomain() }
                 ?: throw Exception("Failed to get vehicles: Empty response body")
-
-            // Enriquecer cada vehículo con información completa del tipo
             val enrichedVehicles = vehicles.map { enrichVehicleWithTypeInfo(it) }
-
-            // Update cache for each vehicle
             enrichedVehicles.forEach { vehicle ->
                 cache[vehicle.id] = CachedVehicle(vehicle, System.currentTimeMillis())
             }
-
             enrichedVehicles
         } catch (e: Exception) {
             android.util.Log.e("VehicleRepo", "Error fetching vehicles", e)
@@ -259,18 +187,10 @@ class VehicleRepositoryImpl @Inject constructor(
         try {
             val response = api.getAllVehicles()
             if (!response.isSuccessful) {
-                when (response.code()) {
-                    403 -> throw Exception("Permission denied. SuperAdmin access required.")
-                    429 -> throw Exception("Rate limit exceeded. Please try again later.")
-                    in 500..599 -> throw Exception("Server error. Please try again later.")
-                    else -> throw Exception("Failed to get all vehicles: ${response.code()}")
-                }
+                throw Exception("Failed to get all vehicles: "+response.code())
             }
-
             val vehicles = response.body()?.map { it.toDomain() }
                 ?: throw Exception("Failed to get vehicles: Empty response body")
-                
-            // Enriquecer cada vehículo con información completa del tipo
             return vehicles.map { enrichVehicleWithTypeInfo(it) }
         } catch (e: Exception) {
             android.util.Log.e("VehicleRepo", "Error fetching all vehicles", e)
@@ -291,26 +211,21 @@ class VehicleRepositoryImpl @Inject constructor(
         businessId: String
     ): Vehicle = withContext(Dispatchers.IO) {
         try {
-            val response = api.updateVehicleStatus(
-                businessId = businessId,
-                vehicleId = vehicleId,
-                status = status.name
-            )
-            
+            // Fetch the current vehicle
+            val currentResponse = api.getVehicleById(vehicleId)
+            if (!currentResponse.isSuccessful) {
+                throw Exception("Failed to fetch vehicle: ${currentResponse.code()}")
+            }
+            val currentVehicleDto = currentResponse.body() ?: throw Exception("Vehicle not found")
+            // Update the status (PascalCase field)
+            val updatedVehicleDto = currentVehicleDto.copy(status = status.name)
+            // Save the updated vehicle
+            val response = api.saveVehicle(updatedVehicleDto)
             if (!response.isSuccessful) {
-                when (response.code()) {
-                    429 -> throw Exception("Rate limit exceeded. Please try again later.")
-                    in 500..599 -> throw Exception("Server error. Please try again later.")
-                    else -> throw Exception("Failed to update vehicle status: ${response.code()}")
-                }
+                throw Exception("Failed to update vehicle status: ${response.code()}")
             }
-            
-            val result = response.body()?.toDomain() 
-                ?: throw Exception("No vehicle data in response")
-
-            // Update cache
+            val result = response.body()?.toDomain() ?: throw Exception("No vehicle data in response")
             cache[vehicleId] = CachedVehicle(result, System.currentTimeMillis())
-            
             result
         } catch (e: Exception) {
             android.util.Log.e("VehicleRepo", "Error updating vehicle status", e)
@@ -344,31 +259,10 @@ class VehicleRepositoryImpl @Inject constructor(
                 businessId = businessId,
                 serialNumber = serialNumber
             )
-
-            Log.d("VehicleRepo", "Preparing to create vehicle. Business ID: $businessId, DTO: $vehicleDto")
-
-            // Call the appropriate API endpoint
-            val response = if (businessId == null) {
-                Log.d("VehicleRepo", "Calling createVehicleGlobally (POST /vehicle)")
-                api.createVehicleGlobally(vehicleDto)
-            } else {
-                Log.d("VehicleRepo", "Calling createVehicle for business $businessId (POST /business/{businessId}/vehicle)")
-                api.createVehicle(businessId, vehicleDto)
-            }
-            
-            Log.d("VehicleRepo", "Create vehicle response: ${response.code()}")
-            Log.d("VehicleRepo", "Response body: ${response.body()}")
-            
+            val response = api.saveVehicle(vehicleDto)
             if (!response.isSuccessful) {
                 val errorBody = response.errorBody()?.string()
-                Log.e("VehicleRepo", "Error body: $errorBody")
-                // Provide a more specific error message if possible
-                val errorMessage = when (response.code()) {
-                    400 -> "Invalid request data: $errorBody"
-                    404 -> "Endpoint not found or resource missing."
-                    else -> "Failed to create vehicle (Code: ${response.code()}): $errorBody"
-                }
-                throw Exception(errorMessage)
+                throw Exception("Failed to create vehicle (Code: ${response.code()}): $errorBody")
             }
             response.body()?.toDomain() ?: throw Exception("Vehicle data missing in response body")
         } catch (e: Exception) {
@@ -382,32 +276,15 @@ class VehicleRepositoryImpl @Inject constructor(
         updatedVehicle: Vehicle
     ): Vehicle = withContext(Dispatchers.IO) {
         try {
-            // Convert domain model to DTO
             val vehicleDto = updatedVehicle.toDto()
-            Log.d("VehicleRepo", "Updating vehicle globally. ID: $vehicleId, DTO: $vehicleDto")
-
-            // Call the global update endpoint
-            val response = api.updateVehicleGlobally(vehicleId, vehicleDto)
-            Log.d("VehicleRepo", "Update vehicle globally response: ${response.code()}")
-            Log.d("VehicleRepo", "Response body: ${response.body()}")
-
+            val response = api.saveVehicle(vehicleDto)
             if (!response.isSuccessful) {
                 val errorBody = response.errorBody()?.string()
-                Log.e("VehicleRepo", "Error updating vehicle globally: $errorBody")
-                val errorMessage = when (response.code()) {
-                    400 -> "Invalid request data: $errorBody"
-                    403 -> "Permission denied."
-                    404 -> "Vehicle not found."
-                    else -> "Failed to update vehicle globally (Code: ${response.code()}): $errorBody"
-                }
-                throw Exception(errorMessage)
+                throw Exception("Failed to update vehicle (Code: ${response.code()}): $errorBody")
             }
             val result = response.body()?.toDomain() 
                 ?: throw Exception("Vehicle data missing in response body after update")
-            
-            // Update cache
             cache[vehicleId] = CachedVehicle(result, System.currentTimeMillis())
-
             result
         } catch (e: Exception) {
             Log.e("VehicleRepo", "Error in updateVehicleGlobally", e)
@@ -421,36 +298,27 @@ class VehicleRepositoryImpl @Inject constructor(
         updatedVehicle: Vehicle
     ): Vehicle = withContext(Dispatchers.IO) {
         try {
-            // Convert domain model to DTO
             val vehicleDto = updatedVehicle.toDto()
-            Log.d("VehicleRepo", "Updating vehicle for business $businessId. ID: $vehicleId, DTO: $vehicleDto")
-
-            // Call the business-specific update endpoint
-            val response = api.updateVehicle(businessId, vehicleId, vehicleDto)
-            Log.d("VehicleRepo", "Update vehicle response: ${response.code()}")
-            Log.d("VehicleRepo", "Response body: ${response.body()}")
-
+            val response = api.saveVehicle(vehicleDto)
             if (!response.isSuccessful) {
                 val errorBody = response.errorBody()?.string()
-                Log.e("VehicleRepo", "Error updating vehicle: $errorBody")
-                val errorMessage = when (response.code()) {
-                    400 -> "Invalid request data: $errorBody"
-                    403 -> "Permission denied."
-                    404 -> "Vehicle or Business not found."
-                    else -> "Failed to update vehicle (Code: ${response.code()}): $errorBody"
-                }
-                throw Exception(errorMessage)
+                throw Exception("Failed to update vehicle (Code: ${response.code()}): $errorBody")
             }
             val result = response.body()?.toDomain()
                 ?: throw Exception("Vehicle data missing in response body after update")
-
-            // Update cache
             cache[vehicleId] = CachedVehicle(result, System.currentTimeMillis())
-
             result
         } catch (e: Exception) {
             Log.e("VehicleRepo", "Error in updateVehicle", e)
             throw Exception("Failed to update vehicle: ${e.message}")
         }
     }
+
+    private suspend fun fetchVehicleByIdAndBusiness(id: String, businessId: String): Vehicle {
+        val vehicle = fetchVehicleFromGlobalList(id)
+        if (vehicle.businessId != businessId) {
+            throw Exception("Vehicle does not belong to the specified business")
+        }
+        return vehicle
+    }
 }
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusUpdaterImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusUpdaterImpl.kt
index 561ba4c..d17b8f2 100644
--- a/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusUpdaterImpl.kt
+++ b/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusUpdaterImpl.kt
@@ -16,21 +16,19 @@ class VehicleStatusUpdaterImpl @Inject constructor(
         businessId: String
     ): Boolean {
         return try {
-            val response = api.updateVehicleStatus(
-                businessId = businessId,
-                vehicleId = vehicleId,
-                status = status.name
-            )
-            
+            // Fetch the current vehicle
+            val currentResponse = api.getVehicleById(vehicleId)
+            if (!currentResponse.isSuccessful) {
+                throw Exception("Failed to fetch vehicle: ${currentResponse.code()}")
+            }
+            val currentVehicleDto = currentResponse.body() ?: throw Exception("Vehicle not found")
+            // Update the status (use property name, not serialized name)
+            val updatedVehicleDto = currentVehicleDto.copy(status = status.name)
+            // Save the updated vehicle
+            val response = api.saveVehicle(updatedVehicleDto)
             if (!response.isSuccessful) {
-                when (response.code()) {
-                    404 -> throw Exception("Vehicle not found")
-                    429 -> throw Exception("Rate limit exceeded. Please try again later.")
-                    in 500..599 -> throw Exception("Server error. Please try again later.")
-                    else -> throw Exception("Failed to update vehicle status: ${response.code()}")
-                }
+                throw Exception("Failed to update vehicle status: ${response.code()}")
             }
-            
             true
         } catch (e: Exception) {
             android.util.Log.e("VehicleStatus", "Error updating vehicle status", e)
diff --git a/app/src/main/java/app/forku/data/repository/vehicle/VehicleTypeRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle/VehicleTypeRepositoryImpl.kt
index 2d9330d..b1296bb 100644
--- a/app/src/main/java/app/forku/data/repository/vehicle/VehicleTypeRepositoryImpl.kt
+++ b/app/src/main/java/app/forku/data/repository/vehicle/VehicleTypeRepositoryImpl.kt
@@ -74,7 +74,7 @@ class VehicleTypeRepositoryImpl @Inject constructor(
         requiresCertification: Boolean
     ): VehicleType {
         Log.d("VehicleTypeRepo", "Creating vehicle type: $name")
-        val response = api.createVehicleType(
+        val response = api.saveVehicleType(
             VehicleTypeDto(
                 id = "",  // ID will be assigned by the server
                 name = name,
@@ -98,8 +98,7 @@ class VehicleTypeRepositoryImpl @Inject constructor(
         requiresCertification: Boolean
     ): VehicleType {
         Log.d("VehicleTypeRepo", "Updating vehicle type: $id")
-        val response = api.updateVehicleType(
-            id,
+        val response = api.saveVehicleType(
             VehicleTypeDto(
                 id = id,
                 name = name,
diff --git a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
index db48424..702b62e 100644
--- a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
+++ b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
@@ -93,17 +93,23 @@ class VehicleSessionRepositoryImpl @Inject constructor(
             } else null
             
             // Create session
-            val response = api.createSession(
-                StartSessionRequestDto(
-                    vehicleId = vehicleId,
-                    checkId = checkId,
-                    userId = currentUser.id,
-                    startTime = currentDateTime,
-                    timestamp = currentDateTime,
-                    status = VehicleSessionStatus.OPERATING.toString(),
-                    startLocationCoordinates = locationCoordinates
-                )
+            val newSession = VehicleSession(
+                id = "", // Let backend assign
+                vehicleId = vehicleId,
+                userId = currentUser.id,
+                checkId = checkId,
+                startTime = currentDateTime,
+                endTime = null,
+                status = VehicleSessionStatus.OPERATING,
+                startLocationCoordinates = locationCoordinates,
+                endLocationCoordinates = null,
+                durationMinutes = null,
+                timestamp = currentDateTime,
+                closeMethod = null,
+                closedBy = null,
+                notes = null
             )
+            val response = api.saveSession(VehicleSessionMapper.toVehicleSessionDto(newSession))
 
             if (!response.isSuccessful) {
                 // Rollback vehicle status if session creation fails
@@ -191,10 +197,7 @@ class VehicleSessionRepositoryImpl @Inject constructor(
                 endLocationCoordinates = locationCoordinates
             )
             
-            val response = api.updateSession(
-                sessionId = sessionId,
-                session = VehicleSessionMapper.toVehicleSessionDto(updatedSession)
-            )
+            val response = api.saveSession(VehicleSessionMapper.toVehicleSessionDto(updatedSession))
 
             if (!response.isSuccessful) {
                 // Rollback vehicle status if session update fails
diff --git a/app/src/main/java/app/forku/data/service/GOServicesManager.kt b/app/src/main/java/app/forku/data/service/GOServicesManager.kt
index 131117d..e86132e 100644
--- a/app/src/main/java/app/forku/data/service/GOServicesManager.kt
+++ b/app/src/main/java/app/forku/data/service/GOServicesManager.kt
@@ -1,28 +1,50 @@
 package app.forku.data.service
 
 import android.util.Log
+import app.forku.data.datastore.AuthDataStore
 import app.forku.domain.repository.IGOServicesRepository
 import javax.inject.Inject
 import javax.inject.Singleton
 
 @Singleton
 class GOServicesManager @Inject constructor(
-    private val repository: IGOServicesRepository
+    private val repository: IGOServicesRepository,
+    private val authDataStore: AuthDataStore
 ) {
-    suspend fun getOrRefreshCsrfToken(): Result<String> {
-        Log.d("GOServicesManager", "Getting or refreshing CSRF token...")
-        val storedToken = repository.getStoredCsrfToken()
-        return if (storedToken != null) {
-            Log.d("GOServicesManager", "Using stored CSRF token")
-            Result.success(storedToken)
-        } else {
-            Log.d("GOServicesManager", "No stored token found, fetching new token...")
-            repository.getCsrfToken()
+    suspend fun getCsrfToken(forceRefresh: Boolean = false): Result<String> {
+        Log.d("GOServicesManager", "Getting CSRF token... forceRefresh=$forceRefresh")
+        
+        val storedToken = authDataStore.getCsrfToken()
+        val storedCookie = authDataStore.getAntiforgeryCookie()
+
+        if (!forceRefresh && storedToken != null && storedCookie != null) {
+            Log.d("GOServicesManager", "Using cached CSRF token and cookie")
+            return Result.success(storedToken)
         }
+
+        Log.d("GOServicesManager", "Fetching new CSRF token and cookie from API...")
+        return repository.getCsrfTokenAndCookie().fold(
+            onSuccess = { (token, cookie) -> 
+                if (token != null && cookie != null) {
+                    authDataStore.saveCsrfToken(token)
+                    authDataStore.saveAntiforgeryCookie(cookie)
+                    Log.d("GOServicesManager", "Successfully fetched and saved CSRF token and cookie")
+                    Result.success(token)
+                } else {
+                    Log.e("GOServicesManager", "Received null token or cookie from repository")
+                    Result.failure(Exception("Received null token or cookie"))
+                }
+            },
+            onFailure = { error ->
+                Log.e("GOServicesManager", "Failed to fetch CSRF token/cookie from repository", error)
+                Result.failure(error)
+            }
+        )
     }
 
-    suspend fun clearToken() {
-        Log.d("GOServicesManager", "Clearing CSRF token...")
+    suspend fun clearCsrfToken() {
+        Log.d("GOServicesManager", "Clearing CSRF token and cookie...")
         repository.clearCsrfToken()
+        // AuthDataStore.clearTokens() already clears both
     }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/di/BusinessModule.kt b/app/src/main/java/app/forku/di/BusinessModule.kt
index 9c279bb..a856b0f 100644
--- a/app/src/main/java/app/forku/di/BusinessModule.kt
+++ b/app/src/main/java/app/forku/di/BusinessModule.kt
@@ -1,10 +1,11 @@
 package app.forku.di
 
 import app.forku.data.api.BusinessApi
+import app.forku.data.api.BusinessConfigurationApi
+import app.forku.data.api.UserBusinessApi
 import app.forku.data.repository.business.BusinessRepositoryImpl
 import app.forku.domain.repository.business.BusinessRepository
 import app.forku.domain.repository.user.UserRepository
-import com.google.gson.Gson
 import dagger.Module
 import dagger.Provides
 import dagger.hilt.InstallIn
@@ -19,9 +20,10 @@ object BusinessModule {
     @Singleton
     fun provideBusinessRepository(
         api: BusinessApi,
-        gson: Gson,
-        userRepository: UserRepository
+        userBusinessApi: UserBusinessApi,
+        userRepository: UserRepository,
+        businessConfigurationApi: BusinessConfigurationApi
     ): BusinessRepository {
-        return BusinessRepositoryImpl(api, gson, userRepository)
+        return BusinessRepositoryImpl(api, userBusinessApi, userRepository, businessConfigurationApi)
     }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/di/GOServicesModule.kt b/app/src/main/java/app/forku/di/GOServicesModule.kt
index f8aebe3..7314f3b 100644
--- a/app/src/main/java/app/forku/di/GOServicesModule.kt
+++ b/app/src/main/java/app/forku/di/GOServicesModule.kt
@@ -15,6 +15,7 @@ import dagger.hilt.InstallIn
 import dagger.hilt.components.SingletonComponent
 import retrofit2.Retrofit
 import javax.inject.Singleton
+import okhttp3.OkHttpClient
 
 @Module
 @InstallIn(SingletonComponent::class)
@@ -36,23 +37,28 @@ object GOServicesModule {
     @Singleton
     fun provideGOServicesRepository(
         api: GOServicesApi,
-        preferences: GOServicesPreferences
+        authDataStore: AuthDataStore
     ): IGOServicesRepository {
-        return GOServicesRepository(api, preferences)
+        return GOServicesRepository(api, authDataStore)
     }
 
     @Provides
     @Singleton
     fun provideGOSecurityProviderRepository(
         api: GOSecurityProviderApi,
-        authDataStore: AuthDataStore
+        authDataStore: AuthDataStore,
+        okHttpClient: OkHttpClient,
+        retrofit: Retrofit
     ): IGOSecurityProviderRepository {
-        return GOSecurityProviderRepository(api, authDataStore)
+        return GOSecurityProviderRepository(api, authDataStore, okHttpClient, retrofit)
     }
 
     @Provides
     @Singleton
-    fun provideGOServicesManager(repository: IGOServicesRepository): GOServicesManager {
-        return GOServicesManager(repository)
+    fun provideGOServicesManager(
+        repository: IGOServicesRepository,
+        authDataStore: AuthDataStore
+    ): GOServicesManager {
+        return GOServicesManager(repository, authDataStore)
     }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/di/NetworkModule.kt b/app/src/main/java/app/forku/di/NetworkModule.kt
index 4fe8f00..4a371c4 100644
--- a/app/src/main/java/app/forku/di/NetworkModule.kt
+++ b/app/src/main/java/app/forku/di/NetworkModule.kt
@@ -12,6 +12,7 @@ import app.forku.data.api.interceptor.RetryInterceptor
 import app.forku.domain.repository.weather.WeatherRepository
 import app.forku.data.repository.weather.WeatherRepositoryImpl
 import app.forku.data.api.VehicleSessionApi
+import app.forku.data.service.GOServicesManager
 import dagger.Module
 import dagger.Provides
 import dagger.hilt.InstallIn
@@ -27,20 +28,27 @@ import android.content.Context
 import app.forku.core.network.NetworkConnectivityManager
 import app.forku.data.api.BusinessApi
 import javax.inject.Named
+import javax.inject.Provider
 import app.forku.data.api.IncidentApi
 import app.forku.data.api.ChecklistApi
 import app.forku.data.api.SessionApi
 import app.forku.data.api.NotificationApi
 
 import app.forku.data.api.CountryApi
-import app.forku.data.api.StateApi
+import app.forku.data.api.CountryStateApi
 
 import app.forku.data.api.VehicleTypeApi
 import app.forku.data.api.EnergySourceApi
 import app.forku.data.api.SiteApi
 import app.forku.data.api.VehicleCategoryApi
 import app.forku.data.api.VehicleComponentApi
-import app.forku.data.api.interceptor.CsrfTokenInterceptor
+import app.forku.data.datastore.AuthDataStore
+import app.forku.data.api.GOFileUploaderApi
+import app.forku.data.api.GOGroupApi
+import app.forku.data.api.GOGroupRoleApi
+import app.forku.data.api.GOUserRoleApi
+import app.forku.data.api.UserBusinessApi
+import app.forku.data.api.BusinessConfigurationApi
 
 //import app.forku.data.api.CicoHistoryApi
 
@@ -101,8 +109,20 @@ object NetworkModule {
 
     @Provides
     @Singleton
-    fun provideBusinessApi(retrofit: Retrofit): BusinessApi =
-        retrofit.create(BusinessApi::class.java)
+    fun provideBusinessApi(retrofit: Retrofit): BusinessApi {
+        return retrofit.create(BusinessApi::class.java)
+    }
+
+    @Provides
+    @Singleton
+    fun provideBusinessConfigurationApi(retrofit: Retrofit): BusinessConfigurationApi =
+        retrofit.create(BusinessConfigurationApi::class.java)
+
+    @Provides
+    @Singleton
+    fun provideUserBusinessApi(retrofit: Retrofit): UserBusinessApi {
+        return retrofit.create(UserBusinessApi::class.java)
+    }
 
     @Provides
     @Singleton
@@ -111,8 +131,8 @@ object NetworkModule {
 
     @Provides
     @Singleton
-    fun provideStateApi(retrofit: Retrofit): StateApi =
-        retrofit.create(StateApi::class.java)
+    fun provideStateApi(retrofit: Retrofit): CountryStateApi =
+        retrofit.create(CountryStateApi::class.java)
 
     @Provides
     @Singleton
@@ -136,6 +156,30 @@ object NetworkModule {
         return retrofit.create(VehicleComponentApi::class.java)
     }
 
+    @Provides
+    @Singleton
+    fun provideGOFileUploaderApi(retrofit: Retrofit): GOFileUploaderApi {
+        return retrofit.create(GOFileUploaderApi::class.java)
+    }
+
+    @Provides
+    @Singleton
+    fun provideGOGroupApi(retrofit: Retrofit): GOGroupApi {
+        return retrofit.create(GOGroupApi::class.java)
+    }
+
+    @Provides
+    @Singleton
+    fun provideGOGroupRoleApi(retrofit: Retrofit): GOGroupRoleApi {
+        return retrofit.create(GOGroupRoleApi::class.java)
+    }
+
+    @Provides
+    @Singleton
+    fun provideGOUserRoleApi(retrofit: Retrofit): GOUserRoleApi {
+        return retrofit.create(GOUserRoleApi::class.java)
+    }
+
     @Provides
     @Singleton
     fun provideHttpLoggingInterceptor(): HttpLoggingInterceptor {
@@ -147,9 +191,10 @@ object NetworkModule {
     @Provides
     @Singleton
     fun provideAuthInterceptor(
-        @ApplicationContext context: Context
+        authDataStore: AuthDataStore,
+        goServicesManagerProvider: Provider<GOServicesManager>
     ): AuthInterceptor {
-        return AuthInterceptor(context)
+        return AuthInterceptor(authDataStore, goServicesManagerProvider)
     }
 
     @Provides
@@ -157,12 +202,10 @@ object NetworkModule {
     fun provideOkHttpClient(
         loggingInterceptor: HttpLoggingInterceptor,
         authInterceptor: AuthInterceptor,
-        csrfTokenInterceptor: CsrfTokenInterceptor,
         retryInterceptor: RetryInterceptor
     ): OkHttpClient {
         return OkHttpClient.Builder()
             .addInterceptor(authInterceptor)
-            .addInterceptor(csrfTokenInterceptor)
             .addInterceptor(retryInterceptor)
             .addInterceptor(loggingInterceptor)
             .connectTimeout(30, TimeUnit.SECONDS)
diff --git a/app/src/main/java/app/forku/di/RepositoryModule.kt b/app/src/main/java/app/forku/di/RepositoryModule.kt
index eaf3cae..0abd65a 100644
--- a/app/src/main/java/app/forku/di/RepositoryModule.kt
+++ b/app/src/main/java/app/forku/di/RepositoryModule.kt
@@ -41,6 +41,11 @@ import dagger.Provides
 import dagger.hilt.InstallIn
 import dagger.hilt.components.SingletonComponent
 import javax.inject.Singleton
+import app.forku.data.repository.gogroup.*
+import app.forku.domain.repository.gogroup.*
+import app.forku.data.api.UserBusinessApi
+import app.forku.data.repository.user.UserBusinessRepositoryImpl
+import app.forku.domain.repository.user.UserBusinessRepository
 
 @Module
 @InstallIn(SingletonComponent::class)
@@ -99,105 +104,134 @@ abstract class RepositoryModule {
         siteRepositoryImpl: SiteRepositoryImpl
     ): SiteRepository
 
-    companion object {
-        @Provides
-        @Singleton
-        fun provideGson(): Gson = GsonBuilder().create()
-
-        @Provides
-        @Singleton
-        fun provideVehicleStatusUpdater(
-            api: VehicleApi
-        ): VehicleStatusUpdater = VehicleStatusUpdaterImpl(api)
-
-        @Provides
-        @Singleton
-        fun provideSessionStatusChecker(
-            api: VehicleSessionApi
-        ): SessionStatusChecker = VehicleSessionStatusCheckerImpl(api)
-
-        @Provides
-        @Singleton
-        fun provideVehicleStatusDeterminer(): VehicleStatusDeterminer = 
-            VehicleStatusDeterminerImpl()
-
-        @Provides
-        @Singleton
-        fun provideChecklistStatusNotifier(
-            vehicleStatusUpdater: VehicleStatusUpdater,
-            vehicleStatusDeterminer: VehicleStatusDeterminer,
-            authDataStore: AuthDataStore
-        ): ChecklistStatusNotifier = ChecklistStatusNotifierImpl(
-            vehicleStatusUpdater = vehicleStatusUpdater,
-            vehicleStatusDeterminer = vehicleStatusDeterminer,
-            authDataStore = authDataStore
-        )
-
-        @Provides
-        @Singleton
-        fun provideChecklistRepository(
-            api: ChecklistApi,
-            authDataStore: AuthDataStore,
-            validateChecklistUseCase: ValidateChecklistUseCase,
-            checklistStatusNotifier: ChecklistStatusNotifier,
-            locationManager: LocationManager
-        ): ChecklistRepository = ChecklistRepositoryImpl(
-            api = api,
-            authDataStore = authDataStore,
-            validateChecklistUseCase = validateChecklistUseCase,
-            checklistStatusNotifier = checklistStatusNotifier,
-            locationManager = locationManager
-        )
-
-        @Provides
-        @Singleton
-        fun provideVehicleValidationService(
-            sessionStatusChecker: SessionStatusChecker,
-            checklistRepository: ChecklistRepository,
-            vehicleStatusDeterminer: VehicleStatusDeterminer
-        ): VehicleValidationService = VehicleValidationServiceImpl(
-            sessionStatusChecker = sessionStatusChecker,
-            checklistRepository = checklistRepository,
-            vehicleStatusDeterminer = vehicleStatusDeterminer
-        )
-
-        @Provides
-        @Singleton
-        fun provideVehicleStatusRepository(
-            vehicleValidationService: VehicleValidationService,
-            vehicleStatusUpdater: VehicleStatusUpdater
-        ): VehicleStatusRepository = VehicleStatusRepositoryImpl(
-            vehicleValidationService, 
-            vehicleStatusUpdater
-        )
-
-        @Provides
-        @Singleton
-        fun provideSessionRepository(
-            api: VehicleSessionApi,
-            authDataStore: AuthDataStore,
-            vehicleStatusRepository: VehicleStatusRepository,
-            checklistRepository: ChecklistRepository,
-            locationManager: LocationManager
-        ): VehicleSessionRepository = VehicleSessionRepositoryImpl(
-            api = api,
-            authDataStore = authDataStore,
-            vehicleStatusRepository = vehicleStatusRepository,
-            checklistRepository = checklistRepository,
-            locationManager = locationManager
-        )
-
-        @Provides
-        @Singleton
-        fun provideIncidentRepository(
-            api: IncidentApi,
-            authDataStore: AuthDataStore
-        ): IncidentRepository = IncidentRepositoryImpl(api, authDataStore)
-
-        @Provides
-        @Singleton
-        fun provideVehicleStatusChecker(
-            vehicleStatusRepository: VehicleStatusRepository
-        ): VehicleStatusChecker = vehicleStatusRepository
+    @Binds
+    @Singleton
+    abstract fun bindGOGroupRepository(
+        repository: GOGroupRepositoryImpl
+    ): GOGroupRepository
+
+    @Binds
+    @Singleton
+    abstract fun bindGOGroupRoleRepository(
+        repository: GOGroupRoleRepositoryImpl
+    ): GOGroupRoleRepository
+
+    @Binds
+    @Singleton
+    abstract fun bindGOFileUploaderRepository(
+        repository: GOFileUploaderRepositoryImpl
+    ): GOFileUploaderRepository
+}
+
+@Module
+@InstallIn(SingletonComponent::class)
+object RepositoryProvidersModule {
+    @Provides
+    @Singleton
+    fun provideUserBusinessRepository(
+        userBusinessApi: UserBusinessApi,
+        userRepository: UserRepository
+    ): UserBusinessRepository {
+        return UserBusinessRepositoryImpl(userBusinessApi, userRepository)
     }
+
+    @Provides
+    @Singleton
+    fun provideGson(): Gson = GsonBuilder().create()
+
+    @Provides
+    @Singleton
+    fun provideVehicleStatusUpdater(
+        api: VehicleApi
+    ): VehicleStatusUpdater = VehicleStatusUpdaterImpl(api)
+
+    @Provides
+    @Singleton
+    fun provideSessionStatusChecker(
+        api: VehicleSessionApi
+    ): SessionStatusChecker = VehicleSessionStatusCheckerImpl(api)
+
+    @Provides
+    @Singleton
+    fun provideVehicleStatusDeterminer(): VehicleStatusDeterminer = 
+        VehicleStatusDeterminerImpl()
+
+    @Provides
+    @Singleton
+    fun provideChecklistStatusNotifier(
+        vehicleStatusUpdater: VehicleStatusUpdater,
+        vehicleStatusDeterminer: VehicleStatusDeterminer,
+        authDataStore: AuthDataStore
+    ): ChecklistStatusNotifier = ChecklistStatusNotifierImpl(
+        vehicleStatusUpdater = vehicleStatusUpdater,
+        vehicleStatusDeterminer = vehicleStatusDeterminer,
+        authDataStore = authDataStore
+    )
+
+    @Provides
+    @Singleton
+    fun provideChecklistRepository(
+        api: ChecklistApi,
+        authDataStore: AuthDataStore,
+        validateChecklistUseCase: ValidateChecklistUseCase,
+        checklistStatusNotifier: ChecklistStatusNotifier,
+        locationManager: LocationManager
+    ): ChecklistRepository = ChecklistRepositoryImpl(
+        api = api,
+        authDataStore = authDataStore,
+        validateChecklistUseCase = validateChecklistUseCase,
+        checklistStatusNotifier = checklistStatusNotifier,
+        locationManager = locationManager
+    )
+
+    @Provides
+    @Singleton
+    fun provideVehicleValidationService(
+        sessionStatusChecker: SessionStatusChecker,
+        checklistRepository: ChecklistRepository,
+        vehicleStatusDeterminer: VehicleStatusDeterminer
+    ): VehicleValidationService = VehicleValidationServiceImpl(
+        sessionStatusChecker = sessionStatusChecker,
+        checklistRepository = checklistRepository,
+        vehicleStatusDeterminer = vehicleStatusDeterminer
+    )
+
+    @Provides
+    @Singleton
+    fun provideVehicleStatusRepository(
+        vehicleValidationService: VehicleValidationService,
+        vehicleStatusUpdater: VehicleStatusUpdater
+    ): VehicleStatusRepository = VehicleStatusRepositoryImpl(
+        vehicleValidationService, 
+        vehicleStatusUpdater
+    )
+
+    @Provides
+    @Singleton
+    fun provideSessionRepository(
+        api: VehicleSessionApi,
+        authDataStore: AuthDataStore,
+        vehicleStatusRepository: VehicleStatusRepository,
+        checklistRepository: ChecklistRepository,
+        locationManager: LocationManager
+    ): VehicleSessionRepository = VehicleSessionRepositoryImpl(
+        api = api,
+        authDataStore = authDataStore,
+        vehicleStatusRepository = vehicleStatusRepository,
+        checklistRepository = checklistRepository,
+        locationManager = locationManager
+    )
+
+    @Provides
+    @Singleton
+    fun provideIncidentRepository(
+        api: IncidentApi,
+        authDataStore: AuthDataStore
+    ): IncidentRepository = IncidentRepositoryImpl(api, authDataStore)
+
+    @Provides
+    @Singleton
+    fun provideVehicleStatusChecker(
+        vehicleStatusRepository: VehicleStatusRepository
+    ): VehicleStatusChecker = vehicleStatusRepository
 }
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/di/UseCaseModule.kt b/app/src/main/java/app/forku/di/UseCaseModule.kt
index 19fd777..1267889 100644
--- a/app/src/main/java/app/forku/di/UseCaseModule.kt
+++ b/app/src/main/java/app/forku/di/UseCaseModule.kt
@@ -18,6 +18,10 @@ import app.forku.domain.usecase.checklist.ValidateChecklistUseCase
 
 import app.forku.domain.usecase.user.LoginUseCase
 import app.forku.domain.usecase.vehicle.GetVehicleActiveSessionUseCase
+import app.forku.domain.repository.gogroup.*
+import app.forku.domain.usecase.gogroup.group.*
+import app.forku.domain.usecase.gogroup.role.*
+import app.forku.domain.usecase.gogroup.file.*
 import dagger.Module
 import dagger.Provides
 import dagger.hilt.InstallIn
@@ -107,4 +111,34 @@ object UseCaseModule {
     ): LoginUseCase {
         return LoginUseCase(userRepository)
     }
+
+    @Provides
+    @Singleton
+    fun provideGetGroupsUseCase(
+        repository: GOGroupRepository
+    ): GetGroupsUseCase = GetGroupsUseCase(repository)
+
+    @Provides
+    @Singleton
+    fun provideManageGroupUseCase(
+        repository: GOGroupRepository
+    ): ManageGroupUseCase = ManageGroupUseCase(repository)
+
+    @Provides
+    @Singleton
+    fun provideGetGroupRolesUseCase(
+        repository: GOGroupRoleRepository
+    ): GetGroupRolesUseCase = GetGroupRolesUseCase(repository)
+
+    @Provides
+    @Singleton
+    fun provideManageGroupRoleUseCase(
+        repository: GOGroupRoleRepository
+    ): ManageGroupRoleUseCase = ManageGroupRoleUseCase(repository)
+
+    @Provides
+    @Singleton
+    fun provideUploadFileUseCase(
+        repository: GOFileUploaderRepository
+    ): UploadFileUseCase = UploadFileUseCase(repository)
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/domain/model/country/State.kt b/app/src/main/java/app/forku/domain/model/country/CountryState.kt
similarity index 86%
rename from app/src/main/java/app/forku/domain/model/country/State.kt
rename to app/src/main/java/app/forku/domain/model/country/CountryState.kt
index 06ea42c..c1ee5b3 100644
--- a/app/src/main/java/app/forku/domain/model/country/State.kt
+++ b/app/src/main/java/app/forku/domain/model/country/CountryState.kt
@@ -1,6 +1,6 @@
 package app.forku.domain.model.country
 
-data class State(
+data class CountryState(
     val id: String,
     val countryId: String,
     val name: String,
diff --git a/app/src/main/java/app/forku/domain/model/user/Certification.kt b/app/src/main/java/app/forku/domain/model/user/Certification.kt
deleted file mode 100644
index b8f74d1..0000000
--- a/app/src/main/java/app/forku/domain/model/user/Certification.kt
+++ /dev/null
@@ -1,7 +0,0 @@
-package app.forku.domain.model.user
-
-data class Certification(
-    val vehicleTypeId: String,
-    val isValid: Boolean,
-    val expiresAt: String
-) 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/domain/model/user/Operator.kt b/app/src/main/java/app/forku/domain/model/user/Operator.kt
index 4486605..b31f4a9 100644
--- a/app/src/main/java/app/forku/domain/model/user/Operator.kt
+++ b/app/src/main/java/app/forku/domain/model/user/Operator.kt
@@ -1,6 +1,7 @@
 package app.forku.domain.model.user
 
 import app.forku.domain.model.vehicle.VehicleType
+import app.forku.domain.model.certification.Certification
 
 data class Operator(
     val user: User,
@@ -22,19 +23,5 @@ data class Operator(
     val role: UserRole get() = user.role
     val certifications: List<Certification> get() = user.certifications
 
-    fun canOperateVehicle(vehicleType: VehicleType): Boolean {
-        return isCertified && certifications.any {
-            it.vehicleTypeId == vehicleType.id && it.isValid
-        }
-    }
-
-    fun hasValidMedicalCheck(): Boolean {
-        return !lastMedicalCheck.isNullOrEmpty()
-    }
-
-    fun isQualifiedForTraining(): Boolean {
-        return experienceYears >= 2 && isCertified
-    }
-
 
 }
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/domain/model/user/User.kt b/app/src/main/java/app/forku/domain/model/user/User.kt
index 1522aee..61ae6f9 100644
--- a/app/src/main/java/app/forku/domain/model/user/User.kt
+++ b/app/src/main/java/app/forku/domain/model/user/User.kt
@@ -1,5 +1,7 @@
 package app.forku.domain.model.user
 
+import app.forku.domain.model.certification.Certification
+
 data class User(
     val id: String,
     val token: String,
diff --git a/app/src/main/java/app/forku/domain/repository/IGOSecurityProviderRepository.kt b/app/src/main/java/app/forku/domain/repository/IGOSecurityProviderRepository.kt
index 7d0a6d0..19453de 100644
--- a/app/src/main/java/app/forku/domain/repository/IGOSecurityProviderRepository.kt
+++ b/app/src/main/java/app/forku/domain/repository/IGOSecurityProviderRepository.kt
@@ -1,6 +1,8 @@
 package app.forku.domain.repository
 
+import app.forku.domain.model.user.User
+
 interface IGOSecurityProviderRepository {
-    suspend fun authenticate(username: String, password: String): Result<String>
+    suspend fun authenticate(username: String, password: String): Result<User>
     suspend fun logout()
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/domain/repository/IGOServicesRepository.kt b/app/src/main/java/app/forku/domain/repository/IGOServicesRepository.kt
index 3bfa435..90b04a6 100644
--- a/app/src/main/java/app/forku/domain/repository/IGOServicesRepository.kt
+++ b/app/src/main/java/app/forku/domain/repository/IGOServicesRepository.kt
@@ -1,7 +1,7 @@
 package app.forku.domain.repository
 
 interface IGOServicesRepository {
-    suspend fun getCsrfToken(): Result<String>
+    suspend fun getCsrfTokenAndCookie(): Result<Pair<String?, String?>>
     suspend fun getStoredCsrfToken(): String?
     suspend fun clearCsrfToken()
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/domain/repository/business/BusinessRepository.kt b/app/src/main/java/app/forku/domain/repository/business/BusinessRepository.kt
index 3dcd22d..d7d6e36 100644
--- a/app/src/main/java/app/forku/domain/repository/business/BusinessRepository.kt
+++ b/app/src/main/java/app/forku/domain/repository/business/BusinessRepository.kt
@@ -1,7 +1,10 @@
 package app.forku.domain.repository.business
 
-import app.forku.data.api.dto.BusinessStats
+import app.forku.data.api.dto.business.BusinessStats
+import app.forku.domain.model.business.BusinessStatus
 import app.forku.presentation.dashboard.Business
+import app.forku.domain.model.user.User
+import app.forku.data.api.dto.business.BusinessConfigurationDto
 
 interface BusinessRepository {
     suspend fun getAllBusinesses(): List<Business>
@@ -9,14 +12,26 @@ interface BusinessRepository {
     suspend fun createBusiness(name: String): Business
     suspend fun updateBusiness(business: Business): Business
     suspend fun deleteBusiness(id: String)
+    
+    // User-Business relationship methods
     suspend fun assignUserToBusiness(userId: String, businessId: String)
     suspend fun removeUserFromBusiness(userId: String, businessId: String)
     suspend fun getBusinessUsers(businessId: String): List<String>
+    suspend fun getUserBusinesses(userId: String): List<Business>
+    
+    // Business management methods
     suspend fun getBusinessVehicles(businessId: String): List<String>
-    suspend fun getBusinessesBySystemOwnerId(systemOwnerId: String): List<Business>
+    suspend fun getBusinessStats(businessId: String): BusinessStats
+    
+    // Role-based access methods
+    suspend fun validateUserAccess(userId: String, businessId: String): Boolean
+    suspend fun validateAdminAccess(userId: String, businessId: String): Boolean
+    suspend fun validateSuperAdminAccess(superAdminId: String, businessId: String?): Boolean
+    suspend fun validateSystemOwnerAccess(systemOwnerId: String): Boolean
+    suspend fun getBusinessesByRole(user: User): List<Business>
     suspend fun getBusinessesBySuperAdminId(superAdminId: String): List<Business>
     suspend fun transferBusinessToSuperAdmin(businessId: String, newSuperAdminId: String)
-    suspend fun validateSuperAdminAccess(superAdminId: String, businessId: String?): Boolean
-    suspend fun getSystemOwnerBusinessStats(systemOwnerId: String): BusinessStats
-    suspend fun getSuperAdminBusinessStats(superAdminId: String): BusinessStats
+    
+    // Business status management
+    suspend fun updateBusinessStatus(businessId: String, newStatus: BusinessStatus)
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/domain/repository/country/StateRepository.kt b/app/src/main/java/app/forku/domain/repository/country/StateRepository.kt
index 21bd709..d7dcd1a 100644
--- a/app/src/main/java/app/forku/domain/repository/country/StateRepository.kt
+++ b/app/src/main/java/app/forku/domain/repository/country/StateRepository.kt
@@ -1,12 +1,12 @@
 package app.forku.domain.repository.country
 
-import app.forku.domain.model.country.State
+import app.forku.domain.model.country.CountryState
 
 interface StateRepository {
-    suspend fun getAllStates(): List<State>
-    suspend fun getStatesByCountry(countryId: String): List<State>
-    suspend fun getStateById(id: String): State
-    suspend fun createState(state: State)
-    suspend fun updateState(state: State)
+    suspend fun getAllStates(): List<CountryState>
+    suspend fun getStatesByCountry(countryId: String): List<CountryState>
+    suspend fun getStateById(id: String): CountryState
+    suspend fun createState(countryState: CountryState)
+    suspend fun updateState(countryState: CountryState)
     suspend fun deleteState(id: String)
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/domain/repository/site/SiteRepository.kt b/app/src/main/java/app/forku/domain/repository/site/SiteRepository.kt
index 4e21478..f3c45ad 100644
--- a/app/src/main/java/app/forku/domain/repository/site/SiteRepository.kt
+++ b/app/src/main/java/app/forku/domain/repository/site/SiteRepository.kt
@@ -3,9 +3,9 @@ package app.forku.domain.repository.site
 import app.forku.data.api.dto.site.SiteDto
 
 interface SiteRepository {
-    suspend fun getSitesByBusiness(businessId: String): List<SiteDto>
-    suspend fun getSiteById(businessId: String, id: String): SiteDto
-    suspend fun createSite(businessId: String, site: SiteDto): SiteDto
-    suspend fun updateSite(businessId: String, siteId: String, site: SiteDto): SiteDto
-    suspend fun deleteSite(businessId: String, siteId: String)
+    suspend fun getAllSites(): List<SiteDto>
+    suspend fun getSiteById(id: String): SiteDto
+    suspend fun saveSite(site: SiteDto): SiteDto
+    suspend fun deleteSite(id: String)
+    suspend fun getSiteCount(): Int
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/domain/repository/user/UserRepository.kt b/app/src/main/java/app/forku/domain/repository/user/UserRepository.kt
index 1947513..204ad59 100644
--- a/app/src/main/java/app/forku/domain/repository/user/UserRepository.kt
+++ b/app/src/main/java/app/forku/domain/repository/user/UserRepository.kt
@@ -50,4 +50,10 @@ interface UserRepository {
     suspend fun getCurrentUserId(): String?
 
     suspend fun getUnassignedUsers(): List<User>
+    
+    /**
+     * Get the total count of users in the system
+     * @return The number of users or null if there was an error
+     */
+    suspend fun getUserCount(): Int?
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/domain/usecase/GetCsrfTokenUseCase.kt b/app/src/main/java/app/forku/domain/usecase/GetCsrfTokenUseCase.kt
deleted file mode 100644
index 1875d70..0000000
--- a/app/src/main/java/app/forku/domain/usecase/GetCsrfTokenUseCase.kt
+++ /dev/null
@@ -1,12 +0,0 @@
-package app.forku.domain.usecase
-
-import app.forku.domain.repository.IGOServicesRepository
-import javax.inject.Inject
-
-class GetCsrfTokenUseCase @Inject constructor(
-    private val repository: IGOServicesRepository
-) {
-    suspend operator fun invoke(): Result<String> {
-        return repository.getCsrfToken()
-    }
-} 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/domain/usecase/security/AuthenticateUseCase.kt b/app/src/main/java/app/forku/domain/usecase/security/AuthenticateUseCase.kt
index d7c3b23..17ba8d6 100644
--- a/app/src/main/java/app/forku/domain/usecase/security/AuthenticateUseCase.kt
+++ b/app/src/main/java/app/forku/domain/usecase/security/AuthenticateUseCase.kt
@@ -2,58 +2,59 @@ package app.forku.domain.usecase.security
 
 import android.util.Log
 import app.forku.data.service.GOServicesManager
+import app.forku.domain.model.user.User
 import app.forku.domain.repository.IGOSecurityProviderRepository
 import kotlinx.coroutines.flow.Flow
 import kotlinx.coroutines.flow.flow
 import javax.inject.Inject
 
-sealed class AuthenticationState {
-    data object Loading : AuthenticationState()
-    data class Success(val token: String) : AuthenticationState()
-    data class Error(val message: String) : AuthenticationState()
-}
-
 class AuthenticateUseCase @Inject constructor(
     private val goServicesManager: GOServicesManager,
     private val securityProviderRepository: IGOSecurityProviderRepository
 ) {
     suspend operator fun invoke(username: String, password: String): Flow<AuthenticationState> = flow {
+        Log.d("AuthUseCase", "Starting authentication flow for user: $username")
         emit(AuthenticationState.Loading)
         
         try {
-            // Step 1: Get or refresh CSRF token
-            Log.d("AuthenticateUseCase", "Getting CSRF token...")
-            goServicesManager.getOrRefreshCsrfToken()
-                .onSuccess {
-                    Log.d("AuthenticateUseCase", "CSRF token obtained successfully")
+            Log.d("AuthUseCase", "Refreshing CSRF token...")
+            // Force refresh CSRF token before authentication
+            goServicesManager.getCsrfToken(forceRefresh = true).fold(
+                onSuccess = { token ->
+                    Log.d("AuthUseCase", "CSRF token refreshed successfully: ${token.take(10)}...")
                     
-                    // Step 2: Authenticate with GO Security Provider
-                    Log.d("AuthenticateUseCase", "Proceeding with GO Security Provider authentication...")
-                    securityProviderRepository.authenticate(username, password)
-                        .onSuccess { token ->
-                            Log.d("AuthenticateUseCase", "Authentication successful")
-                            emit(AuthenticationState.Success(token))
-                        }
-                        .onFailure { error ->
-                            Log.e("AuthenticateUseCase", "Authentication failed", error)
+                    Log.d("AuthUseCase", "Attempting authentication with security provider...")
+                    securityProviderRepository.authenticate(username, password).fold(
+                        onSuccess = { user ->
+                            Log.d("AuthUseCase", """
+                                Authentication successful:
+                                - User: ${user.username}
+                                - Role: ${user.role}
+                                - Token length: ${user.token.length}
+                            """.trimIndent())
+                            emit(AuthenticationState.Success(user))
+                        },
+                        onFailure = { error ->
+                            Log.e("AuthUseCase", "Authentication failed", error)
                             emit(AuthenticationState.Error(error.message ?: "Authentication failed"))
-                            // Clear CSRF token on authentication failure
-                            goServicesManager.clearToken()
                         }
+                    )
+                },
+                onFailure = { error ->
+                    Log.e("AuthUseCase", "Failed to get CSRF token", error)
+                    emit(AuthenticationState.Error("Failed to get CSRF token: ${error.message}"))
                 }
-                .onFailure { error ->
-                    Log.e("AuthenticateUseCase", "Failed to obtain CSRF token", error)
-                    emit(AuthenticationState.Error(error.message ?: "Failed to obtain CSRF token"))
-                }
-                
+            )
         } catch (e: Exception) {
-            Log.e("AuthenticateUseCase", "Unexpected error during authentication", e)
-            emit(AuthenticationState.Error(e.message ?: "Unexpected error during authentication"))
+            Log.e("AuthUseCase", "Exception during authentication", e)
+            emit(AuthenticationState.Error(e.message ?: "Unknown error during authentication"))
         }
     }
 
     suspend fun logout() {
+        Log.d("AuthUseCase", "Logging out user...")
         securityProviderRepository.logout()
-        goServicesManager.clearToken()
+        goServicesManager.clearCsrfToken()
+        Log.d("AuthUseCase", "Logout completed")
     }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/domain/usecase/security/AuthenticateWithGOSecurityProviderUseCase.kt b/app/src/main/java/app/forku/domain/usecase/security/AuthenticateWithGOSecurityProviderUseCase.kt
index 3cc055d..05065f0 100644
--- a/app/src/main/java/app/forku/domain/usecase/security/AuthenticateWithGOSecurityProviderUseCase.kt
+++ b/app/src/main/java/app/forku/domain/usecase/security/AuthenticateWithGOSecurityProviderUseCase.kt
@@ -1,12 +1,13 @@
 package app.forku.domain.usecase.security
 
+import app.forku.domain.model.user.User
 import app.forku.domain.repository.IGOSecurityProviderRepository
 import javax.inject.Inject
 
 class AuthenticateWithGOSecurityProviderUseCase @Inject constructor(
     private val repository: IGOSecurityProviderRepository
 ) {
-    suspend operator fun invoke(username: String, password: String): Result<String> {
+    suspend operator fun invoke(username: String, password: String): Result<User> {
         return repository.authenticate(username, password)
     }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/domain/usecase/security/AuthenticationState.kt b/app/src/main/java/app/forku/domain/usecase/security/AuthenticationState.kt
new file mode 100644
index 0000000..9687c9d
--- /dev/null
+++ b/app/src/main/java/app/forku/domain/usecase/security/AuthenticationState.kt
@@ -0,0 +1,9 @@
+package app.forku.domain.usecase.security
+
+import app.forku.domain.model.user.User
+
+sealed class AuthenticationState {
+    data object Loading : AuthenticationState()
+    data class Success(val user: User) : AuthenticationState()
+    data class Error(val message: String) : AuthenticationState()
+}
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/presentation/auth/AuthState.kt b/app/src/main/java/app/forku/presentation/auth/AuthState.kt
index 55552c3..7fa41aa 100644
--- a/app/src/main/java/app/forku/presentation/auth/AuthState.kt
+++ b/app/src/main/java/app/forku/presentation/auth/AuthState.kt
@@ -1,8 +1,11 @@
 package app.forku.presentation.auth
 
+import app.forku.domain.model.user.User
+
 data class AuthState(
     val isLoading: Boolean = false,
     val isAuthenticated: Boolean = false,
     val token: String? = null,
+    val user: User? = null,
     val error: String? = null
 ) 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/presentation/auth/AuthViewModel.kt b/app/src/main/java/app/forku/presentation/auth/AuthViewModel.kt
index 6a3465f..c72c46f 100644
--- a/app/src/main/java/app/forku/presentation/auth/AuthViewModel.kt
+++ b/app/src/main/java/app/forku/presentation/auth/AuthViewModel.kt
@@ -2,6 +2,7 @@ package app.forku.presentation.auth
 
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
+import app.forku.domain.model.user.User
 import app.forku.domain.usecase.security.AuthenticateUseCase
 import app.forku.domain.usecase.security.AuthenticationState
 import dagger.hilt.android.lifecycle.HiltViewModel
@@ -35,7 +36,8 @@ class AuthViewModel @Inject constructor(
                                 state.value.copy(
                                     isLoading = false,
                                     isAuthenticated = true,
-                                    token = authState.token,
+                                    token = authState.user.token,
+                                    user = authState.user,
                                     error = null
                                 )
                             }
diff --git a/app/src/main/java/app/forku/presentation/business/BusinessManagementScreen.kt b/app/src/main/java/app/forku/presentation/business/BusinessManagementScreen.kt
index 8c21b32..9e54b98 100644
--- a/app/src/main/java/app/forku/presentation/business/BusinessManagementScreen.kt
+++ b/app/src/main/java/app/forku/presentation/business/BusinessManagementScreen.kt
@@ -18,7 +18,7 @@ import app.forku.core.network.NetworkConnectivityManager
 import app.forku.presentation.common.components.BaseScreen
 import app.forku.presentation.dashboard.SuperAdminDashboardState
 import app.forku.presentation.dashboard.Business
-import app.forku.presentation.dashboard.BusinessStatus
+import app.forku.domain.model.business.BusinessStatus
 import androidx.compose.material.ExperimentalMaterialApi
 import androidx.compose.material.pullrefresh.PullRefreshIndicator
 import androidx.compose.material.pullrefresh.pullRefresh
@@ -148,8 +148,8 @@ fun BusinessManagementScreen(
                             items(state.value.businesses) { business ->
                                 BusinessCard(
                                     business = business,
-                                    onStatusChange = { b, newStatus -> 
-                                        viewModel.updateBusinessStatus(b, newStatus)
+                                    onStatusChange = { business: Business, newStatus: BusinessStatus -> 
+                                        viewModel.updateBusinessStatus(business, newStatus)
                                     },
                                     onAssignUsers = { b -> viewModel.showAssignUsersDialog(b) },
                                     currentUser = currentUser.value,
@@ -266,7 +266,7 @@ private fun BusinessCard(
     var showStatusMenu by remember { mutableStateOf(false) }
     var showAssignSuperAdminDialog by remember { mutableStateOf(false) }
     val businessSuperAdmins by viewModel.businessSuperAdmins.collectAsState()
-    val superAdmin = businessSuperAdmins[business.id]
+    val currentSuperAdmin = businessSuperAdmins[business.id]
     
     Card(
         modifier = Modifier.fillMaxWidth(),
@@ -333,7 +333,7 @@ private fun BusinessCard(
                     }
 
                     // SuperAdmin info
-                    if (superAdmin != null) {
+                    if (currentSuperAdmin != null) {
                         Row(
                             verticalAlignment = Alignment.CenterVertically,
                             horizontalArrangement = Arrangement.spacedBy(4.dp)
@@ -345,7 +345,7 @@ private fun BusinessCard(
                                 tint = Color.Gray
                             )
                             Text(
-                                text = "${superAdmin.firstName} ${superAdmin.lastName}",
+                                text = "${currentSuperAdmin.firstName} ${currentSuperAdmin.lastName}",
                                 color = Color.Gray,
                                 fontSize = 14.sp,
                                 maxLines = 1
@@ -480,7 +480,7 @@ private fun BusinessCard(
                 }
                 
                 if (currentUser?.role == UserRole.SYSTEM_OWNER || 
-                    (currentUser?.role == UserRole.SUPERADMIN && business.superAdminId == currentUser.id)) {
+                    (currentUser?.role == UserRole.SUPERADMIN && currentSuperAdmin?.id == currentUser.id)) {
                     IconButton(
                         onClick = { onAssignUsers(business) },
                         modifier = Modifier.size(32.dp)
diff --git a/app/src/main/java/app/forku/presentation/business/BusinessManagementViewModel.kt b/app/src/main/java/app/forku/presentation/business/BusinessManagementViewModel.kt
index 13579f9..83ede54 100644
--- a/app/src/main/java/app/forku/presentation/business/BusinessManagementViewModel.kt
+++ b/app/src/main/java/app/forku/presentation/business/BusinessManagementViewModel.kt
@@ -5,21 +5,23 @@ import androidx.lifecycle.viewModelScope
 import app.forku.domain.model.user.User
 import app.forku.domain.repository.business.BusinessRepository
 import app.forku.domain.repository.user.UserRepository
-import app.forku.domain.usecase.user.GetCurrentUserUseCase
+import app.forku.domain.model.business.BusinessStatus
 import app.forku.presentation.dashboard.Business
-import app.forku.presentation.dashboard.BusinessStatus
 import dagger.hilt.android.lifecycle.HiltViewModel
 import kotlinx.coroutines.flow.*
 import kotlinx.coroutines.launch
 import javax.inject.Inject
 import android.util.Log
+import app.forku.data.datastore.AuthDataStore
 import app.forku.domain.model.user.UserRole
+import app.forku.domain.repository.user.UserBusinessRepository
 
 @HiltViewModel
 class BusinessManagementViewModel @Inject constructor(
     private val businessRepository: BusinessRepository,
     private val userRepository: UserRepository,
-    private val getCurrentUserUseCase: GetCurrentUserUseCase
+    private val userBusinessRepository: UserBusinessRepository,
+    private val authDataStore: AuthDataStore
 ) : ViewModel() {
 
     private val _state = MutableStateFlow(BusinessManagementState())
@@ -31,8 +33,17 @@ class BusinessManagementViewModel @Inject constructor(
     private val _availableSuperAdmins = MutableStateFlow<List<User>>(emptyList())
     val availableSuperAdmins: StateFlow<List<User>> = _availableSuperAdmins.asStateFlow()
 
-    private val _businessSuperAdmins = MutableStateFlow<Map<String, User?>>(emptyMap())
-    val businessSuperAdmins: StateFlow<Map<String, User?>> = _businessSuperAdmins.asStateFlow()
+    private val _businesses = MutableStateFlow<List<Business>>(emptyList())
+    val businesses = _businesses.asStateFlow()
+
+    private val _businessSuperAdmins = MutableStateFlow<Map<String, User>>(emptyMap())
+    val businessSuperAdmins = _businessSuperAdmins.asStateFlow()
+
+    private val _loading = MutableStateFlow(false)
+    val loading = _loading.asStateFlow()
+
+    private val _error = MutableStateFlow<String?>(null)
+    val error = _error.asStateFlow()
 
     init {
         loadCurrentUser()
@@ -43,7 +54,7 @@ class BusinessManagementViewModel @Inject constructor(
     private fun loadCurrentUser() {
         viewModelScope.launch {
             try {
-                val user = getCurrentUserUseCase.invoke()
+                val user = userRepository.getCurrentUser()
                 _currentUser.value = user
                 Log.d("BusinessManagement", "Current user loaded: ${user?.role}")
             } catch (e: Exception) {
@@ -65,65 +76,26 @@ class BusinessManagementViewModel @Inject constructor(
         }
     }
 
-    private fun loadBusinessSuperAdmins(businesses: List<Business>) {
+    fun loadBusinesses() {
         viewModelScope.launch {
+            _loading.value = true
             try {
-                val superAdminsMap = mutableMapOf<String, User?>()
-                businesses.forEach { business ->
-                    if (business.superAdminId != null) {
-                        val superAdmin = userRepository.getUserById(business.superAdminId)
+                val businessList = businessRepository.getAllBusinesses()
+                _businesses.value = businessList
+                
+                // Load SuperAdmins for each business
+                val superAdminsMap = mutableMapOf<String, User>()
+                businessList.forEach { business ->
+                    userBusinessRepository.getBusinessSuperAdmin(business.id)?.let { superAdmin ->
                         superAdminsMap[business.id] = superAdmin
                     }
                 }
                 _businessSuperAdmins.value = superAdminsMap
-                Log.d("BusinessManagement", "Loaded SuperAdmins for ${superAdminsMap.size} businesses")
-            } catch (e: Exception) {
-                Log.e("BusinessManagement", "Error loading business SuperAdmins", e)
-            }
-        }
-    }
-
-    fun loadBusinesses() {
-        viewModelScope.launch {
-            try {
-                Log.d("BusinessManagement", "Starting loadBusinesses function")
-                _state.update { it.copy(isLoading = true, error = null) }
                 
-                val businesses = businessRepository.getAllBusinesses()
-                Log.d("BusinessManagement", "Successfully loaded ${businesses.size} businesses")
-                
-                // Load SuperAdmins for businesses
-                loadBusinessSuperAdmins(businesses)
-                
-                // Get unassigned users excluding SYSTEM_OWNER and SUPERADMIN
-                val unassignedUsers = userRepository.getUnassignedUsers()
-                    .count { user -> 
-                        user.role != UserRole.SYSTEM_OWNER && 
-                        user.role != UserRole.SUPERADMIN 
-                    }
-                Log.d("BusinessManagement", "Unassigned users (excluding SYSTEM_OWNER and SUPERADMIN): $unassignedUsers")
-                
-                val totalBusinesses = businesses.size
-                val pendingApprovals = businesses.count { it.status == BusinessStatus.PENDING }
-                
-                _state.update { currentState ->
-                    currentState.copy(
-                        isLoading = false,
-                        businesses = businesses,
-                        totalBusinesses = totalBusinesses,
-                        pendingApprovals = pendingApprovals,
-                        unassignedUsers = unassignedUsers,
-                        error = null
-                    )
-                }
             } catch (e: Exception) {
-                Log.e("BusinessManagement", "Error in loadBusinesses", e)
-                _state.update { 
-                    it.copy(
-                        isLoading = false,
-                        error = "Failed to load businesses: ${e.message}"
-                    )
-                }
+                _error.value = "Failed to load businesses: ${e.message}"
+            } finally {
+                _loading.value = false
             }
         }
     }
@@ -163,34 +135,13 @@ class BusinessManagementViewModel @Inject constructor(
     fun updateBusinessStatus(business: Business, newStatus: BusinessStatus) {
         viewModelScope.launch {
             try {
-                Log.d("BusinessManagement", "Updating business ${business.id} status to $newStatus")
-                _state.update { it.copy(isLoading = true, error = null) }
-                
-                val currentUser = getCurrentUserUseCase.invoke()
-                if (currentUser?.role != UserRole.SYSTEM_OWNER) {
-                    Log.e("BusinessManagement", "Unauthorized attempt to change business status by role: ${currentUser?.role}")
-                    _state.update { 
-                        it.copy(
-                            isLoading = false,
-                            error = "Only System Owner can change business status"
-                        )
-                    }
-                    return@launch
+                businessRepository.updateBusinessStatus(business.id, newStatus)
+                // Update local state
+                _businesses.value = _businesses.value.map { 
+                    if (it.id == business.id) it.copy(status = newStatus) else it 
                 }
-
-                val updatedBusiness = business.copy(status = newStatus)
-                businessRepository.updateBusiness(updatedBusiness)
-                
-                Log.d("BusinessManagement", "Business status updated successfully")
-                loadBusinesses() // Reload the list to reflect changes
             } catch (e: Exception) {
-                Log.e("BusinessManagement", "Error updating business status", e)
-                _state.update { 
-                    it.copy(
-                        isLoading = false,
-                        error = "Failed to update business status: ${e.message}"
-                    )
-                }
+                _error.value = "Failed to update business status: ${e.message}"
             }
         }
     }
@@ -327,43 +278,21 @@ class BusinessManagementViewModel @Inject constructor(
         }
     }
 
-    fun assignSuperAdmin(businessId: String, superAdminId: String) {
+    fun assignSuperAdmin(businessId: String, userId: String) {
         viewModelScope.launch {
             try {
-                _state.update { it.copy(isLoading = true) }
-                Log.d("BusinessManagement", "Starting SuperAdmin assignment - Business: $businessId, SuperAdmin: $superAdminId")
-                
-                // Get current business first
-                val business = businessRepository.getBusinessById(businessId)
-                Log.d("BusinessManagement", "Current business state - Name: ${business.name}, Status: ${business.status}, CurrentSuperAdmin: ${business.superAdminId}")
-                
-                if (superAdminId.isEmpty()) {
-                    // Remove the SuperAdmin assignment - set to empty string instead of null
-                    Log.d("BusinessManagement", "Removing SuperAdmin from business $businessId")
-                    // Create an updated business with empty string for superAdminId (not null)
-                    val updatedBusiness = business.copy(superAdminId = "")
-                    businessRepository.updateBusiness(updatedBusiness)
-                } else {
-                    // Assign a new SuperAdmin
-                    businessRepository.transferBusinessToSuperAdmin(businessId, superAdminId)
+                userBusinessRepository.assignSuperAdmin(businessId, userId)
+                // Refresh the SuperAdmin mapping
+                userRepository.getUserById(userId)?.let { superAdmin ->
+                    _businessSuperAdmins.value = _businessSuperAdmins.value + (businessId to superAdmin)
                 }
-                
-                // Reload businesses to reflect changes
-                loadBusinesses()
-                
-                _state.update { it.copy(
-                    isLoading = false,
-                    error = null
-                ) }
-                
-                Log.d("BusinessManagement", "Successfully updated SuperAdmin assignment")
             } catch (e: Exception) {
-                Log.e("BusinessManagement", "Error updating SuperAdmin assignment", e)
-                _state.update { it.copy(
-                    isLoading = false,
-                    error = "Failed to update SuperAdmin assignment: ${e.message}"
-                ) }
+                _error.value = "Failed to assign SuperAdmin: ${e.message}"
             }
         }
     }
+
+    fun clearError() {
+        _error.value = null
+    }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/presentation/checklist/questionary/QuestionaryChecklistViewModel.kt b/app/src/main/java/app/forku/presentation/checklist/questionary/QuestionaryChecklistViewModel.kt
index a9bd645..000d42a 100644
--- a/app/src/main/java/app/forku/presentation/checklist/questionary/QuestionaryChecklistViewModel.kt
+++ b/app/src/main/java/app/forku/presentation/checklist/questionary/QuestionaryChecklistViewModel.kt
@@ -92,7 +92,9 @@ class QuestionaryChecklistViewModel @Inject constructor(
     private fun loadSites(businessId: String) {
         viewModelScope.launch {
             try {
-                val sites = siteRepository.getSitesByBusiness(businessId).map { it.toDomain() }
+                val sites = siteRepository.getAllSites()
+                    .filter { it.businessId == businessId }
+                    .map { it.toDomain() }
                 _uiState.update { it.copy(sites = sites) }
             } catch (e: Exception) {
                 Log.e(TAG, "Error loading sites for business $businessId", e)
@@ -265,7 +267,9 @@ class QuestionaryChecklistViewModel @Inject constructor(
                 // After loading sites, set the selected site
                 viewModelScope.launch {
                     try {
-                        val sites = siteRepository.getSitesByBusiness(businessId).map { it.toDomain() }
+                        val sites = siteRepository.getAllSites()
+                            .filter { it.businessId == businessId }
+                            .map { it.toDomain() }
                         _uiState.update { it.copy(sites = sites) }
                         // Find and set the selected site
                         questionary.siteId?.let { siteId ->
diff --git a/app/src/main/java/app/forku/presentation/countries/CountriesScreen.kt b/app/src/main/java/app/forku/presentation/countries/CountriesScreen.kt
index 01ad8d0..9dc9c0c 100644
--- a/app/src/main/java/app/forku/presentation/countries/CountriesScreen.kt
+++ b/app/src/main/java/app/forku/presentation/countries/CountriesScreen.kt
@@ -11,13 +11,12 @@ import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.unit.dp
-import androidx.compose.ui.unit.sp
 import androidx.hilt.navigation.compose.hiltViewModel
 import androidx.navigation.NavController
 import app.forku.core.network.NetworkConnectivityManager
 import app.forku.presentation.common.components.BaseScreen
 import app.forku.domain.model.country.Country
-import app.forku.domain.model.country.State
+import app.forku.domain.model.country.CountryState
 
 @Composable
 fun CountriesScreen(
@@ -60,7 +59,7 @@ fun CountriesScreen(
                 items(state.countries) { country ->
                     CountryCard(
                         country = country,
-                        states = state.statesByCountry[country.id] ?: emptyList(),
+                        countryStates = state.statesByCountry[country.id] ?: emptyList(),
                         onEditCountry = { viewModel.showEditCountryDialog(country) },
                         onDeleteCountry = { viewModel.deleteCountry(country.id) },
                         onToggleCountryActive = { viewModel.toggleCountryActive(country) },
@@ -104,12 +103,12 @@ fun CountriesScreen(
             // Add/Edit State Dialog
             if (state.showStateDialog) {
                 StateDialog(
-                    state = state.selectedState,
+                    countryState = state.selectedCountryState,
                     onDismiss = { viewModel.hideStateDialog() },
                     onSave = { name, code ->
-                        if (state.selectedState != null) {
+                        if (state.selectedCountryState != null) {
                             viewModel.updateState(
-                                state.selectedState!!.copy(
+                                state.selectedCountryState!!.copy(
                                     name = name,
                                     code = code
                                 )
@@ -133,18 +132,18 @@ fun CountriesScreen(
 @Composable
 private fun CountryCard(
     country: Country,
-    states: List<State>,
+    countryStates: List<CountryState>,
     onEditCountry: () -> Unit,
     onDeleteCountry: () -> Unit,
     onToggleCountryActive: () -> Unit,
     onAddState: () -> Unit,
-    onEditState: (State) -> Unit,
-    onDeleteState: (State) -> Unit,
-    onToggleStateActive: (State) -> Unit
+    onEditState: (CountryState) -> Unit,
+    onDeleteState: (CountryState) -> Unit,
+    onToggleStateActive: (CountryState) -> Unit
 ) {
     var expanded by remember { mutableStateOf(false) }
     
-    Log.d("CountriesScreen", "Rendering CountryCard for ${country.name} with ${states.size} states")
+    Log.d("CountriesScreen", "Rendering CountryCard for ${country.name} with ${countryStates.size} states")
 
     Card(
         modifier = Modifier.fillMaxWidth(),
@@ -203,7 +202,7 @@ private fun CountryCard(
 
             // States Section
             if (expanded) {
-                Log.d("CountriesScreen", "Showing states for ${country.name}: ${states.size} states")
+                Log.d("CountriesScreen", "Showing states for ${country.name}: ${countryStates.size} states")
                 Spacer(modifier = Modifier.height(8.dp))
                 Divider()
                 Spacer(modifier = Modifier.height(8.dp))
@@ -224,7 +223,7 @@ private fun CountryCard(
 
                 Spacer(modifier = Modifier.height(8.dp))
 
-                if (states.isEmpty()) {
+                if (countryStates.isEmpty()) {
                     Text(
                         text = "No states/provinces added yet",
                         style = MaterialTheme.typography.bodyMedium,
@@ -232,9 +231,9 @@ private fun CountryCard(
                         modifier = Modifier.padding(vertical = 8.dp)
                     )
                 } else {
-                    states.forEach { state ->
+                    countryStates.forEach { state ->
                         StateItem(
-                            state = state,
+                            countryState = state,
                             onEdit = { onEditState(state) },
                             onDelete = { onDeleteState(state) },
                             onToggleActive = { onToggleStateActive(state) }
@@ -249,7 +248,7 @@ private fun CountryCard(
 
 @Composable
 private fun StateItem(
-    state: State,
+    countryState: CountryState,
     onEdit: () -> Unit,
     onDelete: () -> Unit,
     onToggleActive: () -> Unit
@@ -269,18 +268,18 @@ private fun StateItem(
         ) {
             Column(modifier = Modifier.weight(1f)) {
                 Text(
-                    text = state.name,
+                    text = countryState.name,
                     style = MaterialTheme.typography.bodyMedium
                 )
                 Text(
-                    text = state.code,
+                    text = countryState.code,
                     style = MaterialTheme.typography.bodySmall
                 )
             }
             
             Row {
                 Switch(
-                    checked = state.isActive,
+                    checked = countryState.isActive,
                     onCheckedChange = { onToggleActive() }
                 )
                 IconButton(onClick = onEdit) {
@@ -370,16 +369,16 @@ private fun CountryDialog(
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
 private fun StateDialog(
-    state: State?,
+    countryState: CountryState?,
     onDismiss: () -> Unit,
     onSave: (String, String) -> Unit
 ) {
-    var name by remember { mutableStateOf(state?.name ?: "") }
-    var code by remember { mutableStateOf(state?.code ?: "") }
+    var name by remember { mutableStateOf(countryState?.name ?: "") }
+    var code by remember { mutableStateOf(countryState?.code ?: "") }
 
     AlertDialog(
         onDismissRequest = onDismiss,
-        title = { Text(if (state == null) "Add State" else "Edit State") },
+        title = { Text(if (countryState == null) "Add State" else "Edit State") },
         text = {
             Column(
                 verticalArrangement = Arrangement.spacedBy(8.dp)
@@ -406,7 +405,7 @@ private fun StateDialog(
                 },
                 enabled = name.isNotBlank() && code.isNotBlank()
             ) {
-                Text(if (state == null) "Add" else "Save")
+                Text(if (countryState == null) "Add" else "Save")
             }
         },
         dismissButton = {
diff --git a/app/src/main/java/app/forku/presentation/countries/CountriesState.kt b/app/src/main/java/app/forku/presentation/countries/CountriesState.kt
index 9c76918..9794436 100644
--- a/app/src/main/java/app/forku/presentation/countries/CountriesState.kt
+++ b/app/src/main/java/app/forku/presentation/countries/CountriesState.kt
@@ -1,15 +1,15 @@
 package app.forku.presentation.countries
 
 import app.forku.domain.model.country.Country
-import app.forku.domain.model.country.State
+import app.forku.domain.model.country.CountryState
 
 data class CountriesState(
     val isLoading: Boolean = true,
     val error: String? = null,
     val countries: List<Country> = emptyList(),
-    val statesByCountry: Map<String, List<State>> = emptyMap(),
+    val statesByCountry: Map<String, List<CountryState>> = emptyMap(),
     val selectedCountry: Country? = null,
-    val selectedState: State? = null,
+    val selectedCountryState: CountryState? = null,
     val showCountryDialog: Boolean = false,
     val showStateDialog: Boolean = false
 ) 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/presentation/countries/CountriesViewModel.kt b/app/src/main/java/app/forku/presentation/countries/CountriesViewModel.kt
index 44dbf31..e41d369 100644
--- a/app/src/main/java/app/forku/presentation/countries/CountriesViewModel.kt
+++ b/app/src/main/java/app/forku/presentation/countries/CountriesViewModel.kt
@@ -4,7 +4,7 @@ import android.util.Log
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
 import app.forku.domain.model.country.Country
-import app.forku.domain.model.country.State
+import app.forku.domain.model.country.CountryState
 import app.forku.domain.repository.country.CountryRepository
 import app.forku.domain.repository.country.StateRepository
 import dagger.hilt.android.lifecycle.HiltViewModel
@@ -39,7 +39,7 @@ class CountriesViewModel @Inject constructor(
                 Log.d("CountriesViewModel", "Loaded ${countries.size} countries")
                 
                 // Load states for each country
-                val statesByCountry = mutableMapOf<String, List<State>>()
+                val statesByCountry = mutableMapOf<String, List<CountryState>>()
                 countries.forEach { country ->
                     Log.d("CountriesViewModel", "Loading states for country: ${country.name} (${country.id})")
                     val states = stateRepository.getStatesByCountry(country.id)
@@ -152,14 +152,14 @@ class CountriesViewModel @Inject constructor(
         viewModelScope.launch {
             try {
                 _state.update { it.copy(isLoading = true) }
-                val newState = State(
+                val newCountryState = CountryState(
                     id = UUID.randomUUID().toString(),
                     countryId = countryId,
                     name = name,
                     code = code.uppercase(),
                     isActive = true
                 )
-                stateRepository.createState(newState)
+                stateRepository.createState(newCountryState)
                 loadCountries()
             } catch (e: Exception) {
                 _state.update { 
@@ -172,11 +172,11 @@ class CountriesViewModel @Inject constructor(
         }
     }
 
-    fun updateState(state: State) {
+    fun updateState(countryState: CountryState) {
         viewModelScope.launch {
             try {
                 _state.update { it.copy(isLoading = true) }
-                stateRepository.updateState(state)
+                stateRepository.updateState(countryState)
                 loadCountries()
             } catch (e: Exception) {
                 _state.update { 
@@ -206,10 +206,10 @@ class CountriesViewModel @Inject constructor(
         }
     }
 
-    fun toggleStateActive(state: State) {
+    fun toggleStateActive(countryState: CountryState) {
         viewModelScope.launch {
             try {
-                val updatedState = state.copy(isActive = !state.isActive)
+                val updatedState = countryState.copy(isActive = !countryState.isActive)
                 updateState(updatedState)
             } catch (e: Exception) {
                 _state.update { 
@@ -252,16 +252,16 @@ class CountriesViewModel @Inject constructor(
             it.copy(
                 showStateDialog = true,
                 selectedCountry = country,
-                selectedState = null
+                selectedCountryState = null
             )
         }
     }
 
-    fun showEditStateDialog(state: State) {
+    fun showEditStateDialog(countryState: CountryState) {
         _state.update { 
             it.copy(
                 showStateDialog = true,
-                selectedState = state
+                selectedCountryState = countryState
             )
         }
     }
@@ -270,7 +270,7 @@ class CountriesViewModel @Inject constructor(
         _state.update { 
             it.copy(
                 showStateDialog = false,
-                selectedState = null
+                selectedCountryState = null
             )
         }
     }
diff --git a/app/src/main/java/app/forku/presentation/dashboard/Business.kt b/app/src/main/java/app/forku/presentation/dashboard/Business.kt
index 182709f..26a40ea 100644
--- a/app/src/main/java/app/forku/presentation/dashboard/Business.kt
+++ b/app/src/main/java/app/forku/presentation/dashboard/Business.kt
@@ -1,13 +1,18 @@
 package app.forku.presentation.dashboard
 
+import app.forku.domain.model.business.BusinessStatus
+
 data class Business(
     val id: String,
     val name: String,
-    val totalUsers: Int,
-    val totalVehicles: Int,
+    val totalUsers: Int = 0,
+    val totalVehicles: Int = 0,
     val status: BusinessStatus,
-    val systemOwnerId: String? = null,
-    val superAdminId: String? = null,
     val createdAt: String? = null,
-    val updatedAt: String? = null
+    val updatedAt: String? = null,
+    val createdBy: String? = null,
+    val updatedBy: String? = null,
+    val settings: Map<String, String> = emptyMap(),
+    val metadata: Map<String, String> = emptyMap(),
+    val superAdminId: String? = null
 )
diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
index 3719c9d..e40457d 100644
--- a/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
@@ -82,11 +82,15 @@ class DashboardViewModel @Inject constructor(
     
     private fun checkLoginState() {
         viewModelScope.launch {
-            val token = userRepository.getAuthToken()
-            _loginState.value = if (!token.isNullOrEmpty()) {
-                LoginState.Success(token)
-            } else {
-                LoginState.Idle
+            try {
+                val user = userRepository.getCurrentUser()
+                if (user != null) {
+                    _loginState.value = LoginState.Success(user)
+                } else {
+                    _loginState.value = LoginState.Idle
+                }
+            } catch (e: Exception) {
+                _loginState.value = LoginState.Error(e.message ?: "Unknown error checking login state")
             }
         }
     }
diff --git a/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardScreen.kt
index 32da594..fef966a 100644
--- a/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardScreen.kt
+++ b/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardScreen.kt
@@ -24,13 +24,29 @@ import androidx.compose.material.pullrefresh.rememberPullRefreshState
 import app.forku.presentation.navigation.Screen
 import app.forku.presentation.common.components.DashboardHeader
 import app.forku.presentation.common.components.FeedbackBanner
+import androidx.hilt.navigation.compose.hiltViewModel
+
+import app.forku.presentation.common.components.ErrorBanner
+import androidx.compose.material.Card
+import androidx.compose.material.Surface
+import androidx.compose.material.Text
+import androidx.compose.material.Typography
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.material.Divider
+import androidx.compose.material.Icon
+import androidx.compose.foundation.lazy.items
+import androidx.compose.runtime.collectAsState
+import androidx.compose.runtime.getValue
+import androidx.compose.ui.text.style.TextAlign
+import androidx.compose.ui.text.style.TextOverflow
+import app.forku.domain.model.business.BusinessStatus
 
 @OptIn(ExperimentalMaterialApi::class)
 @Composable
 fun SuperAdminDashboardScreen(
     navController: NavController? = null,
     onNavigate: (String) -> Unit = {},
-    viewModel: SuperAdminDashboardViewModel = androidx.hilt.navigation.compose.hiltViewModel(),
+    viewModel: SuperAdminDashboardViewModel = hiltViewModel(),
     networkManager: NetworkConnectivityManager
 ) {
     val currentUser by viewModel.currentUser.collectAsState()
@@ -374,4 +390,105 @@ private fun AdminActionButton(
             )
         }
     }
+}
+
+@Composable
+private fun BusinessStatusSection(
+    totalBusinesses: Int,
+    businessesByStatus: Map<BusinessStatus, Int>
+) {
+    Card(
+        modifier = Modifier.fillMaxWidth(),
+        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
+    ) {
+        Column(
+            modifier = Modifier.padding(16.dp)
+        ) {
+            Text(
+                text = "Business Statistics",
+                style = MaterialTheme.typography.titleLarge,
+                modifier = Modifier.padding(bottom = 8.dp)
+            )
+            
+            Text(
+                text = "Total Businesses: $totalBusinesses",
+                style = MaterialTheme.typography.bodyLarge,
+                modifier = Modifier.padding(bottom = 8.dp)
+            )
+            
+            businessesByStatus.forEach { (status, count) ->
+                Row(
+                    modifier = Modifier
+                        .fillMaxWidth()
+                        .padding(vertical = 4.dp),
+                    horizontalArrangement = Arrangement.SpaceBetween
+                ) {
+                    Text(text = status.name)
+                    Text(text = count.toString())
+                }
+            }
+        }
+    }
+}
+
+@Composable
+private fun RecentBusinessesSection(
+    businesses: List<Business>,
+    onBusinessClick: (String) -> Unit
+) {
+    Card(
+        modifier = Modifier.fillMaxWidth(),
+        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
+    ) {
+        Column(
+            modifier = Modifier.padding(16.dp)
+        ) {
+            Text(
+                text = "Recent Businesses",
+                style = MaterialTheme.typography.titleLarge,
+                modifier = Modifier.padding(bottom = 8.dp)
+            )
+            
+            businesses.forEach { business ->
+                BusinessItem(
+                    business = business,
+                    onClick = { onBusinessClick(business.id) }
+                )
+            }
+        }
+    }
+}
+
+@Composable
+private fun BusinessItem(
+    business: Business,
+    onClick: () -> Unit
+) {
+    Row(
+        modifier = Modifier
+            .fillMaxWidth()
+            .clickable(onClick = onClick)
+            .padding(vertical = 8.dp),
+        horizontalArrangement = Arrangement.SpaceBetween,
+        verticalAlignment = Alignment.CenterVertically
+    ) {
+        Column(
+            modifier = Modifier.weight(1f)
+        ) {
+            Text(
+                text = business.name,
+                style = MaterialTheme.typography.titleMedium
+            )
+            Text(
+                text = "Status: ${business.status.name}",
+                style = MaterialTheme.typography.bodyMedium,
+                color = MaterialTheme.colorScheme.onSurfaceVariant
+            )
+        }
+        Icon(
+            imageVector = Icons.Default.KeyboardArrowRight,
+            contentDescription = "View details"
+        )
+    }
+    Divider()
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardState.kt b/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardState.kt
index 56121cf..38e8dee 100644
--- a/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardState.kt
+++ b/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardState.kt
@@ -1,5 +1,7 @@
 package app.forku.presentation.dashboard
 
+import app.forku.domain.model.business.BusinessStatus
+
 data class SuperAdminDashboardState(
     val isLoading: Boolean = false,
     val error: String? = null,
@@ -27,15 +29,13 @@ data class SuperAdminDashboardState(
     // System Settings
     val systemHealth: SystemHealth = SystemHealth(),
     val lastBackupTime: String? = null,
-    val recentAuditLogs: List<AuditLogEntry> = emptyList()
+    val recentAuditLogs: List<AuditLogEntry> = emptyList(),
+    val businesses: List<Business> = emptyList(),
+    val totalBusinesses: Int = 0,
+    val totalUsers: Int = 0,
+    val businessesByStatus: Map<BusinessStatus, Int> = emptyMap()
 )
 
-enum class BusinessStatus {
-    ACTIVE,
-    PENDING,
-    SUSPENDED
-}
-
 data class SystemHealth(
     val serverStatus: String = "OK",
     val databaseStatus: String = "OK",
diff --git a/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardViewModel.kt b/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardViewModel.kt
index 2f1662f..9a4e7c3 100644
--- a/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardViewModel.kt
+++ b/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardViewModel.kt
@@ -10,6 +10,7 @@ import app.forku.domain.usecase.feedback.SubmitFeedbackUseCase
 import app.forku.domain.model.user.User
 import app.forku.domain.model.user.UserRole
 import app.forku.domain.model.vehicle.MaintenanceStatus
+import app.forku.domain.model.business.BusinessStatus
 import dagger.hilt.android.lifecycle.HiltViewModel
 import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.StateFlow
@@ -21,6 +22,7 @@ import kotlinx.coroutines.sync.Mutex
 import kotlinx.coroutines.delay
 import android.util.Log
 
+
 @HiltViewModel
 class SuperAdminDashboardViewModel @Inject constructor(
     private val userRepository: UserRepository,
@@ -31,7 +33,7 @@ class SuperAdminDashboardViewModel @Inject constructor(
 ) : ViewModel() {
     
     private val _state = MutableStateFlow(SuperAdminDashboardState())
-    val state = _state.asStateFlow()
+    val state: StateFlow<SuperAdminDashboardState> = _state.asStateFlow()
     
     private val _currentUser = MutableStateFlow<User?>(null)
     val currentUser: StateFlow<User?> = _currentUser.asStateFlow()
@@ -77,7 +79,7 @@ class SuperAdminDashboardViewModel @Inject constructor(
                     businessRepository.getAllBusinesses().also { businessList ->
                         Log.d("SuperAdminDashboard", "Successfully loaded ${businessList.size} businesses for SuperAdmin")
                         businessList.forEach { business ->
-                            Log.d("SuperAdminDashboard", "Business loaded: id=${business.id}, name=${business.name}, status=${business.status}, superAdminId=${business.superAdminId}")
+                            Log.d("SuperAdminDashboard", "Business loaded: id=${business.id}, name=${business.name}, status=${business.status}, superAdminId=${business.superAdminId ?: "none"}")
                         }
                     }
                 } catch (e: Exception) {
@@ -86,7 +88,12 @@ class SuperAdminDashboardViewModel @Inject constructor(
                 }
 
                 // Get business IDs for this SuperAdmin
-                val superAdminBusinessIds = businesses.map { it.id }.toSet()
+                val superAdminBusinessIds = businesses
+                    .filter { business -> 
+                        currentUser?.id == business.superAdminId || currentUser?.role == UserRole.SYSTEM_OWNER
+                    }
+                    .map { it.id }
+                    .toSet()
                 Log.d("SuperAdminDashboard", "SuperAdmin business IDs: $superAdminBusinessIds")
 
                 // Load and filter users belonging to SuperAdmin's businesses
@@ -122,13 +129,13 @@ class SuperAdminDashboardViewModel @Inject constructor(
                 }
 
                 // Calculate business statistics
-                val activeBusinesses = businesses.count { it.status == BusinessStatus.ACTIVE }
-                val pendingBusinesses = businesses.count { it.status == BusinessStatus.PENDING }
+                val businessesByStatus = businesses.groupBy { it.status }
+                    .mapValues { it.value.size }
                 
                 Log.d("SuperAdminDashboard", "Business statistics: " +
                     "total=${businesses.size}, " +
-                    "active=$activeBusinesses, " +
-                    "pending=$pendingBusinesses")
+                    "active=${businessesByStatus[BusinessStatus.ACTIVE] ?: 0}, " +
+                    "pending=${businessesByStatus[BusinessStatus.PENDING] ?: 0}")
 
                 // Update state with filtered data
                 _state.update { currentState ->
@@ -142,8 +149,9 @@ class SuperAdminDashboardViewModel @Inject constructor(
                         activeAdminsCount = users.count { it.role == UserRole.ADMIN },
                         recentUsers = users.take(5),
                         recentBusinesses = businesses.take(5),
-                        pendingBusinessApprovals = pendingBusinesses,
-                        pendingUserApprovals = users.count { !it.isApproved }
+                        businesses = businesses,
+                        totalBusinesses = businesses.size,
+                        businessesByStatus = businessesByStatus
                     )
                 }
                 Log.d("SuperAdminDashboard", "Dashboard state updated successfully")
@@ -176,4 +184,8 @@ class SuperAdminDashboardViewModel @Inject constructor(
             }
         }
     }
+
+    fun refreshDashboard() {
+        loadDashboardData()
+    }
 } 
\ No newline at end of file
diff --git a/app/src/main/java/app/forku/presentation/dashboard/SystemOwnerDashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/SystemOwnerDashboardScreen.kt
index 97b3bb0..b885f52 100644
--- a/app/src/main/java/app/forku/presentation/dashboard/SystemOwnerDashboardScreen.kt
+++ b/app/src/main/java/app/forku/presentation/dashboard/SystemOwnerDashboardScreen.kt
@@ -135,6 +135,11 @@ private fun SystemOverviewSection(
         "businesses=${state.totalBusinessCount}, " +
         "vehicles=${state.totalVehiclesCount}")
         
+    // Additional debug logging to verify the state values
+    if (state.totalUsersCount <= 0) {
+        Log.w("SystemOwnerDashboard", "User count is still showing as 0 or less in the UI")
+    }
+        
     Card(
         modifier = Modifier.fillMaxWidth(),
         colors = CardDefaults.cardColors(containerColor = Color.White),
diff --git a/app/src/main/java/app/forku/presentation/dashboard/SystemOwnerDashboardViewModel.kt b/app/src/main/java/app/forku/presentation/dashboard/SystemOwnerDashboardViewModel.kt
index a705a72..cf8a821 100644
--- a/app/src/main/java/app/forku/presentation/dashboard/SystemOwnerDashboardViewModel.kt
+++ b/app/src/main/java/app/forku/presentation/dashboard/SystemOwnerDashboardViewModel.kt
@@ -3,6 +3,7 @@ package app.forku.presentation.dashboard
 import android.util.Log
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
+import app.forku.domain.model.business.BusinessStatus
 import app.forku.domain.repository.user.UserRepository
 import app.forku.domain.repository.vehicle.VehicleRepository
 import app.forku.domain.repository.business.BusinessRepository
@@ -97,16 +98,39 @@ class SystemOwnerDashboardViewModel @Inject constructor(
                     "pending=$pendingBusinesses, " +
                     "suspended=$suspendedBusinesses")
 
-                // Load users
+                // Load users first since we need them for multiple purposes
                 val users = try {
-                    userRepository.getAllUsers().also {
-                        Log.d("SystemOwnerDashboard", "Successfully loaded ${it.size} users")
+                    userRepository.getAllUsers().also { usersList ->
+                        Log.d("SystemOwnerDashboard", "Successfully loaded ${usersList.size} users for detailed info")
                     }
                 } catch (e: Exception) {
                     Log.e("SystemOwnerDashboard", "Error loading users", e)
                     emptyList()
                 }
 
+                // Get user count from API, falling back to users.size if needed
+                val userCount = try {
+                    userRepository.getUserCount().also { count ->
+                        Log.d("SystemOwnerDashboard", "User count from API: $count")
+                        if (count == 0 && users.isNotEmpty()) {
+                            Log.w("SystemOwnerDashboard", "API returned 0 users but we have ${users.size} users loaded")
+                        }
+                    }
+                } catch (e: Exception) {
+                    Log.e("SystemOwnerDashboard", "Error getting user count from API", e)
+                    null
+                }
+
+                // Use the most accurate count available
+                val finalUserCount = when {
+                    userCount != null && userCount > 0 -> userCount
+                    users.isNotEmpty() -> {
+                        Log.d("SystemOwnerDashboard", "Using users.size (${users.size}) as count since API returned null or 0")
+                        users.size
+                    }
+                    else -> 0
+                }
+
                 // Load vehicles
                 val vehicles = try {
                     vehicleRepository.getAllVehicles().also {
@@ -123,7 +147,7 @@ class SystemOwnerDashboardViewModel @Inject constructor(
                     currentState.copy(
                         isLoading = false,
                         error = null,
-                        totalUsersCount = users.size,
+                        totalUsersCount = finalUserCount,
                         totalVehiclesCount = vehicles.size,
                         totalBusinessCount = businesses.size,
                         activeBusinesses = activeBusinesses,
diff --git a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
index 5feb543..c8133cd 100644
--- a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
+++ b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
@@ -76,6 +76,8 @@ import app.forku.presentation.checklist.questionary.QuestionarySelectionScreen
 import app.forku.presentation.system.EnergySourcesScreen
 import app.forku.presentation.sites.SitesScreen
 import app.forku.presentation.vehicle.component.VehicleComponentsScreen
+import app.forku.presentation.gogroup.GroupManagementScreen
+import app.forku.presentation.gogroup.GroupRoleManagementScreen
 
 
 @Composable
@@ -807,6 +809,26 @@ fun NavGraph(
                 }
             }
         }
+
+        composable(Screen.GroupManagement.route) {
+            GroupManagementScreen(
+                onNavigateToRoles = { groupName ->
+                    navController.navigate(Screen.GroupRoleManagement.createRoute(groupName))
+                }
+            )
+        }
+
+        composable(
+            route = Screen.GroupRoleManagement.route,
+            arguments = listOf(
+                navArgument(Screen.GroupRoleManagement.GROUP_NAME_ARG) {
+                    type = NavType.StringType
+                }
+            )
+        ) { entry ->
+            val groupName = entry.arguments?.getString(Screen.GroupRoleManagement.GROUP_NAME_ARG) ?: return@composable
+            GroupRoleManagementScreen(groupName = groupName)
+        }
     }
 }
 
diff --git a/app/src/main/java/app/forku/presentation/navigation/Screen.kt b/app/src/main/java/app/forku/presentation/navigation/Screen.kt
index 2a6bf1b..68d9586 100644
--- a/app/src/main/java/app/forku/presentation/navigation/Screen.kt
+++ b/app/src/main/java/app/forku/presentation/navigation/Screen.kt
@@ -131,6 +131,14 @@ sealed class Screen(val route: String) {
         val title: String = "Vehicle Components"
     }
 
+    data object GroupManagement : Screen("group_management")
+
+    data object GroupRoleManagement : Screen("group_role_management/{groupName}") {
+        const val GROUP_NAME_ARG = "groupName"
+
+        fun createRoute(groupName: String) = "group_role_management/$groupName"
+    }
+
     companion object {
         fun Profile.withOperatorId(operatorId: String?) = 
             "profile" + (operatorId?.let { "?operatorId=$it" } ?: "")
diff --git a/app/src/main/java/app/forku/presentation/site/SitesViewModel.kt b/app/src/main/java/app/forku/presentation/site/SitesViewModel.kt
index bf319c7..af0e53d 100644
--- a/app/src/main/java/app/forku/presentation/site/SitesViewModel.kt
+++ b/app/src/main/java/app/forku/presentation/site/SitesViewModel.kt
@@ -35,15 +35,16 @@ class SitesViewModel @Inject constructor(
         viewModelScope.launch {
             _uiState.update { it.copy(isLoading = true, error = null) }
             try {
-                val sites = repository.getSitesByBusiness(businessId).map { it.toDomain() }
-                _uiState.update { 
+                val allSites = repository.getAllSites().map { it.toDomain() }
+                val sites = allSites.filter { it.businessId == businessId }
+                _uiState.update {
                     it.copy(
                         sites = sites,
                         isLoading = false
                     )
                 }
             } catch (e: Exception) {
-                _uiState.update { 
+                _uiState.update {
                     it.copy(
                         error = e.message ?: "Failed to load sites",
                         isLoading = false
@@ -57,7 +58,7 @@ class SitesViewModel @Inject constructor(
         viewModelScope.launch {
             _uiState.update { it.copy(isLoading = true, error = null) }
             try {
-                val createdSite = repository.createSite(businessId, site.toDto()).toDomain()
+                val createdSite = repository.saveSite(site.copy(businessId = businessId).toDto()).toDomain()
                 _uiState.update { currentState ->
                     currentState.copy(
                         sites = currentState.sites + createdSite,
@@ -66,7 +67,7 @@ class SitesViewModel @Inject constructor(
                     )
                 }
             } catch (e: Exception) {
-                _uiState.update { 
+                _uiState.update {
                     it.copy(
                         error = e.message ?: "Failed to create site",
                         isLoading = false
@@ -80,18 +81,18 @@ class SitesViewModel @Inject constructor(
         viewModelScope.launch {
             _uiState.update { it.copy(isLoading = true, error = null) }
             try {
-                val updatedSite = repository.updateSite(businessId, site.id, site.toDto()).toDomain()
+                val updatedSite = repository.saveSite(site.copy(businessId = businessId).toDto()).toDomain()
                 _uiState.update { currentState ->
                     currentState.copy(
-                        sites = currentState.sites.map { 
-                            if (it.id == updatedSite.id) updatedSite else it 
+                        sites = currentState.sites.map {
+                            if (it.id == updatedSite.id) updatedSite else it
                         },
                         isLoading = false,
                         showDialog = false
                     )
                 }
             } catch (e: Exception) {
-                _uiState.update { 
+                _uiState.update {
                     it.copy(
                         error = e.message ?: "Failed to update site",
                         isLoading = false
@@ -105,7 +106,7 @@ class SitesViewModel @Inject constructor(
         viewModelScope.launch {
             _uiState.update { it.copy(isLoading = true, error = null) }
             try {
-                repository.deleteSite(businessId, siteId)
+                repository.deleteSite(siteId)
                 _uiState.update { currentState ->
                     currentState.copy(
                         sites = currentState.sites.filter { it.id != siteId },
@@ -114,7 +115,7 @@ class SitesViewModel @Inject constructor(
                     )
                 }
             } catch (e: Exception) {
-                _uiState.update { 
+                _uiState.update {
                     it.copy(
                         error = e.message ?: "Failed to delete site",
                         isLoading = false
diff --git a/app/src/main/java/app/forku/presentation/sites/SitesScreen.kt b/app/src/main/java/app/forku/presentation/sites/SitesScreen.kt
index 584f617..8f3bcea 100644
--- a/app/src/main/java/app/forku/presentation/sites/SitesScreen.kt
+++ b/app/src/main/java/app/forku/presentation/sites/SitesScreen.kt
@@ -18,6 +18,8 @@ import app.forku.core.network.NetworkConnectivityManager
 import app.forku.domain.model.Site
 import app.forku.presentation.common.components.BaseScreen
 import app.forku.presentation.site.SitesViewModel
+import app.forku.data.mapper.toDomain
+import app.forku.data.mapper.toDto
 
 @Composable
 fun SitesScreen(
diff --git a/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt b/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt
index 9c04bff..60251d7 100644
--- a/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt
+++ b/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt
@@ -29,7 +29,7 @@ class TourViewModel @Inject constructor(
     private fun initializeCsrfToken() {
         viewModelScope.launch {
             _state.value = _state.value.copy(isLoading = true)
-            goServicesManager.getOrRefreshCsrfToken()
+            goServicesManager.getCsrfToken()
                 .onSuccess {
                     _state.value = _state.value.copy(
                         isCsrfTokenInitialized = true,
diff --git a/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt b/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt
index 4e2c0fd..8bf4794 100644
--- a/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt
+++ b/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt
@@ -14,6 +14,7 @@ import androidx.compose.ui.unit.sp
 import androidx.hilt.navigation.compose.hiltViewModel
 import androidx.navigation.NavController
 import app.forku.core.network.NetworkConnectivityManager
+import app.forku.domain.model.user.User
 import app.forku.presentation.common.components.LoadingOverlay
 import app.forku.presentation.navigation.Screen
 
@@ -21,17 +22,17 @@ import app.forku.presentation.navigation.Screen
 @Composable
 fun LoginScreen(
     viewModel: LoginViewModel = hiltViewModel(),
-    onLoginSuccess: (String) -> Unit,
+    onLoginSuccess: (User) -> Unit,
     networkManager: NetworkConnectivityManager,
     navController: NavController
 ) {
     val state by viewModel.state.collectAsState()
-    var email by remember { mutableStateOf("") }
+    var username by remember { mutableStateOf("") }
     var password by remember { mutableStateOf("") }
 
     LaunchedEffect(state) {
         if (state is LoginState.Success) {
-            onLoginSuccess((state as LoginState.Success).token)
+            onLoginSuccess((state as LoginState.Success).user)
         }
     }
 
@@ -65,9 +66,9 @@ fun LoginScreen(
             Spacer(modifier = Modifier.height(32.dp))
 
             OutlinedTextField(
-                value = email,
-                onValueChange = { email = it },
-                label = { Text("Phone or email") },
+                value = username,
+                onValueChange = { username = it },
+                label = { Text("Username") },
                 modifier = Modifier.fillMaxWidth(),
                 colors = OutlinedTextFieldDefaults.colors(
                     focusedBorderColor = Color(0xFFFFA726),
@@ -107,13 +108,13 @@ fun LoginScreen(
             Spacer(modifier = Modifier.height(24.dp))
 
             Button(
-                onClick = { viewModel.login(email, password) },
+                onClick = { viewModel.login(username, password) },
                 modifier = Modifier.fillMaxWidth(),
                 colors = ButtonDefaults.buttonColors(
                     containerColor = Color(0xFFFFA726),
                     contentColor = Color.Black
                 ),
-                enabled = email.isNotBlank() && password.isNotBlank() && state !is LoginState.Loading
+                enabled = username.isNotBlank() && password.isNotBlank() && state !is LoginState.Loading
             ) {
                 if (state is LoginState.Loading) {
                     CircularProgressIndicator(
diff --git a/app/src/main/java/app/forku/presentation/user/login/LoginState.kt b/app/src/main/java/app/forku/presentation/user/login/LoginState.kt
index 65bc60d..ae32837 100644
--- a/app/src/main/java/app/forku/presentation/user/login/LoginState.kt
+++ b/app/src/main/java/app/forku/presentation/user/login/LoginState.kt
@@ -1,8 +1,10 @@
 package app.forku.presentation.user.login
 
+import app.forku.domain.model.user.User
+
 sealed class LoginState {
     data object Idle : LoginState()
     data object Loading : LoginState()
-    data class Success(val token: String) : LoginState()
+    data class Success(val user: User) : LoginState()
     data class Error(val message: String) : LoginState()
 }
diff --git a/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt b/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt
index aba1679..7265bd5 100644
--- a/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt
+++ b/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt
@@ -4,6 +4,7 @@ import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
 import app.forku.data.datastore.AuthDataStore
 import app.forku.data.local.TourPreferences
+import app.forku.domain.model.user.User
 import app.forku.domain.usecase.security.AuthenticateUseCase
 import dagger.hilt.android.lifecycle.HiltViewModel
 import kotlinx.coroutines.flow.MutableStateFlow
@@ -22,13 +23,13 @@ class LoginViewModel @Inject constructor(
     private val _state = MutableStateFlow<LoginState>(LoginState.Idle)
     val state = _state.asStateFlow()
 
-    fun login(email: String, password: String) {
+    fun login(username: String, password: String) {
         viewModelScope.launch {
             try {
-                val sanitizedEmail = sanitizeInput(email)
+                val sanitizedUsername = sanitizeInput(username)
                 val sanitizedPassword = sanitizeInput(password)
 
-                authenticateUseCase(sanitizedEmail, sanitizedPassword)
+                authenticateUseCase(sanitizedUsername, sanitizedPassword)
                     .collect { authState ->
                         _state.value = when (authState) {
                             is app.forku.domain.usecase.security.AuthenticationState.Loading -> {
@@ -36,7 +37,7 @@ class LoginViewModel @Inject constructor(
                             }
                             is app.forku.domain.usecase.security.AuthenticationState.Success -> {
                                 tourPreferences.setTourCompleted()
-                                LoginState.Success(authState.token)
+                                LoginState.Success(authState.user)
                             }
                             is app.forku.domain.usecase.security.AuthenticationState.Error -> {
                                 val errorMessage = when {
diff --git a/current_diff_forku.txt b/current_diff_forku.txt
index 8720f83..f8bb25f 100644
--- a/current_diff_forku.txt
+++ b/current_diff_forku.txt
@@ -1,8961 +0,0 @@
-diff --git a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
-index e2a630f..bc401b8 100644
---- a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
-+++ b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
-@@ -15,7 +15,8 @@ data class UserDto(
-     val lastMedicalCheck: String?,
-     val lastLogin: String?,
-     val isActive: Boolean = true,
--    val businessId: String? = null
-+    val businessId: String? = null,
-+    val systemOwnerId: String? = null
- )
- 
- data class CertificationDto(
-diff --git a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
-index 7d8a645..aba9dfc 100644
---- a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
-+++ b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
-@@ -38,6 +38,7 @@ class AuthDataStore @Inject constructor(
-         val IS_ONLINE = booleanPreferencesKey("is_online")
-         val BUSINESS_ID = stringPreferencesKey("business_id")
-         val SITE_ID = stringPreferencesKey("site_id")
-+        val SYSTEM_OWNER_ID = stringPreferencesKey("system_owner_id")
-     }
- 
-     @Volatile
-@@ -74,13 +75,14 @@ class AuthDataStore @Inject constructor(
- 
-     suspend fun setCurrentUser(user: User) {
-         android.util.Log.d("AuthDataStore", """
--            Setting current user:
-+            Storing user data:
-             - ID: ${user.id}
-             - Name: ${user.fullName}
-             - Token: ${user.token.take(10)}...
-             - Role: ${user.role}
-             - Business ID: ${user.businessId}
-             - Site ID: ${user.siteId}
-+            - System Owner ID: ${user.systemOwnerId}
-         """.trimIndent())
-         
-         context.dataStore.edit { preferences ->
-@@ -98,6 +100,7 @@ class AuthDataStore @Inject constructor(
-             preferences[PreferencesKeys.IS_ONLINE] = true
-             user.businessId?.let { preferences[PreferencesKeys.BUSINESS_ID] = it }
-             user.siteId?.let { preferences[PreferencesKeys.SITE_ID] = it }
-+            user.systemOwnerId?.let { preferences[PreferencesKeys.SYSTEM_OWNER_ID] = it }
-             val now = System.currentTimeMillis()
-             preferences[PreferencesKeys.LAST_ACTIVE] = now.toString()
-             lastActiveTime = now
-@@ -110,12 +113,9 @@ class AuthDataStore @Inject constructor(
-         return try {
-             val preferences = context.dataStore.data.first()
-             
--            // Log all stored preferences for debugging
-             android.util.Log.d("AuthDataStore", """
--                Stored preferences:
-+                Current preferences:
-                 - USER_ID: ${preferences[PreferencesKeys.USER_ID]}
--                - TOKEN: ${preferences[PreferencesKeys.TOKEN]?.take(10)}...
--                - TOKEN_KEY: ${preferences[PreferencesKeys.TOKEN_KEY]?.take(10)}...
-                 - EMAIL: ${preferences[PreferencesKeys.EMAIL]}
-                 - USERNAME: ${preferences[PreferencesKeys.USERNAME]}
-                 - FIRST_NAME: ${preferences[PreferencesKeys.FIRST_NAME]}
-@@ -125,16 +125,13 @@ class AuthDataStore @Inject constructor(
-                 - LAST_ACTIVE: ${preferences[PreferencesKeys.LAST_ACTIVE]}
-                 - BUSINESS_ID: ${preferences[PreferencesKeys.BUSINESS_ID]}
-                 - SITE_ID: ${preferences[PreferencesKeys.SITE_ID]}
-+                - SYSTEM_OWNER_ID: ${preferences[PreferencesKeys.SYSTEM_OWNER_ID]}
-             """.trimIndent())
-             
--            val userId = preferences[PreferencesKeys.USER_ID]
--            android.util.Log.d("AuthDataStore", "Getting current user - Found ID: $userId")
--            
--            if (userId == null) {
--                android.util.Log.e("AuthDataStore", "No user ID found in preferences")
-+            val userId = preferences[PreferencesKeys.USER_ID] ?: run {
-+                android.util.Log.e("AuthDataStore", "No user ID found")
-                 return null
-             }
--            
-             val token = preferences[PreferencesKeys.TOKEN] ?: run {
-                 android.util.Log.e("AuthDataStore", "No token found for user $userId")
-                 return null
-@@ -167,6 +164,7 @@ class AuthDataStore @Inject constructor(
-             val password = preferences[PreferencesKeys.PASSWORD] ?: ""
-             val businessId = preferences[PreferencesKeys.BUSINESS_ID]
-             val siteId = preferences[PreferencesKeys.SITE_ID]
-+            val systemOwnerId = preferences[PreferencesKeys.SYSTEM_OWNER_ID]
- 
-             val isOnline = preferences[PreferencesKeys.IS_ONLINE] ?: false
-             val lastActive = preferences[PreferencesKeys.LAST_ACTIVE]?.toLongOrNull() ?: 0L
-@@ -186,7 +184,8 @@ class AuthDataStore @Inject constructor(
-                 isActive = isOnline,
-                 lastLogin = lastActive.toString(),
-                 businessId = businessId,
--                siteId = siteId
-+                siteId = siteId,
-+                systemOwnerId = systemOwnerId
-             ).also {
-                 android.util.Log.d("AuthDataStore", """
-                     User retrieved successfully:
-@@ -196,6 +195,7 @@ class AuthDataStore @Inject constructor(
-                     - Role: ${it.role}
-                     - Business ID: ${it.businessId}
-                     - Site ID: ${it.siteId}
-+                    - System Owner ID: ${it.systemOwnerId}
-                     - Online: $isOnline
-                     - Last Active: ${java.time.Instant.ofEpochMilli(lastActive)}
-                 """.trimIndent())
-diff --git a/app/src/main/java/app/forku/data/mapper/UserMapper.kt b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
-index 74c8642..1cbac49 100644
---- a/app/src/main/java/app/forku/data/mapper/UserMapper.kt
-+++ b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
-@@ -25,7 +25,8 @@ fun UserDto.toDomain(): User {
-         lastLogin = lastLogin,
-         isActive = isActive,
-         password = password,
--        businessId = businessId
-+        businessId = businessId,
-+        systemOwnerId = systemOwnerId
-     )
- }
- 
-@@ -53,7 +54,8 @@ fun User.toDto(): UserDto {
-         lastMedicalCheck = lastMedicalCheck,
-         lastLogin = lastLogin,
-         isActive = isActive,
--        businessId = businessId
-+        businessId = businessId,
-+        systemOwnerId = systemOwnerId
-     )
- }
- 
-diff --git a/app/src/main/java/app/forku/data/remote/api/BusinessApi.kt b/app/src/main/java/app/forku/data/remote/api/BusinessApi.kt
-index d29ac34..a793141 100644
---- a/app/src/main/java/app/forku/data/remote/api/BusinessApi.kt
-+++ b/app/src/main/java/app/forku/data/remote/api/BusinessApi.kt
-@@ -1,6 +1,7 @@
- package app.forku.data.remote.api
- 
- import app.forku.data.remote.dto.BusinessDto
-+import app.forku.data.remote.dto.BusinessStats
- import retrofit2.Response
- import retrofit2.http.*
- 
-@@ -41,4 +42,23 @@ interface BusinessApi {
- 
-     @GET("business/{businessId}/vehicles")
-     suspend fun getBusinessVehicles(@Path("businessId") businessId: String): List<String>
-+
-+    // New endpoints for System Owner and Super Admin
-+    @GET("business/system-owner/{systemOwnerId}")
-+    suspend fun getBusinessesBySystemOwnerId(@Path("systemOwnerId") systemOwnerId: String): List<BusinessDto>
-+
-+    @GET("business/super-admin/{superAdminId}")
-+    suspend fun getBusinessesBySuperAdminId(@Path("superAdminId") superAdminId: String): List<BusinessDto>
-+
-+    @PUT("business/{businessId}/transfer")
-+    suspend fun transferBusiness(
-+        @Path("businessId") businessId: String,
-+        @Query("newSuperAdminId") newSuperAdminId: String
-+    ): BusinessDto
-+
-+    @GET("business/stats/system-owner/{systemOwnerId}")
-+    suspend fun getSystemOwnerBusinessStats(@Path("systemOwnerId") systemOwnerId: String): BusinessStats
-+
-+    @GET("business/stats/super-admin/{superAdminId}")
-+    suspend fun getSuperAdminBusinessStats(@Path("superAdminId") superAdminId: String): BusinessStats
- }
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/data/remote/api/CreateBusinessRequest.kt b/app/src/main/java/app/forku/data/remote/api/CreateBusinessRequest.kt
-index 49261bc..81a295b 100644
---- a/app/src/main/java/app/forku/data/remote/api/CreateBusinessRequest.kt
-+++ b/app/src/main/java/app/forku/data/remote/api/CreateBusinessRequest.kt
-@@ -7,9 +7,15 @@ data class CreateBusinessRequest(
-     val name: String,
-     
-     @SerializedName("status")
--    val status: String = "PENDING"
-+    val status: String = "PENDING",
-+
-+    @SerializedName("system_owner_id")
-+    val systemOwnerId: String?,
-+
-+    @SerializedName("super_admin_id")
-+    val superAdminId: String?
- ) {
-     override fun toString(): String {
--        return "CreateBusinessRequest(name='$name', status='$status')"
-+        return "CreateBusinessRequest(name='$name', status='$status', systemOwnerId='$systemOwnerId', superAdminId='$superAdminId')"
-     }
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/data/remote/dto/BusinessDto.kt b/app/src/main/java/app/forku/data/remote/dto/BusinessDto.kt
-index a018424..c8b7d46 100644
---- a/app/src/main/java/app/forku/data/remote/dto/BusinessDto.kt
-+++ b/app/src/main/java/app/forku/data/remote/dto/BusinessDto.kt
-@@ -16,5 +16,17 @@ data class BusinessDto(
-     val totalVehicles: Int,
-     
-     @SerializedName("status")
--    val status: String
-+    val status: String,
-+
-+    @SerializedName("system_owner_id")
-+    val systemOwnerId: String,
-+
-+    @SerializedName("super_admin_id")
-+    val superAdminId: String,
-+
-+    @SerializedName("created_at")
-+    val createdAt: String,
-+
-+    @SerializedName("updated_at")
-+    val updatedAt: String
- ) 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/data/repository/business/BusinessRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/business/BusinessRepositoryImpl.kt
-index 1176c14..181dfe0 100644
---- a/app/src/main/java/app/forku/data/repository/business/BusinessRepositoryImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/business/BusinessRepositoryImpl.kt
-@@ -8,27 +8,47 @@ import app.forku.presentation.dashboard.BusinessStatus
- import retrofit2.HttpException
- import javax.inject.Inject
- import android.util.Log
-+import app.forku.data.remote.dto.BusinessDto
-+import app.forku.data.remote.dto.BusinessStats
- import com.google.gson.Gson
-+import app.forku.domain.model.user.UserRole
-+import app.forku.domain.repository.user.UserRepository
- 
- class BusinessRepositoryImpl @Inject constructor(
-     private val api: BusinessApi,
--    private val gson: Gson
-+    private val gson: Gson,
-+    private val userRepository: UserRepository
- ) : BusinessRepository {
- 
-     override suspend fun getAllBusinesses(): List<Business> {
-         try {
--            Log.d("BusinessManagement", "Fetching all businesses")
--            val businesses = api.getAllBusinesses()
--            Log.d("BusinessManagement", "Received ${businesses.size} businesses")
--            return businesses.map { dto ->
--                Log.d("BusinessManagement", "Mapping business: ${dto.name}")
--                Business(
--                    id = dto.id,
--                    name = dto.name,
--                    totalUsers = dto.totalUsers,
--                    totalVehicles = dto.totalVehicles,
--                    status = BusinessStatus.valueOf(dto.status.uppercase())
--                )
-+            val currentUser = userRepository.getCurrentUser()
-+            Log.d("BusinessManagement", "Fetching businesses for user role: ${currentUser?.role}")
-+            
-+            val businessDtos = when (currentUser?.role) {
-+                UserRole.SYSTEM_OWNER -> {
-+                    Log.d("BusinessManagement", "Fetching all businesses as SYSTEM_OWNER")
-+                    api.getAllBusinesses()
-+                }
-+                UserRole.SUPERADMIN -> {
-+                    Log.d("BusinessManagement", "Fetching businesses for SUPERADMIN: ${currentUser.id}")
-+                    api.getBusinessesBySuperAdminId(currentUser.id)
-+                }
-+                else -> {
-+                    Log.e("BusinessManagement", "Unauthorized role: ${currentUser?.role}")
-+                    throw SecurityException("Insufficient permissions to access businesses")
-+                }
-+            }
-+            
-+            Log.d("BusinessManagement", "Received ${businessDtos.size} businesses from API")
-+            businessDtos.forEach { dto ->
-+                Log.d("BusinessManagement", "Business DTO: id=${dto.id}, name=${dto.name}, status=${dto.status}")
-+            }
-+            
-+            return businessDtos.map { dto ->
-+                mapDtoToBusiness(dto).also { business ->
-+                    Log.d("BusinessManagement", "Mapped business: id=${business.id}, name=${business.name}, status=${business.status}")
-+                }
-             }
-         } catch (e: Exception) {
-             Log.e("BusinessManagement", "Error fetching businesses", e)
-@@ -38,49 +58,174 @@ class BusinessRepositoryImpl @Inject constructor(
- 
-     override suspend fun getBusinessById(id: String): Business {
-         val dto = api.getBusinessById(id)
--        return Business(
--            id = dto.id,
--            name = dto.name,
--            totalUsers = dto.totalUsers,
--            totalVehicles = dto.totalVehicles,
--            status = BusinessStatus.valueOf(dto.status.uppercase())
--        )
-+        return mapDtoToBusiness(dto)
-     }
- 
-     override suspend fun createBusiness(name: String): Business {
-         try {
--            val request = CreateBusinessRequest(name)
--            val jsonRequest = gson.toJson(request)
--            Log.d("BusinessManagement", "Sending request JSON: $jsonRequest")
--            Log.d("BusinessManagement", "Request object: $request")
--            
--            val response = api.createBusiness(request)
--            if (!response.isSuccessful) {
--                val errorBody = response.errorBody()?.string()
--                Log.e("BusinessManagement", "Error response: ${response.code()} - $errorBody")
--                Log.e("BusinessManagement", "Request URL: ${response.raw().request.url}")
--                Log.e("BusinessManagement", "Request headers: ${response.raw().request.headers}")
--                throw Exception("Failed to create business: [${response.code()}] $errorBody")
-+            val currentUser = userRepository.getCurrentUser()
-+            when (currentUser?.role) {
-+                UserRole.SYSTEM_OWNER, UserRole.SUPERADMIN -> {
-+                    val request = CreateBusinessRequest(
-+                        name = name,
-+                        systemOwnerId = if (currentUser.role == UserRole.SYSTEM_OWNER) currentUser.id else null,
-+                        superAdminId = if (currentUser.role == UserRole.SUPERADMIN) currentUser.id else null
-+                    )
-+                    
-+                    val response = api.createBusiness(request)
-+                    if (!response.isSuccessful) {
-+                        handleErrorResponse(response)
-+                    }
-+                    
-+                    val dto = response.body() ?: throw Exception("Empty response body")
-+                    val business = mapDtoToBusiness(dto)
-+
-+                    // Update user's systemOwnerId if they are a SYSTEM_OWNER
-+                    if (currentUser.role == UserRole.SYSTEM_OWNER) {
-+                        val updatedUser = currentUser.copy(
-+                            systemOwnerId = currentUser.id,
-+                            businessId = business.id
-+                        )
-+                        userRepository.updateUser(updatedUser)
-+                    }
-+
-+                    return business
-+                }
-+                else -> throw SecurityException("Insufficient permissions to create business")
-             }
-+        } catch (e: Exception) {
-+            handleException(e, "create business")
-+            throw e
-+        }
-+    }
-+
-+    override suspend fun getBusinessesBySystemOwnerId(systemOwnerId: String): List<Business> {
-+        validateSystemOwnerAccess(systemOwnerId)
-+        return api.getBusinessesBySystemOwnerId(systemOwnerId).map { mapDtoToBusiness(it) }
-+    }
-+
-+    override suspend fun getBusinessesBySuperAdminId(superAdminId: String): List<Business> {
-+        validateSuperAdminAccess(superAdminId, null)
-+        return api.getBusinessesBySuperAdminId(superAdminId).map { mapDtoToBusiness(it) }
-+    }
-+
-+    override suspend fun transferBusinessToSuperAdmin(businessId: String, newSuperAdminId: String) {
-+        val currentUser = userRepository.getCurrentUser()
-+        val business = getBusinessById(businessId)
-+        
-+        when {
-+            currentUser?.role == UserRole.SYSTEM_OWNER -> {
-+                api.transferBusiness(businessId, newSuperAdminId)
-+            }
-+            currentUser?.role == UserRole.SUPERADMIN && business.superAdminId == currentUser.id -> {
-+                api.transferBusiness(businessId, newSuperAdminId)
-+            }
-+            else -> throw SecurityException("Insufficient permissions to transfer business")
-+        }
-+    }
-+
-+    override suspend fun validateSuperAdminAccess(superAdminId: String, businessId: String?): Boolean {
-+        try {
-+            val currentUser = userRepository.getCurrentUser()
-+            Log.d("BusinessManagement", "Validating SuperAdmin access for user: ${currentUser?.id}, role: ${currentUser?.role}")
-             
--            val dto = response.body() ?: throw Exception("Empty response body")
--            return Business(
-+            return when {
-+                // System Owner tiene acceso total
-+                currentUser?.role == UserRole.SYSTEM_OWNER -> true
-+                
-+                // SuperAdmin solo puede acceder a sus propios negocios
-+                currentUser?.role == UserRole.SUPERADMIN && currentUser.id == superAdminId -> {
-+                    if (businessId == null) {
-+                        true // SuperAdmin can access their own general resources without a specific business
-+                    } else {
-+                        val business = getBusinessById(businessId)
-+                        business.superAdminId == superAdminId
-+                    }
-+                }
-+                
-+                // Otros roles no tienen acceso
-+                else -> false
-+            }.also {
-+                Log.d("BusinessManagement", "Access validation result: $it")
-+            }
-+        } catch (e: Exception) {
-+            Log.e("BusinessManagement", "Error validating SuperAdmin access", e)
-+            return false
-+        }
-+    }
-+
-+    override suspend fun getSystemOwnerBusinessStats(systemOwnerId: String): BusinessStats {
-+        validateSystemOwnerAccess(systemOwnerId)
-+        return api.getSystemOwnerBusinessStats(systemOwnerId)
-+    }
-+
-+    override suspend fun getSuperAdminBusinessStats(superAdminId: String): BusinessStats {
-+        validateSuperAdminAccess(superAdminId, null)
-+        return api.getSuperAdminBusinessStats(superAdminId)
-+    }
-+
-+    private suspend fun validateSystemOwnerAccess(systemOwnerId: String) {
-+        val currentUser = userRepository.getCurrentUser()
-+        if (currentUser?.role != UserRole.SYSTEM_OWNER || currentUser.id != systemOwnerId) {
-+            throw SecurityException("Insufficient permissions to access system owner resources")
-+        }
-+    }
-+
-+    private fun mapDtoToBusiness(dto: BusinessDto): Business {
-+        return try {
-+            Log.d("BusinessManagement", "Mapping DTO to Business: " +
-+                "id=${dto.id}, " +
-+                "name=${dto.name}, " +
-+                "status=${dto.status}, " +
-+                "systemOwnerId=${dto.systemOwnerId}, " +
-+                "superAdminId=${dto.superAdminId}")
-+                
-+            Business(
-                 id = dto.id,
-                 name = dto.name,
-                 totalUsers = dto.totalUsers,
-                 totalVehicles = dto.totalVehicles,
--                status = BusinessStatus.valueOf(dto.status.uppercase())
--            )
--        } catch (e: HttpException) {
--            val errorBody = e.response()?.errorBody()?.string()
--            val errorCode = e.response()?.code()
--            Log.e("BusinessManagement", "HTTP error: $errorCode - $errorBody")
--            Log.e("BusinessManagement", "Request URL: ${e.response()?.raw()?.request?.url}")
--            Log.e("BusinessManagement", "Request headers: ${e.response()?.raw()?.request?.headers}")
--            throw Exception("Failed to create business: [$errorCode] $errorBody")
-+                status = BusinessStatus.valueOf(dto.status.uppercase()),
-+                systemOwnerId = dto.systemOwnerId,
-+                superAdminId = dto.superAdminId,
-+                createdAt = dto.createdAt,
-+                updatedAt = dto.updatedAt
-+            ).also {
-+                Log.d("BusinessManagement", "Successfully mapped Business: " +
-+                    "id=${it.id}, " +
-+                    "name=${it.name}, " +
-+                    "status=${it.status}, " +
-+                    "systemOwnerId=${it.systemOwnerId}, " +
-+                    "superAdminId=${it.superAdminId}")
-+            }
-         } catch (e: Exception) {
--            Log.e("BusinessManagement", "Unexpected error", e)
--            throw Exception("Failed to create business: ${e.message}")
-+            Log.e("BusinessManagement", "Error mapping DTO to Business: ${dto.id}", e)
-+            throw e
-+        }
-+    }
-+
-+    private fun handleErrorResponse(response: retrofit2.Response<BusinessDto>) {
-+        val errorBody = response.errorBody()?.string()
-+        Log.e("BusinessManagement", "Error response: ${response.code()} - $errorBody")
-+        Log.e("BusinessManagement", "Request URL: ${response.raw().request.url}")
-+        Log.e("BusinessManagement", "Request headers: ${response.raw().request.headers}")
-+        throw Exception("Failed to create business: [${response.code()}] $errorBody")
-+    }
-+
-+    private fun handleException(e: Exception, operation: String) {
-+        when (e) {
-+            is HttpException -> {
-+                val errorBody = e.response()?.errorBody()?.string()
-+                val errorCode = e.response()?.code()
-+                Log.e("BusinessManagement", "HTTP error: $errorCode - $errorBody")
-+                Log.e("BusinessManagement", "Request URL: ${e.response()?.raw()?.request?.url}")
-+                Log.e("BusinessManagement", "Request headers: ${e.response()?.raw()?.request?.headers}")
-+                throw Exception("Failed to $operation: [$errorCode] $errorBody")
-+            }
-+            else -> {
-+                Log.e("BusinessManagement", "Unexpected error", e)
-+                throw Exception("Failed to $operation: ${e.message}")
-+            }
-         }
-     }
- 
-@@ -90,13 +235,7 @@ class BusinessRepositoryImpl @Inject constructor(
-             name = business.name,
-             status = business.status.name.lowercase()
-         )
--        return Business(
--            id = dto.id,
--            name = dto.name,
--            totalUsers = dto.totalUsers,
--            totalVehicles = dto.totalVehicles,
--            status = BusinessStatus.valueOf(dto.status.uppercase())
--        )
-+        return mapDtoToBusiness(dto)
-     }
- 
-     override suspend fun deleteBusiness(id: String) {
-diff --git a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
-index 15f7ffc..14ee150 100644
---- a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
-@@ -242,7 +242,9 @@ class UserRepositoryImpl @Inject constructor(
-                 certifications = user.certifications.map { it.toDto() },
-                 lastMedicalCheck = user.lastMedicalCheck,
-                 lastLogin = user.lastLogin,
--                isActive = user.isActive
-+                isActive = user.isActive,
-+                businessId = user.businessId,
-+                systemOwnerId = user.systemOwnerId
-             )
- 
-             val response = api.updateUser(user.id, userDto)
-@@ -279,13 +281,21 @@ class UserRepositoryImpl @Inject constructor(
- 
-     override suspend fun getAllUsers(): List<User> = withContext(Dispatchers.IO) {
-         try {
-+            Log.d("UserRepository", "Getting all users")
-             val response = api.getUsers()
-             if (!response.isSuccessful) {
-+                Log.e("UserRepository", "Failed to get users: ${response.code()}")
-                 return@withContext emptyList()
-             }
- 
--            response.body()?.map { it.toDomain() } ?: emptyList()
-+            val users = response.body()?.map { it.toDomain() } ?: emptyList()
-+            Log.d("UserRepository", "Successfully retrieved ${users.size} users")
-+            users.forEach { user ->
-+                Log.d("UserRepository", "User: ${user.firstName} ${user.lastName}, Role: ${user.role}")
-+            }
-+            users
-         } catch (e: Exception) {
-+            Log.e("UserRepository", "Error getting all users", e)
-             emptyList()
-         }
-     }
-diff --git a/app/src/main/java/app/forku/di/BusinessModule.kt b/app/src/main/java/app/forku/di/BusinessModule.kt
-index 1cbac2a..e18d302 100644
---- a/app/src/main/java/app/forku/di/BusinessModule.kt
-+++ b/app/src/main/java/app/forku/di/BusinessModule.kt
-@@ -3,6 +3,7 @@ package app.forku.di
- import app.forku.data.remote.api.BusinessApi
- import app.forku.data.repository.business.BusinessRepositoryImpl
- import app.forku.domain.repository.business.BusinessRepository
-+import app.forku.domain.repository.user.UserRepository
- import com.google.gson.Gson
- import dagger.Module
- import dagger.Provides
-@@ -16,7 +17,11 @@ object BusinessModule {
- 
-     @Provides
-     @Singleton
--    fun provideBusinessRepository(api: BusinessApi, gson: Gson): BusinessRepository {
--        return BusinessRepositoryImpl(api, gson)
-+    fun provideBusinessRepository(
-+        api: BusinessApi, 
-+        gson: Gson,
-+        userRepository: UserRepository
-+    ): BusinessRepository {
-+        return BusinessRepositoryImpl(api, gson, userRepository)
-     }
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/domain/model/user/User.kt b/app/src/main/java/app/forku/domain/model/user/User.kt
-index 2688e64..1522aee 100644
---- a/app/src/main/java/app/forku/domain/model/user/User.kt
-+++ b/app/src/main/java/app/forku/domain/model/user/User.kt
-@@ -22,7 +22,8 @@ data class User(
-     val isApproved: Boolean = false,
-     val password: String,
-     val businessId: String? = null,
--    val siteId: String? = null
-+    val siteId: String? = null,
-+    val systemOwnerId: String? = null
- ) {
-     val fullName: String
-         get() = "$firstName $lastName"
-diff --git a/app/src/main/java/app/forku/domain/model/user/UserRole.kt b/app/src/main/java/app/forku/domain/model/user/UserRole.kt
-index 840a6ba..c45f6f9 100644
---- a/app/src/main/java/app/forku/domain/model/user/UserRole.kt
-+++ b/app/src/main/java/app/forku/domain/model/user/UserRole.kt
-@@ -1,6 +1,7 @@
- package app.forku.domain.model.user
- 
- enum class UserRole {
-+    SYSTEM_OWNER,
-     SUPERADMIN,
-     ADMIN,
-     OPERATOR;
-diff --git a/app/src/main/java/app/forku/domain/repository/business/BusinessRepository.kt b/app/src/main/java/app/forku/domain/repository/business/BusinessRepository.kt
-index f8256d4..071a6b1 100644
---- a/app/src/main/java/app/forku/domain/repository/business/BusinessRepository.kt
-+++ b/app/src/main/java/app/forku/domain/repository/business/BusinessRepository.kt
-@@ -1,5 +1,6 @@
- package app.forku.domain.repository.business
- 
-+import app.forku.data.remote.dto.BusinessStats
- import app.forku.presentation.dashboard.Business
- 
- interface BusinessRepository {
-@@ -12,4 +13,10 @@ interface BusinessRepository {
-     suspend fun removeUserFromBusiness(userId: String, businessId: String)
-     suspend fun getBusinessUsers(businessId: String): List<String>
-     suspend fun getBusinessVehicles(businessId: String): List<String>
-+    suspend fun getBusinessesBySystemOwnerId(systemOwnerId: String): List<Business>
-+    suspend fun getBusinessesBySuperAdminId(superAdminId: String): List<Business>
-+    suspend fun transferBusinessToSuperAdmin(businessId: String, newSuperAdminId: String)
-+    suspend fun validateSuperAdminAccess(superAdminId: String, businessId: String?): Boolean
-+    suspend fun getSystemOwnerBusinessStats(systemOwnerId: String): BusinessStats
-+    suspend fun getSuperAdminBusinessStats(superAdminId: String): BusinessStats
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/presentation/business/BusinessManagementScreen.kt b/app/src/main/java/app/forku/presentation/business/BusinessManagementScreen.kt
-index cd5f031..0cf5ab2 100644
---- a/app/src/main/java/app/forku/presentation/business/BusinessManagementScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/business/BusinessManagementScreen.kt
-@@ -48,7 +48,7 @@ fun BusinessManagementScreen(
- 
-     LaunchedEffect(Unit) {
-         Log.d("BusinessManagement", "Screen launched, current user role: ${currentUser.value?.role}")
--        if (currentUser.value?.role != UserRole.SUPERADMIN) {
-+        if (currentUser.value?.role != UserRole.SYSTEM_OWNER && currentUser.value?.role != UserRole.SUPERADMIN) {
-             navController.navigateUp()
-         }
-     }
-diff --git a/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardState.kt b/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardState.kt
-index c3b339c..56121cf 100644
---- a/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardState.kt
-+++ b/app/src/main/java/app/forku/presentation/dashboard/SuperAdminDashboardState.kt
-@@ -30,14 +30,6 @@ data class SuperAdminDashboardState(
-     val recentAuditLogs: List<AuditLogEntry> = emptyList()
- )
- 
--data class Business(
--    val id: String,
--    val name: String,
--    val totalUsers: Int,
--    val totalVehicles: Int,
--    val status: BusinessStatus
--)
--
- enum class BusinessStatus {
-     ACTIVE,
-     PENDING,
-diff --git a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
-index a7e4928..28ed3a9 100644
---- a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
-+++ b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
-@@ -43,6 +43,7 @@ import app.forku.presentation.user.operator.OperatorsListScreen
- import app.forku.presentation.checklist.CheckDetailScreen
- import app.forku.presentation.safety.SafetyAlertsScreen
- import app.forku.presentation.business.BusinessManagementScreen
-+import app.forku.presentation.dashboard.SystemOwnerDashboardScreen
- 
- @Composable
- fun NavGraph(
-@@ -63,6 +64,7 @@ fun NavGraph(
-             !tourCompleted -> Screen.Tour.route
-             loginState is LoginState.Success || hasToken -> {
-                 when (currentUser?.role) {
-+                    UserRole.SYSTEM_OWNER -> Screen.SystemOwnerDashboard.route
-                     UserRole.SUPERADMIN -> Screen.SuperAdminDashboard.route
-                     UserRole.ADMIN -> Screen.AdminDashboard.route
-                     else -> Screen.Dashboard.route
-@@ -75,6 +77,7 @@ fun NavGraph(
-             LoginScreen(
-                 onLoginSuccess = { user ->
-                     val route = when (user.role) {
-+                        UserRole.SYSTEM_OWNER -> Screen.SystemOwnerDashboard.route
-                         UserRole.SUPERADMIN -> Screen.SuperAdminDashboard.route
-                         UserRole.ADMIN -> Screen.AdminDashboard.route
-                         else -> Screen.Dashboard.route
-@@ -441,6 +444,16 @@ fun NavGraph(
-             )
-         }
- 
-+        composable(Screen.SystemOwnerDashboard.route) {
-+            SystemOwnerDashboardScreen(
-+                navController = navController,
-+                onNavigate = { route ->
-+                    navController.navigate(route)
-+                },
-+                networkManager = networkManager
-+            )
-+        }
-+
-         // SuperAdmin specific routes
-         composable(Screen.UserManagement.route) {
-             // TODO: Implement UserManagementScreen
-diff --git a/app/src/main/java/app/forku/presentation/navigation/Screen.kt b/app/src/main/java/app/forku/presentation/navigation/Screen.kt
-index 00caf16..455b96c 100644
---- a/app/src/main/java/app/forku/presentation/navigation/Screen.kt
-+++ b/app/src/main/java/app/forku/presentation/navigation/Screen.kt
-@@ -74,6 +74,7 @@ sealed class Screen(val route: String) {
-     data object IncidentDetail : Screen("incident_detail/{incidentId}")
-     data object Tour : Screen("tour")
-     data object AdminDashboard : Screen("admin_dashboard")
-+    data object SystemOwnerDashboard : Screen("system_owner_dashboard")
-     data object SuperAdminDashboard : Screen("super_admin_dashboard")
-     data object OperatorsList : Screen("operator_session_list")
-     data object Notifications : Screen("notifications")
-diff --git a/current_diff_forku.txt b/current_diff_forku.txt
-index 1aca26b..daf8a13 100644
---- a/current_diff_forku.txt
-+++ b/current_diff_forku.txt
-@@ -1,8248 +0,0 @@
--diff --git a/app/src/main/java/app/forku/core/Constants.kt b/app/src/main/java/app/forku/core/Constants.kt
--index 49b7af7..d64d142 100644
----- a/app/src/main/java/app/forku/core/Constants.kt
--+++ b/app/src/main/java/app/forku/core/Constants.kt
--@@ -1,8 +1,7 @@
-- package app.forku.core
-- 
-- object Constants {
---    //const val BASE_URL = "https://67ce79d2125cd5af757aa258.mockapi.io/forku/api/v2/" //Test
---    const val BASE_URL = "https://67d20f4190e0670699bc531f.mockapi.io/forku/api/dev/" //Dev
--+    //const val BASE_URL = "https://67d20f4190e0670699bc531f.mockapi.io/forku/api/dev/" //Dev
--+    const val BASE_URL = "https://67ed9e4e4387d9117bbe2e16.mockapi.io/forku/api/v1/" //V1
--     const val API_VERSION = "v1"
---
-- }
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/data/api/GeneralApi.kt b/app/src/main/java/app/forku/data/api/GeneralApi.kt
--deleted file mode 100644
--index ccdd77c..0000000
----- a/app/src/main/java/app/forku/data/api/GeneralApi.kt
--+++ /dev/null
--@@ -1,139 +0,0 @@
---package app.forku.data.api
---
---import app.forku.data.api.dto.checklist.ChecklistResponseDto
---import app.forku.data.api.dto.user.UserDto
---import app.forku.data.api.dto.vehicle.VehicleDto
---import app.forku.data.api.dto.session.StartSessionRequestDto
---import app.forku.data.api.dto.checklist.PreShiftCheckDto
---import app.forku.data.api.dto.incident.IncidentDto
---import app.forku.data.api.dto.session.SessionDto
---import app.forku.data.api.dto.notification.NotificationDto
---import retrofit2.Response
---import retrofit2.http.*
---
---interface GeneralApi {
---
---
---    // Users
---    @GET("users")
---    suspend fun getUsers(): Response<List<UserDto>>
---
---    @GET("users/{id}")
---    suspend fun getUser(@Path("id") id: String): Response<UserDto>
---
---    @POST("users")
---    suspend fun createUser(@Body user: UserDto): Response<UserDto>
---
---    @PUT("users/{id}")
---    suspend fun updateUser(
---        @Path("id") id: String,
---        @Body user: UserDto
---    ): Response<UserDto>
---
---
---
---    // Vehicles
---    @GET("vehicles")
---    suspend fun getVehicles(): Response<List<VehicleDto>>
---
---    @GET("vehicles/{id}")
---    suspend fun getVehicle(@Path("id") id: String): Response<VehicleDto>
---
---    @PUT("vehicles/{id}")
---    suspend fun updateVehicle(
---        @Path("id") id: String,
---        @Body vehicle: VehicleDto
---    ): Response<VehicleDto>
---
---
---
---    // Incidents
---    @POST("incidents")
---    suspend fun reportIncident(@Body incident: IncidentDto): Response<IncidentDto>
---
---    @GET("incidents")
---    suspend fun getIncidents(): Response<List<IncidentDto>>
---
---    @GET("incidents/{id}")
---    suspend fun getIncidentById(@Path("id") id: String): Response<IncidentDto>
---
---
---
---    //PreShiftCheck Questionary
---    @GET("checklist_questionary")
---    suspend fun getChecklistQuestionary(): Response<ChecklistResponseDto>
---
---
---
---
---    // Global checks endpoints
---    @GET("checks")
---    suspend fun getAllChecks(): Response<List<PreShiftCheckDto>>
---
---    @GET("checks/{checkId}")
---    suspend fun getCheckById(@Path("checkId") checkId: String): Response<PreShiftCheckDto>
---
---    @POST("checks")
---    suspend fun createGlobalCheck(@Body check: PreShiftCheckDto): Response<PreShiftCheckDto>
---
---    @PUT("checks/{checkId}")
---    suspend fun updateGlobalCheck(
---        @Path("checkId") checkId: String,
---        @Body check: PreShiftCheckDto
---    ): Response<PreShiftCheckDto>
---
---
---
---
---
---    // Global session endpoints
---    @GET("sessions")
---    suspend fun getAllSessions(): Response<List<SessionDto>>
---
---    @GET("users/{userId}/sessions")
---    suspend fun getUserSessions(
---        @Path("userId") userId: String
---    ): Response<List<SessionDto>>
---
---    @GET("sessions/{sessionId}")
---    suspend fun getSessionById(@Path("sessionId") sessionId: String): Response<SessionDto>
---
---    @POST("sessions")
---    suspend fun createSession(@Body session: StartSessionRequestDto): Response<SessionDto>
---
---    @PUT("sessions/{sessionId}")
---    suspend fun updateSession(
---        @Path("sessionId") sessionId: String,
---        @Body session: SessionDto
---    ): Response<SessionDto>
---
---
---
---
---
---    /* Notifications */
---    @GET("notifications")
---    suspend fun getNotifications(): Response<List<NotificationDto>>
---
---    @GET("notifications/{id}")
---    suspend fun getNotification(
---        @Path("id") id: String
---    ): Response<NotificationDto>
---
---    @POST("notifications")
---    suspend fun createNotification(
---        @Body notification: NotificationDto
---    ): Response<NotificationDto>
---
---    @PUT("notifications/{id}")
---    suspend fun updateNotification(
---        @Path("id") id: String,
---        @Body notification: NotificationDto
---    ): Response<NotificationDto>
---
---    @DELETE("notifications/{id}")
---    suspend fun deleteNotification(
---        @Path("id") id: String
---    ): Response<Unit>
---}
---
--diff --git a/app/src/main/java/app/forku/data/api/dto/session/SessionDto.kt b/app/src/main/java/app/forku/data/api/dto/session/SessionDto.kt
--index e2a0d22..a0bb697 100644
----- a/app/src/main/java/app/forku/data/api/dto/session/SessionDto.kt
--+++ b/app/src/main/java/app/forku/data/api/dto/session/SessionDto.kt
--@@ -6,6 +6,7 @@ data class SessionDto(
--     val id: String,
--     val vehicleId: String,
--     val userId: String,
--+    val checkId: String,
--     val startTime: String,
--     val endTime: String?,
--     val status: String,
--diff --git a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
--index 64b228a..e2a630f 100644
----- a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
--+++ b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
--@@ -14,7 +14,8 @@ data class UserDto(
--     val certifications: List<CertificationDto>,
--     val lastMedicalCheck: String?,
--     val lastLogin: String?,
---    val isActive: Boolean = true
--+    val isActive: Boolean = true,
--+    val businessId: String? = null
-- )
-- 
-- data class CertificationDto(
--diff --git a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
--index 0f240ed..7d8a645 100644
----- a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
--+++ b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
--@@ -36,6 +36,8 @@ class AuthDataStore @Inject constructor(
--         val PASSWORD = stringPreferencesKey("password")
--         val LAST_ACTIVE = stringPreferencesKey("last_active")
--         val IS_ONLINE = booleanPreferencesKey("is_online")
--+        val BUSINESS_ID = stringPreferencesKey("business_id")
--+        val SITE_ID = stringPreferencesKey("site_id")
--     }
-- 
--     @Volatile
--@@ -77,6 +79,8 @@ class AuthDataStore @Inject constructor(
--             - Name: ${user.fullName}
--             - Token: ${user.token.take(10)}...
--             - Role: ${user.role}
--+            - Business ID: ${user.businessId}
--+            - Site ID: ${user.siteId}
--         """.trimIndent())
--         
--         context.dataStore.edit { preferences ->
--@@ -92,6 +96,8 @@ class AuthDataStore @Inject constructor(
--             preferences[PreferencesKeys.TOKEN_KEY] = user.token
--             preferences[PreferencesKeys.PASSWORD] = user.password
--             preferences[PreferencesKeys.IS_ONLINE] = true
--+            user.businessId?.let { preferences[PreferencesKeys.BUSINESS_ID] = it }
--+            user.siteId?.let { preferences[PreferencesKeys.SITE_ID] = it }
--             val now = System.currentTimeMillis()
--             preferences[PreferencesKeys.LAST_ACTIVE] = now.toString()
--             lastActiveTime = now
--@@ -117,6 +123,8 @@ class AuthDataStore @Inject constructor(
--                 - ROLE: ${preferences[PreferencesKeys.ROLE]}
--                 - IS_ONLINE: ${preferences[PreferencesKeys.IS_ONLINE]}
--                 - LAST_ACTIVE: ${preferences[PreferencesKeys.LAST_ACTIVE]}
--+                - BUSINESS_ID: ${preferences[PreferencesKeys.BUSINESS_ID]}
--+                - SITE_ID: ${preferences[PreferencesKeys.SITE_ID]}
--             """.trimIndent())
--             
--             val userId = preferences[PreferencesKeys.USER_ID]
--@@ -157,6 +165,8 @@ class AuthDataStore @Inject constructor(
--                 return null
--             }
--             val password = preferences[PreferencesKeys.PASSWORD] ?: ""
--+            val businessId = preferences[PreferencesKeys.BUSINESS_ID]
--+            val siteId = preferences[PreferencesKeys.SITE_ID]
-- 
--             val isOnline = preferences[PreferencesKeys.IS_ONLINE] ?: false
--             val lastActive = preferences[PreferencesKeys.LAST_ACTIVE]?.toLongOrNull() ?: 0L
--@@ -174,7 +184,9 @@ class AuthDataStore @Inject constructor(
--                 certifications = emptyList(),
--                 password = password,
--                 isActive = isOnline,
---                lastLogin = lastActive.toString()
--+                lastLogin = lastActive.toString(),
--+                businessId = businessId,
--+                siteId = siteId
--             ).also {
--                 android.util.Log.d("AuthDataStore", """
--                     User retrieved successfully:
--@@ -182,6 +194,8 @@ class AuthDataStore @Inject constructor(
--                     - Name: ${it.fullName}
--                     - Token: ${it.token.take(10)}...
--                     - Role: ${it.role}
--+                    - Business ID: ${it.businessId}
--+                    - Site ID: ${it.siteId}
--                     - Online: $isOnline
--                     - Last Active: ${java.time.Instant.ofEpochMilli(lastActive)}
--                 """.trimIndent())
--diff --git a/app/src/main/java/app/forku/data/mapper/SessionMapper.kt b/app/src/main/java/app/forku/data/mapper/SessionMapper.kt
--deleted file mode 100644
--index 6c0f1cf..0000000
----- a/app/src/main/java/app/forku/data/mapper/SessionMapper.kt
--+++ /dev/null
--@@ -1,68 +0,0 @@
---package app.forku.data.mapper
---
---
---import app.forku.data.api.dto.session.SessionDto
---import app.forku.domain.model.session.VehicleSessionStatus
---import app.forku.domain.model.session.VehicleSession
---import app.forku.domain.model.session.VehicleSessionClosedMethod
---
---
---fun SessionDto.toDomain(): VehicleSession {
---    val duration = if (endTime != null) {
---        try {
---            val start = java.time.ZonedDateTime.parse(startTime).toInstant()
---            val end = java.time.ZonedDateTime.parse(endTime).toInstant()
---            java.time.Duration.between(start, end).toMinutes().toInt()
---        } catch (e: Exception) {
---            null
---        }
---    } else null
---
---    // Strict status mapping
---    val vehicleSessionStatus = when (status.uppercase()) {
---        "OPERATING" -> VehicleSessionStatus.OPERATING
---        else -> VehicleSessionStatus.NOT_OPERATING
---    }
---
---    // Map close method
---    val closeMethod = when (this.closeMethod?.uppercase()) {
---        "USER_CLOSED" -> VehicleSessionClosedMethod.USER_CLOSED
---        "ADMIN_CLOSED" -> VehicleSessionClosedMethod.ADMIN_CLOSED
---        "TIMEOUT_CLOSED" -> VehicleSessionClosedMethod.TIMEOUT_CLOSED
---        "GEOFENCE_CLOSED" -> VehicleSessionClosedMethod.GEOFENCE_CLOSED
---        else -> VehicleSessionClosedMethod.USER_CLOSED // Default value
---    }
---
---    return VehicleSession(
---        id = id,
---        vehicleId = vehicleId,
---        userId = userId,
---        startTime = startTime,
---        endTime = endTime,
---        status = vehicleSessionStatus,
---        startLocationCoordinates = startLocationCoordinates,
---        endLocationCoordinates = endLocationCoordinates,
---        durationMinutes = duration,
---        timestamp = timestamp,
---        closeMethod = closeMethod,
---        closedBy = closedBy,
---        notes = notes
---    )
---}
---
---fun VehicleSession.toDto(): SessionDto {
---    return SessionDto(
---        id = id,
---        vehicleId = vehicleId,
---        userId = userId,
---        startTime = startTime,
---        endTime = endTime,
---        status = status.name,
---        startLocationCoordinates = startLocationCoordinates,
---        endLocationCoordinates = endLocationCoordinates,
---        timestamp = timestamp,
---        closeMethod = closeMethod.name,
---        closedBy = closedBy,
---        notes = notes
---    )
---} 
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/data/mapper/UserMapper.kt b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
--index 642815b..74c8642 100644
----- a/app/src/main/java/app/forku/data/mapper/UserMapper.kt
--+++ b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
--@@ -24,7 +24,8 @@ fun UserDto.toDomain(): User {
--         lastMedicalCheck = lastMedicalCheck,
--         lastLogin = lastLogin,
--         isActive = isActive,
---        password = password
--+        password = password,
--+        businessId = businessId
--     )
-- }
-- 
--@@ -51,7 +52,8 @@ fun User.toDto(): UserDto {
--         certifications = certifications.map { it.toDto() },
--         lastMedicalCheck = lastMedicalCheck,
--         lastLogin = lastLogin,
---        isActive = isActive
--+        isActive = isActive,
--+        businessId = businessId
--     )
-- }
-- 
--diff --git a/app/src/main/java/app/forku/data/mapper/VehicleSessionMapper.kt b/app/src/main/java/app/forku/data/mapper/VehicleSessionMapper.kt
--index 014aeb5..6ef5418 100644
----- a/app/src/main/java/app/forku/data/mapper/VehicleSessionMapper.kt
--+++ b/app/src/main/java/app/forku/data/mapper/VehicleSessionMapper.kt
--@@ -1,44 +1,109 @@
-- package app.forku.data.mapper
-- 
-- import app.forku.data.model.VehicleSessionDto
--+import app.forku.data.api.dto.session.SessionDto
-- import app.forku.domain.model.session.VehicleSession
-- import app.forku.domain.model.session.VehicleSessionStatus
-- import app.forku.domain.model.session.VehicleSessionClosedMethod
-- 
---fun VehicleSessionDto.toVehicleSession(): VehicleSession {
---    return VehicleSession(
---        id = id,
---        vehicleId = vehicleId,
---        userId = operatorId,
---        startTime = startTime,
---        endTime = endTime,
---        status = if (endTime == null) VehicleSessionStatus.OPERATING else VehicleSessionStatus.NOT_OPERATING,
---        startLocationCoordinates = startLocationCoordinates,
---        endLocationCoordinates = endLocationCoordinates,
---        durationMinutes = null,
---        timestamp = startTime,
---        closeMethod = closeMethod?.let { 
--+object VehicleSessionMapper {
--+    fun calculateDuration(startTime: String, endTime: String?): Int? {
--+        return if (endTime != null) {
--             try {
---                VehicleSessionClosedMethod.valueOf(it)
---            } catch (e: IllegalArgumentException) {
---                VehicleSessionClosedMethod.USER_CLOSED
--+                val start = java.time.ZonedDateTime.parse(startTime).toInstant()
--+                val end = java.time.ZonedDateTime.parse(endTime).toInstant()
--+                java.time.Duration.between(start, end).toMinutes().toInt()
--+            } catch (e: Exception) {
--+                null
--             }
---        } ?: VehicleSessionClosedMethod.USER_CLOSED,
---        closedBy = closedBy,
---        notes = null
---    )
---}
--+        } else null
--+    }
-- 
---fun VehicleSession.toVehicleSessionDto(): VehicleSessionDto {
---    return VehicleSessionDto(
---        id = id,
---        vehicleId = vehicleId,
---        operatorId = userId,
---        startTime = startTime,
---        endTime = endTime,
---        closeMethod = closeMethod.name,
---        closedBy = closedBy,
---        startLocationCoordinates = startLocationCoordinates,
---        endLocationCoordinates = endLocationCoordinates
---    )
--+    fun mapCloseMethod(closeMethod: String?): VehicleSessionClosedMethod? {
--+        return when (closeMethod?.uppercase()) {
--+            "USER_CLOSED" -> VehicleSessionClosedMethod.USER_CLOSED
--+            "ADMIN_CLOSED" -> VehicleSessionClosedMethod.ADMIN_CLOSED
--+            "TIMEOUT_CLOSED" -> VehicleSessionClosedMethod.TIMEOUT_CLOSED
--+            "GEOFENCE_CLOSED" -> VehicleSessionClosedMethod.GEOFENCE_CLOSED
--+            null -> null
--+            else -> VehicleSessionClosedMethod.USER_CLOSED
--+        }
--+    }
--+
--+    fun toDomain(dto: VehicleSessionDto): VehicleSession {
--+        return VehicleSession(
--+            id = dto.id,
--+            vehicleId = dto.vehicleId,
--+            userId = dto.userId,
--+            checkId = dto.checkId,
--+            startTime = dto.startTime,
--+            endTime = dto.endTime,
--+            status = VehicleSessionStatus.valueOf(dto.status),
--+            startLocationCoordinates = dto.startLocationCoordinates,
--+            endLocationCoordinates = dto.endLocationCoordinates,
--+            durationMinutes = calculateDuration(dto.startTime, dto.endTime),
--+            timestamp = dto.timestamp,
--+            closeMethod = mapCloseMethod(dto.closeMethod),
--+            closedBy = dto.closedBy,
--+            notes = dto.notes
--+        )
--+    }
--+
--+    fun toDomain(dto: SessionDto): VehicleSession {
--+        return VehicleSession(
--+            id = dto.id,
--+            vehicleId = dto.vehicleId,
--+            userId = dto.userId,
--+            checkId = dto.checkId,
--+            startTime = dto.startTime,
--+            endTime = dto.endTime,
--+            status = when (dto.status.uppercase()) {
--+                "OPERATING" -> VehicleSessionStatus.OPERATING
--+                else -> VehicleSessionStatus.NOT_OPERATING
--+            },
--+            startLocationCoordinates = dto.startLocationCoordinates,
--+            endLocationCoordinates = dto.endLocationCoordinates,
--+            durationMinutes = calculateDuration(dto.startTime, dto.endTime),
--+            timestamp = dto.timestamp,
--+            closeMethod = mapCloseMethod(dto.closeMethod),
--+            closedBy = dto.closedBy,
--+            notes = dto.notes
--+        )
--+    }
--+
--+    fun toDto(domain: VehicleSession): SessionDto {
--+        return SessionDto(
--+            id = domain.id,
--+            vehicleId = domain.vehicleId,
--+            userId = domain.userId,
--+            checkId = domain.checkId,
--+            startTime = domain.startTime,
--+            endTime = domain.endTime,
--+            status = domain.status.name,
--+            startLocationCoordinates = domain.startLocationCoordinates,
--+            endLocationCoordinates = domain.endLocationCoordinates,
--+            timestamp = domain.timestamp,
--+            closeMethod = domain.closeMethod?.name,
--+            closedBy = domain.closedBy,
--+            notes = domain.notes
--+        )
--+    }
--+
--+    fun toVehicleSessionDto(domain: VehicleSession): VehicleSessionDto {
--+        return VehicleSessionDto(
--+            id = domain.id,
--+            vehicleId = domain.vehicleId,
--+            userId = domain.userId,
--+            checkId = domain.checkId,
--+            startTime = domain.startTime,
--+            endTime = domain.endTime,
--+            timestamp = domain.timestamp,
--+            status = domain.status.toString(),
--+            closeMethod = domain.closeMethod?.toString(),
--+            closedBy = domain.closedBy,
--+            startLocationCoordinates = domain.startLocationCoordinates,
--+            endLocationCoordinates = domain.endLocationCoordinates,
--+            notes = domain.notes
--+        )
--+    }
-- } 
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/data/model/VehicleSessionDto.kt b/app/src/main/java/app/forku/data/model/VehicleSessionDto.kt
--index 9260b78..acdea99 100644
----- a/app/src/main/java/app/forku/data/model/VehicleSessionDto.kt
--+++ b/app/src/main/java/app/forku/data/model/VehicleSessionDto.kt
--@@ -8,17 +8,25 @@ data class VehicleSessionDto(
--     @SerializedName("vehicle_id")
--     val vehicleId: String,
--     @SerializedName("operator_id")
---    val operatorId: String,
--+    val userId: String,
--+    @SerializedName("check_id")
--+    val checkId: String,
--     @SerializedName("start_time")
--     val startTime: String,
--     @SerializedName("end_time")
--     val endTime: String?,
---    @SerializedName("close_method")
---    val closeMethod: String? = null,
---    @SerializedName("closed_by")
---    val closedBy: String? = null,
--+    @SerializedName("timestamp")
--+    val timestamp: String,
--+    @SerializedName("status")
--+    val status: String,
--     @SerializedName("start_location_coordinates")
---    val startLocationCoordinates: String? = null,
--+    val startLocationCoordinates: String?,
--     @SerializedName("end_location_coordinates")
---    val endLocationCoordinates: String? = null
--+    val endLocationCoordinates: String?,
--+    @SerializedName("close_method")
--+    val closeMethod: String?,
--+    @SerializedName("closed_by")
--+    val closedBy: String?,
--+    @SerializedName("notes")
--+    val notes: String?
-- ) 
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt
--index ade55de..7199ac0 100644
----- a/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt
--+++ b/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt
--@@ -1,6 +1,5 @@
-- package app.forku.data.repository.checklist
-- 
---import app.forku.data.api.GeneralApi
-- import app.forku.data.datastore.AuthDataStore
-- import app.forku.domain.repository.checklist.ChecklistRepository
-- import app.forku.domain.usecase.checklist.ValidateChecklistUseCase
--@@ -15,11 +14,11 @@ import app.forku.domain.model.checklist.CheckStatus
-- import java.time.Instant
-- import app.forku.domain.repository.checklist.ChecklistStatusNotifier
-- import app.forku.core.location.LocationManager
---
--+import app.forku.data.api.ChecklistApi
-- 
-- 
-- class ChecklistRepositoryImpl @Inject constructor(
---    private val api: GeneralApi,
--+    private val api: ChecklistApi,
--     private val authDataStore: AuthDataStore,
--     private val validateChecklistUseCase: ValidateChecklistUseCase,
--     private val checklistStatusNotifier: ChecklistStatusNotifier,
--@@ -48,14 +47,14 @@ class ChecklistRepositoryImpl @Inject constructor(
--         }
--     }
-- 
---    override suspend fun getLastPreShiftCheck(vehicleId: String): PreShiftCheck? {
--+    override suspend fun getLastPreShiftCheck(vehicleId: String, businessId: String): PreShiftCheck? {
--         var attempts = 0
--         val maxAttempts = 3
--         var delay = 1000L
--         
--         while (attempts < maxAttempts) {
--             try {
---                val response = api.getAllChecks()
--+                val response = api.getAllChecks(businessId)
--                 
--                 if (response.isSuccessful && response.body() != null) {
--                     return response.body()!!
--@@ -143,9 +142,11 @@ class ChecklistRepositoryImpl @Inject constructor(
--         val maxAttempts = 3
--         var delay = 1000L
-- 
--+        val businessId = authDataStore.getCurrentUser()?.businessId ?: return emptyList()
--+
--         while (attempts < maxAttempts) {
--             try {
---                val response = api.getAllChecks()
--+                val response = api.getAllChecks(businessId)
--                 
--                 if (response.isSuccessful && response.body() != null) {
--                     val allChecks = response.body()!!
--@@ -208,7 +209,8 @@ class ChecklistRepositoryImpl @Inject constructor(
-- 
--     override suspend fun hasChecklistInCreation(vehicleId: String): Boolean {
--         return try {
---            val lastCheck = getLastPreShiftCheck(vehicleId)
--+            val businessId = authDataStore.getCurrentUser()?.businessId ?: return false
--+            val lastCheck = getLastPreShiftCheck(vehicleId, businessId)
--             lastCheck?.status == CheckStatus.NOT_STARTED.toString() ||
--                     lastCheck?.status == CheckStatus.IN_PROGRESS.toString()
--         } catch (e: Exception) {
--diff --git a/app/src/main/java/app/forku/data/repository/checklist/ChecklistStatusNotifierImpl.kt b/app/src/main/java/app/forku/data/repository/checklist/ChecklistStatusNotifierImpl.kt
--index 866bca4..6eb22e1 100644
----- a/app/src/main/java/app/forku/data/repository/checklist/ChecklistStatusNotifierImpl.kt
--+++ b/app/src/main/java/app/forku/data/repository/checklist/ChecklistStatusNotifierImpl.kt
--@@ -6,14 +6,25 @@ import app.forku.domain.model.checklist.CheckStatus
-- import app.forku.domain.model.vehicle.VehicleStatus
-- import app.forku.domain.service.VehicleValidationService
-- import app.forku.domain.service.VehicleStatusDeterminer
--+import app.forku.data.datastore.AuthDataStore
-- import javax.inject.Inject
--+import javax.inject.Singleton
-- 
--+@Singleton
-- class ChecklistStatusNotifierImpl @Inject constructor(
--     private val vehicleStatusUpdater: VehicleStatusUpdater,
---    private val vehicleStatusDeterminer: VehicleStatusDeterminer
--+    private val vehicleStatusDeterminer: VehicleStatusDeterminer,
--+    private val authDataStore: AuthDataStore
-- ) : ChecklistStatusNotifier {
--     override suspend fun notifyCheckStatusChanged(vehicleId: String, checkStatus: String) {
--+        val businessId = authDataStore.getCurrentUser()?.businessId
--+            ?: throw Exception("User not authenticated or missing business ID")
--+            
--         val newVehicleStatus = vehicleStatusDeterminer.determineStatusFromCheck(checkStatus)
---        vehicleStatusUpdater.updateVehicleStatus(vehicleId, newVehicleStatus)
--+        vehicleStatusUpdater.updateVehicleStatus(
--+            vehicleId = vehicleId,
--+            status = newVehicleStatus,
--+            businessId = businessId
--+        )
--     }
-- } 
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/data/repository/cico/CicoHistoryRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/cico/CicoHistoryRepositoryImpl.kt
--index 14306be..255f778 100644
----- a/app/src/main/java/app/forku/data/repository/cico/CicoHistoryRepositoryImpl.kt
--+++ b/app/src/main/java/app/forku/data/repository/cico/CicoHistoryRepositoryImpl.kt
--@@ -1,15 +1,15 @@
-- package app.forku.data.repository.cico
-- 
-- import app.forku.core.Constants
---import app.forku.data.api.GeneralApi
--+import app.forku.data.api.SessionApi
-- import app.forku.data.datastore.AuthDataStore
---import app.forku.data.mapper.toDomain
--+import app.forku.data.mapper.VehicleSessionMapper
-- import app.forku.domain.model.session.VehicleSession
-- import app.forku.domain.repository.cico.CicoHistoryRepository
-- import javax.inject.Inject
-- 
-- class CicoHistoryRepositoryImpl @Inject constructor(
---    private val api: GeneralApi,
--+    private val api: SessionApi,
--     private val authDataStore: AuthDataStore
-- ) : CicoHistoryRepository {
-- 
--@@ -22,12 +22,13 @@ class CicoHistoryRepositoryImpl @Inject constructor(
--             val response = api.getAllSessions()
--             
--             if (response.isSuccessful && response.body() != null) {
---                val allSessions = response.body()!!.map { it.toDomain() }
--+                val allSessions = response.body()!!
--+                    .map { VehicleSessionMapper.toDomain(it) }
--                     .sortedByDescending { it.startTime }
--                 // Handle pagination on client side if server doesn't support it
--                 allSessions.drop((page - 1) * PAGE_SIZE).take(PAGE_SIZE)
--             } else {
---                android.util.Log.e("CicoHistory", "Error getting all sessions: ${response.code()}")
--+                android.util.Log.e("CicoHistory","Error getting all sessions: ${response.code()}")
--                 emptyList()
--             }
--         } catch (e: Exception) {
--@@ -38,34 +39,20 @@ class CicoHistoryRepositoryImpl @Inject constructor(
-- 
--     override suspend fun getOperatorSessionsHistory(operatorId: String, page: Int): List<VehicleSession> {
--         return try {
---            // First try with the specific endpoint
---            val response = api.getUserSessions(userId = operatorId)
---            
---            if (response.isSuccessful) {
---                val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
---                // Sort by start time descending and handle pagination on client side
---                sessions.sortedByDescending { it.startTime }
---                    .drop((page - 1) * PAGE_SIZE)
---                    .take(PAGE_SIZE)
--+            val response = api.getAllSessions()
--+            if (response.isSuccessful && response.body() != null) {
--+                val operatorSessions = response.body()!!
--+                    .map { VehicleSessionMapper.toDomain(it) }
--+                    .filter { it.userId == operatorId }
--+                    .sortedByDescending { it.startTime }
--+                // Handle pagination on client side
--+                operatorSessions.drop((page - 1) * PAGE_SIZE).take(PAGE_SIZE)
--             } else {
---                // Fallback to getting all sessions and filtering
---                android.util.Log.d("CicoHistory", "Specific endpoint failed, falling back to filtering all sessions")
---                val allSessionsResponse = api.getAllSessions()
---                
---                if (allSessionsResponse.isSuccessful) {
---                    val allSessions = allSessionsResponse.body()?.map { it.toDomain() } ?: emptyList()
---                    val operatorSessions = allSessions
---                        .filter { it.userId == operatorId }
---                        .sortedByDescending { it.startTime }
---                    // Handle pagination on client side
---                    operatorSessions.drop((page - 1) * PAGE_SIZE).take(PAGE_SIZE)
---                } else {
---                    android.util.Log.e("CicoHistory", "Error getting operator sessions: ${allSessionsResponse.code()}")
---                    emptyList()
---                }
--+                android.util.Log.e("CicoHistory","Error getting operator sessions: ${response.code()}")
--+                emptyList()
--             }
--         } catch (e: Exception) {
---            android.util.Log.e("CicoHistory", "Error getting operator sessions", e)
--+            android.util.Log.e("CicoHistory","Error getting operator sessions", e)
--             emptyList()
--         }
--     }
--diff --git a/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt
--index e9d0039..a35c150 100644
----- a/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt
--+++ b/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt
--@@ -1,6 +1,6 @@
-- package app.forku.data.repository.incident
-- 
---import app.forku.data.api.GeneralApi
--+import app.forku.data.api.IncidentApi
-- import app.forku.data.datastore.AuthDataStore
-- import app.forku.data.mapper.toDto
-- import app.forku.data.mapper.toDomain
--@@ -9,7 +9,7 @@ import app.forku.domain.repository.incident.IncidentRepository
-- import javax.inject.Inject
-- 
-- class IncidentRepositoryImpl @Inject constructor(
---    private val api: GeneralApi,
--+    private val api: IncidentApi,
--     private val authDataStore: AuthDataStore
-- ) : IncidentRepository {
--     override suspend fun reportIncident(incident: Incident): Result<Incident> {
--diff --git a/app/src/main/java/app/forku/data/repository/notification/NotificationRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/notification/NotificationRepositoryImpl.kt
--index 1faf832..22d41f2 100644
----- a/app/src/main/java/app/forku/data/repository/notification/NotificationRepositoryImpl.kt
--+++ b/app/src/main/java/app/forku/data/repository/notification/NotificationRepositoryImpl.kt
--@@ -1,6 +1,7 @@
-- package app.forku.data.repository.notification
-- 
---import app.forku.data.api.GeneralApi
--+
--+import app.forku.data.api.NotificationApi
-- import app.forku.data.mapper.toNotification
-- import app.forku.data.mapper.toNotificationDto
-- import app.forku.domain.model.notification.Notification
--@@ -13,7 +14,7 @@ import javax.inject.Singleton
-- 
-- @Singleton
-- class NotificationRepositoryImpl @Inject constructor(
---    private val api: GeneralApi
--+    private val api: NotificationApi
-- ) : NotificationRepository {
-- 
--     private val _notifications = MutableStateFlow<List<Notification>>(emptyList())
--diff --git a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
--index 2e9b031..15f7ffc 100644
----- a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
--+++ b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
--@@ -1,6 +1,6 @@
-- package app.forku.data.repository.user
-- 
---import app.forku.data.api.GeneralApi
--+import app.forku.data.api.UserApi
-- import app.forku.data.api.dto.user.UserDto
-- import app.forku.data.mapper.toDomain
-- import app.forku.domain.model.user.User
--@@ -15,10 +15,11 @@ import kotlinx.coroutines.Dispatchers
-- import kotlinx.coroutines.withContext
-- import javax.inject.Singleton
-- import kotlinx.coroutines.flow.Flow
--+import android.util.Log
-- 
-- @Singleton
-- class UserRepositoryImpl @Inject constructor(
---    private val api: GeneralApi,
--+    private val api: UserApi,
--     private val authDataStore: AuthDataStore,
--     private val tourPreferences: TourPreferences
-- ) : UserRepository {
--@@ -290,11 +291,26 @@ class UserRepositoryImpl @Inject constructor(
--     }
-- 
--     override suspend fun deleteUser(userId: String) {
---        TODO("Not yet implemented")
--+        try {
--+            val response = api.deleteUser(userId)
--+            if (!response.isSuccessful) {
--+                throw Exception("Failed to delete user")
--+            }
--+        } catch (e: Exception) {
--+            throw e
--+        }
--     }
-- 
--     override suspend fun searchUsers(query: String): List<User> {
---        TODO("Not yet implemented")
--+        return try {
--+            val allUsers = getAllUsers()
--+            allUsers.filter { user ->
--+                user.fullName.contains(query, ignoreCase = true) ||
--+                user.email.contains(query, ignoreCase = true)
--+            }
--+        } catch (e: Exception) {
--+            emptyList()
--+        }
--     }
-- 
--     override suspend fun observeCurrentUser(): Flow<User?> {
--@@ -325,4 +341,24 @@ class UserRepositoryImpl @Inject constructor(
--     override suspend fun getCurrentUserId(): String? {
--         return authDataStore.getCurrentUser()?.id
--     }
--+
--+    override suspend fun getUnassignedUsers(): List<User> {
--+        Log.d("UserRepository", "Getting unassigned users")
--+        return try {
--+            // Obtener todos los usuarios
--+            val allUsers = getAllUsers()
--+            Log.d("UserRepository", "Total users: ${allUsers.size}")
--+            
--+            // Filtrar usuarios que no tienen businessId o businessId está vacío
--+            val unassignedUsers = allUsers.filter { user ->
--+                user.businessId.isNullOrEmpty()
--+            }
--+            Log.d("UserRepository", "Unassigned users: ${unassignedUsers.size}")
--+            
--+            unassignedUsers
--+        } catch (e: Exception) {
--+            Log.e("UserRepository", "Error getting unassigned users", e)
--+            emptyList()
--+        }
--+    }
-- } 
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/data/repository/vehicle/VehicleRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle/VehicleRepositoryImpl.kt
--index 2455eae..3d87dcb 100644
----- a/app/src/main/java/app/forku/data/repository/vehicle/VehicleRepositoryImpl.kt
--+++ b/app/src/main/java/app/forku/data/repository/vehicle/VehicleRepositoryImpl.kt
--@@ -1,12 +1,13 @@
-- package app.forku.data.repository.vehicle
-- 
---import app.forku.data.api.GeneralApi
--+import app.forku.data.api.VehicleApi
-- import app.forku.data.datastore.AuthDataStore
-- import app.forku.data.mapper.toDomain
-- import app.forku.data.mapper.toDto
-- import app.forku.domain.model.vehicle.Vehicle
-- import app.forku.domain.repository.vehicle.VehicleRepository
-- import javax.inject.Inject
--+import javax.inject.Singleton
-- import app.forku.domain.usecase.checklist.ValidateChecklistUseCase
-- import app.forku.domain.model.vehicle.VehicleStatus
-- import app.forku.domain.model.vehicle.getErrorMessage
--@@ -16,9 +17,13 @@ import kotlinx.coroutines.sync.Mutex
-- import kotlinx.coroutines.sync.withLock
-- import java.util.concurrent.ConcurrentHashMap
-- import java.util.concurrent.TimeUnit
--+import kotlinx.coroutines.Dispatchers
--+import kotlinx.coroutines.withContext
--+import dagger.hilt.android.scopes.ViewModelScoped
-- 
--+@Singleton
-- class VehicleRepositoryImpl @Inject constructor(
---    private val api: GeneralApi,
--+    private val api: VehicleApi,
--     private val authDataStore: AuthDataStore,
--     private val validateChecklistUseCase: ValidateChecklistUseCase,
--     private val vehicleStatusRepository: VehicleStatusRepository
--@@ -40,47 +45,59 @@ class VehicleRepositoryImpl @Inject constructor(
--         return (now - cachedVehicle.timestamp) < CACHE_DURATION_MS
--     }
-- 
---    override suspend fun getVehicle(id: String): Vehicle = mutex.withLock {
---        // Check cache first
---        cache[id]?.let { cached ->
---            if (isCacheValid(cached)) {
---                return cached.vehicle
---            }
---        }
---
---        try {
---            val response = api.getVehicle(id)
---            if (!response.isSuccessful) {
---                when (response.code()) {
---                    404 -> throw Exception("Vehicle not found")
---                    429 -> throw Exception("Rate limit exceeded. Please try again later.")
---                    in 500..599 -> throw Exception("Server error. Please try again later.")
---                    else -> throw Exception("Failed to get vehicle: ${response.code()}")
--+    override suspend fun getVehicle(
--+        id: String,
--+        businessId: String
--+    ): Vehicle = withContext(Dispatchers.IO) {
--+        mutex.withLock {
--+            // Check cache first
--+            cache[id]?.let { cached ->
--+                if (isCacheValid(cached)) {
--+                    return@withContext cached.vehicle
--                 }
--             }
-- 
---            val vehicle = response.body()?.toDomain() 
---                ?: throw Exception("Vehicle data is missing")
--+            try {
--+                val response = api.getVehicle(businessId, id)
--+                if (!response.isSuccessful) {
--+                    when (response.code()) {
--+                        404 -> throw Exception("Vehicle not found")
--+                        429 -> throw Exception("Rate limit exceeded. Please try again later.")
--+                        in 500..599 -> throw Exception("Server error. Please try again later.")
--+                        else -> throw Exception("Failed to get vehicle: ${response.code()}")
--+                    }
--+                }
-- 
---            // Update cache
---            cache[id] = CachedVehicle(vehicle, System.currentTimeMillis())
---            
---            return vehicle
---        } catch (e: Exception) {
---            android.util.Log.e("VehicleRepo", "Error getting vehicle $id", e)
---            // If we have a cached version, return it as fallback
---            cache[id]?.vehicle?.let { cached ->
---                android.util.Log.d("VehicleRepo", "Returning cached vehicle as fallback")
---                return cached
--+                val vehicle = response.body()?.toDomain() 
--+                    ?: throw Exception("Vehicle data is missing")
--+
--+                // Update cache
--+                cache[id] = CachedVehicle(vehicle, System.currentTimeMillis())
--+                
--+                vehicle
--+            } catch (e: Exception) {
--+                android.util.Log.e("VehicleRepo", "Error getting vehicle $id", e)
--+                // If we have a cached version, return it as fallback
--+                cache[id]?.vehicle?.let { cached ->
--+                    android.util.Log.d("VehicleRepo", "Returning cached vehicle as fallback")
--+                    cached
--+                } ?: throw e
--             }
---            throw e
--         }
--     }
-- 
---    override suspend fun getVehicleByQr(code: String, checkAvailability: Boolean): Vehicle {
--+    override suspend fun getVehicleByQr(
--+        code: String,
--+        checkAvailability: Boolean,
--+        businessId: String?
--+    ): Vehicle = withContext(Dispatchers.IO) {
--         try {
--+            // Use provided businessId or get from current user
--+            val effectiveBusinessId = businessId ?: authDataStore.getCurrentUser()?.businessId
--+                ?: throw Exception("User not authenticated or missing business ID")
--+
--             // Get vehicle from API
---            val response = api.getVehicle(code)
--+            val response = api.getVehicleByQr(effectiveBusinessId, code)
--             if (!response.isSuccessful) {
--                 when (response.code()) {
--                     404 -> throw Exception("Vehículo no encontrado")
--@@ -95,22 +112,25 @@ class VehicleRepositoryImpl @Inject constructor(
-- 
--             if (checkAvailability) {
--                 // Check vehicle status
---                val status = vehicleStatusRepository.getVehicleStatus(vehicle.id)
--+                val status = vehicleStatusRepository.getVehicleStatus(vehicle.id, effectiveBusinessId)
--                 if (!status.isAvailable()) {
--                     throw Exception(status.getErrorMessage())
--                 }
--             }
-- 
---            return vehicle
--+            vehicle
--         } catch (e: Exception) {
--             android.util.Log.e("VehicleRepo", "Error getting vehicle by QR $code", e)
--             throw Exception("Vehículo no encontrado o no disponible: ${e.message}")
--         }
--     }
-- 
---    override suspend fun getVehicles(): List<Vehicle> {
--+    override suspend fun getVehicles(
--+        businessId: String,
--+        siteId: String?
--+    ): List<Vehicle> = withContext(Dispatchers.IO) {
--         try {
---            val response = api.getVehicles()
--+            val response = api.getVehicles(businessId, siteId)
--             android.util.Log.d("VehicleRepo", "Raw API response: ${response.body()}")
--             
--             if (!response.isSuccessful) {
--@@ -129,46 +149,67 @@ class VehicleRepositoryImpl @Inject constructor(
--                 cache[vehicle.id] = CachedVehicle(vehicle, System.currentTimeMillis())
--             }
-- 
---            return vehicles
--+            vehicles
--         } catch (e: Exception) {
--             android.util.Log.e("VehicleRepo", "Error fetching vehicles", e)
--             throw e
--         }
--     }
-- 
---    override suspend fun getVehicleStatus(vehicleId: String): VehicleStatus {
---        return vehicleStatusRepository.getVehicleStatus(vehicleId)
--+    override suspend fun getAllVehicles(): List<Vehicle> {
--+        try {
--+            val response = api.getAllVehicles()
--+            if (!response.isSuccessful) {
--+                when (response.code()) {
--+                    403 -> throw Exception("Permission denied. SuperAdmin access required.")
--+                    429 -> throw Exception("Rate limit exceeded. Please try again later.")
--+                    in 500..599 -> throw Exception("Server error. Please try again later.")
--+                    else -> throw Exception("Failed to get all vehicles: ${response.code()}")
--+                }
--+            }
--+
--+            return response.body()?.map { it.toDomain() }
--+                ?: throw Exception("Failed to get vehicles: Empty response body")
--+        } catch (e: Exception) {
--+            android.util.Log.e("VehicleRepo", "Error fetching all vehicles", e)
--+            throw e
--+        }
--+    }
--+
--+    override suspend fun getVehicleStatus(
--+        vehicleId: String,
--+        businessId: String
--+    ): VehicleStatus {
--+        return vehicleStatusRepository.getVehicleStatus(vehicleId, businessId)
--     }
-- 
---    override suspend fun updateVehicleStatus(vehicleId: String, status: VehicleStatus): Vehicle {
--+    override suspend fun updateVehicleStatus(
--+        vehicleId: String,
--+        status: VehicleStatus,
--+        businessId: String
--+    ): Vehicle = withContext(Dispatchers.IO) {
--         try {
---            // First get the current vehicle
---            val vehicle = getVehicle(vehicleId)
---            
---            // Update only the status
---            val updatedVehicle = vehicle.copy(status = status)
---            
---            // Make the PUT request with the updated vehicle
---            val updateResponse = api.updateVehicle(
---                id = vehicleId,
---                vehicle = updatedVehicle.toDto()
--+            val response = api.updateVehicleStatus(
--+                businessId = businessId,
--+                vehicleId = vehicleId,
--+                status = status.name
--             )
--             
---            if (!updateResponse.isSuccessful) {
---                when (updateResponse.code()) {
--+            if (!response.isSuccessful) {
--+                when (response.code()) {
--                     429 -> throw Exception("Rate limit exceeded. Please try again later.")
--                     in 500..599 -> throw Exception("Server error. Please try again later.")
---                    else -> throw Exception("Failed to update vehicle status: ${updateResponse.code()}")
--+                    else -> throw Exception("Failed to update vehicle status: ${response.code()}")
--                 }
--             }
--             
---            val result = updateResponse.body()?.toDomain() 
--+            val result = response.body()?.toDomain() 
--                 ?: throw Exception("No vehicle data in response")
-- 
--             // Update cache
--             cache[vehicleId] = CachedVehicle(result, System.currentTimeMillis())
--             
---            return result
--+            result
--         } catch (e: Exception) {
--             android.util.Log.e("VehicleRepo", "Error updating vehicle status", e)
--             throw Exception("Error updating vehicle status: ${e.message}")
--diff --git a/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusRepositoryImpl.kt
--index 0274d39..5bf5e94 100644
----- a/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusRepositoryImpl.kt
--+++ b/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusRepositoryImpl.kt
--@@ -11,21 +11,24 @@ class VehicleStatusRepositoryImpl @Inject constructor(
--     private val vehicleStatusUpdater: VehicleStatusUpdater
-- ) : VehicleStatusRepository {
-- 
---    override suspend fun getVehicleStatus(vehicleId: String): VehicleStatus {
---        return vehicleValidationService.getVehicleStatus(vehicleId)
--+    override suspend fun getVehicleStatus(vehicleId: String, businessId: String): VehicleStatus {
--+        return vehicleValidationService.getVehicleStatus(vehicleId, businessId)
--     }
-- 
---    override suspend fun updateVehicleStatus(vehicleId: String, status: VehicleStatus): Boolean {
---        vehicleStatusUpdater.updateVehicleStatus(vehicleId, status)
---        return true
--+    override suspend fun updateVehicleStatus(
--+        vehicleId: String,
--+        status: VehicleStatus,
--+        businessId: String
--+    ): Boolean {
--+        return vehicleStatusUpdater.updateVehicleStatus(vehicleId, status, businessId)
--     }
-- 
---    override suspend fun isVehicleAvailable(vehicleId: String): Boolean {
---        return vehicleValidationService.isVehicleAvailable(vehicleId)
--+    override suspend fun isVehicleAvailable(vehicleId: String, businessId: String): Boolean {
--+        return vehicleValidationService.isVehicleAvailable(vehicleId, businessId)
--     }
-- 
---    override suspend fun getVehicleErrorMessage(vehicleId: String): String? {
---        return vehicleValidationService.getVehicleErrorMessage(vehicleId)
--+    override suspend fun getVehicleErrorMessage(vehicleId: String, businessId: String): String? {
--+        return vehicleValidationService.getVehicleErrorMessage(vehicleId, businessId)
--     }
-- 
--     override suspend fun determineStatusFromCheck(checkStatus: String): VehicleStatus {
--diff --git a/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusUpdaterImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusUpdaterImpl.kt
--index 463636d..561ba4c 100644
----- a/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusUpdaterImpl.kt
--+++ b/app/src/main/java/app/forku/data/repository/vehicle/VehicleStatusUpdaterImpl.kt
--@@ -1,30 +1,37 @@
-- package app.forku.data.repository.vehicle
-- 
---import app.forku.data.api.GeneralApi
---import app.forku.data.mapper.toDomain
---import app.forku.data.mapper.toDto
--+import app.forku.data.api.VehicleApi
-- import app.forku.domain.model.vehicle.VehicleStatus
-- import app.forku.domain.repository.vehicle.VehicleStatusUpdater
-- import javax.inject.Inject
--+import javax.inject.Singleton
-- 
---
--+@Singleton
-- class VehicleStatusUpdaterImpl @Inject constructor(
---    private val api: GeneralApi
--+    private val api: VehicleApi
-- ) : VehicleStatusUpdater {
---    override suspend fun updateVehicleStatus(vehicleId: String, status: VehicleStatus): Boolean {
--+    override suspend fun updateVehicleStatus(
--+        vehicleId: String,
--+        status: VehicleStatus,
--+        businessId: String
--+    ): Boolean {
--         return try {
---            val response = api.getVehicle(vehicleId)
---            val vehicle = response.body()?.toDomain() 
---                ?: throw Exception("Vehicle not found")
---            
---            val updatedVehicle = vehicle.copy(status = status)
---            
---            val updateResponse = api.updateVehicle(
---                id = vehicleId,
---                vehicle = updatedVehicle.toDto()
--+            val response = api.updateVehicleStatus(
--+                businessId = businessId,
--+                vehicleId = vehicleId,
--+                status = status.name
--             )
--             
---            updateResponse.isSuccessful
--+            if (!response.isSuccessful) {
--+                when (response.code()) {
--+                    404 -> throw Exception("Vehicle not found")
--+                    429 -> throw Exception("Rate limit exceeded. Please try again later.")
--+                    in 500..599 -> throw Exception("Server error. Please try again later.")
--+                    else -> throw Exception("Failed to update vehicle status: ${response.code()}")
--+                }
--+            }
--+            
--+            true
--         } catch (e: Exception) {
--             android.util.Log.e("VehicleStatus", "Error updating vehicle status", e)
--             false
--diff --git a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
--index d5e03db..db48424 100644
----- a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
--+++ b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
--@@ -1,9 +1,9 @@
-- package app.forku.data.repository.vehicle_session
-- 
---import app.forku.data.api.GeneralApi
--+import app.forku.data.api.VehicleSessionApi
-- import app.forku.data.datastore.AuthDataStore
-- import app.forku.data.api.dto.session.StartSessionRequestDto
---import app.forku.data.mapper.toDomain
--+import app.forku.data.mapper.VehicleSessionMapper
-- import app.forku.domain.model.checklist.CheckStatus
-- import app.forku.domain.model.session.VehicleSessionStatus
-- import app.forku.domain.model.session.VehicleSession
--@@ -19,27 +19,30 @@ import app.forku.core.location.LocationManager
-- import javax.inject.Inject
-- 
-- class VehicleSessionRepositoryImpl @Inject constructor(
---    private val api: GeneralApi,
--+    private val api: VehicleSessionApi,
--     private val authDataStore: AuthDataStore,
--     private val vehicleStatusRepository: VehicleStatusRepository,
--     private val checklistRepository: ChecklistRepository,
--     private val locationManager: LocationManager
-- ) : VehicleSessionRepository {
--     override suspend fun getCurrentSession(): VehicleSession? {
---        val userId = authDataStore.getCurrentUser()?.id ?: return null
---        return try {
---            val response = api.getAllSessions()
--+        val currentUser = authDataStore.getCurrentUser() ?: return null
--+        try {
--+            val response = api.getAllSessions(currentUser.businessId ?: return null)
--             if (response.isSuccessful) {
---                val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
---                sessions.find { 
---                    it.userId == userId && 
--+                val sessions = response.body()?.let { dtos ->
--+                    dtos.map { dto -> VehicleSessionMapper.toDomain(dto) }
--+                } ?: emptyList()
--+                
--+                return sessions.find { 
--+                    it.userId == currentUser.id && 
--                     it.status == VehicleSessionStatus.OPERATING
--                 }
---            } else {
---                null
--             }
--+            return null
--         } catch (e: Exception) {
---            null
--+            android.util.Log.e("VehicleSession", "Error getting current session: ${e.message}", e)
--+            return null
--         }
--     }
-- 
--@@ -48,7 +51,10 @@ class VehicleSessionRepositoryImpl @Inject constructor(
--             ?: throw Exception("No user logged in")
-- 
--         // Get vehicle status using VehicleStatusRepository instead
---        val vehicleStatus = vehicleStatusRepository.getVehicleStatus(vehicleId)
--+        val vehicleStatus = vehicleStatusRepository.getVehicleStatus(
--+            vehicleId = vehicleId,
--+            businessId = currentUser.businessId ?: throw Exception("User has no associated business")
--+        )
-- 
--         if (!vehicleStatus.isAvailable()) {
--             throw Exception(vehicleStatus.getErrorMessage())
--@@ -70,7 +76,11 @@ class VehicleSessionRepositoryImpl @Inject constructor(
-- 
--         try {
--             // Update vehicle status first
---            vehicleStatusRepository.updateVehicleStatus(vehicleId, VehicleStatus.IN_USE)
--+            vehicleStatusRepository.updateVehicleStatus(
--+                vehicleId = vehicleId,
--+                status = VehicleStatus.IN_USE,
--+                businessId = currentUser.businessId ?: throw Exception("User has no associated business")
--+            )
--             
--             val currentDateTime = java.time.Instant.now()
--                 .atZone(java.time.ZoneId.systemDefault())
--@@ -97,16 +107,24 @@ class VehicleSessionRepositoryImpl @Inject constructor(
-- 
--             if (!response.isSuccessful) {
--                 // Rollback vehicle status if session creation fails
---                vehicleStatusRepository.updateVehicleStatus(vehicleId, VehicleStatus.AVAILABLE)
--+                vehicleStatusRepository.updateVehicleStatus(
--+                    vehicleId = vehicleId,
--+                    status = VehicleStatus.AVAILABLE,
--+                    businessId = currentUser.businessId ?: throw Exception("User has no associated business")
--+                )
--                 throw Exception("Failed to create session: ${response.code()}")
--             }
-- 
---            return response.body()?.toDomain() 
--+            return response.body()?.let { VehicleSessionMapper.toDomain(it) }
--                 ?: throw Exception("Failed to start session: Empty response")
--                 
--         } catch (e: Exception) {
--             // Revert vehicle status on failure
---            vehicleStatusRepository.updateVehicleStatus(vehicleId, VehicleStatus.AVAILABLE)
--+            vehicleStatusRepository.updateVehicleStatus(
--+                vehicleId = vehicleId,
--+                status = VehicleStatus.AVAILABLE,
--+                businessId = currentUser.businessId ?: throw Exception("User has no associated business")
--+            )
--             throw e
--         }
--     }
--@@ -122,29 +140,37 @@ class VehicleSessionRepositoryImpl @Inject constructor(
--             throw Exception("Failed to get session details")
--         }
--             
---        val existingSession = sessionResponse.body() ?: throw Exception("Session not found")
--+        val existingSession = sessionResponse.body()?.let { VehicleSessionMapper.toDomain(it) }
--+            ?: throw Exception("Session not found")
--             
--         // Determine who closed the session
--         val currentUser = authDataStore.getCurrentUser()
--+            ?: throw Exception("No user logged in")
--+            
--         val closedBy = when (closeMethod) {
---            VehicleSessionClosedMethod.USER_CLOSED -> currentUser?.id
---            VehicleSessionClosedMethod.ADMIN_CLOSED -> adminId ?: currentUser?.id
--+            VehicleSessionClosedMethod.USER_CLOSED -> currentUser.id
--+            VehicleSessionClosedMethod.ADMIN_CLOSED -> adminId ?: currentUser.id
--             VehicleSessionClosedMethod.TIMEOUT_CLOSED -> "SYSTEM"
--             VehicleSessionClosedMethod.GEOFENCE_CLOSED -> "SYSTEM"
--         }
-- 
--         // Verify permissions
---        if (closeMethod == VehicleSessionClosedMethod.ADMIN_CLOSED && currentUser?.role != UserRole.ADMIN) {
--+        if (closeMethod == VehicleSessionClosedMethod.ADMIN_CLOSED && currentUser.role != UserRole.ADMIN) {
--             throw Exception("Only administrators can perform administrative session closure")
--         }
-- 
---        if (closeMethod == VehicleSessionClosedMethod.USER_CLOSED && currentUser?.id != existingSession.userId) {
--+        if (closeMethod == VehicleSessionClosedMethod.USER_CLOSED && currentUser.id != existingSession.userId) {
--             throw Exception("Users can only close their own sessions")
--         }
--             
--         try {
--             // Update vehicle status back to AVAILABLE
---            vehicleStatusRepository.updateVehicleStatus(existingSession.vehicleId, VehicleStatus.AVAILABLE)
--+            vehicleStatusRepository.updateVehicleStatus(
--+                vehicleId = existingSession.vehicleId,
--+                status = VehicleStatus.AVAILABLE,
--+                businessId = currentUser.businessId ?: throw Exception("User has no associated business")
--+            )
--+            
--             val currentDateTime = java.time.Instant.now()
--                 .atZone(java.time.ZoneId.systemDefault())
--                 .format(java.time.format.DateTimeFormatter.ISO_DATE_TIME)
--@@ -158,8 +184,8 @@ class VehicleSessionRepositoryImpl @Inject constructor(
--             val updatedSession = existingSession.copy(
--                 endTime = currentDateTime,
--                 timestamp = currentDateTime,
---                status = VehicleSessionStatus.NOT_OPERATING.toString(),
---                closeMethod = closeMethod.name,
--+                status = VehicleSessionStatus.NOT_OPERATING,
--+                closeMethod = closeMethod,
--                 closedBy = closedBy,
--                 notes = notes,
--                 endLocationCoordinates = locationCoordinates
--@@ -167,31 +193,39 @@ class VehicleSessionRepositoryImpl @Inject constructor(
--             
--             val response = api.updateSession(
--                 sessionId = sessionId,
---                session = updatedSession
--+                session = VehicleSessionMapper.toVehicleSessionDto(updatedSession)
--             )
-- 
--             if (!response.isSuccessful) {
--                 // Rollback vehicle status if session update fails
---                vehicleStatusRepository.updateVehicleStatus(existingSession.vehicleId, VehicleStatus.IN_USE)
--+                vehicleStatusRepository.updateVehicleStatus(
--+                    vehicleId = existingSession.vehicleId,
--+                    status = VehicleStatus.IN_USE,
--+                    businessId = currentUser.businessId ?: throw Exception("User has no associated business")
--+                )
--                 throw Exception("Failed to end session: ${response.code()}")
--             }
--             
---            return response.body()?.toDomain() 
--+            return response.body()?.let { VehicleSessionMapper.toDomain(it) }
--                 ?: throw Exception("Empty response when ending session")
--         } catch (e: Exception) {
--             // Ensure vehicle status is restored on any error
---            vehicleStatusRepository.updateVehicleStatus(existingSession.vehicleId, VehicleStatus.IN_USE)
--+            vehicleStatusRepository.updateVehicleStatus(
--+                vehicleId = existingSession.vehicleId,
--+                status = VehicleStatus.IN_USE,
--+                businessId = currentUser.businessId ?: throw Exception("User has no associated business")
--+            )
--             throw e
--         }
--     }
-- 
---    override suspend fun getActiveSessionForVehicle(vehicleId: String): VehicleSession? {
--+    override suspend fun getActiveSessionForVehicle(vehicleId: String, businessId: String): VehicleSession? {
--         android.util.Log.d("VehicleSession", "Fetching active session for vehicle: $vehicleId")
--         return try {
---            val response = api.getAllSessions()
--+            val response = api.getAllSessions(businessId)
--             if (response.isSuccessful) {
--                 android.util.Log.d("VehicleSession", "API response successful. Status code: ${response.code()}")
---                val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
--+                val sessions = response.body()?.map { VehicleSessionMapper.toDomain(it) } ?: emptyList()
--                 android.util.Log.d("VehicleSession", "Total sessions fetched: ${sessions.size}")
--                 
--                 val activeSession = sessions.find { session ->
--@@ -221,10 +255,11 @@ class VehicleSessionRepositoryImpl @Inject constructor(
--     }
-- 
--     override suspend fun getSessionsByUserId(userId: String): List<VehicleSession> {
--+        val currentUser = authDataStore.getCurrentUser() ?: return emptyList()
--         return try {
---            val response = api.getAllSessions()
--+            val response = api.getAllSessions(currentUser.businessId ?: return emptyList())
--             if (response.isSuccessful) {
---                val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
--+                val sessions = response.body()?.map { VehicleSessionMapper.toDomain(it) } ?: emptyList()
--                 sessions.filter { it.userId == userId }
--             } else {
--                 emptyList()
--@@ -235,10 +270,11 @@ class VehicleSessionRepositoryImpl @Inject constructor(
--     }
-- 
--     override suspend fun getLastCompletedSessionForVehicle(vehicleId: String): VehicleSession? {
--+        val currentUser = authDataStore.getCurrentUser() ?: return null
--         return try {
---            val response = api.getAllSessions()
--+            val response = api.getAllSessions(currentUser.businessId ?: return null)
--             if (response.isSuccessful) {
---                val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
--+                val sessions = response.body()?.map { VehicleSessionMapper.toDomain(it) } ?: emptyList()
--                 sessions
--                     .filter { 
--                         it.vehicleId == vehicleId && 
--@@ -256,10 +292,11 @@ class VehicleSessionRepositoryImpl @Inject constructor(
--     }
-- 
--     override suspend fun getSessions(): List<VehicleSession> {
--+        val currentUser = authDataStore.getCurrentUser() ?: return emptyList()
--         return try {
---            val response = api.getAllSessions()
--+            val response = api.getAllSessions(currentUser.businessId ?: return emptyList())
--             if (response.isSuccessful && response.body() != null) {
---                response.body()!!.map { it.toDomain() }
--+                response.body()!!.map { VehicleSessionMapper.toDomain(it) }
--             } else {
--                 emptyList()
--             }
--diff --git a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionStatusCheckerImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionStatusCheckerImpl.kt
--index 869eaec..4fbbefc 100644
----- a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionStatusCheckerImpl.kt
--+++ b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionStatusCheckerImpl.kt
--@@ -1,29 +1,30 @@
-- package app.forku.data.repository.vehicle_session
-- 
---import app.forku.data.api.GeneralApi
---import app.forku.data.mapper.toDomain
---import app.forku.domain.model.session.VehicleSessionStatus
--+import app.forku.data.api.VehicleSessionApi
--+import app.forku.data.mapper.VehicleSessionMapper
-- import app.forku.domain.model.session.VehicleSession
--+import app.forku.domain.model.session.VehicleSessionStatus
-- import app.forku.domain.repository.session.SessionStatusChecker
-- import javax.inject.Inject
-- 
-- class VehicleSessionStatusCheckerImpl @Inject constructor(
---    private val api: GeneralApi
--+    private val api: VehicleSessionApi
-- ) : SessionStatusChecker {
---    override suspend fun getActiveSessionForVehicle(vehicleId: String): VehicleSession? {
--+    override suspend fun getActiveSessionForVehicle(vehicleId: String, businessId: String): VehicleSession? {
--         return try {
---            val response = api.getAllSessions()
--+            val response = api.getAllSessions(businessId)
--             if (response.isSuccessful) {
--                 val sessions = response.body()?.mapNotNull { 
--                     try {
---                        it.toDomain()
--+                        VehicleSessionMapper.toDomain(it)
--                     } catch (e: Exception) {
--                         android.util.Log.e("SessionMapper", "Error parsing session: ${e.message}")
--                         null
--                     }
--                 } ?: emptyList()
--+                
--                 sessions.find { 
---                    it.vehicleId == vehicleId && 
--+                    it.vehicleId == vehicleId &&
--                     it.status == VehicleSessionStatus.OPERATING
--                 }
--             } else {
--diff --git a/app/src/main/java/app/forku/data/service/VehicleValidationServiceImpl.kt b/app/src/main/java/app/forku/data/service/VehicleValidationServiceImpl.kt
--index be2faed..ead3051 100644
----- a/app/src/main/java/app/forku/data/service/VehicleValidationServiceImpl.kt
--+++ b/app/src/main/java/app/forku/data/service/VehicleValidationServiceImpl.kt
--@@ -1,6 +1,5 @@
-- package app.forku.data.service
-- 
---import app.forku.data.api.GeneralApi
-- import app.forku.domain.model.session.VehicleSessionStatus
-- import app.forku.domain.model.vehicle.VehicleStatus
-- import app.forku.domain.model.vehicle.getErrorMessage
--@@ -12,35 +11,34 @@ import app.forku.domain.service.VehicleStatusDeterminer
-- import javax.inject.Inject
-- 
-- class VehicleValidationServiceImpl @Inject constructor(
---    private val api: GeneralApi,
--     private val sessionStatusChecker: SessionStatusChecker,
--     private val checklistRepository: ChecklistRepository,
--     private val vehicleStatusDeterminer: VehicleStatusDeterminer
-- ) : VehicleValidationService {
--     
---    override suspend fun getVehicleStatus(vehicleId: String): VehicleStatus {
--+    override suspend fun getVehicleStatus(vehicleId: String, businessId: String): VehicleStatus {
--         // First check if there's an active session
---        val activeSession = sessionStatusChecker.getActiveSessionForVehicle(vehicleId)
--+        val activeSession = sessionStatusChecker.getActiveSessionForVehicle(vehicleId, businessId)
--         if (activeSession?.status == VehicleSessionStatus.OPERATING) {
--             return VehicleStatus.IN_USE
--         }
--         
--         // Get the last check and determine status
---        val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId)
---        return vehicleStatusDeterminer.determineStatusFromCheck(lastCheck?.status ?: "")
--+        val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId, businessId)
--+        return vehicleStatusDeterminer.determineStatusFromCheck(checkStatus = lastCheck?.status ?: "")
--     }
-- 
---    override suspend fun isVehicleAvailable(vehicleId: String): Boolean {
---        return getVehicleStatus(vehicleId) == VehicleStatus.AVAILABLE
--+    override suspend fun isVehicleAvailable(vehicleId: String, businessId: String): Boolean {
--+        return getVehicleStatus(vehicleId, businessId) == VehicleStatus.AVAILABLE
--     }
-- 
---    override suspend fun getVehicleErrorMessage(vehicleId: String): String? {
---        val status = getVehicleStatus(vehicleId)
--+    override suspend fun getVehicleErrorMessage(vehicleId: String, businessId: String): String? {
--+        val status = getVehicleStatus(vehicleId, businessId)
--         return if (status.isAvailable()) null else status.getErrorMessage()
--     }
-- 
---    override suspend fun validateVehicleForOperation(vehicleId: String) {
---        val status = getVehicleStatus(vehicleId)
--+    override suspend fun validateVehicleForOperation(vehicleId: String, businessId: String) {
--+        val status = getVehicleStatus(vehicleId, businessId)
--         if (!status.isAvailable()) {
--             throw Exception(status.getErrorMessage())
--         }
--diff --git a/app/src/main/java/app/forku/di/CertificationsModule.kt b/app/src/main/java/app/forku/di/CertificationsModule.kt
--index 51417f6..ae72c8d 100644
----- a/app/src/main/java/app/forku/di/CertificationsModule.kt
--+++ b/app/src/main/java/app/forku/di/CertificationsModule.kt
--@@ -15,12 +15,6 @@ import javax.inject.Singleton
-- @InstallIn(SingletonComponent::class)
-- object CertificationsModule {
-- 
---    @Provides
---    @Singleton
---    fun provideCertificationApi(retrofit: Retrofit): CertificationApi {
---        return retrofit.create(CertificationApi::class.java)
---    }
---
--     @Provides
--     @Singleton
--     fun provideCertificationRepository(
--diff --git a/app/src/main/java/app/forku/di/FeedbackModule.kt b/app/src/main/java/app/forku/di/FeedbackModule.kt
--index 47adc0d..f393a58 100644
----- a/app/src/main/java/app/forku/di/FeedbackModule.kt
--+++ b/app/src/main/java/app/forku/di/FeedbackModule.kt
--@@ -13,12 +13,6 @@ import javax.inject.Singleton
-- @Module
-- @InstallIn(SingletonComponent::class)
-- object FeedbackModule {
---    
---    @Provides
---    @Singleton
---    fun provideFeedbackApi(retrofit: Retrofit): FeedbackApi =
---        retrofit.create(FeedbackApi::class.java)
---
--     @Provides
--     @Singleton
--     fun provideFeedbackRepository(api: FeedbackApi): FeedbackRepository =
--diff --git a/app/src/main/java/app/forku/di/NetworkModule.kt b/app/src/main/java/app/forku/di/NetworkModule.kt
--index 8731f34..c2b0647 100644
----- a/app/src/main/java/app/forku/di/NetworkModule.kt
--+++ b/app/src/main/java/app/forku/di/NetworkModule.kt
--@@ -1,12 +1,17 @@
-- package app.forku.di
-- 
-- import app.forku.core.Constants
---import app.forku.data.api.GeneralApi
--+
--+import app.forku.data.api.UserApi
--+import app.forku.data.api.VehicleApi
--+import app.forku.data.api.CertificationApi
--+import app.forku.data.api.FeedbackApi
-- import app.forku.data.api.WeatherApi
-- import app.forku.data.api.interceptor.AuthInterceptor
-- import app.forku.data.api.interceptor.RetryInterceptor
-- import app.forku.domain.repository.weather.WeatherRepository
-- import app.forku.data.repository.weather.WeatherRepositoryImpl
--+import app.forku.data.api.VehicleSessionApi
-- import dagger.Module
-- import dagger.Provides
-- import dagger.hilt.InstallIn
--@@ -20,55 +25,96 @@ import javax.inject.Singleton
-- import java.util.concurrent.TimeUnit
-- import android.content.Context
-- import app.forku.core.network.NetworkConnectivityManager
--+import javax.inject.Named
--+import app.forku.data.api.IncidentApi
--+import app.forku.data.api.ChecklistApi
--+import app.forku.data.api.SessionApi
--+import app.forku.data.api.NotificationApi
--+import app.forku.data.remote.api.BusinessApi
--+
-- 
-- @Module
-- @InstallIn(SingletonComponent::class)
-- object NetworkModule {
--     @Provides
--     @Singleton
---    fun provideOkHttpClient(authInterceptor: AuthInterceptor): OkHttpClient {
---        val loggingInterceptor = HttpLoggingInterceptor().apply {
---            level = HttpLoggingInterceptor.Level.BODY
---        }
---        
---        return OkHttpClient.Builder()
---            .addInterceptor(loggingInterceptor)
---            .addInterceptor(authInterceptor)
---            .addInterceptor(RetryInterceptor())
---            .connectTimeout(30, TimeUnit.SECONDS)
---            .readTimeout(30, TimeUnit.SECONDS)
---            .writeTimeout(30, TimeUnit.SECONDS)
---            .retryOnConnectionFailure(true)
---            .build()
---    }
--+    fun provideUserApi(retrofit: Retrofit): UserApi = retrofit.create(UserApi::class.java)
-- 
--     @Provides
--     @Singleton
---    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {
---        return Retrofit.Builder()
---            .baseUrl(Constants.BASE_URL)
---            .client(okHttpClient)
---            .addConverterFactory(GsonConverterFactory.create())
---            .build()
---    }
--+    fun provideVehicleApi(retrofit: Retrofit): VehicleApi = retrofit.create(VehicleApi::class.java)
-- 
--     @Provides
--     @Singleton
---    fun provideGeneralApi(retrofit: Retrofit): GeneralApi {
---        return retrofit.create(GeneralApi::class.java)
---    }
--+    fun provideIncidentApi(retrofit: Retrofit): IncidentApi = retrofit.create(IncidentApi::class.java)
--+
--+    @Provides
--+    @Singleton
--+    fun provideChecklistApi(retrofit: Retrofit): ChecklistApi = retrofit.create(ChecklistApi::class.java)
--+
--+    @Provides
--+    @Singleton
--+    fun provideSessionApi(retrofit: Retrofit): SessionApi = retrofit.create(SessionApi::class.java)
--+
--+    @Provides
--+    @Singleton
--+    fun provideNotificationApi(retrofit: Retrofit): NotificationApi = retrofit.create(NotificationApi::class.java)
--+
--+    @Provides
--+    @Singleton
--+    fun provideCertificationApi(retrofit: Retrofit): CertificationApi = retrofit.create(CertificationApi::class.java)
--+
--+    @Provides
--+    @Singleton
--+    fun provideFeedbackApi(retrofit: Retrofit): FeedbackApi = retrofit.create(FeedbackApi::class.java)
--+
--+    @Provides
--+    @Singleton
--+    fun provideWeatherApi(retrofit: Retrofit): WeatherApi = retrofit.create(WeatherApi::class.java)
-- 
--     @Provides
--     @Singleton
---    fun provideWeatherApi(okHttpClient: OkHttpClient): WeatherApi {
---        return Retrofit.Builder()
---            .baseUrl("http://api.weatherapi.com/v1/")
---            .client(okHttpClient)
---            .addConverterFactory(GsonConverterFactory.create())
---            .build()
---            .create(WeatherApi::class.java)
--+    fun provideVehicleSessionApi(retrofit: Retrofit): VehicleSessionApi = 
--+        retrofit.create(VehicleSessionApi::class.java)
--+
--+    @Provides
--+    @Singleton
--+    fun provideBusinessApi(retrofit: Retrofit): BusinessApi {
--+        return retrofit.create(BusinessApi::class.java)
--     }
-- 
--+    @Provides
--+    @Singleton
--+    fun provideRetrofit(
--+        okHttpClient: OkHttpClient,
--+        @Named("baseUrl") baseUrl: String
--+    ): Retrofit = Retrofit.Builder()
--+        .baseUrl(baseUrl)
--+        .client(okHttpClient)
--+        .addConverterFactory(GsonConverterFactory.create())
--+        .build()
--+
--+    @Provides
--+    @Singleton
--+    fun provideOkHttpClient(
--+        @Named("apiKey") apiKey: String
--+    ): OkHttpClient = OkHttpClient.Builder()
--+        .addInterceptor { chain ->
--+            val request = chain.request().newBuilder()
--+                .addHeader("X-API-KEY", apiKey)
--+                .build()
--+            chain.proceed(request)
--+        }
--+        .build()
--+
--+    @Provides
--+    @Named("baseUrl")
--+    fun provideBaseUrl(): String = Constants.BASE_URL
--+
--+    @Provides
--+    @Named("apiKey")
--+    fun provideApiKey(): String = ""
--+
--     @Provides
--     @Singleton
--     fun provideWeatherRepository(
--diff --git a/app/src/main/java/app/forku/di/RepositoryModule.kt b/app/src/main/java/app/forku/di/RepositoryModule.kt
--index c13d181..f484092 100644
----- a/app/src/main/java/app/forku/di/RepositoryModule.kt
--+++ b/app/src/main/java/app/forku/di/RepositoryModule.kt
--@@ -2,7 +2,6 @@ package app.forku.di
-- 
-- import app.forku.core.location.LocationManager
-- import app.forku.domain.repository.vehicle.VehicleStatusChecker
---import app.forku.data.api.GeneralApi
-- import app.forku.data.datastore.AuthDataStore
-- import app.forku.data.repository.vehicle.VehicleRepositoryImpl
-- import app.forku.domain.repository.vehicle.VehicleRepository
--@@ -29,6 +28,10 @@ import app.forku.data.service.VehicleStatusDeterminerImpl
-- import app.forku.data.repository.notification.NotificationRepositoryImpl
-- import app.forku.domain.repository.notification.NotificationRepository
-- import app.forku.domain.repository.cico.CicoHistoryRepository
--+import app.forku.data.api.VehicleApi
--+import app.forku.data.api.ChecklistApi
--+import app.forku.data.api.VehicleSessionApi
--+import app.forku.data.api.IncidentApi
-- import com.google.gson.Gson
-- import com.google.gson.GsonBuilder
-- import dagger.Module
--@@ -45,7 +48,7 @@ object RepositoryModule {
--     @Provides
--     @Singleton
--     fun provideVehicleStatusUpdater(
---        api: GeneralApi
--+        api: VehicleApi
--     ): VehicleStatusUpdater {
--         return VehicleStatusUpdaterImpl(api)
--     }
--@@ -53,7 +56,7 @@ object RepositoryModule {
--     @Provides
--     @Singleton
--     fun provideSessionStatusChecker(
---        api: GeneralApi
--+        api: VehicleSessionApi
--     ): SessionStatusChecker {
--         return VehicleSessionStatusCheckerImpl(api)
--     }
--@@ -68,15 +71,20 @@ object RepositoryModule {
--     @Singleton
--     fun provideChecklistStatusNotifier(
--         vehicleStatusUpdater: VehicleStatusUpdater,
---        vehicleStatusDeterminer: VehicleStatusDeterminer
--+        vehicleStatusDeterminer: VehicleStatusDeterminer,
--+        authDataStore: AuthDataStore
--     ): ChecklistStatusNotifier {
---        return ChecklistStatusNotifierImpl(vehicleStatusUpdater, vehicleStatusDeterminer)
--+        return ChecklistStatusNotifierImpl(
--+            vehicleStatusUpdater = vehicleStatusUpdater,
--+            vehicleStatusDeterminer = vehicleStatusDeterminer,
--+            authDataStore = authDataStore
--+        )
--     }
-- 
--     @Provides
--     @Singleton
--     fun provideChecklistRepository(
---        api: GeneralApi,
--+        api: ChecklistApi,
--         authDataStore: AuthDataStore,
--         validateChecklistUseCase: ValidateChecklistUseCase,
--         checklistStatusNotifier: ChecklistStatusNotifier,
--@@ -94,13 +102,11 @@ object RepositoryModule {
--     @Provides
--     @Singleton
--     fun provideVehicleValidationService(
---        api: GeneralApi,
--         sessionStatusChecker: SessionStatusChecker,
--         checklistRepository: ChecklistRepository,
--         vehicleStatusDeterminer: VehicleStatusDeterminer
--     ): VehicleValidationService {
--         return VehicleValidationServiceImpl(
---            api = api,
--             sessionStatusChecker = sessionStatusChecker,
--             checklistRepository = checklistRepository,
--             vehicleStatusDeterminer = vehicleStatusDeterminer
--@@ -119,7 +125,7 @@ object RepositoryModule {
--     @Provides
--     @Singleton
--     fun provideSessionRepository(
---        api: GeneralApi,
--+        api: VehicleSessionApi,
--         authDataStore: AuthDataStore,
--         vehicleStatusRepository: VehicleStatusRepository,
--         checklistRepository: ChecklistRepository,
--@@ -141,7 +147,7 @@ object RepositoryModule {
--     @Provides
--     @Singleton
--     fun provideIncidentRepository(
---        api: GeneralApi,
--+        api: IncidentApi,
--         authDataStore: AuthDataStore
--     ): IncidentRepository {
--         return IncidentRepositoryImpl(api, authDataStore)
--@@ -150,7 +156,7 @@ object RepositoryModule {
--     @Provides
--     @Singleton
--     fun provideVehicleRepository(
---        api: GeneralApi,
--+        api: VehicleApi,
--         authDataStore: AuthDataStore,
--         validateChecklistUseCase: ValidateChecklistUseCase,
--         vehicleStatusRepository: VehicleStatusRepository
--diff --git a/app/src/main/java/app/forku/di/UseCaseModule.kt b/app/src/main/java/app/forku/di/UseCaseModule.kt
--index 822b82b..19fd777 100644
----- a/app/src/main/java/app/forku/di/UseCaseModule.kt
--+++ b/app/src/main/java/app/forku/di/UseCaseModule.kt
--@@ -41,14 +41,20 @@ object UseCaseModule {
-- 
--     @Provides
--     @Singleton
---    fun provideGetVehicleUseCase(repository: VehicleRepository): GetVehicleUseCase {
---        return GetVehicleUseCase(repository)
--+    fun provideGetVehicleUseCase(
--+        repository: VehicleRepository,
--+        userRepository: UserRepository
--+    ): GetVehicleUseCase {
--+        return GetVehicleUseCase(repository, userRepository)
--     }
-- 
--     @Provides
--     @Singleton
---    fun provideGetVehiclesUseCase(repository: VehicleRepository): GetVehiclesUseCase {
---        return GetVehiclesUseCase(repository)
--+    fun provideGetVehiclesUseCase(
--+        repository: VehicleRepository,
--+        userRepository: UserRepository
--+    ): GetVehiclesUseCase {
--+        return GetVehiclesUseCase(repository, userRepository)
--     }
-- 
--     @Provides
--@@ -64,9 +70,10 @@ object UseCaseModule {
--     @Provides
--     @Singleton
--     fun provideGetVehicleStatusUseCase(
---        vehicleStatusRepository: VehicleStatusRepository
--+        vehicleStatusRepository: VehicleStatusRepository,
--+        userRepository: UserRepository
--     ): GetVehicleStatusUseCase {
---        return GetVehicleStatusUseCase(vehicleStatusRepository)
--+        return GetVehicleStatusUseCase(vehicleStatusRepository, userRepository)
--     }
-- 
--     @Provides
--diff --git a/app/src/main/java/app/forku/domain/model/session/VehicleSession.kt b/app/src/main/java/app/forku/domain/model/session/VehicleSession.kt
--index 491e34b..f9310b4 100644
----- a/app/src/main/java/app/forku/domain/model/session/VehicleSession.kt
--+++ b/app/src/main/java/app/forku/domain/model/session/VehicleSession.kt
--@@ -4,6 +4,7 @@ data class VehicleSession(
--     val id: String,
--     val vehicleId: String,
--     val userId: String,
--+    val checkId: String,
--     val startTime: String,
--     val endTime: String?,
--     val status: VehicleSessionStatus,
--@@ -11,7 +12,7 @@ data class VehicleSession(
--     val endLocationCoordinates: String?,
--     val durationMinutes: Int?,
--     val timestamp: String,
---    val closeMethod: VehicleSessionClosedMethod,
--+    val closeMethod: VehicleSessionClosedMethod?,
--     val closedBy: String? = null,
--     val notes: String? = null
-- )
--diff --git a/app/src/main/java/app/forku/domain/model/user/User.kt b/app/src/main/java/app/forku/domain/model/user/User.kt
--index 4c4929f..2688e64 100644
----- a/app/src/main/java/app/forku/domain/model/user/User.kt
--+++ b/app/src/main/java/app/forku/domain/model/user/User.kt
--@@ -19,7 +19,10 @@ data class User(
--     val lastMedicalCheck: String? = null,
--     val lastLogin: String? = null,
--     val isActive: Boolean = true,
---    val password: String
--+    val isApproved: Boolean = false,
--+    val password: String,
--+    val businessId: String? = null,
--+    val siteId: String? = null
-- ) {
--     val fullName: String
--         get() = "$firstName $lastName"
--diff --git a/app/src/main/java/app/forku/domain/model/user/UserRole.kt b/app/src/main/java/app/forku/domain/model/user/UserRole.kt
--index 57ae288..840a6ba 100644
----- a/app/src/main/java/app/forku/domain/model/user/UserRole.kt
--+++ b/app/src/main/java/app/forku/domain/model/user/UserRole.kt
--@@ -1,6 +1,7 @@
-- package app.forku.domain.model.user
-- 
-- enum class UserRole {
--+    SUPERADMIN,
--     ADMIN,
--     OPERATOR;
-- 
--diff --git a/app/src/main/java/app/forku/domain/model/vehicle/Vehicle.kt b/app/src/main/java/app/forku/domain/model/vehicle/Vehicle.kt
--index b4edb96..3366a03 100644
----- a/app/src/main/java/app/forku/domain/model/vehicle/Vehicle.kt
--+++ b/app/src/main/java/app/forku/domain/model/vehicle/Vehicle.kt
--@@ -1,6 +1,8 @@
-- package app.forku.domain.model.vehicle
-- 
-- import app.forku.domain.model.checklist.PreShiftCheck
--+import java.time.LocalDate
--+import java.time.format.DateTimeFormatter
-- 
-- data class Vehicle(
--     val id: String,
--@@ -17,5 +19,16 @@ data class Vehicle(
--     val photoModel: String,
--     val vehicleClass: String,
--     val energyType: String,
---    val nextService: String
---)
--\ No newline at end of file
--+    val nextService: String,
--+    val hasIssues: Boolean = false,
--+    val maintenanceStatus: MaintenanceStatus = MaintenanceStatus.UP_TO_DATE
--+) {
--+    val needsMaintenance: Boolean
--+        get() = maintenanceStatus != MaintenanceStatus.UP_TO_DATE
--+}
--+
--+enum class MaintenanceStatus {
--+    UP_TO_DATE,
--+    DUE_SOON,
--+    OVERDUE
--+}
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/domain/repository/checklist/ChecklistRepository.kt b/app/src/main/java/app/forku/domain/repository/checklist/ChecklistRepository.kt
--index 41540ce..2931cae 100644
----- a/app/src/main/java/app/forku/domain/repository/checklist/ChecklistRepository.kt
--+++ b/app/src/main/java/app/forku/domain/repository/checklist/ChecklistRepository.kt
--@@ -7,7 +7,7 @@ import app.forku.domain.model.checklist.CheckStatus
-- 
-- interface ChecklistRepository {
--     suspend fun getChecklistItems(vehicleId: String): List<Checklist>
---    suspend fun getLastPreShiftCheck(vehicleId: String): PreShiftCheck?
--+    suspend fun getLastPreShiftCheck(vehicleId: String, businessId: String): PreShiftCheck?
--     suspend fun submitPreShiftCheck(
--         vehicleId: String,
--         checkItems: List<ChecklistItem>,
--diff --git a/app/src/main/java/app/forku/domain/repository/session/SessionStatusChecker.kt b/app/src/main/java/app/forku/domain/repository/session/SessionStatusChecker.kt
--index 7c7474f..8165346 100644
----- a/app/src/main/java/app/forku/domain/repository/session/SessionStatusChecker.kt
--+++ b/app/src/main/java/app/forku/domain/repository/session/SessionStatusChecker.kt
--@@ -3,5 +3,5 @@ package app.forku.domain.repository.session
-- import app.forku.domain.model.session.VehicleSession
-- 
-- interface SessionStatusChecker {
---    suspend fun getActiveSessionForVehicle(vehicleId: String): VehicleSession?
--+    suspend fun getActiveSessionForVehicle(vehicleId: String, businessId: String): VehicleSession?
-- } 
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/domain/repository/session/VehicleSessionRepository.kt b/app/src/main/java/app/forku/domain/repository/session/VehicleSessionRepository.kt
--index 0021e0a..6e05c5b 100644
----- a/app/src/main/java/app/forku/domain/repository/session/VehicleSessionRepository.kt
--+++ b/app/src/main/java/app/forku/domain/repository/session/VehicleSessionRepository.kt
--@@ -12,7 +12,7 @@ interface VehicleSessionRepository {
--         adminId: String? = null,
--         notes: String? = null
--     ): VehicleSession
---    suspend fun getActiveSessionForVehicle(vehicleId: String): VehicleSession?
--+    suspend fun getActiveSessionForVehicle(vehicleId: String, businessId: String): VehicleSession?
--     suspend fun getOperatorSessionHistory(): List<VehicleSession>
--     suspend fun getSessionsByUserId(userId: String): List<VehicleSession>
--     suspend fun getLastCompletedSessionForVehicle(vehicleId: String): VehicleSession?
--diff --git a/app/src/main/java/app/forku/domain/repository/user/UserRepository.kt b/app/src/main/java/app/forku/domain/repository/user/UserRepository.kt
--index 1da1db0..a7fa0cb 100644
----- a/app/src/main/java/app/forku/domain/repository/user/UserRepository.kt
--+++ b/app/src/main/java/app/forku/domain/repository/user/UserRepository.kt
--@@ -47,4 +47,6 @@ interface UserRepository {
--     suspend fun getLastActiveTime(userId: String): Long?
-- 
--     suspend fun getCurrentUserId(): String?
--+
--+    suspend fun getUnassignedUsers(): List<User>
-- } 
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleRepository.kt b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleRepository.kt
--index 6fa3686..2532cfa 100644
----- a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleRepository.kt
--+++ b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleRepository.kt
--@@ -1,21 +1,57 @@
-- package app.forku.domain.repository.vehicle
-- 
---
---import app.forku.domain.model.checklist.Answer
-- import app.forku.domain.model.vehicle.Vehicle
---import app.forku.domain.model.checklist.Checklist
---import app.forku.domain.model.checklist.ChecklistItem
---import app.forku.domain.model.checklist.PreShiftCheck
-- import app.forku.domain.model.vehicle.VehicleStatus
---import kotlinx.coroutines.flow.Flow
---import kotlinx.coroutines.flow.flow
---import kotlinx.coroutines.delay
---
-- 
-- interface VehicleRepository {
---    suspend fun getVehicle(id: String): Vehicle
---    suspend fun getVehicles(): List<Vehicle>
---    suspend fun getVehicleByQr(code: String, checkAvailability: Boolean = true): Vehicle
---    suspend fun updateVehicleStatus(vehicleId: String, status: VehicleStatus): Vehicle
---    suspend fun getVehicleStatus(vehicleId: String): VehicleStatus
--+    /**
--+     * Gets a specific vehicle by ID
--+     */
--+    suspend fun getVehicle(id: String, businessId: String): Vehicle
--+    
--+    /**
--+     * Gets vehicles for the current business and site context
--+     * @param businessId The ID of the business
--+     * @param siteId Optional site ID to filter vehicles by site
--+     */
--+    suspend fun getVehicles(businessId: String, siteId: String? = null): List<Vehicle>
--+    
--+    /**
--+     * Gets all vehicles across all businesses (SuperAdmin only)
--+     */
--+    suspend fun getAllVehicles(): List<Vehicle>
--+    
--+    /**
--+     * Gets a vehicle by QR code
--+     * @param code The QR code
--+     * @param checkAvailability Whether to check if the vehicle is available
--+     * @param businessId The business context for availability check
--+     */
--+    suspend fun getVehicleByQr(
--+        code: String, 
--+        checkAvailability: Boolean = true,
--+        businessId: String? = null
--+    ): Vehicle
--+
--+    /**
--+     * Updates vehicle status
--+     * @param vehicleId The ID of the vehicle
--+     * @param status The new status
--+     * @param businessId The business context
--+     */
--+    suspend fun updateVehicleStatus(
--+        vehicleId: String, 
--+        status: VehicleStatus,
--+        businessId: String
--+    ): Vehicle
--+
--+    /**
--+     * Gets vehicle status
--+     * @param vehicleId The ID of the vehicle
--+     * @param businessId The business context
--+     */
--+    suspend fun getVehicleStatus(
--+        vehicleId: String,
--+        businessId: String
--+    ): VehicleStatus
-- }
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusChecker.kt b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusChecker.kt
--index 29e8e0e..abd1270 100644
----- a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusChecker.kt
--+++ b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusChecker.kt
--@@ -1,6 +1,19 @@
-- package app.forku.domain.repository.vehicle
-- 
-- interface VehicleStatusChecker {
---    suspend fun isVehicleAvailable(vehicleId: String): Boolean
---    suspend fun getVehicleErrorMessage(vehicleId: String): String?
--+    /**
--+     * Check if a vehicle is available for use
--+     * @param vehicleId The ID of the vehicle to check
--+     * @param businessId The business context for the check
--+     * @return true if the vehicle is available, false otherwise
--+     */
--+    suspend fun isVehicleAvailable(vehicleId: String, businessId: String): Boolean
--+
--+    /**
--+     * Get error message if vehicle is not available
--+     * @param vehicleId The ID of the vehicle to check
--+     * @param businessId The business context for the check
--+     * @return Error message if vehicle is not available, null otherwise
--+     */
--+    suspend fun getVehicleErrorMessage(vehicleId: String, businessId: String): String?
-- } 
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusRepository.kt b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusRepository.kt
--index 127755d..18c5158 100644
----- a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusRepository.kt
--+++ b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusRepository.kt
--@@ -3,7 +3,7 @@ package app.forku.domain.repository.vehicle
-- import app.forku.domain.model.vehicle.VehicleStatus
-- 
-- interface VehicleStatusRepository : VehicleStatusChecker {
---    suspend fun getVehicleStatus(vehicleId: String): VehicleStatus
---    suspend fun updateVehicleStatus(vehicleId: String, status: VehicleStatus): Boolean
--+    suspend fun getVehicleStatus(vehicleId: String, businessId: String): VehicleStatus
--+    suspend fun updateVehicleStatus(vehicleId: String, status: VehicleStatus, businessId: String): Boolean
--     suspend fun determineStatusFromCheck(checkStatus: String): VehicleStatus
-- }
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusUpdater.kt b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusUpdater.kt
--index 91cf7bb..f6ee67d 100644
----- a/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusUpdater.kt
--+++ b/app/src/main/java/app/forku/domain/repository/vehicle/VehicleStatusUpdater.kt
--@@ -3,5 +3,16 @@ package app.forku.domain.repository.vehicle
-- import app.forku.domain.model.vehicle.VehicleStatus
-- 
-- interface VehicleStatusUpdater {
---    suspend fun updateVehicleStatus(vehicleId: String, status: VehicleStatus): Boolean
--+    /**
--+     * Updates the status of a vehicle
--+     * @param vehicleId The ID of the vehicle to update
--+     * @param status The new status to set
--+     * @param businessId The business context for the update
--+     * @return true if update was successful, false otherwise
--+     */
--+    suspend fun updateVehicleStatus(
--+        vehicleId: String,
--+        status: VehicleStatus,
--+        businessId: String
--+    ): Boolean
-- } 
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/domain/service/VehicleValidationService.kt b/app/src/main/java/app/forku/domain/service/VehicleValidationService.kt
--index e0853a5..a6bd064 100644
----- a/app/src/main/java/app/forku/domain/service/VehicleValidationService.kt
--+++ b/app/src/main/java/app/forku/domain/service/VehicleValidationService.kt
--@@ -3,9 +3,42 @@ package app.forku.domain.service
-- import app.forku.domain.model.vehicle.VehicleStatus
-- 
-- interface VehicleValidationService {
---    suspend fun getVehicleStatus(vehicleId: String): VehicleStatus
---    suspend fun isVehicleAvailable(vehicleId: String): Boolean
---    suspend fun getVehicleErrorMessage(vehicleId: String): String?
---    suspend fun validateVehicleForOperation(vehicleId: String)
--+    /**
--+     * Get the current status of a vehicle
--+     * @param vehicleId The ID of the vehicle to check
--+     * @param businessId The business context for the check
--+     * @return The current status of the vehicle
--+     */
--+    suspend fun getVehicleStatus(vehicleId: String, businessId: String): VehicleStatus
--+
--+    /**
--+     * Check if a vehicle is available for use
--+     * @param vehicleId The ID of the vehicle to check
--+     * @param businessId The business context for the check
--+     * @return true if the vehicle is available, false otherwise
--+     */
--+    suspend fun isVehicleAvailable(vehicleId: String, businessId: String): Boolean
--+
--+    /**
--+     * Get error message if vehicle is not available
--+     * @param vehicleId The ID of the vehicle to check
--+     * @param businessId The business context for the check
--+     * @return Error message if vehicle is not available, null otherwise
--+     */
--+    suspend fun getVehicleErrorMessage(vehicleId: String, businessId: String): String?
--+
--+    /**
--+     * Validate if a vehicle can be used for operation
--+     * @param vehicleId The ID of the vehicle to validate
--+     * @param businessId The business context for the validation
--+     * @throws Exception if vehicle is not available
--+     */
--+    suspend fun validateVehicleForOperation(vehicleId: String, businessId: String)
--+
--+    /**
--+     * Determine vehicle status from check status
--+     * @param checkStatus The check status to evaluate
--+     * @return The determined vehicle status
--+     */
--     fun determineStatusFromCheck(checkStatus: String): VehicleStatus
-- } 
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/domain/usecase/vehicle/GetActiveVehicleSessionsUseCase.kt b/app/src/main/java/app/forku/domain/usecase/vehicle/GetActiveVehicleSessionsUseCase.kt
--index 0e58a22..80c9fab 100644
----- a/app/src/main/java/app/forku/domain/usecase/vehicle/GetActiveVehicleSessionsUseCase.kt
--+++ b/app/src/main/java/app/forku/domain/usecase/vehicle/GetActiveVehicleSessionsUseCase.kt
--@@ -15,13 +15,17 @@ class GetActiveVehicleSessionsUseCase @Inject constructor(
--     suspend operator fun invoke(): Map<String, VehicleSessionInfo> {
--         val sessionMap = mutableMapOf<String, VehicleSessionInfo>()
--         
--+        // Get current user's business ID
--+        val currentUser = userRepository.getCurrentUser() ?: return emptyMap()
--+        val businessId = currentUser.businessId ?: return emptyMap()
--+        
--         // Get all active sessions
--         val activeSessions = vehicleSessionRepository.getOperatorSessionHistory()
--             .filter { it.endTime == null }  // Only active sessions
--             
--         for (session in activeSessions) {
--             val operator = userRepository.getUserById(session.userId)
---            val vehicle = vehicleRepository.getVehicle(session.vehicleId)
--+            val vehicle = vehicleRepository.getVehicle(session.vehicleId, businessId)
--             
--             try {
--                 sessionMap[session.vehicleId] = VehicleSessionInfo(
--diff --git a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleActiveSessionUseCase.kt b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleActiveSessionUseCase.kt
--index 717504f..de89099 100644
----- a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleActiveSessionUseCase.kt
--+++ b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleActiveSessionUseCase.kt
--@@ -15,9 +15,13 @@ class GetVehicleActiveSessionUseCase @Inject constructor(
--     private val vehicleRepository: VehicleRepository
-- ) {
--     suspend operator fun invoke(vehicleId: String): VehicleSessionInfo? {
---        val session = vehicleSessionRepository.getActiveSessionForVehicle(vehicleId) ?: return null
--+        // Get current user's business ID
--+        val currentUser = userRepository.getCurrentUser() ?: return null
--+        val businessId = currentUser.businessId ?: return null
--+        
--+        val session = vehicleSessionRepository.getActiveSessionForVehicle(vehicleId, businessId) ?: return null
--         val operator = userRepository.getUserById(session.userId)
---        val vehicle = vehicleRepository.getVehicle(vehicleId)
--+        val vehicle = vehicleRepository.getVehicle(vehicleId, businessId)
--         
--         val startTime = LocalDateTime.parse(session.startTime)
--         val currentTime = LocalDateTime.now()
--diff --git a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleStatusUseCase.kt b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleStatusUseCase.kt
--index 9a46e0d..d029d4e 100644
----- a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleStatusUseCase.kt
--+++ b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleStatusUseCase.kt
--@@ -3,13 +3,23 @@ package app.forku.domain.usecase.vehicle
-- import app.forku.domain.model.vehicle.VehicleStatus
-- import javax.inject.Inject
-- import app.forku.domain.repository.vehicle.VehicleStatusRepository
--+import app.forku.domain.repository.user.UserRepository
-- 
-- class GetVehicleStatusUseCase @Inject constructor(
---    private val vehicleStatusRepository: VehicleStatusRepository
--+    private val vehicleStatusRepository: VehicleStatusRepository,
--+    private val userRepository: UserRepository
-- ) {
--     suspend operator fun invoke(vehicleId: String): VehicleStatus {
--         return try {
---            vehicleStatusRepository.getVehicleStatus(vehicleId)
--+            val currentUser = userRepository.getCurrentUser()
--+            val businessId = currentUser?.businessId
--+            
--+            if (businessId == null) {
--+                android.util.Log.e("VehicleStatus", "No business ID available")
--+                return VehicleStatus.AVAILABLE
--+            }
--+            
--+            vehicleStatusRepository.getVehicleStatus(vehicleId, businessId)
--         } catch (e: Exception) {
--             android.util.Log.e("VehicleStatus", "Error getting vehicle status", e)
--             VehicleStatus.AVAILABLE
--diff --git a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleUseCase.kt b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleUseCase.kt
--index df60bca..59a3d3e 100644
----- a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleUseCase.kt
--+++ b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehicleUseCase.kt
--@@ -1,13 +1,23 @@
-- package app.forku.domain.usecase.vehicle
-- 
-- import app.forku.domain.model.vehicle.Vehicle
---import app.forku.domain.repository.vehicle.VehicleRepository
-- import javax.inject.Inject
--+import app.forku.domain.repository.vehicle.VehicleRepository
--+import app.forku.domain.repository.user.UserRepository
-- 
-- class GetVehicleUseCase @Inject constructor(
---    private val repository: VehicleRepository
--+    private val repository: VehicleRepository,
--+    private val userRepository: UserRepository
-- ) {
---    suspend operator fun invoke(id: String): Vehicle {
---        return repository.getVehicle(id)
--+    suspend operator fun invoke(id: String): Vehicle? {
--+        val currentUser = userRepository.getCurrentUser() ?: return null
--+        val businessId = currentUser.businessId ?: return null
--+        
--+        return try {
--+            repository.getVehicle(id, businessId)
--+        } catch (e: Exception) {
--+            android.util.Log.e("GetVehicleUseCase", "Error getting vehicle: ${e.message}")
--+            null
--+        }
--     }
-- }
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehiclesUseCase.kt b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehiclesUseCase.kt
--index cacb891..6aa4adb 100644
----- a/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehiclesUseCase.kt
--+++ b/app/src/main/java/app/forku/domain/usecase/vehicle/GetVehiclesUseCase.kt
--@@ -1,13 +1,23 @@
-- package app.forku.domain.usecase.vehicle
-- 
-- import app.forku.domain.model.vehicle.Vehicle
---import app.forku.domain.repository.vehicle.VehicleRepository
-- import javax.inject.Inject
--+import app.forku.domain.repository.vehicle.VehicleRepository
--+import app.forku.domain.repository.user.UserRepository
-- 
-- class GetVehiclesUseCase @Inject constructor(
---    private val repository: VehicleRepository
--+    private val repository: VehicleRepository,
--+    private val userRepository: UserRepository
-- ) {
--     suspend operator fun invoke(): List<Vehicle> {
---        return repository.getVehicles()
--+        val currentUser = userRepository.getCurrentUser() ?: return emptyList()
--+        val businessId = currentUser.businessId ?: return emptyList()
--+        
--+        return try {
--+            repository.getVehicles(businessId)
--+        } catch (e: Exception) {
--+            android.util.Log.e("GetVehiclesUseCase", "Error getting vehicles: ${e.message}")
--+            emptyList()
--+        }
--     }
-- } 
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/presentation/checklist/AllChecklistViewModel.kt b/app/src/main/java/app/forku/presentation/checklist/AllChecklistViewModel.kt
--index 4b86049..117215e 100644
----- a/app/src/main/java/app/forku/presentation/checklist/AllChecklistViewModel.kt
--+++ b/app/src/main/java/app/forku/presentation/checklist/AllChecklistViewModel.kt
--@@ -69,11 +69,25 @@ class AllChecklistViewModel @Inject constructor(
--             }
--             
--             try {
--+                val currentUser = userRepository.getCurrentUser()
--+                val businessId = currentUser?.businessId
--+                
--+                if (businessId == null) {
--+                    _state.update { 
--+                        it.copy(
--+                            isLoading = false,
--+                            isLoadingMore = false,
--+                            error = "No business context available"
--+                        )
--+                    }
--+                    return@launch
--+                }
--+                
--                 val checks = checklistRepository.getAllChecks(page)
--                 val checkStates = checks.mapNotNull { check ->
--                     try {
--                         val operator = userRepository.getUserById(check.userId)
---                        val vehicle = vehicleRepository.getVehicle(check.vehicleId)
--+                        val vehicle = vehicleRepository.getVehicle(check.vehicleId, businessId)
--                         PreShiftCheckState(
--                             id = check.id,
--                             vehicleId = check.vehicleId,
--@@ -83,6 +97,7 @@ class AllChecklistViewModel @Inject constructor(
--                             lastCheckDateTime = check.lastCheckDateTime
--                         )
--                     } catch (e: Exception) {
--+                        android.util.Log.e("AllChecklistViewModel", "Error processing check: ${e.message}")
--                         null
--                     }
--                 }
--diff --git a/app/src/main/java/app/forku/presentation/checklist/CheckDetailViewModel.kt b/app/src/main/java/app/forku/presentation/checklist/CheckDetailViewModel.kt
--index bf00ffb..e2bc26e 100644
----- a/app/src/main/java/app/forku/presentation/checklist/CheckDetailViewModel.kt
--+++ b/app/src/main/java/app/forku/presentation/checklist/CheckDetailViewModel.kt
--@@ -25,16 +25,27 @@ class CheckDetailViewModel @Inject constructor(
--             try {
--                 _state.value = _state.value.copy(isLoading = true)
--                 
--+                val currentUser = userRepository.getCurrentUser()
--+                val businessId = currentUser?.businessId
--+                
--+                if (businessId == null) {
--+                    _state.value = _state.value.copy(
--+                        isLoading = false,
--+                        error = "No business context available"
--+                    )
--+                    return@launch
--+                }
--+
--                 val check = checklistRepository.getCheckById(checkId)
--                 check?.let {
--                     val operator = userRepository.getUserById(it.userId)
---                    val vehicle = vehicleRepository.getVehicle(it.vehicleId)
--+                    val vehicle = vehicleRepository.getVehicle(it.vehicleId, businessId)
--                     _state.value = _state.value.copy(
--                         check = PreShiftCheckState(
--                             id = it.id,
--                             vehicleId = it.vehicleId,
--                             vehicleCodename = vehicle.codename,
---                            operatorName = operator?.let { user -> "${user.firstName} ${user.lastName}" } ?: "Unknown",
--+                            operatorName = operator?.let { "${it.firstName} ${it.lastName}" } ?: "Unknown",
--                             status = it.status,
--                             lastCheckDateTime = it.lastCheckDateTime
--                         ),
--@@ -50,7 +61,7 @@ class CheckDetailViewModel @Inject constructor(
--             } catch (e: Exception) {
--                 _state.value = _state.value.copy(
--                     isLoading = false,
---                    error = e.message ?: "Unknown error occurred"
--+                    error = "Error loading check: ${e.message}"
--                 )
--             }
--         }
--diff --git a/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt b/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt
--index 13a967f..6323f63 100644
----- a/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt
--+++ b/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt
--@@ -75,11 +75,18 @@ class ChecklistViewModel @Inject constructor(
--             val currentSession = vehicleSessionRepository.getCurrentSession()
--             if (currentSession != null) {
--                 // Get the last completed check for this vehicle
---                val lastCompletedCheck = checklistRepository.getLastPreShiftCheck(vehicleId.toString())
---                if (lastCompletedCheck != null) {
---                    loadExistingCheck(lastCompletedCheck.id)
--+                val currentUser = userRepository.getCurrentUser()
--+                val businessId = currentUser?.businessId
--+                
--+                if (businessId != null) {
--+                    val lastCompletedCheck = checklistRepository.getLastPreShiftCheck(vehicleId.toString(), businessId)
--+                    if (lastCompletedCheck != null) {
--+                        loadExistingCheck(lastCompletedCheck.id)
--+                    } else {
--+                        loadChecklistData() // Fallback to normal flow if no check found
--+                    }
--                 } else {
---                    loadChecklistData() // Fallback to normal flow if no check found
--+                    loadChecklistData() // Fallback if no business context
--                 }
--             } else {
--                 loadChecklistData()
--@@ -174,6 +181,22 @@ class ChecklistViewModel @Inject constructor(
--     fun loadChecklistData() {
--         viewModelScope.launch(Dispatchers.IO) {
--             try {
--+                // Get current user's business ID
--+                val currentUser = userRepository.getCurrentUser()
--+                val businessId = currentUser?.businessId
--+                
--+                if (businessId == null) {
--+                    withContext(Dispatchers.Main) {
--+                        _state.value = ChecklistState(
--+                            vehicleId = vehicleId.toString(),
--+                            vehicleStatus = VehicleStatus.AVAILABLE,
--+                            checkStatus = CheckStatus.NOT_STARTED.toString(),
--+                            error = "No business context available"
--+                        )
--+                    }
--+                    return@launch
--+                }
--+
--                 // 1. Obtener datos del checklist
--                 val checklists = getChecklistUseCase(vehicleId.toString())
--                 val firstChecklist = checklists.first()
--@@ -184,7 +207,7 @@ class ChecklistViewModel @Inject constructor(
--                 )
-- 
--                 // 2. Crear o recuperar el check
---                val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId.toString())
--+                val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId.toString(), businessId)
--                 
--                 // Get current time in ISO format
--                 val currentDateTime = java.time.Instant.now().toString()
--diff --git a/app/src/main/java/app/forku/presentation/common/components/DashboardHeader.kt b/app/src/main/java/app/forku/presentation/common/components/DashboardHeader.kt
--index a771b7a..13549aa 100644
----- a/app/src/main/java/app/forku/presentation/common/components/DashboardHeader.kt
--+++ b/app/src/main/java/app/forku/presentation/common/components/DashboardHeader.kt
--@@ -3,6 +3,7 @@ package app.forku.presentation.common.components
-- import androidx.compose.foundation.layout.*
-- import androidx.compose.material.icons.Icons
-- import androidx.compose.material.icons.filled.Notifications
--+import androidx.compose.material.icons.filled.AccountCircle
-- import androidx.compose.material3.*
-- import androidx.compose.runtime.Composable
-- import androidx.compose.ui.Alignment
--@@ -16,8 +17,10 @@ import androidx.compose.ui.unit.sp
-- fun DashboardHeader(
--     userName: String,
--     onNotificationClick: () -> Unit,
--+    onProfileClick: () -> Unit = {},
--     modifier: Modifier = Modifier,
--     showNotifications: Boolean = true,
--+    showProfile: Boolean = true,
--     greeting: String = "How are you today?"
-- ) {
--     Row(
--@@ -39,17 +42,35 @@ fun DashboardHeader(
--                 fontSize = 18.sp
--             )
--         }
---        if (showNotifications) {
---            IconButton(
---                onClick = onNotificationClick,
---                modifier = Modifier.size(48.dp)
---            ) {
---                Icon(
---                    imageVector = Icons.Default.Notifications,
---                    contentDescription = "Notifications",
---                    tint = Color.Gray,
---                    modifier = Modifier.size(28.dp)
---                )
--+        Row(
--+            horizontalArrangement = Arrangement.spacedBy(8.dp),
--+            verticalAlignment = Alignment.CenterVertically
--+        ) {
--+            if (showProfile) {
--+                IconButton(
--+                    onClick = onProfileClick,
--+                    modifier = Modifier.size(48.dp)
--+                ) {
--+                    Icon(
--+                        imageVector = Icons.Default.AccountCircle,
--+                        contentDescription = "Profile",
--+                        tint = Color.Gray,
--+                        modifier = Modifier.size(28.dp)
--+                    )
--+                }
--+            }
--+            if (showNotifications) {
--+                IconButton(
--+                    onClick = onNotificationClick,
--+                    modifier = Modifier.size(48.dp)
--+                ) {
--+                    Icon(
--+                        imageVector = Icons.Default.Notifications,
--+                        contentDescription = "Notifications",
--+                        tint = Color.Gray,
--+                        modifier = Modifier.size(28.dp)
--+                    )
--+                }
--             }
--         }
--     }
--diff --git a/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt
--index 11cc022..333f3c5 100644
----- a/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt
--+++ b/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt
--@@ -195,7 +195,7 @@ private fun OperationStatusSection(
-- }
-- 
-- @Composable
---private fun StatusItem(
--+fun StatusItem(
--     icon: ImageVector,
--     count: String,
--     label: String,
--diff --git a/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardViewModel.kt b/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardViewModel.kt
--index c71edce..bc399a6 100644
----- a/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardViewModel.kt
--+++ b/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardViewModel.kt
--@@ -6,6 +6,7 @@ import app.forku.domain.model.checklist.Answer
-- import app.forku.domain.model.session.VehicleSession
-- import app.forku.domain.model.session.VehicleSessionInfo
-- import app.forku.domain.model.user.User
--+import app.forku.domain.model.user.UserRole
-- import app.forku.domain.repository.checklist.ChecklistRepository
-- import app.forku.domain.repository.incident.IncidentRepository
-- import app.forku.domain.repository.session.VehicleSessionRepository
--@@ -62,37 +63,46 @@ class AdminDashboardViewModel @Inject constructor(
--     private suspend fun getVehicleSessionInfo(session: VehicleSession): VehicleSessionInfo? {
--         return try {
--             android.util.Log.d("AdminDashboard", "Getting info for session: $session")
---            val vehicle = vehicleRepository.getVehicle(session.vehicleId)
---            android.util.Log.d("AdminDashboard", "Found vehicle: $vehicle")
---            val operator = userRepository.getUserById(session.userId)
---            android.util.Log.d("AdminDashboard", "Found operator: $operator with photoUrl: ${operator?.photoUrl}")
--+            val currentUser = userRepository.getCurrentUser()
--+            val businessId = currentUser?.businessId
--+            
--+            if (businessId == null) {
--+                android.util.Log.e("AdminDashboard", "No business context available")
--+                return null
--+            }
--+            
--+            val vehicle = vehicleRepository.getVehicle(session.vehicleId, businessId)
--+            android.util.Log.d("AdminDashboard", "Got vehicle: $vehicle")
--             
---            // Calculate session progress (assuming 8-hour shifts)
--+            val operator = userRepository.getUserById(session.userId)
--+            android.util.Log.d("AdminDashboard", "Got operator: $operator, photoUrl: ${operator?.photoUrl}")
--+
--+            // Calculate session progress (assuming 8-hour default duration)
--             val startTime = parseDateTime(session.startTime)
--             val now = OffsetDateTime.now()
--             val elapsedMinutes = java.time.Duration.between(startTime, now).toMinutes()
---
--             val progress = (elapsedMinutes.toFloat() / (8 * 60)).coerceIn(0f, 1f)
-- 
--             // Default avatar URL for when photoUrl is empty
--             val defaultAvatarUrl = "https://ui-avatars.com/api/?name=${operator?.firstName?.first() ?: "U"}+${operator?.lastName?.first() ?: "U"}&background=random"
---            
--+
--             // Create session info even if operator is null
--             VehicleSessionInfo(
--                 vehicle = vehicle,
--                 vehicleId = vehicle.id,
--                 vehicleType = vehicle.type.displayName,
---                progress = progress,
---                operatorName = operator?.let { "${it.firstName.first()}. ${it.lastName}" } ?: "Unknown",
---                operatorImage = operator?.photoUrl?.takeIf { it.isNotEmpty() } ?: defaultAvatarUrl,
---                sessionStartTime = session.startTime,
---                vehicleImage = vehicle.photoModel,
--                 codename = vehicle.codename,
--+                vehicleImage = vehicle.photoModel,
--                 session = session,
---                operator = operator
--+                operator = operator,
--+                operatorName = "${operator?.firstName?.first() ?: ""}. ${operator?.lastName ?: ""}",
--+                operatorImage = operator?.photoUrl ?: defaultAvatarUrl,
--+                sessionStartTime = session.startTime,
--+                userRole = operator?.role ?: UserRole.OPERATOR,
--+                progress = progress
--             )
--         } catch (e: Exception) {
---            android.util.Log.e("AdminDashboard", "Error getting vehicle session info", e)
--+            android.util.Log.e("AdminDashboard", "Error getting session info: ${e.message}")
--             null
--         }
--     }
--@@ -123,9 +133,20 @@ class AdminDashboardViewModel @Inject constructor(
--             try {
--                 _state.value = _state.value.copy(isLoading = true)
-- 
--+                val currentUser = userRepository.getCurrentUser()
--+                val businessId = currentUser?.businessId
--+                
--+                if (businessId == null) {
--+                    _state.value = _state.value.copy(
--+                        error = "No business context available",
--+                        isLoading = false
--+                    )
--+                    return@launch
--+                }
--+
--                 // Get all vehicles with error handling
--                 val vehicles = try {
---                    vehicleRepository.getVehicles()
--+                    vehicleRepository.getVehicles(businessId)
--                 } catch (e: Exception) {
--                     android.util.Log.e("AdminDashboard", "Error getting vehicles", e)
--                     emptyList()
--@@ -137,7 +158,7 @@ class AdminDashboardViewModel @Inject constructor(
--                         async {
--                             try {
--                                 delay(100) // Add small delay between requests to prevent rate limiting
---                                val session = vehicleSessionRepository.getActiveSessionForVehicle(vehicle.id)
--+                                val session = vehicleSessionRepository.getActiveSessionForVehicle(vehicle.id, businessId)
--                                 session?.let { 
--                                     val operator = userRepository.getUserById(it.userId)
--                                     val defaultAvatarUrl = "https://ui-avatars.com/api/?name=${operator?.firstName?.first() ?: "U"}+${operator?.lastName?.first() ?: "U"}&background=random"
--@@ -176,7 +197,7 @@ class AdminDashboardViewModel @Inject constructor(
--                         async {
--                             try {
--                                 delay(100) // Add small delay between requests
---                                val lastCheck = checklistRepository.getLastPreShiftCheck(session.vehicle.id)
--+                                val lastCheck = checklistRepository.getLastPreShiftCheck(session.vehicle.id, businessId)
--                                 session.vehicle.id to lastCheck
--                             } catch (e: Exception) {
--                                 android.util.Log.e("AdminDashboard", "Error getting last check for vehicle ${session.vehicle.id}", e)
--diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
--index d36fff1..1fdedbe 100644
----- a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
--+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
--@@ -133,6 +133,36 @@ fun DashboardScreen(
--                         )
--                     }
-- 
--+                    // Show business assignment message if needed
--+                    if (dashboardState.needsBusinessAssignment) {
--+                        item {
--+                            Card(
--+                                modifier = Modifier
--+                                    .fillMaxWidth()
--+                                    .padding(vertical = 8.dp),
--+                                colors = CardDefaults.cardColors(
--+                                    containerColor = MaterialTheme.colorScheme.errorContainer
--+                                )
--+                            ) {
--+                                Column(
--+                                    modifier = Modifier.padding(16.dp),
--+                                    verticalArrangement = Arrangement.spacedBy(8.dp)
--+                                ) {
--+                                    Text(
--+                                        text = "Business Assignment Required",
--+                                        style = MaterialTheme.typography.titleMedium,
--+                                        color = MaterialTheme.colorScheme.onErrorContainer
--+                                    )
--+                                    Text(
--+                                        text = "Please contact your administrator to assign you to a business. You won't be able to access vehicle operations until this is done.",
--+                                        style = MaterialTheme.typography.bodyMedium,
--+                                        color = MaterialTheme.colorScheme.onErrorContainer
--+                                    )
--+                                }
--+                            }
--+                        }
--+                    }
--+
--                     // Show current user's session
--                     item {
--                         CurrentUserSession(
--diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardState.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardState.kt
--index cf8a308..a532b03 100644
----- a/app/src/main/java/app/forku/presentation/dashboard/DashboardState.kt
--+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardState.kt
--@@ -21,7 +21,8 @@ data class DashboardState(
--     val vehicles: List<Vehicle> = emptyList(),
--     val activeSessions: List<VehicleSession> = emptyList(),
--     val users: List<User> = emptyList(),
---    val checks: List<PreShiftCheck> = emptyList()
--+    val checks: List<PreShiftCheck> = emptyList(),
--+    val needsBusinessAssignment: Boolean = false
-- )
-- //{
-- //    val displayVehicle: Vehicle?
--diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
--index fa4ed2d..2a46216 100644
----- a/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
--+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
--@@ -103,39 +103,55 @@ class DashboardViewModel @Inject constructor(
--     }
--     
--     private suspend fun loadDashboard(showLoading: Boolean = false) {
---        // Use mutex to prevent concurrent loadDashboard calls
---        if (!loadDashboardMutex.tryLock()) {
---            android.util.Log.d("DashboardViewModel", "Skipping loadDashboard - already in progress")
---            return
--+        if (showLoading) {
--+            android.util.Log.d("DashboardViewModel", "Setting loading state to true")
--+            _state.update { it.copy(isLoading = true) }
--         }
---        
--+
--         try {
---            if (showLoading) {
---                android.util.Log.d("DashboardViewModel", "Setting loading state to true")
---                _state.update { it.copy(isLoading = true) }
---            }
---            
--             val currentUser = userRepository.getCurrentUser()
--                 ?: throw Exception("User not authenticated")
--+                
--+            // For operators without a business context, we'll show a limited dashboard
--+            if (currentUser.businessId == null) {
--+                _state.update {
--+                    it.copy(
--+                        isLoading = false,
--+                        error = null,
--+                        vehicles = emptyList(),
--+                        activeSessions = emptyList(),
--+                        users = emptyList(),
--+                        checks = emptyList(),
--+                        currentSession = null,
--+                        lastSession = null,
--+                        displayVehicle = null,
--+                        lastPreShiftCheck = null,
--+                        needsBusinessAssignment = true
--+                    )
--+                }
--+                return
--+            }
--+
--+            val businessId = currentUser.businessId
-- 
--             // Load all vehicles
---            val vehicles = vehicleRepository.getVehicles()
---            
--+            val vehicles = vehicleRepository.getVehicles(businessId)
--+
--             // Load only active sessions (where endTime is null)
--             val activeSessions = vehicleSessionRepository.getSessions()
---                .filter { session -> 
---                    session.endTime == null && 
--+                .filter { session ->
--+                    session.endTime == null &&
--                     // Ensure the vehicle exists for this session
--                     vehicles.any { vehicle -> vehicle.id == session.vehicleId }
--                 }
---                .distinctBy { it.vehicleId } // Ensure only one active session per vehicle
---            
--+                .distinctBy { it.vehicleId } // Ensure only one session per vehicle
--+
--             // Load all users involved in active sessions
---            val userIds = activeSessions.map { it.userId }.distinct()
--+            val userIds = activeSessions.map { it.userId }
--             val users = userIds.mapNotNull { userId ->
--                 userRepository.getUserById(userId)
--             }
---            
--+
--             // Load latest checks for each vehicle
--             val checks = vehicles.mapNotNull { vehicle ->
--                 getLastPreShiftCheckUseCase(vehicle.id)
--@@ -192,15 +208,8 @@ class DashboardViewModel @Inject constructor(
--                 )
--             }
--         } catch (e: Exception) {
---            android.util.Log.e("DashboardViewModel", "Error in loadDashboard", e)
---            _state.update {
---                it.copy(
---                    error = e.message,
---                    isLoading = false
---                )
---            }
---        } finally {
---            loadDashboardMutex.unlock()
--+            android.util.Log.e("DashboardViewModel", "Error loading dashboard", e)
--+            _state.update { it.copy(error = "Error loading dashboard: ${e.message}") }
--         }
--     }
-- 
--diff --git a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
--index 441cc9d..f0cfa1f 100644
----- a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
--+++ b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
--@@ -125,10 +125,6 @@ class IncidentReportViewModel @Inject constructor(
--     private fun loadInitialData() {
--         viewModelScope.launch {
--             try {
---                // Load available vehicles first
---                val vehicles = vehicleRepository.getVehicles()
---                _state.update { it.copy(availableVehicles = vehicles) }
---
--                 // Get current user first
--                 var user = userRepository.getCurrentUser()
--                 android.util.Log.d("IncidentReport", "Initial current user fetch: $user")
--@@ -140,6 +136,17 @@ class IncidentReportViewModel @Inject constructor(
--                     user = refreshResult.getOrNull()
--                     android.util.Log.d("IncidentReport", "After refresh, current user: $user")
--                 }
--+
--+                val businessId = user?.businessId
--+                if (businessId == null) {
--+                    android.util.Log.e("IncidentReport", "No business context available")
--+                    _state.update { it.copy(error = "No business context available") }
--+                    return@launch
--+                }
--+                
--+                // Load available vehicles first
--+                val vehicles = vehicleRepository.getVehicles(businessId)
--+                _state.update { it.copy(availableVehicles = vehicles) }
--                 
--                 // Set user information regardless of session
--                 user?.let { currentUser ->
--@@ -169,8 +176,8 @@ class IncidentReportViewModel @Inject constructor(
--                 
--                 session?.vehicleId?.let { vehicleId ->
--                     try {
---                        val vehicle = vehicleRepository.getVehicle(vehicleId)
---                        val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId)
--+                        val vehicle = vehicleRepository.getVehicle(vehicleId, businessId)
--+                        val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId, businessId)
--                         
--                         _state.update { currentState ->
--                             currentState.copy(
--@@ -200,7 +207,16 @@ class IncidentReportViewModel @Inject constructor(
--         
--         viewModelScope.launch {
--             try {
---                val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId)
--+                val currentUser = userRepository.getCurrentUser()
--+                val businessId = currentUser?.businessId
--+                
--+                if (businessId == null) {
--+                    android.util.Log.e("IncidentReport", "No business context available")
--+                    _state.update { it.copy(error = "No business context available") }
--+                    return@launch
--+                }
--+                
--+                val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId, businessId)
--                 _state.update { currentState -> 
--                     currentState.copy(
--                         lastPreshiftCheck = lastCheck?.lastCheckDateTime?.let { dateString ->
--diff --git a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
--index 99ed634..a7e4928 100644
----- a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
--+++ b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
--@@ -15,6 +15,7 @@ import app.forku.core.network.NetworkConnectivityManager
-- import app.forku.core.location.LocationManager
-- import app.forku.presentation.user.login.LoginScreen
-- import app.forku.presentation.dashboard.DashboardScreen
--+import app.forku.presentation.dashboard.SuperAdminDashboardScreen
-- import app.forku.presentation.checklist.ChecklistScreen
-- import app.forku.presentation.vehicle.list.VehicleListScreen
-- import app.forku.presentation.vehicle.profile.VehicleProfileScreen
--@@ -26,7 +27,6 @@ import app.forku.presentation.incident.IncidentReportViewModel
-- import app.forku.presentation.incident.list.IncidentListScreen
-- import app.forku.presentation.user.profile.ProfileScreen
-- import app.forku.presentation.vehicle.manual.PerformanceReportScreen
---
-- import app.forku.presentation.incident.detail.IncidentDetailScreen
-- import app.forku.presentation.tour.TourScreen
-- import app.forku.presentation.user.register.RegisterScreen
--@@ -42,8 +42,7 @@ import app.forku.presentation.notification.NotificationScreen
-- import app.forku.presentation.user.operator.OperatorsListScreen
-- import app.forku.presentation.checklist.CheckDetailScreen
-- import app.forku.presentation.safety.SafetyAlertsScreen
---
---
--+import app.forku.presentation.business.BusinessManagementScreen
-- 
-- @Composable
-- fun NavGraph(
--@@ -64,6 +63,7 @@ fun NavGraph(
--             !tourCompleted -> Screen.Tour.route
--             loginState is LoginState.Success || hasToken -> {
--                 when (currentUser?.role) {
--+                    UserRole.SUPERADMIN -> Screen.SuperAdminDashboard.route
--                     UserRole.ADMIN -> Screen.AdminDashboard.route
--                     else -> Screen.Dashboard.route
--                 }
--@@ -75,6 +75,7 @@ fun NavGraph(
--             LoginScreen(
--                 onLoginSuccess = { user ->
--                     val route = when (user.role) {
--+                        UserRole.SUPERADMIN -> Screen.SuperAdminDashboard.route
--                         UserRole.ADMIN -> Screen.AdminDashboard.route
--                         else -> Screen.Dashboard.route
--                     }
--@@ -429,5 +430,67 @@ fun NavGraph(
--                 networkManager = networkManager
--             )
--         }
--+
--+        composable(Screen.SuperAdminDashboard.route) {
--+            SuperAdminDashboardScreen(
--+                navController = navController,
--+                onNavigate = { route ->
--+                    navController.navigate(route)
--+                },
--+                networkManager = networkManager
--+            )
--+        }
--+
--+        // SuperAdmin specific routes
--+        composable(Screen.UserManagement.route) {
--+            // TODO: Implement UserManagementScreen
--+        }
--+
--+        composable(Screen.BusinessManagement.route) {
--+            BusinessManagementScreen(
--+                navController = navController,
--+                networkManager = networkManager
--+            )
--+        }
--+
--+        composable(Screen.RoleManagement.route) {
--+            // TODO: Implement RoleManagementScreen
--+        }
--+
--+        composable(Screen.PermissionsManagement.route) {
--+            // TODO: Implement PermissionsManagementScreen
--+        }
--+
--+        composable(Screen.AddUser.route) {
--+            // TODO: Implement AddUserScreen
--+        }
--+
--+        composable(Screen.AdminManagement.route) {
--+            // TODO: Implement AdminManagementScreen
--+        }
--+
--+        composable(Screen.AddVehicle.route) {
--+            // TODO: Implement AddVehicleScreen
--+        }
--+
--+        composable(Screen.MaintenanceSchedule.route) {
--+            // TODO: Implement MaintenanceScheduleScreen
--+        }
--+
--+        composable(Screen.VehicleReports.route) {
--+            // TODO: Implement VehicleReportsScreen
--+        }
--+
--+        composable(Screen.SystemSettings.route) {
--+            // TODO: Implement SystemSettingsScreen
--+        }
--+
--+        composable(Screen.SystemBackup.route) {
--+            // TODO: Implement SystemBackupScreen
--+        }
--+
--+        composable(Screen.AuditLog.route) {
--+            // TODO: Implement AuditLogScreen
--+        }
--     }
-- }
--\ No newline at end of file
--diff --git a/app/src/main/java/app/forku/presentation/navigation/Screen.kt b/app/src/main/java/app/forku/presentation/navigation/Screen.kt
--index 38c5cfe..00caf16 100644
----- a/app/src/main/java/app/forku/presentation/navigation/Screen.kt
--+++ b/app/src/main/java/app/forku/presentation/navigation/Screen.kt
--@@ -74,6 +74,7 @@ sealed class Screen(val route: String) {
--     data object IncidentDetail : Screen("incident_detail/{incidentId}")
--     data object Tour : Screen("tour")
--     data object AdminDashboard : Screen("admin_dashboard")
--+    data object SuperAdminDashboard : Screen("super_admin_dashboard")
--     data object OperatorsList : Screen("operator_session_list")
--     data object Notifications : Screen("notifications")
--     data object AllChecklist : Screen("all_checklist")
--@@ -91,6 +92,20 @@ sealed class Screen(val route: String) {
--             "certification/$certificationId/edit"
--     }
--     data object CertificationCreate : Screen("certification/create")
--+    
--+    // SuperAdmin specific routes
--+    data object UserManagement : Screen("user_management")
--+    data object RoleManagement : Screen("role_management")
--+    data object PermissionsManagement : Screen("permissions_management")
--+    data object BusinessManagement : Screen("business_management")
--+    data object AddUser : Screen("add_user")
--+    data object AdminManagement : Screen("admin_management")
--+    data object AddVehicle : Screen("add_vehicle")
--+    data object MaintenanceSchedule : Screen("maintenance_schedule")
--+    data object VehicleReports : Screen("vehicle_reports")
--+    data object SystemSettings : Screen("system_settings")
--+    data object SystemBackup : Screen("system_backup")
--+    data object AuditLog : Screen("audit_log")
-- 
--     companion object {
--         fun Profile.withOperatorId(operatorId: String?) = 
--diff --git a/app/src/main/java/app/forku/presentation/safety/SafetyAlertsViewModel.kt b/app/src/main/java/app/forku/presentation/safety/SafetyAlertsViewModel.kt
--index 2f13c41..cface9d 100644
----- a/app/src/main/java/app/forku/presentation/safety/SafetyAlertsViewModel.kt
--+++ b/app/src/main/java/app/forku/presentation/safety/SafetyAlertsViewModel.kt
--@@ -34,18 +34,29 @@ class SafetyAlertsViewModel @Inject constructor(
--             try {
--                 _state.value = _state.value.copy(isLoading = true)
-- 
--+                val currentUser = userRepository.getCurrentUser()
--+                val businessId = currentUser?.businessId
--+                
--+                if (businessId == null) {
--+                    _state.value = _state.value.copy(
--+                        error = "No business context available",
--+                        isLoading = false
--+                    )
--+                    return@launch
--+                }
--+
--                 // Get all checks
--                 val checks = checklistRepository.getAllChecks()
---                
--+
--                 // Process checks to find safety alerts (failed non-critical items)
--                 val alerts = mutableListOf<SafetyAlert>()
---                
--+
--                 checks.forEach { check ->
--                     // Get vehicle info
---                    val vehicle = vehicleRepository.getVehicle(check.vehicleId)
--+                    val vehicle = vehicleRepository.getVehicle(check.vehicleId, businessId)
--                     // Get operator info
--                     val operator = userRepository.getUserById(check.userId)
---                    
--+
--                     // Find failed non-critical items
--                     check.items
--                         .filter { !it.isCritical && it.userAnswer == Answer.FAIL }
--@@ -65,11 +76,12 @@ class SafetyAlertsViewModel @Inject constructor(
-- 
--                 _state.value = _state.value.copy(
--                     safetyAlerts = alerts.sortedByDescending { it.date },
---                    isLoading = false
--+                    isLoading = false,
--+                    error = null
--                 )
--             } catch (e: Exception) {
--                 _state.value = _state.value.copy(
---                    error = e.message,
--+                    error = "Failed to load safety alerts",
--                     isLoading = false
--                 )
--             }
--diff --git a/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryViewModel.kt b/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryViewModel.kt
--index daf10a0..4f61387 100644
----- a/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryViewModel.kt
--+++ b/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryViewModel.kt
--@@ -172,7 +172,12 @@ class CicoHistoryViewModel @Inject constructor(
--                 // Process sessions with vehicle and operator details
--                 val processedSessions = sessions.mapNotNull { session ->
--                     try {
---                        val vehicle = vehicleRepository.getVehicle(session.vehicleId)
--+                        val businessId = currentUser?.businessId
--+                        if (businessId == null) {
--+                            android.util.Log.e("CICO", "No business context available for vehicle ${session.vehicleId}")
--+                            return@mapNotNull null
--+                        }
--+                        val vehicle = vehicleRepository.getVehicle(session.vehicleId, businessId)
--                         val operatorResult = loadOperatorWithRetry(session.userId)
--                         
--                         val operator = operatorResult.getOrNull()
--diff --git a/app/src/main/java/app/forku/presentation/user/operator/OperatorsListViewModel.kt b/app/src/main/java/app/forku/presentation/user/operator/OperatorsListViewModel.kt
--index e1ff2b0..fc3099e 100644
----- a/app/src/main/java/app/forku/presentation/user/operator/OperatorsListViewModel.kt
--+++ b/app/src/main/java/app/forku/presentation/user/operator/OperatorsListViewModel.kt
--@@ -55,11 +55,23 @@ class OperatorsListViewModel @Inject constructor(
--     fun loadOperators(showLoading: Boolean = true) {
--         viewModelScope.launch {
--             try {
---                _state.value = _state.value.copy(
---                    isLoading = showLoading,
---                    isRefreshing = showLoading
---                )
---
--+                if (showLoading) {
--+                    _state.value = _state.value.copy(isLoading = true)
--+                }
--+                
--+                // Get current user's business context
--+                val currentUser = userRepository.getCurrentUser()
--+                val businessId = currentUser?.businessId
--+                
--+                if (businessId == null) {
--+                    android.util.Log.e("OperatorsList", "No business context available")
--+                    _state.value = _state.value.copy(
--+                        error = "No business context available",
--+                        isLoading = false
--+                    )
--+                    return@launch
--+                }
--+                
--                 // Get both operators and admins
--                 val operators = try {
--                     userRepository.getUsersByRole(UserRole.OPERATOR)
--@@ -79,7 +91,7 @@ class OperatorsListViewModel @Inject constructor(
--                 
--                 // Get all vehicles and their active sessions with retry
--                 val vehicles = try {
---                    vehicleRepository.getVehicles()
--+                    vehicleRepository.getVehicles(businessId)
--                 } catch (e: Exception) {
--                     android.util.Log.e("OperatorsList", "Error getting vehicles", e)
--                     emptyList()
--@@ -91,7 +103,7 @@ class OperatorsListViewModel @Inject constructor(
--                         async {
--                             try {
--                                 delay(100) // Add small delay between requests to prevent rate limiting
---                                vehicleSessionRepository.getActiveSessionForVehicle(vehicle.id)
--+                                vehicleSessionRepository.getActiveSessionForVehicle(vehicle.id, businessId)
--                             } catch (e: Exception) {
--                                 android.util.Log.e("OperatorsList", "Error getting session for vehicle ${vehicle.id}", e)
--                                 null
--diff --git a/app/src/main/java/app/forku/presentation/user/profile/ProfileViewModel.kt b/app/src/main/java/app/forku/presentation/user/profile/ProfileViewModel.kt
--index eb45484..9dee9b5 100644
----- a/app/src/main/java/app/forku/presentation/user/profile/ProfileViewModel.kt
--+++ b/app/src/main/java/app/forku/presentation/user/profile/ProfileViewModel.kt
--@@ -122,7 +122,13 @@ class ProfileViewModel @Inject constructor(
--             val OPERATING = userSessions.find { it.status == VehicleSessionStatus.OPERATING }
--             
--             val activeVehicle = OPERATING?.let { session ->
---                vehicleRepository.getVehicle(session.vehicleId)
--+                val businessId = user.businessId
--+                if (businessId != null) {
--+                    vehicleRepository.getVehicle(session.vehicleId, businessId)
--+                } else {
--+                    android.util.Log.e("ProfileViewModel", "No business context available for vehicle ${session.vehicleId}")
--+                    null
--+                }
--             }
--             
--             // Update user with current active status based on vehicle session
--diff --git a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListViewModel.kt b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListViewModel.kt
--index 5b5523d..8c9c2e4 100644
----- a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListViewModel.kt
--+++ b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListViewModel.kt
--@@ -55,14 +55,26 @@ class VehicleListViewModel @Inject constructor(
--                     isRefreshing = showLoading
--                 )
-- 
--+                val currentUser = userRepository.getCurrentUser()
--+                val businessId = currentUser?.businessId
--+                
--+                if (businessId == null) {
--+                    _state.value = _state.value.copy(
--+                        error = "No business context available",
--+                        isLoading = false,
--+                        isRefreshing = false
--+                    )
--+                    return@launch
--+                }
--+
--                 // Get all vehicles
---                val vehicles = vehicleRepository.getVehicles()
--+                val vehicles = vehicleRepository.getVehicles(businessId)
--                 
--                 // Get all active sessions with rate limiting
--                 val activeSessions = vehicles.map { vehicle ->
--                     async {
--                         try {
---                            val session = vehicleSessionRepository.getActiveSessionForVehicle(vehicle.id)
--+                            val session = vehicleSessionRepository.getActiveSessionForVehicle(vehicle.id, businessId)
--                             if (session != null) {
--                                 val operator = try {
--                                     // Add delay between requests to avoid rate limiting
--@@ -137,7 +149,7 @@ class VehicleListViewModel @Inject constructor(
--                         try {
--                             // Add delay between requests to avoid rate limiting
--                             kotlinx.coroutines.delay(300)
---                            val lastCheck = checklistRepository.getLastPreShiftCheck(vehicle.id)
--+                            val lastCheck = checklistRepository.getLastPreShiftCheck(vehicle.id, businessId)
--                             vehicle.id to lastCheck
--                         } catch (e: Exception) {
--                             // If there's an error getting the check, return null
--diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt
--index 11d6d7e..5bda21d 100644
----- a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt
--+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt
--@@ -95,9 +95,23 @@ class VehicleProfileViewModel @Inject constructor(
--             try {
--                 _state.update { it.copy(isLoading = showLoading) }
--                 
--+                // Get current user and business context
--+                val currentUser = userRepository.getCurrentUser()
--+                val businessId = currentUser?.businessId
--+                
--+                if (businessId == null) {
--+                    _state.update { 
--+                        it.copy(
--+                            error = "No business context available",
--+                            isLoading = false
--+                        )
--+                    }
--+                    return@launch
--+                }
--+                
--                 // Get vehicle details with retry
--                 val vehicle = retryOnFailure {
---                    vehicleRepository.getVehicle(vehicleId)
--+                    vehicleRepository.getVehicle(vehicleId, businessId)
--                 }
--                 
--                 if (vehicle == null) {
--@@ -106,12 +120,12 @@ class VehicleProfileViewModel @Inject constructor(
--                 
--                 // Get active session with retry
--                 val activeSession = retryOnFailure {
---                    vehicleSessionRepository.getActiveSessionForVehicle(vehicleId)
--+                    vehicleSessionRepository.getActiveSessionForVehicle(vehicleId, businessId)
--                 }
--                 
--                 // Get last pre-shift check with retry
--                 val lastPreShiftCheck = retryOnFailure {
---                    checklistRepository.getLastPreShiftCheck(vehicleId)
--+                    checklistRepository.getLastPreShiftCheck(vehicleId, businessId)
--                 }
--                 
--                 // Fetch operator details if there's an active session
--@@ -233,13 +247,27 @@ class VehicleProfileViewModel @Inject constructor(
--             try {
--                 _state.update { it.copy(isLoading = true) }
--                 
--+                // Get current user and business context
--+                val currentUser = userRepository.getCurrentUser()
--+                val businessId = currentUser?.businessId
--+                
--+                if (businessId == null) {
--+                    _state.update { 
--+                        it.copy(
--+                            error = "No business context available",
--+                            isLoading = false
--+                        )
--+                    }
--+                    return@launch
--+                }
--+                
--                 // Check vehicle status first
--                 val vehicleStatus = getVehicleStatusUseCase(vehicleId)
--                 if (!vehicleStatus.isAvailable()) {
--                     throw Exception(vehicleStatus.getErrorMessage())
--                 }
--                 
---                val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId)
--+                val lastCheck = checklistRepository.getLastPreShiftCheck(vehicleId, businessId)
--                 
--                 if (lastCheck?.status == CheckStatus.COMPLETED_PASS.toString()) {
--                     val session = vehicleSessionRepository.startSession(
--@@ -299,7 +327,15 @@ class VehicleProfileViewModel @Inject constructor(
--     }
-- 
--     suspend fun getLastPreShiftCheck(vehicleId: String): PreShiftCheck? {
---        return checklistRepository.getLastPreShiftCheck(vehicleId)
--+        val currentUser = userRepository.getCurrentUser()
--+        val businessId = currentUser?.businessId
--+        
--+        if (businessId == null) {
--+            android.util.Log.e("VehicleProfile", "No business context available")
--+            return null
--+        }
--+        
--+        return checklistRepository.getLastPreShiftCheck(vehicleId, businessId)
--     }
-- 
--     fun endVehicleSession() {
--@@ -308,7 +344,19 @@ class VehicleProfileViewModel @Inject constructor(
--                 _state.update { it.copy(isLoading = true) }
--                 
--                 val currentUser = userRepository.getCurrentUser()
---                if (currentUser?.role != UserRole.ADMIN) {
--+                val businessId = currentUser?.businessId
--+                
--+                if (businessId == null) {
--+                    _state.update { 
--+                        it.copy(
--+                            error = "No business context available",
--+                            isLoading = false
--+                        )
--+                    }
--+                    return@launch
--+                }
--+                
--+                if (currentUser.role != UserRole.ADMIN) {
--                     _state.update { 
--                         it.copy(
--                             error = "Only administrators can end sessions",
--@@ -338,7 +386,7 @@ class VehicleProfileViewModel @Inject constructor(
-- 
--                 // Update vehicle status to AVAILABLE
--                 state.value.vehicle?.id?.let { vehicleId ->
---                    vehicleRepository.updateVehicleStatus(vehicleId, VehicleStatus.AVAILABLE)
--+                    vehicleRepository.updateVehicleStatus(vehicleId, VehicleStatus.AVAILABLE, businessId)
--                 }
--                 
--                 // Reload vehicle state to reflect all changes
--@@ -362,7 +410,19 @@ class VehicleProfileViewModel @Inject constructor(
--                 _state.update { it.copy(isLoading = true) }
--                 
--                 val currentUser = userRepository.getCurrentUser()
---                if (currentUser?.role != UserRole.ADMIN) {
--+                val businessId = currentUser?.businessId
--+                
--+                if (businessId == null) {
--+                    _state.update { 
--+                        it.copy(
--+                            error = "No business context available",
--+                            isLoading = false
--+                        )
--+                    }
--+                    return@launch
--+                }
--+                
--+                if (currentUser.role != UserRole.ADMIN) {
--                     _state.update { 
--                         it.copy(
--                             error = "Only administrators can change vehicle status",
--@@ -392,7 +452,7 @@ class VehicleProfileViewModel @Inject constructor(
--                 }
-- 
--                 // Update vehicle status
---                vehicleRepository.updateVehicleStatus(vehicleId, newStatus)
--+                vehicleRepository.updateVehicleStatus(vehicleId, newStatus, businessId)
--                 
--                 // Reload vehicle state to reflect changes
--                 loadVehicle(showLoading = false)
--diff --git a/current_diff_forku.txt b/current_diff_forku.txt
--index 6c52ea6..9cbd646 100644
----- a/current_diff_forku.txt
--+++ b/current_diff_forku.txt
--@@ -1,4874 +0,0 @@
---diff --git a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
---index ed2879e..aadd6bc 100644
------ a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
---+++ b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
---@@ -1,5 +1,6 @@
--- package app.forku.presentation.checklist
--- 
---+import android.util.Log
--- import androidx.activity.compose.BackHandler
--- import androidx.compose.foundation.background
--- import androidx.compose.foundation.layout.*
---@@ -42,10 +43,14 @@ fun ChecklistScreen(
---     networkManager: NetworkConnectivityManager,
---     locationManager: LocationManager
--- ) {
----    var showConfirmationDialog = remember { mutableStateOf(false) }
---+    Log.d("QRFlow", "ChecklistScreen Composable started")
---+    
---+    var showConfirmationDialog by remember { mutableStateOf(false) }
---     val state by viewModel.state.collectAsState()
----    val scrollState = rememberScrollState()
---+    val showDiscardDialog by viewModel.showDiscardDialog.collectAsState()
---+    val navigationEvent by viewModel.navigationEvent.collectAsState()
---     val scope = rememberCoroutineScope()
---+    val scrollState = rememberScrollState()
---     
---     // Remember the last answered question index and description states
---     val lastAnsweredIndex = remember { mutableStateOf(-1) }
---@@ -100,29 +105,48 @@ fun ChecklistScreen(
---         }
---     }
--- 
----    // Handle back button press
----    BackHandler {
----        when (state?.message) {
----            "admin_dashboard" -> navController.navigate(Screen.AdminDashboard.route) {
----                popUpTo(Screen.AdminDashboard.route) { inclusive = true }
---+    // Handle navigation events
---+    LaunchedEffect(navigationEvent) {
---+        Log.d("QRFlow", "ChecklistScreen - Navigation event received: $navigationEvent")
---+        val event = navigationEvent
---+        when (event) {
---+            is NavigationEvent.Back -> {
---+                Log.d("QRFlow", "ChecklistScreen - Navigating back")
---+                navController.popBackStack()
---+                viewModel.resetNavigation()
---             }
----            "dashboard" -> navController.navigate(Screen.Dashboard.route) {
----                popUpTo(Screen.Dashboard.route) { inclusive = true }
---+            is NavigationEvent.AfterSubmit -> {
---+                Log.d("QRFlow", "ChecklistScreen - Navigating after submit, isAdmin: ${event.isAdmin}")
---+                if (event.isAdmin) {
---+                    navController.navigate(Screen.AdminDashboard.route) {
---+                        popUpTo(Screen.AdminDashboard.route) { inclusive = true }
---+                    }
---+                } else {
---+                    navController.navigate(Screen.Dashboard.route) {
---+                        popUpTo(Screen.Dashboard.route) { inclusive = true }
---+                    }
---+                }
---+                viewModel.resetNavigation()
---+            }
---+            null -> {
---+                Log.d("QRFlow", "ChecklistScreen - No navigation event")
---             }
----            else -> onBackPressed()
---         }
---     }
----    
----    if (showConfirmationDialog.value) {
----        AppModal(
----            onDismiss = { showConfirmationDialog.value = false },
----            onConfirm = {
----                showConfirmationDialog.value = false
----                viewModel.submitCheck()
----            },
----            title = "Submit Checklist",
----            message = "Are you sure you want to submit this checklist?"
----        )
---+
---+    // Handle back button press
---+    BackHandler {
---+        Log.d("QRFlow", "ChecklistScreen - Back button pressed")
---+        navController.previousBackStackEntry?.destination?.route?.let { previousRoute ->
---+            Log.d("QRFlow", "ChecklistScreen - Previous route: $previousRoute")
---+            navController.popBackStack()
---+        } ?: run {
---+            Log.d("QRFlow", "ChecklistScreen - No previous route, navigating to scanner")
---+            navController.navigate(Screen.QRScanner.route) {
---+                popUpTo(navController.graph.startDestinationId) { inclusive = true }
---+            }
---+        }
---+        viewModel.resetNavigation()
---     }
--- 
---     BaseScreen(
---@@ -240,12 +264,14 @@ fun ChecklistScreen(
--- 
---                                 // Only show submit button when all items are answered
---                                 if (currentState.showSubmitButton && currentState.allAnswered) {
---+                                    Spacer(Modifier.height(4.dp))
---                                     Button(
----                                        onClick = { showConfirmationDialog.value = true },
---+                                        onClick = { showConfirmationDialog = true },
---                                         enabled = currentState.showSubmitButton && currentState.allAnswered,
---                                         modifier = Modifier
---                                             .fillMaxWidth()
----                                            .padding(16.dp),
---+                                            .height(56.dp)
---+                                            .padding(horizontal = 16.dp, vertical = 3.dp),
---                                         colors = ButtonDefaults.buttonColors(
---                                             containerColor = MaterialTheme.colorScheme.primary
---                                         )
---@@ -266,26 +292,31 @@ fun ChecklistScreen(
---                         }
---                     }
---                 }
----            }
----        }
----    )
--- 
----    // Handle navigation from viewModel
----    LaunchedEffect(viewModel.navigateBack.collectAsState().value) {
----        if (viewModel.navigateBack.value) {
----            // Check state message for navigation route
----            when (state?.message) {
----                "admin_dashboard" -> navController.navigate(Screen.AdminDashboard.route) {
----                    popUpTo(Screen.AdminDashboard.route) { inclusive = true }
---+                // Show modals on top of the content
---+                if (showConfirmationDialog) {
---+                    AppModal(
---+                        onDismiss = { showConfirmationDialog = false },
---+                        onConfirm = {
---+                            showConfirmationDialog = false
---+                            viewModel.submitCheck()
---+                        },
---+                        title = "Submit Checklist",
---+                        message = "Are you sure you want to submit this checklist?"
---+                    )
---                 }
----                "dashboard" -> navController.navigate(Screen.Dashboard.route) {
----                    popUpTo(Screen.Dashboard.route) { inclusive = true }
---+
---+                if (showDiscardDialog) {
---+                    AppModal(
---+                        onDismiss = { viewModel.onDiscardDismissed() },
---+                        onConfirm = { viewModel.onDiscardConfirmed() },
---+                        title = "Discard Checklist",
---+                        message = "Are you sure you want to discard this checklist? All progress will be lost."
---+                    )
---                 }
----                else -> onBackPressed()
---             }
----            viewModel.resetNavigation()
---         }
----    }
---+    )
--- }
--- 
--- @Composable
---diff --git a/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt b/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt
---index e1b5f7a..13a967f 100644
------ a/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt
---+++ b/app/src/main/java/app/forku/presentation/checklist/ChecklistViewModel.kt
---@@ -48,8 +48,11 @@ class ChecklistViewModel @Inject constructor(
---     private val _state = MutableStateFlow<ChecklistState?>(null)
---     val state = _state.asStateFlow()
--- 
----    private val _navigateBack = MutableStateFlow(false)
----    val navigateBack = _navigateBack.asStateFlow()
---+    private val _showDiscardDialog = MutableStateFlow(false)
---+    val showDiscardDialog = _showDiscardDialog.asStateFlow()
---+
---+    private val _navigationEvent = MutableStateFlow<NavigationEvent?>(null)
---+    val navigationEvent = _navigationEvent.asStateFlow()
--- 
---     private var timerJob: kotlinx.coroutines.Job? = null
--- 
---@@ -376,12 +379,33 @@ class ChecklistViewModel @Inject constructor(
---         return userRepository.getCurrentUser() != null
---     }
--- 
---+    fun hasUnsavedChanges(): Boolean {
---+        return state.value?.let { currentState ->
---+            currentState.checkItems.any { it.userAnswer != null } && !currentState.isSubmitted
---+        } ?: false
---+    }
---+
---     fun onBackPressed() {
----        _navigateBack.value = true
---+        if (hasUnsavedChanges()) {
---+            _showDiscardDialog.value = true
---+        } else {
---+            _navigationEvent.value = NavigationEvent.Back
---+        }
---+    }
---+
---+    fun onDiscardConfirmed() {
---+        _showDiscardDialog.value = false
---+        // Cancel any ongoing operations
---+        timerJob?.cancel()
---+        _navigationEvent.value = NavigationEvent.Back
---+    }
---+
---+    fun onDiscardDismissed() {
---+        _showDiscardDialog.value = false
---     }
--- 
---     fun resetNavigation() {
----        _navigateBack.value = false
---+        _navigationEvent.value = null
---     }
--- 
---     fun submitCheck() {
---@@ -468,14 +492,12 @@ class ChecklistViewModel @Inject constructor(
---                         isCompleted = true,
---                         checkItems = updatedCheck.items,
---                         checkStatus = updatedCheck.status,
----                        isSubmitted = true,
----                        // Set navigation route based on user role
----                        message = if (isAdmin) "admin_dashboard" else "dashboard"
---+                        isSubmitted = true
---                     )
---                 }
--- 
----                // Navigate back
----                _navigateBack.update { true }
---+                // Trigger navigation based on user role
---+                _navigationEvent.value = NavigationEvent.AfterSubmit(isAdmin)
--- 
---             } catch (e: Exception) {
---                 _state.update {
---@@ -519,4 +541,9 @@ class ChecklistViewModel @Inject constructor(
---             }
---         }
---     }
---+}
---+
---+sealed class NavigationEvent {
---+    object Back : NavigationEvent()
---+    data class AfterSubmit(val isAdmin: Boolean) : NavigationEvent()
--- }
---\ No newline at end of file
---diff --git a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
---index 1c3b3b2..99ed634 100644
------ a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
---+++ b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
---@@ -124,7 +124,7 @@ fun NavGraph(
---         composable(Screen.QRScanner.route) {
---             QRScannerScreen(
---                 onNavigateToPreShiftCheck = { vehicleId ->
----                    navController.navigate("checklist/${vehicleId}?fromScanner=true")
---+                    navController.navigate(Screen.Checklist.createRoute(vehicleId, fromScanner = true))
---                 },
---                 onNavigateToVehicleProfile = { vehicleId ->
---                     navController.navigate(Screen.VehicleProfile.route.replace("{vehicleId}", vehicleId))
---@@ -132,7 +132,8 @@ fun NavGraph(
---                 onNavigateBack = {
---                     navController.popBackStack()
---                 },
----                networkManager = networkManager
---+                networkManager = networkManager,
---+                navController = navController
---             )
---         }
--- 
---@@ -161,7 +162,7 @@ fun NavGraph(
---                 navController = navController,
---                 onBackPressed = {
---                     if (fromScanner) {
----                        navController.navigate(Screen.VehicleProfile.route.replace("{vehicleId}", vehicleId)) {
---+                        navController.navigate(Screen.QRScanner.route) {
---                             popUpTo(Screen.QRScanner.route) { inclusive = true }
---                         }
---                     } else {
---diff --git a/app/src/main/java/app/forku/presentation/navigation/Screen.kt b/app/src/main/java/app/forku/presentation/navigation/Screen.kt
---index 9f553ef..38c5cfe 100644
------ a/app/src/main/java/app/forku/presentation/navigation/Screen.kt
---+++ b/app/src/main/java/app/forku/presentation/navigation/Screen.kt
---@@ -7,10 +7,17 @@ sealed class Screen(val route: String) {
---     data object QRScanner : Screen("qr_scanner")
---     data object VehicleProfile : Screen("vehicle_profile/{vehicleId}")
---     data object Checklist : Screen("checklist/{vehicleId}") {
----        fun createRoute(vehicleId: String, checkId: String? = null): String = buildString {
---+        fun createRoute(vehicleId: String, checkId: String? = null, fromScanner: Boolean = false): String = buildString {
---             append("checklist/$vehicleId")
----            if (checkId != null) {
----                append("?checkId=$checkId")
---+            if (checkId != null || fromScanner) {
---+                append("?")
---+                if (checkId != null) {
---+                    append("checkId=$checkId")
---+                    if (fromScanner) append("&")
---+                }
---+                if (fromScanner) {
---+                    append("fromScanner=true")
---+                }
---             }
---         }
---     }
---diff --git a/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt b/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt
---index a194784..068a51f 100644
------ a/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt
---+++ b/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt
---@@ -4,6 +4,7 @@ import android.Manifest
--- import android.content.Context
--- import android.util.Log
--- import android.widget.Toast
---+import androidx.activity.compose.BackHandler
--- import androidx.camera.core.*
--- import androidx.camera.lifecycle.ProcessCameraProvider
--- import androidx.camera.view.PreviewView
---@@ -33,6 +34,9 @@ import com.google.accompanist.permissions.rememberPermissionState
--- import com.google.mlkit.vision.barcode.BarcodeScanning
--- import com.google.mlkit.vision.common.InputImage
--- import java.util.concurrent.Executors
---+import androidx.navigation.NavController
---+import app.forku.presentation.common.components.BaseScreen
---+import app.forku.presentation.navigation.Screen
--- 
--- @OptIn(ExperimentalPermissionsApi::class, ExperimentalMaterial3Api::class)
--- @Composable
---@@ -41,7 +45,8 @@ fun QRScannerScreen(
---     onNavigateToVehicleProfile: (String) -> Unit,
---     onNavigateBack: () -> Unit,
---     viewModel: QRScannerViewModel = hiltViewModel(),
----    networkManager: NetworkConnectivityManager
---+    networkManager: NetworkConnectivityManager,
---+    navController: NavController
--- ) {
---     val state by viewModel.state.collectAsStateWithLifecycle()
---     val context = LocalContext.current
---@@ -49,14 +54,22 @@ fun QRScannerScreen(
---     val cameraProviderFuture = remember { ProcessCameraProvider.getInstance(context) }
---     val executor = remember { Executors.newSingleThreadExecutor() }
---     
---+    // Control flags for scanning and navigation
---+    var isScanning by remember { mutableStateOf(true) }
---+    var hasNavigated by remember { mutableStateOf(false) }
---+    var lastScannedCode by remember { mutableStateOf<String?>(null) }
---+    var isProcessingNavigation by remember { mutableStateOf(false) }
---+    
---+    Log.d("QRFlow", "Screen State - isScanning: $isScanning, hasNavigated: $hasNavigated, isProcessingNavigation: $isProcessingNavigation")
---+    
---     DisposableEffect(lifecycleOwner) {
---         onDispose {
---             try {
----                // Unbind all use cases and release camera resources
---+                Log.d("QRFlow", "Disposing camera resources")
---                 cameraProviderFuture.get()?.unbindAll()
---                 executor.shutdown()
---             } catch (e: Exception) {
----                Log.e("QRScanner", "Failed to cleanup camera resources", e)
---+                Log.e("QRFlow", "Failed to cleanup camera resources", e)
---             }
---         }
---     }
---@@ -67,17 +80,49 @@ fun QRScannerScreen(
--- 
---     val previewView = remember { PreviewView(context) }
--- 
----    // Handle navigation events
---+    // Handle navigation events with protection against multiple navigations
---     LaunchedEffect(state) {
----        state.vehicle?.id?.let { vehicleId ->
----            if (state.navigateToChecklist) {
----                onNavigateToPreShiftCheck(vehicleId)
----            } else if (state.navigateToProfile) {
----                onNavigateToVehicleProfile(vehicleId)
---+        Log.d("QRFlow", "Navigation LaunchedEffect triggered - hasNavigated: $hasNavigated, isProcessingNavigation: $isProcessingNavigation")
---+        Log.d("QRFlow", "Current state: navigateToChecklist: ${state.navigateToChecklist}, vehicle: ${state.vehicle?.id}")
---+        
---+        if (!hasNavigated && !isProcessingNavigation) {
---+            state.vehicle?.id?.let { vehicleId ->
---+                if (state.navigateToChecklist) {
---+                    Log.d("QRFlow", "Starting navigation to Checklist with vehicleId: $vehicleId")
---+                    isProcessingNavigation = true
---+                    hasNavigated = true
---+                    navController.navigate("checklist/${vehicleId}") {
---+                        popUpTo("scanner") { inclusive = true }
---+                    }
---+                    Log.d("QRFlow", "Navigation command executed - hasNavigated: $hasNavigated")
---+                    // Reset the state after navigation
---+                    viewModel.resetNavigationState()
---+                }
---             }
---         }
---     }
--- 
---+    // Reset scanning state when returning to this screen
---+    LaunchedEffect(Unit) {
---+        Log.d("QRFlow", "QRScanner screen entered/re-entered")
---+        isScanning = true
---+        hasNavigated = false
---+        isProcessingNavigation = false
---+        lastScannedCode = null
---+        viewModel.resetNavigationState()
---+    }
---+
---+    // Reset scanning state when state.error is not null
---+    LaunchedEffect(state.error) {
---+        if (state.error != null) {
---+            Log.d("QRFlow", "Error detected, resetting states - Error: ${state.error}")
---+            isScanning = true
---+            hasNavigated = false
---+            isProcessingNavigation = false
---+            lastScannedCode = null
---+        }
---+    }
---+
---     // Request camera permission
---     LaunchedEffect(Unit) {
---         if (!cameraPermissionState.status.isGranted) {
---@@ -85,161 +130,127 @@ fun QRScannerScreen(
---         }
---     }
--- 
----    LaunchedEffect(cameraProviderFuture) {
----        val cameraProvider = cameraProviderFuture.get()
----        val preview = Preview.Builder().build()
----        preview.setSurfaceProvider(previewView.surfaceProvider)
----
----        val imageAnalysis = ImageAnalysis.Builder()
----            .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
----            .build()
----
----        imageAnalysis.setAnalyzer(executor) { imageProxy ->
----            val mediaImage = imageProxy.image
----            if (mediaImage != null) {
----                val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
----                val scanner = BarcodeScanning.getClient()
----                
----                scanner.process(image)
----                    .addOnSuccessListener { barcodes ->
----                        barcodes.firstOrNull()?.rawValue?.let { code ->
----                            viewModel.onQrScanned(code)
----                        }
----                    }
----                    .addOnCompleteListener {
----                        imageProxy.close()
----                    }
----            } else {
----                imageProxy.close()
----            }
----        }
---+    BaseScreen(
---+        navController = navController,
---+        showTopBar = true,
---+        showBottomBar = false,
---+        showBackButton = true,
---+        topBarTitle = "Scan Vehicle QR",
---+        networkManager = networkManager,
---+        content = { padding ->
---+            Box(
---+                modifier = Modifier
---+                    .fillMaxSize()
---+                    .padding(padding)
---+            ) {
---+                if (cameraPermissionState.status.isGranted) {
---+                    AndroidView(
---+                        factory = { previewView },
---+                        modifier = Modifier.fillMaxSize()
---+                    ) { preview ->
---+                        cameraProviderFuture.addListener({
---+                            Log.d("QRFlow", "Setting up camera preview")
---+                            val cameraProvider = cameraProviderFuture.get()
---+                            val preview = Preview.Builder().build()
---+                            preview.setSurfaceProvider(previewView.surfaceProvider)
--- 
----        try {
----            cameraProvider.unbindAll()
----            cameraProvider.bindToLifecycle(
----                lifecycleOwner,
----                CameraSelector.DEFAULT_BACK_CAMERA,
----                preview,
----                imageAnalysis
----            )
----        } catch (e: Exception) {
----            e.printStackTrace()
----        }
----    }
---+                            val imageAnalysis = ImageAnalysis.Builder()
---+                                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
---+                                .build()
--- 
----    Scaffold(
----        topBar = {
----            TopAppBar(
----                title = { Text("Scan Vehicle QR") },
----                navigationIcon = {
----                    IconButton(onClick = onNavigateBack) {
----                        Icon(Icons.Default.ArrowBack, "Back")
----                    }
----                }
----            )
----        }
----    ) { padding ->
----        Box(
----            modifier = Modifier
----                .fillMaxSize()
----                .padding(padding)
----        ) {
----            if (cameraPermissionState.status.isGranted) {
----                AndroidView(
----                    factory = { previewView },
----                    modifier = Modifier.fillMaxSize()
----                ) { preview ->
----                    setupQrCodeScanning(
----                        context = context,
----                        lifecycleOwner = lifecycleOwner,
----                        previewView = preview,
----                        onQrCodeScanned = { code ->
----                            viewModel.onQrScanned(code)
----                        }
----                    )
----                }
---+                            imageAnalysis.setAnalyzer(executor) { imageProxy ->
---+                                if (!isScanning || hasNavigated) {
---+                                    Log.d("QRFlow", "Skipping image analysis - isScanning: $isScanning, hasNavigated: $hasNavigated")
---+                                    imageProxy.close()
---+                                    return@setAnalyzer
---+                                }
--- 
----                // QR frame overlay
----                Box(
----                    modifier = Modifier
----                        .fillMaxSize(),
----                    contentAlignment = Alignment.Center
----                ) {
----                    QRCodeFrame()
----                }
----            } else {
----                Column(
----                    modifier = Modifier
----                        .fillMaxSize()
----                        .padding(16.dp),
----                    horizontalAlignment = Alignment.CenterHorizontally,
----                    verticalArrangement = Arrangement.Center
----                ) {
----                    Text("Camera permission is required to scan QR codes")
----                    Spacer(modifier = Modifier.height(16.dp))
----                    Button(onClick = { cameraPermissionState.launchPermissionRequest() }) {
----                        Text("Grant Permission")
----                    }
----                }
----            }
---+                                val mediaImage = imageProxy.image
---+                                if (mediaImage != null) {
---+                                    val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
---+                                    val scanner = BarcodeScanning.getClient()
---+                                    
---+                                    scanner.process(image)
---+                                        .addOnSuccessListener { barcodes ->
---+                                            barcodes.firstOrNull()?.rawValue?.let { code ->
---+                                                Log.d("QRFlow", "QR Code detected: $code")
---+                                                // Only process if this code hasn't been scanned before and we're not navigating
---+                                                if (lastScannedCode != code && isScanning && !hasNavigated && !isProcessingNavigation) {
---+                                                    Log.d("QRFlow", "Processing new QR code - lastScannedCode: $lastScannedCode")
---+                                                    lastScannedCode = code
---+                                                    isScanning = false
---+                                                    viewModel.onQrScanned(code)
---+                                                    Log.d("QRFlow", "QR code processed - isScanning: $isScanning, hasNavigated: $hasNavigated")
---+                                                } else {
---+                                                    Log.d("QRFlow", "Skipping QR code - already processed or navigation in progress")
---+                                                }
---+                                            }
---+                                        }
---+                                        .addOnCompleteListener {
---+                                            imageProxy.close()
---+                                        }
---+                                } else {
---+                                    imageProxy.close()
---+                                }
---+                            }
--- 
----            if (state.error != null) {
----                Toast.makeText(context, state.error, Toast.LENGTH_SHORT).show()
----            }
----        }
----    }
----}
---+                            try {
---+                                Log.d("QRFlow", "Binding camera lifecycle")
---+                                cameraProvider.unbindAll()
---+                                cameraProvider.bindToLifecycle(
---+                                    lifecycleOwner,
---+                                    CameraSelector.DEFAULT_BACK_CAMERA,
---+                                    preview,
---+                                    imageAnalysis
---+                                )
---+                            } catch (e: Exception) {
---+                                Log.e("QRFlow", "Error binding camera lifecycle", e)
---+                                e.printStackTrace()
---+                            }
---+                        }, ContextCompat.getMainExecutor(context))
---+                    }
--- 
----private fun setupQrCodeScanning(
----    context: Context,
----    lifecycleOwner: LifecycleOwner,
----    previewView: PreviewView,
----    onQrCodeScanned: (String) -> Unit
----) {
----    val cameraProviderFuture = ProcessCameraProvider.getInstance(context)
----    val executor = Executors.newSingleThreadExecutor()
----    
----    cameraProviderFuture.addListener({
----        val cameraProvider = cameraProviderFuture.get()
----        val preview = Preview.Builder().build()
----        preview.setSurfaceProvider(previewView.surfaceProvider)
----
----        val imageAnalysis = ImageAnalysis.Builder()
----            .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
----            .build()
----
----        imageAnalysis.setAnalyzer(executor) { imageProxy ->
----            val mediaImage = imageProxy.image
----            if (mediaImage != null) {
----                val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
----                val scanner = BarcodeScanning.getClient()
----                
----                scanner.process(image)
----                    .addOnSuccessListener { barcodes ->
----                        barcodes.firstOrNull()?.rawValue?.let { code ->
----                            onQrCodeScanned(code)
----                        }
---+                    Box(
---+                        modifier = Modifier
---+                            .fillMaxSize(),
---+                        contentAlignment = Alignment.Center
---+                    ) {
---+                        QRCodeFrame()
---                     }
----                    .addOnCompleteListener {
----                        imageProxy.close()
---+                } else {
---+                    Log.d("QRFlow", "Camera permission not granted")
---+                    Column(
---+                        modifier = Modifier
---+                            .fillMaxSize()
---+                            .padding(16.dp),
---+                        horizontalAlignment = Alignment.CenterHorizontally,
---+                        verticalArrangement = Arrangement.Center
---+                    ) {
---+                        Text("Camera permission is required to scan QR codes")
---+                        Spacer(modifier = Modifier.height(16.dp))
---+                        Button(onClick = { cameraPermissionState.launchPermissionRequest() }) {
---+                            Text("Grant Permission")
---+                        }
---                     }
----            } else {
----                imageProxy.close()
---+                }
---+
---+                if (state.error != null) {
---+                    Log.d("QRFlow", "Showing error toast: ${state.error}")
---+                    Toast.makeText(context, state.error, Toast.LENGTH_SHORT).show()
---+                }
---             }
---         }
---+    )
--- 
----        try {
----            cameraProvider.unbindAll()
----            cameraProvider.bindToLifecycle(
----                lifecycleOwner,
----                CameraSelector.DEFAULT_BACK_CAMERA,
----                preview,
----                imageAnalysis
----            )
----        } catch (e: Exception) {
----            e.printStackTrace()
---+    BackHandler {
---+        Log.d("QRFlow", "Back button pressed - isProcessingNavigation: $isProcessingNavigation")
---+        if (!isProcessingNavigation) {
---+            Log.d("QRFlow", "Executing back navigation")
---+            onNavigateBack()
---+        } else {
---+            Log.d("QRFlow", "Back navigation ignored - navigation in progress")
---         }
----    }, ContextCompat.getMainExecutor(context))
---+    }
--- }
--- 
--- @Composable
---diff --git a/app/src/main/java/app/forku/presentation/scanner/QRScannerViewModel.kt b/app/src/main/java/app/forku/presentation/scanner/QRScannerViewModel.kt
---index 38d2efb..d7b363e 100644
------ a/app/src/main/java/app/forku/presentation/scanner/QRScannerViewModel.kt
---+++ b/app/src/main/java/app/forku/presentation/scanner/QRScannerViewModel.kt
---@@ -7,6 +7,7 @@ import app.forku.domain.repository.vehicle.VehicleRepository
--- import app.forku.domain.repository.checklist.ChecklistRepository
--- import app.forku.domain.repository.session.VehicleSessionRepository
--- import dagger.hilt.android.lifecycle.HiltViewModel
---+import kotlinx.coroutines.delay
--- import kotlinx.coroutines.flow.MutableStateFlow
--- import kotlinx.coroutines.flow.asStateFlow
--- import kotlinx.coroutines.flow.update
---@@ -24,6 +25,9 @@ class QRScannerViewModel @Inject constructor(
---     val state = _state.asStateFlow()
--- 
---     private var cameraProvider: ProcessCameraProvider? = null
---+    private var isProcessingQR = false
---+    private var lastScannedCode: String? = null
---+    private val scanCooldown = 2000L // 2 seconds cooldown between scans
---     
---     override fun onCleared() {
---         super.onCleared()
---@@ -32,8 +36,15 @@ class QRScannerViewModel @Inject constructor(
---     }
--- 
---     fun onQrScanned(code: String) {
---+        // If we're already processing a QR or this is the same code within cooldown, ignore
---+        if (isProcessingQR || code == lastScannedCode) {
---+            return
---+        }
---+
---         viewModelScope.launch {
---             try {
---+                isProcessingQR = true
---+                lastScannedCode = code
---                 _state.update { it.copy(isLoading = true) }
---                 
---                 // Get vehicle without availability check first
---@@ -54,6 +65,11 @@ class QRScannerViewModel @Inject constructor(
---                         navigateToProfile = !shouldNavigateToChecklist // Only navigate to profile if not going to checklist
---                     )
---                 }
---+
---+                // Reset the scanning lock after cooldown
---+                delay(scanCooldown)
---+                isProcessingQR = false
---+                lastScannedCode = null
---             } catch (e: Exception) {
---                 _state.update { 
---                     it.copy(
---@@ -61,7 +77,24 @@ class QRScannerViewModel @Inject constructor(
---                         isLoading = false
---                     )
---                 }
---+                isProcessingQR = false
---+                lastScannedCode = null
---             }
---         }
---     }
---+
---+    fun resetNavigationState() {
---+        _state.update { 
---+            it.copy(
---+                vehicle = null,
---+                navigateToChecklist = false,
---+                navigateToProfile = false,
---+                canStartCheck = false,
---+                isLoading = false,
---+                error = null
---+            )
---+        }
---+        isProcessingQR = false
---+        lastScannedCode = null
---+    }
--- }
---diff --git a/current_diff_forku.txt b/current_diff_forku.txt
---index 8eb7ec3..76917d1 100644
------ a/current_diff_forku.txt
---+++ b/current_diff_forku.txt
---@@ -1,4109 +0,0 @@
----diff --git a/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt
----index da4487b..ade55de 100644
------- a/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt
----+++ b/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt
----@@ -186,14 +186,14 @@ class ChecklistRepositoryImpl @Inject constructor(
----     override suspend fun createGlobalCheck(check: PreShiftCheck): PreShiftCheck {
----         val dto = check.toDto()
----         val response = api.createGlobalCheck(dto)
-----        if (!response.isSuccessful) throw Exception("Failed to save global check")
----+        if (!response.isSuccessful) throw Exception("Failed to save global checklist")
----         return response.body()?.toDomain() ?: throw Exception("Failed to save global check: Empty response")
----     }
---- 
----     override suspend fun updateGlobalCheck(checkId: String, check: PreShiftCheck): PreShiftCheck {
----         val dto = check.toDto()
----         val response = api.updateGlobalCheck(checkId, dto)
-----        if (!response.isSuccessful) throw Exception("Failed to update global check")
----+        if (!response.isSuccessful) throw Exception("Failed to update global checklist")
----         return response.body()?.toDomain() ?: throw Exception("Failed to update global check: Empty response")
----     }
---- 
----diff --git a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
----index d126b87..ed2879e 100644
------- a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
----@@ -130,7 +130,7 @@ fun ChecklistScreen(
----         showTopBar = true,
----         showBottomBar = false,
----         viewModel = viewModel,
-----        topBarTitle = "Pre-Shift Check",
----+        topBarTitle = "Pre-Shift Checklist",
----         networkManager = networkManager,
----         onRefresh = { viewModel.loadChecklistData() },
----         content = { padding ->
----diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
----index bfc7034..d36fff1 100644
------- a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
----@@ -455,13 +455,13 @@ private fun DashboardNavigationButtons(
----                     imageVector = if (hasActiveSession) Icons.Default.Close else Icons.Default.QrCodeScanner,
----                     contentDescription = null,
----                     tint = MaterialTheme.colorScheme.primary.copy(alpha = iconAlpha.coerceIn(0f, 1f)),
-----                    modifier = Modifier.size(28.dp)
----+                    modifier = Modifier.size(36.dp)
----                 )
----                 Spacer(modifier = Modifier.height(2.dp))
----                 Text(
----                     text = if (hasActiveSession) "Check Out" else "Check In",
----                     style = MaterialTheme.typography.labelSmall.copy(
-----                        fontSize = 10.sp
----+                        fontSize = 16.sp
----                     ),
----                     color = MaterialTheme.colorScheme.primary.copy(alpha = iconAlpha.coerceIn(0f, 1f))
----                 )
----diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
----index 4a01a84..fa4ed2d 100644
------- a/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
----+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
----@@ -161,11 +161,11 @@ class DashboardViewModel @Inject constructor(
----                 getVehicleUseCase(it.vehicleId)
----             }
----             
-----            android.util.Log.d("DashboardViewModel", "Getting last pre-shift check")
----+            android.util.Log.d("DashboardViewModel", "Getting last pre-shift checklist")
----             val lastPreShiftCheck = try {
----                 getLastPreShiftCheckCurrentUserUseCase()
----             } catch (e: Exception) {
-----                android.util.Log.e("DashboardViewModel", "Error getting last pre-shift check", e)
----+                android.util.Log.e("DashboardViewModel", "Error getting last pre-shift checklist", e)
----                 null
----             }
----             
----diff --git a/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt b/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
----index d2c3471..7e68bd3 100644
------- a/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
----+++ b/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
----@@ -183,7 +183,7 @@ private fun SessionContent(
----                             ) {
----                                 Row {
----                                     Text(
-----                                        text = "Last Check",
----+                                        text = "Checklist",
----                                         style = MaterialTheme.typography.bodySmall.copy(
----                                             fontSize = 11.sp
----                                         )
----diff --git a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
----index 75f4e82..441cc9d 100644
------- a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
----+++ b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
----@@ -216,7 +216,7 @@ class IncidentReportViewModel @Inject constructor(
----                 }
----                 hasLoadedChecks = true
----             } catch (e: Exception) {
-----                _state.update { it.copy(error = "Failed to load preshift check") }
----+                _state.update { it.copy(error = "Failed to load preshift checklist") }
----             }
----         }
----     }
----diff --git a/app/src/main/java/app/forku/presentation/incident/components/VehicleInfoSection.kt b/app/src/main/java/app/forku/presentation/incident/components/VehicleInfoSection.kt
----index 060ba24..1bdf118 100644
------- a/app/src/main/java/app/forku/presentation/incident/components/VehicleInfoSection.kt
----+++ b/app/src/main/java/app/forku/presentation/incident/components/VehicleInfoSection.kt
----@@ -93,7 +93,7 @@ fun VehicleInfoSection(
----         CustomOutlinedTextField(
----             value = state.lastPreshiftCheck?.let { getRelativeTimeSpanFromDateTime(it) } ?: "No preshift check recorded",
----             onValueChange = { /* Read-only */ },
-----            label = "Last Check",
----+            label = "Checklist",
----             enabled = false,
----             modifier = Modifier
----                 .fillMaxWidth()
----diff --git a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleItem.kt b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleItem.kt
----index 919fa27..2026e1b 100644
------- a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleItem.kt
----+++ b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleItem.kt
----@@ -208,7 +208,7 @@ fun VehicleItem(
----                         modifier = Modifier.padding(top = 1.dp)
----                     ) {
----                         Text(
-----                            text = "Last Check: ",
----+                            text = "Checklist: ",
----                             style = TextStyle(
----                                 fontSize = textConfigs.preshiftCheck.fontSize.sp,
----                                 lineHeight = textConfigs.preshiftCheck.lineHeight.sp,
----diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
----index f152051..cfe53d3 100644
------- a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
----+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
----@@ -184,7 +184,7 @@ fun VehicleProfileScreen(
---- 
----                                 // Options available to all users
----                                 add(DropdownMenuOption(
-----                                    text = if (state.hasActivePreShiftCheck) "Continue Pre-Shift Check" else "Start Pre-Shift Check",
----+                                    text = if (state.hasActivePreShiftCheck) "Continue Checklist" else "Start Checklist",
----                                     onClick = { onPreShiftCheck(vehicle?.id ?: "") },
----                                     leadingIcon = Icons.Default.CheckCircle,
----                                     enabled = vehicle?.status == VehicleStatus.AVAILABLE && !state.hasActiveSession
----diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
----index 7b88430..c26e91d 100644
------- a/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
----+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
----@@ -277,7 +277,7 @@ fun VehicleDetailsSection(
----                 Row {
----                     Column {
----                         Text(
-----                            text = "Last Check ",
----+                            text = "Checklist ",
----                             color = Color.Gray,
----                             fontSize = 12.sp
----                         )
----diff --git a/current_diff_forku.txt b/current_diff_forku.txt
----index 15174cb..8167669 100644
------- a/current_diff_forku.txt
----+++ b/current_diff_forku.txt
----@@ -1,3954 +0,0 @@
-----diff --git a/.cursorrules b/.cursorrules
-----index f6b91ae..1b078fe 100644
-------- a/.cursorrules
-----+++ b/.cursorrules
-----@@ -9,8 +9,8 @@ Could you provide a structured summary of our work session today? Please include
-----    - Initial complexity assessment (Low/Medium/High)
----- 
----- 3. Time & Value Analysis:
------   - Time spent with AI assistance and multiply by 8: [X] minutes/hours
------   - Estimated traditional development and multiply by 8: [X] minutes/hours
-----+   - Time spent with AI assistance: [X] minutes/hours
-----+   - Estimated traditional development: [X] minutes/hours
-----    - Key factors in time savings:
-----      • [Specific ways AI accelerated the work]
-----      • [Tools or approaches that were particularly effective]
-----diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
-----index 4178654..96e11f5 100644
-------- a/.idea/deploymentTargetSelector.xml
-----+++ b/.idea/deploymentTargetSelector.xml
-----@@ -4,7 +4,7 @@
-----     <selectionStates>
-----       <SelectionState runConfigName="app">
-----         <option name="selectionMode" value="DROPDOWN" />
------        <DropdownSelection timestamp="2025-03-09T03:11:00.924348Z">
-----+        <DropdownSelection timestamp="2025-03-12T20:10:44.969999Z">
-----           <Target type="DEFAULT_BOOT">
-----             <handle>
-----               <DeviceId pluginId="PhysicalDevice" identifier="serial=R58T127FYWT" />
-----diff --git a/app/build.gradle.kts b/app/build.gradle.kts
-----index 99013c4..c3a3079 100644
-------- a/app/build.gradle.kts
-----+++ b/app/build.gradle.kts
-----@@ -8,6 +8,7 @@ plugins {
-----     alias(libs.plugins.hilt.android)
-----     alias(libs.plugins.kotlin.ksp)
-----     alias(libs.plugins.kotlin.serialization)
-----+    alias(libs.plugins.google.services)
-----     kotlin("kapt")
----- }
----- 
-----@@ -29,6 +30,10 @@ android {
-----             useSupportLibrary = true
-----         }
----- 
-----+        ndk {
-----+            abiFilters += listOf("arm64-v8a", "armeabi-v7a", "x86_64", "x86")
-----+        }
-----+
-----         ksp {
-----             arg("room.schemaLocation", "$projectDir/schemas")
-----         }
-----@@ -171,4 +176,8 @@ dependencies {
-----     implementation(libs.androidx.compose.material.icons.core)
-----     implementation(libs.androidx.compose.material.icons.extended)
----- 
-----+    // Firebase
-----+    implementation(platform(libs.firebase.bom))
-----+    implementation(libs.firebase.analytics)
-----+    implementation(libs.firebase.messaging)
----- }
-----\ No newline at end of file
-----diff --git a/app/google-services.json b/app/google-services.json
-----new file mode 100644
-----index 0000000..bd43030
-------- /dev/null
-----+++ b/app/google-services.json
-----@@ -0,0 +1,29 @@
-----+{
-----+  "project_info": {
-----+    "project_number": "238145798774",
-----+    "project_id": "forku-1800d",
-----+    "storage_bucket": "forku-1800d.firebasestorage.app"
-----+  },
-----+  "client": [
-----+    {
-----+      "client_info": {
-----+        "mobilesdk_app_id": "1:238145798774:android:f68955833a23698cbc1557",
-----+        "android_client_info": {
-----+          "package_name": "app.forku"
-----+        }
-----+      },
-----+      "oauth_client": [],
-----+      "api_key": [
-----+        {
-----+          "current_key": "AIzaSyDENsT7S-iAo5fm2o64F3S5YTi5LXwaXQ4"
-----+        }
-----+      ],
-----+      "services": {
-----+        "appinvite_service": {
-----+          "other_platform_oauth_client": []
-----+        }
-----+      }
-----+    }
-----+  ],
-----+  "configuration_version": "1"
-----+}
-----\ No newline at end of file
-----diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
-----index 741ebff..7503870 100644
-------- a/app/src/main/AndroidManifest.xml
-----+++ b/app/src/main/AndroidManifest.xml
-----@@ -18,6 +18,7 @@
----- 
-----     <application
-----         android:name=".ForkUApplication"
-----+        android:enableOnBackInvokedCallback="true"
-----         android:allowBackup="true"
-----         android:dataExtractionRules="@xml/data_extraction_rules"
-----         android:fullBackupContent="@xml/backup_rules"
-----@@ -51,6 +52,14 @@
-----                 android:resource="@xml/file_paths" />
-----         </provider>
----- 
-----+        <service
-----+            android:name=".core.notification.ForkUMessagingService"
-----+            android:exported="false">
-----+            <intent-filter>
-----+                <action android:name="com.google.firebase.MESSAGING_EVENT" />
-----+            </intent-filter>
-----+        </service>
-----+
-----     </application>
----- 
----- </manifest>
-----\ No newline at end of file
-----diff --git a/app/src/main/java/app/forku/ForkUApplication.kt b/app/src/main/java/app/forku/ForkUApplication.kt
-----index 6bfa0ce..1f1d635 100644
-------- a/app/src/main/java/app/forku/ForkUApplication.kt
-----+++ b/app/src/main/java/app/forku/ForkUApplication.kt
-----@@ -7,6 +7,7 @@ import kotlinx.coroutines.CoroutineScope
----- import kotlinx.coroutines.Dispatchers
----- import kotlinx.coroutines.launch
----- import javax.inject.Inject
-----+import com.google.firebase.FirebaseApp
----- 
----- @HiltAndroidApp
----- class ForkUApplication : Application() {
-----@@ -15,6 +16,13 @@ class ForkUApplication : Application() {
----- 
-----     override fun onCreate() {
-----         super.onCreate()
-----+        
-----+        // Initialize Firebase first
-----+        if (FirebaseApp.getApps(this).isEmpty()) {
-----+            FirebaseApp.initializeApp(this)
-----+        }
-----+        
-----+        // Then initialize other components
-----         initializeAuth()
-----     }
----- 
-----diff --git a/app/src/main/java/app/forku/MainActivity.kt b/app/src/main/java/app/forku/MainActivity.kt
-----index a36874f..11eff28 100644
-------- a/app/src/main/java/app/forku/MainActivity.kt
-----+++ b/app/src/main/java/app/forku/MainActivity.kt
-----@@ -5,9 +5,13 @@ import android.widget.Toast
----- import androidx.activity.ComponentActivity
----- import androidx.activity.compose.setContent
----- import androidx.activity.viewModels
-----+import androidx.compose.foundation.layout.fillMaxSize
-----+import androidx.compose.material3.MaterialTheme
-----+import androidx.compose.material3.Surface
----- import androidx.compose.runtime.collectAsState
----- import androidx.compose.runtime.getValue
------import app.forku.data.local.TokenManager
-----+import androidx.compose.ui.Modifier
-----+import app.forku.data.datastore.AuthDataStore
----- import app.forku.data.local.TourPreferences
----- import app.forku.presentation.user.login.LoginState
----- import app.forku.presentation.user.login.LoginViewModel
-----@@ -21,15 +25,21 @@ import javax.inject.Inject
----- import android.view.View
----- import androidx.compose.ui.graphics.toArgb
----- import app.forku.presentation.common.theme.BackgroundGray
-----+import androidx.lifecycle.lifecycleScope
-----+import app.forku.core.network.NetworkConnectivityManager
-----+import kotlinx.coroutines.launch
----- 
----- @AndroidEntryPoint
----- class MainActivity : ComponentActivity() {
-----     @Inject
------    lateinit var tokenManager: TokenManager
-----+    lateinit var authDataStore: AuthDataStore
----- 
-----     @Inject
-----     lateinit var tourPreferences: TourPreferences
----- 
-----+    @Inject
-----+    lateinit var networkManager: NetworkConnectivityManager
-----+
-----     private val loginViewModel: LoginViewModel by viewModels()
----- 
-----     override fun onCreate(savedInstanceState: Bundle?) {
-----@@ -39,9 +49,15 @@ class MainActivity : ComponentActivity() {
-----                 View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR
----- 
-----         super.onCreate(savedInstanceState)
-----+        
-----+        // Inicializar el token al inicio
-----+        lifecycleScope.launch {
-----+            authDataStore.initializeToken()
-----+        }
-----+
-----         setContent {
-----             val loginState by loginViewModel.state.collectAsState()
------            val hasToken = tokenManager.getToken() != null
-----+            val hasToken = authDataStore.getToken() != null
-----             val tourCompleted = tourPreferences.hasTourCompleted()
----- 
-----             ForkUTheme {
-----@@ -61,7 +77,8 @@ class MainActivity : ComponentActivity() {
-----                                 !tourCompleted -> Screen.Tour.route
-----                                 loginState is LoginState.Success || hasToken -> Screen.Dashboard.route
-----                                 else -> Screen.Login.route
------                            }
-----+                            },
-----+                            networkManager = networkManager
-----                         )
-----                     }
-----                 }
-----diff --git a/app/src/main/java/app/forku/core/Constants.kt b/app/src/main/java/app/forku/core/Constants.kt
-----index 3b5bd8e..49b7af7 100644
-------- a/app/src/main/java/app/forku/core/Constants.kt
-----+++ b/app/src/main/java/app/forku/core/Constants.kt
-----@@ -1,8 +1,8 @@
----- package app.forku.core
----- 
----- object Constants {
------    const val BASE_URL = "https://67ce79d2125cd5af757aa258.mockapi.io/forku/api/v2/" //Dev
------    //const val BASE_URL = "https://67b8faf351192bd378dc5bdf.mockapi.io/forku/api/v1/" //Test
-----+    //const val BASE_URL = "https://67ce79d2125cd5af757aa258.mockapi.io/forku/api/v2/" //Test
-----+    const val BASE_URL = "https://67d20f4190e0670699bc531f.mockapi.io/forku/api/dev/" //Dev
-----     const val API_VERSION = "v1"
----- 
----- }
-----\ No newline at end of file
-----diff --git a/app/src/main/java/app/forku/core/location/LocationManager.kt b/app/src/main/java/app/forku/core/location/LocationManager.kt
-----index 86fffd9..a63c9b8 100644
-------- a/app/src/main/java/app/forku/core/location/LocationManager.kt
-----+++ b/app/src/main/java/app/forku/core/location/LocationManager.kt
-----@@ -143,4 +143,39 @@ class LocationManager @Inject constructor(
-----     fun clearError() {
-----         _locationState.update { it.copy(error = null) }
-----     }
-----+
-----+    fun startLocationUpdates() {
-----+        coroutineScope.launch {
-----+            try {
-----+                val locationRequest = LocationRequest.Builder(10000)
-----+                    .setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY)
-----+                    .setMinUpdateIntervalMillis(5000)
-----+                    .build()
-----+
-----+                requestLocationSettings()
-----+            } catch (e: SecurityException) {
-----+                _locationState.update { it.copy(
-----+                    error = "Location permission error",
-----+                    hasLocationPermission = false
-----+                )}
-----+            }
-----+        }
-----+    }
-----+
-----+    fun requestSingleUpdate() {
-----+        try {
-----+            val locationRequest = LocationRequest.Builder(10000)
-----+                .setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY)
-----+                .setMinUpdateIntervalMillis(5000)
-----+                .setMaxUpdateDelayMillis(10000)
-----+                .build()
-----+
-----+            requestLocation(locationRequest)
-----+        } catch (e: SecurityException) {
-----+            _locationState.update { it.copy(
-----+                error = "Location permission error",
-----+                hasLocationPermission = false
-----+            )}
-----+        }
-----+    }
----- } 
-----\ No newline at end of file
-----diff --git a/app/src/main/java/app/forku/data/api/dto/incident/IncidentDto.kt b/app/src/main/java/app/forku/data/api/dto/incident/IncidentDto.kt
-----index 34b49bb..5f24239 100644
-------- a/app/src/main/java/app/forku/data/api/dto/incident/IncidentDto.kt
-----+++ b/app/src/main/java/app/forku/data/api/dto/incident/IncidentDto.kt
-----@@ -29,7 +29,6 @@ data class IncidentDto(
-----     val loadWeight: String?,
-----     
-----     // People involved
------    val operatorId: String?,
-----     val othersInvolved: List<String>,
-----     val injuries: String,
-----     val injuryLocations: List<String>,
-----diff --git a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
-----index 605dd8f..64b228a 100644
-------- a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
-----+++ b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
-----@@ -7,14 +7,14 @@ data class UserDto(
-----     val email: String,
-----     val password: String,
-----     val username: String,
------    val name: String,
-----+    val firstName: String,
-----+    val lastName: String,
-----     val photoUrl: String?,
-----     val role: String,
------    val permissions: List<String>,
-----     val certifications: List<CertificationDto>,
------    val last_medical_check: String?,
------    val last_login: String?,
------    val is_active: Boolean = true
-----+    val lastMedicalCheck: String?,
-----+    val lastLogin: String?,
-----+    val isActive: Boolean = true
----- )
----- 
----- data class CertificationDto(
-----diff --git a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
-----index 76fccaf..ab7d1a1 100644
-------- a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
-----+++ b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
-----@@ -27,10 +27,10 @@ class AuthDataStore @Inject constructor(
-----         val REFRESH_TOKEN = stringPreferencesKey("refresh_token")
-----         val EMAIL = stringPreferencesKey("email")
-----         val USERNAME = stringPreferencesKey("username")
------        val NAME = stringPreferencesKey("name")
-----+        val FIRST_NAME = stringPreferencesKey("first_name")
-----+        val LAST_NAME = stringPreferencesKey("last_name")
-----         val PHOTO_URL = stringPreferencesKey("photo_url")
-----         val ROLE = stringPreferencesKey("role")
------        val PERMISSIONS = stringSetPreferencesKey("permissions")
-----         val USER_KEY = stringPreferencesKey("user")
-----         val TOKEN_KEY = stringPreferencesKey("token")
-----     }
-----@@ -38,9 +38,13 @@ class AuthDataStore @Inject constructor(
-----     @Volatile
-----     private var cachedToken: String? = null
----- 
------    fun getToken(): String? = cachedToken
-----+    fun getToken(): String? {
-----+        android.util.Log.d("AuthDataStore", "Getting cached token: $cachedToken")
-----+        return cachedToken
-----+    }
----- 
-----     suspend fun setToken(token: String?) {
-----+        android.util.Log.d("AuthDataStore", "Setting token: ${token?.take(10)}...")
-----         cachedToken = token
-----         context.dataStore.edit { preferences ->
-----             if (token != null) {
-----@@ -52,33 +56,84 @@ class AuthDataStore @Inject constructor(
-----     }
----- 
-----     suspend fun setCurrentUser(user: User) {
-----+        android.util.Log.d("AuthDataStore", """
-----+            Setting current user:
-----+            - ID: ${user.id}
-----+            - Name: ${user.fullName}
-----+            - Token: ${user.token.take(10)}...
-----+            - Role: ${user.role}
-----+        """.trimIndent())
-----+        
-----         context.dataStore.edit { preferences ->
-----             preferences[PreferencesKeys.USER_ID] = user.id
-----             preferences[PreferencesKeys.TOKEN] = user.token
-----             preferences[PreferencesKeys.REFRESH_TOKEN] = user.refreshToken
-----             preferences[PreferencesKeys.EMAIL] = user.email
-----             preferences[PreferencesKeys.USERNAME] = user.username
------            preferences[PreferencesKeys.NAME] = user.name
-----+            preferences[PreferencesKeys.FIRST_NAME] = user.firstName
-----+            preferences[PreferencesKeys.LAST_NAME] = user.lastName
-----             preferences[PreferencesKeys.PHOTO_URL] = user.photoUrl ?: ""
-----             preferences[PreferencesKeys.ROLE] = user.role.name
------            preferences[PreferencesKeys.PERMISSIONS] = user.permissions.toSet()
-----             preferences[PreferencesKeys.TOKEN_KEY] = user.token
-----         }
-----         cachedToken = user.token
-----+        android.util.Log.d("AuthDataStore", "User data stored successfully")
-----     }
----- 
-----     suspend fun getCurrentUser(): User? {
-----         return try {
-----             val preferences = context.dataStore.data.first()
------            val userId = preferences[PreferencesKeys.USER_ID] ?: return null
------            val token = preferences[PreferencesKeys.TOKEN] ?: return null
------            val refreshToken = preferences[PreferencesKeys.REFRESH_TOKEN] ?: return null
------            val email = preferences[PreferencesKeys.EMAIL] ?: return null
------            val username = preferences[PreferencesKeys.USERNAME] ?: return null
------            val name = preferences[PreferencesKeys.NAME] ?: return null
-----+            
-----+            // Log all stored preferences for debugging
-----+            android.util.Log.d("AuthDataStore", """
-----+                Stored preferences:
-----+                - USER_ID: ${preferences[PreferencesKeys.USER_ID]}
-----+                - TOKEN: ${preferences[PreferencesKeys.TOKEN]?.take(10)}...
-----+                - TOKEN_KEY: ${preferences[PreferencesKeys.TOKEN_KEY]?.take(10)}...
-----+                - EMAIL: ${preferences[PreferencesKeys.EMAIL]}
-----+                - USERNAME: ${preferences[PreferencesKeys.USERNAME]}
-----+                - FIRST_NAME: ${preferences[PreferencesKeys.FIRST_NAME]}
-----+                - LAST_NAME: ${preferences[PreferencesKeys.LAST_NAME]}
-----+                - ROLE: ${preferences[PreferencesKeys.ROLE]}
-----+            """.trimIndent())
-----+            
-----+            val userId = preferences[PreferencesKeys.USER_ID]
-----+            android.util.Log.d("AuthDataStore", "Getting current user - Found ID: $userId")
-----+            
-----+            if (userId == null) {
-----+                android.util.Log.e("AuthDataStore", "No user ID found in preferences")
-----+                return null
-----+            }
-----+            
-----+            val token = preferences[PreferencesKeys.TOKEN] ?: run {
-----+                android.util.Log.e("AuthDataStore", "No token found for user $userId")
-----+                return null
-----+            }
-----+            val refreshToken = preferences[PreferencesKeys.REFRESH_TOKEN] ?: run {
-----+                android.util.Log.e("AuthDataStore", "No refresh token found for user $userId")
-----+                return null
-----+            }
-----+            val email = preferences[PreferencesKeys.EMAIL] ?: run {
-----+                android.util.Log.e("AuthDataStore", "No email found for user $userId")
-----+                return null
-----+            }
-----+            val username = preferences[PreferencesKeys.USERNAME] ?: run {
-----+                android.util.Log.e("AuthDataStore", "No username found for user $userId")
-----+                return null
-----+            }
-----+            val firstName = preferences[PreferencesKeys.FIRST_NAME] ?: run {
-----+                android.util.Log.e("AuthDataStore", "No first name found for user $userId")
-----+                return null
-----+            }
-----+            val lastName = preferences[PreferencesKeys.LAST_NAME] ?: run {
-----+                android.util.Log.e("AuthDataStore", "No last name found for user $userId")
-----+                return null
-----+            }
-----             val photoUrl = preferences[PreferencesKeys.PHOTO_URL]
------            val role = preferences[PreferencesKeys.ROLE]?.let { UserRole.fromString(it) } ?: return null
------            val permissions = preferences[PreferencesKeys.PERMISSIONS]?.toList() ?: emptyList()
-----+            val role = preferences[PreferencesKeys.ROLE]?.let { UserRole.fromString(it) } ?: run {
-----+                android.util.Log.e("AuthDataStore", "No role found for user $userId")
-----+                return null
-----+            }
----- 
-----             User(
-----                 id = userId,
-----@@ -86,26 +141,38 @@ class AuthDataStore @Inject constructor(
-----                 refreshToken = refreshToken,
-----                 email = email,
-----                 username = username,
------                name = name,
-----+                firstName = "$firstName",
-----+                lastName = "$lastName",
-----                 photoUrl = photoUrl?.takeIf { it.isNotEmpty() },
-----                 role = role,
------                permissions = permissions,
-----                 certifications = emptyList()
------            )
-----+            ).also {
-----+                android.util.Log.d("AuthDataStore", """
-----+                    User retrieved successfully:
-----+                    - ID: ${it.id}
-----+                    - Name: ${it.fullName}
-----+                    - Token: ${it.token.take(10)}...
-----+                    - Role: ${it.role}
-----+                """.trimIndent())
-----+            }
-----         } catch (e: Exception) {
-----+            android.util.Log.e("AuthDataStore", "Error getting current user", e)
-----             null
-----         }
-----     }
----- 
-----     suspend fun clearAuth() {
-----+        android.util.Log.d("AuthDataStore", "Clearing all auth data")
-----         context.dataStore.edit { preferences ->
-----             preferences.clear()
-----         }
-----+        cachedToken = null
-----     }
----- 
-----     suspend fun initializeToken() {
-----         cachedToken = context.dataStore.data.map { preferences ->
-----             preferences[PreferencesKeys.TOKEN_KEY]
-----         }.first()
-----+        android.util.Log.d("AuthDataStore", "Initialized token: ${cachedToken?.take(10)}...")
-----     }
----- } 
-----\ No newline at end of file
-----diff --git a/app/src/main/java/app/forku/data/local/TokenManager.kt b/app/src/main/java/app/forku/data/local/TokenManager.kt
-----deleted file mode 100644
-----index f1cab6d..0000000
-------- a/app/src/main/java/app/forku/data/local/TokenManager.kt
-----+++ /dev/null
-----@@ -1,41 +0,0 @@
------package app.forku.data.local
------
------import android.content.Context
------import android.content.SharedPreferences
------import dagger.hilt.android.qualifiers.ApplicationContext
------import javax.inject.Inject
------import javax.inject.Singleton
------
------@Singleton
------class TokenManager @Inject constructor(
------    @ApplicationContext context: Context
------) {
------    private val prefs: SharedPreferences = 
------        context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE)
------
------    fun saveToken(token: String, refreshToken: String) {
------        prefs.edit()
------            .putString(KEY_TOKEN, token)
------            .putString(KEY_REFRESH_TOKEN, refreshToken)
------            .apply()
------    }
------
------    fun getToken(): String? {
------        return prefs.getString(KEY_TOKEN, null)
------    }
------
------    fun getRefreshToken(): String? = prefs.getString(KEY_REFRESH_TOKEN, null)
------
------    fun clearToken() {
------        prefs.edit()
------            .remove(KEY_TOKEN)
------            .remove(KEY_REFRESH_TOKEN)
------            .apply()
------    }
------
------    companion object {
------        private const val PREF_NAME = "ForkUPrefs"
------        private const val KEY_TOKEN = "auth_token"
------        private const val KEY_REFRESH_TOKEN = "refresh_token"
------    }
------} 
-----\ No newline at end of file
-----diff --git a/app/src/main/java/app/forku/data/mapper/IncidentMapper.kt b/app/src/main/java/app/forku/data/mapper/IncidentMapper.kt
-----index 7d433e5..1bd4db1 100644
-------- a/app/src/main/java/app/forku/data/mapper/IncidentMapper.kt
-----+++ b/app/src/main/java/app/forku/data/mapper/IncidentMapper.kt
-----@@ -34,7 +34,6 @@ fun Incident.toDto(): IncidentDto {
-----             type = type.name,
-----             data = emptyMap()
-----         ),
------        operatorId = operatorId,
-----         othersInvolved = othersInvolved,
-----         injuries = injuries,
-----         injuryLocations = injuryLocations,
-----@@ -67,7 +66,6 @@ fun IncidentDto.toDomain(): Incident {
-----         severityLevel = severityLevel?.let { IncidentSeverityLevel.valueOf(it) },
-----         preshiftCheckStatus = preshiftCheckStatus,
-----         typeSpecificFields = typeSpecificFields.toDomain(type),
------        operatorId = operatorId,
-----         othersInvolved = othersInvolved,
-----         injuries = injuries,
-----         injuryLocations = injuryLocations,
-----diff --git a/app/src/main/java/app/forku/data/mapper/UserMapper.kt b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
-----index cbe4973..0c8fdc1 100644
-------- a/app/src/main/java/app/forku/data/mapper/UserMapper.kt
-----+++ b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
-----@@ -8,20 +8,22 @@ import app.forku.domain.model.user.UserRole
----- import app.forku.domain.model.user.Certification
----- 
----- fun UserDto.toDomain(): User {
-----+    // Split the name into first and last name
-----+
-----     return User(
-----         id = id,
-----         token = token,
-----         refreshToken = refreshToken,
-----         email = email,
-----         username = username,
------        name = name,
-----+        firstName = firstName,
-----+        lastName = lastName,
-----         photoUrl = photoUrl,
-----         role = UserRole.fromString(role),
------        permissions = permissions,
-----         certifications = certifications.map { it.toDomain() },
------        lastMedicalCheck = last_medical_check,
------        lastLogin = last_login,
------        isActive = is_active
-----+        lastMedicalCheck = lastMedicalCheck,
-----+        lastLogin = lastLogin,
-----+        isActive = isActive
-----     )
----- }
----- 
-----@@ -41,14 +43,14 @@ fun User.toDto(): UserDto {
-----         email = email,
-----         password = "", // No incluimos el password en la conversión a DTO
-----         username = username,
------        name = name,
-----+        firstName = firstName,
-----+        lastName = lastName,
-----         photoUrl = photoUrl,
-----         role = role.name,
------        permissions = permissions,
-----         certifications = certifications.map { it.toDto() },
------        last_medical_check = lastMedicalCheck,
------        last_login = lastLogin,
------        is_active = isActive
-----+        lastMedicalCheck = lastMedicalCheck,
-----+        lastLogin = lastLogin,
-----+        isActive = isActive
-----     )
----- }
----- 
-----diff --git a/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt
-----index c225d34..55de3ef 100644
-------- a/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt
-----+++ b/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt
-----@@ -14,6 +14,9 @@ class IncidentRepositoryImpl @Inject constructor(
----- ) : IncidentRepository {
-----     override suspend fun reportIncident(incident: Incident): Result<Incident> {
-----         return try {
-----+            val currentUser = authDataStore.getCurrentUser() 
-----+                ?: return Result.failure(Exception("User not authenticated"))
-----+            
-----             val response = api.reportIncident(incident.toDto())
-----             if (response.isSuccessful) {
-----                 Result.success(response.body()?.toDomain() 
-----diff --git a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
-----index 3d5ffda..ab6730d 100644
-------- a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
-----+++ b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
-----@@ -7,27 +7,22 @@ import app.forku.domain.model.user.User
----- import app.forku.domain.repository.user.UserRepository
----- import app.forku.data.datastore.AuthDataStore
----- import app.forku.data.mapper.toDto
------import app.forku.domain.model.user.Permissions
----- import app.forku.domain.model.user.UserRole
-----+import app.forku.data.local.TourPreferences
----- import java.util.UUID
----- import javax.inject.Inject
----- import kotlinx.coroutines.Dispatchers
----- import kotlinx.coroutines.withContext
----- import javax.inject.Singleton
------import android.content.SharedPreferences
----- import kotlinx.coroutines.flow.Flow
----- 
----- @Singleton
----- class UserRepositoryImpl @Inject constructor(
-----     private val api: GeneralApi,
-----     private val authDataStore: AuthDataStore,
------    private val sharedPreferences: SharedPreferences
-----+    private val tourPreferences: TourPreferences
----- ) : UserRepository {
-----     
------    companion object {
------        private const val PREF_TOUR_COMPLETED = "tour_completed"
------    }
------
-----     override suspend fun getUserById(id: String): User? {
-----         return try {
-----             val response = api.getUser(id)
-----@@ -43,20 +38,49 @@ class UserRepositoryImpl @Inject constructor(
-----             // Obtener todos los usuarios
-----             val response = api.getUsers()
-----             if (!response.isSuccessful) {
------                return@withContext Result.failure(Exception("Failed to fetch users"))
-----+                android.util.Log.e("appflow UserRepository", "Server error: ${response.code()}")
-----+                return@withContext Result.failure(Exception("Error de servidor. Por favor intenta más tarde"))
-----+            }
-----+
-----+            // Log the response for debugging
-----+            android.util.Log.d("appflow UserRepository", "Users response: ${response.body()}")
-----+
-----+            // Primero verificar si existe el email
-----+            val userWithEmail = response.body()?.find { it.email == email }
-----+            if (userWithEmail == null) {
-----+                android.util.Log.e("appflow UserRepository", "User not found with email: $email")
-----+                return@withContext Result.failure(Exception("El correo electrónico no está registrado"))
-----             }
----- 
------            // Buscar usuario por email y password
-----+            // Log user found
-----+            android.util.Log.d("appflow UserRepository", "Found user: $userWithEmail")
-----+
-----+            // Luego verificar la contraseña
-----             val user = response.body()?.find { 
-----                 it.email == email && it.password == password 
------            }?.toDomain() ?: return@withContext Result.failure(Exception("Invalid credentials"))
-----+            }?.toDomain()
-----+            
-----+            if (user == null) {
-----+                android.util.Log.e("appflow UserRepository", "Invalid password for email: $email")
-----+                return@withContext Result.failure(Exception("Contraseña incorrecta"))
-----+            }
-----+
-----+            // Verificar si el usuario está activo
-----+            if (!user.isActive) {
-----+                android.util.Log.e("appflow UserRepository", "User account is inactive: $email")
-----+                return@withContext Result.failure(Exception("Tu cuenta está desactivada. Contacta al administrador"))
-----+            }
-----+
-----+            // Log successful login
-----+            android.util.Log.d("appflow UserRepository", "Successful login for user: ${user.email}")
----- 
-----             // Guardar usuario en AuthDataStore
-----             authDataStore.setCurrentUser(user)
-----             
-----             Result.success(user)
-----         } catch (e: Exception) {
------            Result.failure(e)
-----+            android.util.Log.e("UserRepository", "Error during login", e)
-----+            Result.failure(Exception("Error de conexión. Verifica tu internet e intenta de nuevo"))
-----         }
-----     }
----- 
-----@@ -79,29 +103,24 @@ class UserRepositoryImpl @Inject constructor(
-----             }
----- 
-----             // Por defecto, los nuevos usuarios se registran con rol USER
------            val role = UserRole.USER
------            val permissions = when (role) {
------                UserRole.ADMIN -> Permissions.ADMIN_PERMISSIONS
------                UserRole.OPERATOR -> Permissions.OPERATOR_PERMISSIONS
------                UserRole.USER -> Permissions.USER_PERMISSIONS
------            }
------
-----+            val role = UserRole.OPERATOR
-----+            
-----             // Crear nuevo usuario
-----             val newUser = UserDto(
-----                 id = UUID.randomUUID().toString(),
-----                 email = email,
-----                 password = password,
-----                 username = email,
------                name = "$firstName $lastName",
-----+                firstName = firstName,
-----+                lastName = lastName,
-----                 token = UUID.randomUUID().toString(),
-----                 refreshToken = UUID.randomUUID().toString(),
-----                 photoUrl = null,
-----                 role = role.name,
------                permissions = permissions.toList(),
-----                 certifications = listOf(),
------                last_medical_check = null,
------                last_login = null,
------                is_active = true
-----+                lastMedicalCheck = null,
-----+                lastLogin = null,
-----+                isActive = true
-----             )
----- 
-----             val response = api.createUser(newUser)
-----@@ -152,28 +171,21 @@ class UserRepositoryImpl @Inject constructor(
-----         try {
-----             val user = getUserById(userId) ?: return@withContext Result.failure(Exception("User not found"))
-----             
------            // Asignar permisos según el nuevo rol
------            val newPermissions = when (newRole) {
------                UserRole.ADMIN -> Permissions.ADMIN_PERMISSIONS
------                UserRole.OPERATOR -> Permissions.OPERATOR_PERMISSIONS
------                UserRole.USER -> Permissions.USER_PERMISSIONS
------            }
------
-----             val updatedUserDto = UserDto(
-----                 id = user.id,
-----                 email = user.email,
-----                 password = "", // No incluimos el password en la actualización
-----                 username = user.username,
------                name = user.name,
-----+                firstName = user.firstName,
-----+                lastName = user.lastName,
-----                 token = user.token,
-----                 refreshToken = user.refreshToken,
-----                 photoUrl = user.photoUrl,
-----                 role = newRole.name,
------                permissions = newPermissions.toList(),
-----                 certifications = user.certifications.map { it.toDto() },
------                last_medical_check = user.lastMedicalCheck,
------                last_login = user.lastLogin,
------                is_active = true
-----+                lastMedicalCheck = user.lastMedicalCheck,
-----+                lastLogin = user.lastLogin,
-----+                isActive = true
-----             )
----- 
-----             val response = api.updateUser(userId, updatedUserDto)
-----@@ -204,16 +216,16 @@ class UserRepositoryImpl @Inject constructor(
-----                 email = user.email,
-----                 password = "", // No incluimos el password en la actualización
-----                 username = user.username,
------                name = user.name,
-----+                firstName = user.firstName,
-----+                lastName = user.lastName,
-----                 token = user.token,
-----                 refreshToken = user.refreshToken,
-----                 photoUrl = user.photoUrl,
-----                 role = user.role.name,
------                permissions = user.permissions,
-----                 certifications = user.certifications.map { it.toDto() },
------                last_medical_check = user.lastMedicalCheck,
------                last_login = user.lastLogin,
------                is_active = user.isActive
-----+                lastMedicalCheck = user.lastMedicalCheck,
-----+                lastLogin = user.lastLogin,
-----+                isActive = user.isActive
-----             )
----- 
-----             val response = api.updateUser(user.id, userDto)
-----@@ -274,11 +286,11 @@ class UserRepositoryImpl @Inject constructor(
-----     }
----- 
-----     override suspend fun getTourCompletionStatus(): Boolean {
------        return sharedPreferences.getBoolean(PREF_TOUR_COMPLETED, false)
-----+        return tourPreferences.hasTourCompleted()
-----     }
----- 
-----     override suspend fun setTourCompleted() {
------        sharedPreferences.edit().putBoolean(PREF_TOUR_COMPLETED, true).apply()
-----+        tourPreferences.setTourCompleted()
-----     }
----- 
-----     override suspend fun getAuthToken(): String? {
-----diff --git a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
-----index 6f4bcdf..5c9a76a 100644
-------- a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
-----+++ b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
-----@@ -141,20 +141,23 @@ class VehicleSessionRepositoryImpl @Inject constructor(
-----     }
----- 
-----     override suspend fun getActiveSessionForVehicle(vehicleId: String): VehicleSession? {
------        return try {
------            val response = api.getAllSessions()
------            if (response.isSuccessful) {
------                val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
------                sessions.find { 
------                    it.vehicleId == vehicleId && 
------                    it.status == SessionStatus.ACTIVE 
------                }
------            } else {
------                null
-----+        android.util.Log.d("VehicleSession", "Fetching active session for vehicle: $vehicleId")
-----+        val response = api.getAllSessions()
-----+        if (response.isSuccessful) {
-----+            android.util.Log.d("VehicleSession", "API response successful. Status code: ${response.code()}")
-----+            val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
-----+            android.util.Log.d("VehicleSession", "Total sessions fetched: ${sessions.size}")
-----+            
-----+            val activeSession = sessions.find { 
-----+                it.vehicleId == vehicleId && 
-----+                it.status == SessionStatus.ACTIVE 
-----             }
------        } catch (e: Exception) {
------            null
-----+            
-----+            android.util.Log.d("VehicleSession", "Active session for vehicle $vehicleId: $activeSession")
-----+            return activeSession
-----         }
-----+        android.util.Log.w("VehicleSession", "Failed to fetch sessions. Status code: ${response.code()}")
-----+        return null
-----     }
----- 
-----     override suspend fun getOperatorSessionHistory(): List<VehicleSession> {
-----diff --git a/app/src/main/java/app/forku/data/repository/weather/WeatherRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/weather/WeatherRepositoryImpl.kt
-----index 0e904ef..3459ca2 100644
-------- a/app/src/main/java/app/forku/data/repository/weather/WeatherRepositoryImpl.kt
-----+++ b/app/src/main/java/app/forku/data/repository/weather/WeatherRepositoryImpl.kt
-----@@ -29,4 +29,18 @@ class WeatherRepositoryImpl @Inject constructor(
-----     } catch (e: Exception) {
-----         Result.failure(e)
-----     }
-----+
-----+    override suspend fun getCurrentWeather(latitude: Double, longitude: Double): String {
-----+        return try {
-----+            val weatherResult = getWeatherByCoordinates(latitude, longitude)
-----+            weatherResult.fold(
-----+                onSuccess = { weather ->
-----+                    "${weather.description}, ${weather.temperature}°F, ${weather.humidity}% humidity"
-----+                },
-----+                onFailure = { "Weather data unavailable" }
-----+            )
-----+        } catch (e: Exception) {
-----+            "Weather data unavailable"
-----+        }
-----+    }
----- } 
-----\ No newline at end of file
-----diff --git a/app/src/main/java/app/forku/di/NetworkModule.kt b/app/src/main/java/app/forku/di/NetworkModule.kt
-----index e65354c..a08dd80 100644
-------- a/app/src/main/java/app/forku/di/NetworkModule.kt
-----+++ b/app/src/main/java/app/forku/di/NetworkModule.kt
-----@@ -9,6 +9,7 @@ import app.forku.data.repository.weather.WeatherRepositoryImpl
----- import dagger.Module
----- import dagger.Provides
----- import dagger.hilt.InstallIn
-----+import dagger.hilt.android.qualifiers.ApplicationContext
----- import dagger.hilt.components.SingletonComponent
----- import okhttp3.OkHttpClient
----- import okhttp3.logging.HttpLoggingInterceptor
-----@@ -16,6 +17,8 @@ import retrofit2.Retrofit
----- import retrofit2.converter.gson.GsonConverterFactory
----- import javax.inject.Singleton
----- import java.util.concurrent.TimeUnit
-----+import android.content.Context
-----+import app.forku.core.network.NetworkConnectivityManager
----- 
----- @Module
----- @InstallIn(SingletonComponent::class)
-----@@ -71,4 +74,12 @@ object NetworkModule {
-----     ): WeatherRepository {
-----         return WeatherRepositoryImpl(weatherApi)
-----     }
-----+
-----+    @Provides
-----+    @Singleton
-----+    fun provideNetworkConnectivityManager(
-----+        @ApplicationContext context: Context
-----+    ): NetworkConnectivityManager {
-----+        return NetworkConnectivityManager(context)
-----+    }
----- }
-----\ No newline at end of file
-----diff --git a/app/src/main/java/app/forku/domain/model/incident/Incident.kt b/app/src/main/java/app/forku/domain/model/incident/Incident.kt
-----index 592df52..0f60440 100644
-------- a/app/src/main/java/app/forku/domain/model/incident/Incident.kt
-----+++ b/app/src/main/java/app/forku/domain/model/incident/Incident.kt
-----@@ -33,7 +33,6 @@ data class Incident(
-----     val severityLevel: IncidentSeverityLevel? = null,
-----     val preshiftCheckStatus: String = "",
-----     val typeSpecificFields: IncidentTypeFields? = null,
------    val operatorId: String? = null,
-----     val othersInvolved: List<String> = emptyList(),
-----     val injuries: String = "",
-----     val injuryLocations: List<String> = emptyList(),
-----diff --git a/app/src/main/java/app/forku/domain/model/user/Operator.kt b/app/src/main/java/app/forku/domain/model/user/Operator.kt
-----index 7b11f57..4486605 100644
-------- a/app/src/main/java/app/forku/domain/model/user/Operator.kt
-----+++ b/app/src/main/java/app/forku/domain/model/user/Operator.kt
-----@@ -20,7 +20,6 @@ data class Operator(
-----     val id: String get() = user.id
-----     val username: String get() = user.username
-----     val role: UserRole get() = user.role
------    val permissions: List<String> get() = user.permissions
-----     val certifications: List<Certification> get() = user.certifications
----- 
-----     fun canOperateVehicle(vehicleType: VehicleType): Boolean {
-----diff --git a/app/src/main/java/app/forku/domain/model/user/Permissions.kt b/app/src/main/java/app/forku/domain/model/user/Permissions.kt
-----deleted file mode 100644
-----index 30558b8..0000000
-------- a/app/src/main/java/app/forku/domain/model/user/Permissions.kt
-----+++ /dev/null
-----@@ -1,51 +0,0 @@
------package app.forku.domain.model.user
------
------object Permissions {
------    // Admin Permissions
------    const val MANAGE_USERS = "MANAGE_USERS"
------    const val MANAGE_VEHICLES = "MANAGE_VEHICLES"
------    const val VIEW_ALL_REPORTS = "VIEW_ALL_REPORTS"
------    const val MANAGE_CERTIFICATIONS = "MANAGE_CERTIFICATIONS"
------    const val MANAGE_TRAINING = "MANAGE_TRAINING"
------    
------    // Operator Permissions
------    const val OPERATE_VEHICLE = "OPERATE_VEHICLE"
------    const val REPORT_INCIDENT = "REPORT_INCIDENT"
------    const val VIEW_OWN_REPORTS = "VIEW_OWN_REPORTS"
------    const val TAKE_TRAINING = "TAKE_TRAINING"
------    
------    // Default permission sets by role
------    val ADMIN_PERMISSIONS = setOf(
------        MANAGE_USERS,
------        MANAGE_VEHICLES,
------        VIEW_ALL_REPORTS,
------        MANAGE_CERTIFICATIONS,
------        MANAGE_TRAINING
------    )
------    
------    val OPERATOR_PERMISSIONS = setOf(
------        OPERATE_VEHICLE,
------        REPORT_INCIDENT,
------        VIEW_OWN_REPORTS,
------        TAKE_TRAINING
------    )
------    
------    val USER_PERMISSIONS = setOf(
------        TAKE_TRAINING
------    )
------}
------
------// Extension function to check if a user has a specific permission
------fun User.hasPermission(permission: String): Boolean {
------    return permissions.contains(permission)
------}
------
------// Extension function to check if a user has all required permissions
------fun User.hasAllPermissions(requiredPermissions: Set<String>): Boolean {
------    return permissions.containsAll(requiredPermissions)
------}
------
------// Extension function to check if a user has any of the specified permissions
------fun User.hasAnyPermission(permissions: Set<String>): Boolean {
------    return this.permissions.any { it in permissions }
------} 
-----\ No newline at end of file
-----diff --git a/app/src/main/java/app/forku/domain/model/user/User.kt b/app/src/main/java/app/forku/domain/model/user/User.kt
-----index 2d3ccf3..c939f70 100644
-------- a/app/src/main/java/app/forku/domain/model/user/User.kt
-----+++ b/app/src/main/java/app/forku/domain/model/user/User.kt
-----@@ -6,10 +6,10 @@ data class User(
-----     val refreshToken: String,
-----     val email: String,
-----     val username: String,
------    val name: String,
-----+    val firstName: String,
-----+    val lastName: String,
-----     val photoUrl: String?,
-----     val role: UserRole,
------    val permissions: List<String>,
-----     val certifications: List<Certification>,
-----     val experienceLevel: String = "Rookie",
-----     val points: Int = 0,
-----@@ -20,4 +20,7 @@ data class User(
-----     val lastMedicalCheck: String? = null,
-----     val lastLogin: String? = null,
-----     val isActive: Boolean = true
------)
-----\ No newline at end of file
-----+) {
-----+    val fullName: String
-----+        get() = "$firstName $lastName"
-----+}
-----\ No newline at end of file
-----diff --git a/app/src/main/java/app/forku/domain/model/user/UserRole.kt b/app/src/main/java/app/forku/domain/model/user/UserRole.kt
-----index 32f66d8..57ae288 100644
-------- a/app/src/main/java/app/forku/domain/model/user/UserRole.kt
-----+++ b/app/src/main/java/app/forku/domain/model/user/UserRole.kt
-----@@ -2,8 +2,7 @@ package app.forku.domain.model.user
----- 
----- enum class UserRole {
-----     ADMIN,
------    OPERATOR,
------    USER;
-----+    OPERATOR;
----- 
-----     companion object {
-----         fun fromString(role: String): UserRole {
-----diff --git a/app/src/main/java/app/forku/domain/model/vehicle/VehicleType.kt b/app/src/main/java/app/forku/domain/model/vehicle/VehicleType.kt
-----index 359deb0..3f1944b 100644
-------- a/app/src/main/java/app/forku/domain/model/vehicle/VehicleType.kt
-----+++ b/app/src/main/java/app/forku/domain/model/vehicle/VehicleType.kt
-----@@ -5,21 +5,31 @@ enum class VehicleType(
-----     val displayName: String,
-----     val requiresCertification: Boolean
----- ) {
------    FORKLIFT("forklift_type", "Forklift", true),
------    PALLET_JACK("pallet_jack_type", "Pallet Jack", false),
------    REACH_TRUCK("reach_truck_type", "Reach Truck", true),
------    ORDER_PICKER("order_picker_type", "Order Picker", true),
------    TOW_TRACTOR("tow_tractor_type", "Tow Tractor", true),
------    COUNTERBALANCE("counterbalance_type", "Counterbalance", true),
-----+    COUNTERBALANCE_FORKLIFT("counterbalance_forklift", "Counterbalance Forklift", true),
-----+    REACH_FORKLIFT("reach_forklift", "Reach Forklift", true),
-----+    SIDE_LOADER("side_loader", "Side Loader", true),
-----+    TELESCOPIC_HANDLER("telescopic_handler", "Telescopic Handler", true),
-----+    ORDER_PICKER("order_picker", "Order Picker", true),
-----+    ROUGH_TERRAIN_FORKLIFT("rough_terrain_forklift", "Rough Terrain Forklift", true),
-----+    INDUSTRIAL_FORKLIFT("industrial_forklift", "Industrial Forklift", true),
-----+    ARTICULATED_FORKLIFT("articulated_forklift", "Articulated Forklift", true),
-----+    TURRET_TRUCK("turret_truck", "Turret Truck", true),
-----+    PALLET_JACK("pallet_jack", "Pallet Jack", false),
-----+    OTHER("other", "Other", true),
-----     ALL("all", "All", false);
----- 
-----     companion object {
------        fun fromId(id: String) = values().find { it.id == id } ?: FORKLIFT
-----+        fun fromId(id: String) = values().find { it.id == id } ?: OTHER
-----         fun fromName(name: String) = try {
------            valueOf(name.uppercase())
-----+            // Intenta encontrar una coincidencia directa primero
-----+            values().find { it.displayName.equals(name, ignoreCase = true) }
-----+                // Si no encuentra coincidencia directa, intenta con el nombre enum
-----+                ?: valueOf(name.uppercase().replace(" ", "_"))
-----+                // Si aún no encuentra, devuelve OTHER
-----+                ?: OTHER
-----         } catch (e: IllegalArgumentException) {
------            android.util.Log.w("VehicleType", "Unknown vehicle type: $name")
------            FORKLIFT
-----+            android.util.Log.w("VehicleType", "Unknown vehicle type: $name, using OTHER type")
-----+            OTHER
-----         }
-----     }
----- }
-----diff --git a/app/src/main/java/app/forku/domain/repository/weather/WeatherRepository.kt b/app/src/main/java/app/forku/domain/repository/weather/WeatherRepository.kt
-----index a9d2e6f..1d556d2 100644
-------- a/app/src/main/java/app/forku/domain/repository/weather/WeatherRepository.kt
-----+++ b/app/src/main/java/app/forku/domain/repository/weather/WeatherRepository.kt
-----@@ -4,4 +4,5 @@ import app.forku.domain.model.weather.Weather
----- 
----- interface WeatherRepository {
-----     suspend fun getWeatherByCoordinates(latitude: Double, longitude: Double): Result<Weather>
-----+    suspend fun getCurrentWeather(latitude: Double, longitude: Double): String
----- } 
-----\ No newline at end of file
-----diff --git a/app/src/main/java/app/forku/domain/usecase/incident/ReportIncidentUseCase.kt b/app/src/main/java/app/forku/domain/usecase/incident/ReportIncidentUseCase.kt
-----index a9785ae..062bfa1 100644
-------- a/app/src/main/java/app/forku/domain/usecase/incident/ReportIncidentUseCase.kt
-----+++ b/app/src/main/java/app/forku/domain/usecase/incident/ReportIncidentUseCase.kt
-----@@ -31,7 +31,7 @@ class ReportIncidentUseCase @Inject constructor(
-----         preshiftCheckStatus: String,
-----         typeSpecificFields: IncidentTypeFields?,
-----         sessionId: String?,
------        operatorId: String?,
-----+        userId: String?,
-----         othersInvolved: List<String>,
-----         injuries: String,
-----         injuryLocations: List<String>,
-----@@ -66,7 +66,6 @@ class ReportIncidentUseCase @Inject constructor(
-----                 severityLevel = severityLevel,
-----                 preshiftCheckStatus = preshiftCheckStatus,
-----                 typeSpecificFields = typeSpecificFields,
------                operatorId = operatorId,
-----                 othersInvolved = othersInvolved,
-----                 injuries = injuries,
-----                 injuryLocations = injuryLocations,
-----diff --git a/app/src/main/java/app/forku/domain/usecase/session/StartVehicleSessionUseCase.kt b/app/src/main/java/app/forku/domain/usecase/session/StartVehicleSessionUseCase.kt
-----index e12d582..cf455fa 100644
-------- a/app/src/main/java/app/forku/domain/usecase/session/StartVehicleSessionUseCase.kt
-----+++ b/app/src/main/java/app/forku/domain/usecase/session/StartVehicleSessionUseCase.kt
-----@@ -1,8 +1,7 @@
----- package app.forku.domain.usecase.session
----- 
----- import app.forku.domain.model.session.VehicleSession
------import app.forku.domain.model.user.Permissions
------import app.forku.domain.model.user.hasPermission
-----+import app.forku.domain.model.user.UserRole
----- import app.forku.domain.repository.session.SessionRepository
----- import app.forku.domain.repository.user.UserRepository
----- import javax.inject.Inject
-----@@ -15,7 +14,7 @@ class StartVehicleSessionUseCase @Inject constructor(
-----         val currentUser = userRepository.getCurrentUser()
-----             ?: return Result.failure(Exception("User not logged in"))
----- 
------        if (!currentUser.hasPermission(Permissions.OPERATE_VEHICLE)) {
-----+        if (currentUser.role != UserRole.OPERATOR) {
-----             return Result.failure(Exception("User does not have permission to operate vehicles"))
-----         }
----- 
-----diff --git a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
-----index 8ffab1d..bed1351 100644
-------- a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
-----@@ -24,14 +24,17 @@ import androidx.navigation.NavController
----- import app.forku.presentation.common.components.BaseScreen
----- import androidx.compose.runtime.mutableStateOf
----- import androidx.compose.runtime.remember
-----+import app.forku.core.network.NetworkConnectivityManager
----- import app.forku.presentation.common.components.AppModal
----- 
-----+
----- @OptIn(ExperimentalMaterial3Api::class)
----- @Composable
----- fun ChecklistScreen(
-----     viewModel: ChecklistViewModel = hiltViewModel(),
-----     navController: NavController,
------    onBackPressed: () -> Unit
-----+    onBackPressed: () -> Unit,
-----+    networkManager: NetworkConnectivityManager
----- ) {
-----     var showConfirmationDialog = remember { mutableStateOf(false) }
-----     
-----@@ -54,7 +57,8 @@ fun ChecklistScreen(
-----         showTopBar = true,
-----         showBottomBar = true,
-----         viewModel = viewModel,
------        topBarTitle = "Vehicle Check",
-----+        topBarTitle = "Pre-Shift Check",
-----+        networkManager = networkManager,
-----         onRefresh = { viewModel.loadChecklistData() },
-----         content = { padding ->
-----             Box(modifier = Modifier.fillMaxSize()) {
-----@@ -116,10 +120,10 @@ fun ChecklistScreen(
----- 
----- 
-----                                 // Only show submit button when all items are answered
------                                if (currentState.showSubmitButton && currentState.allAnswered && !currentState.hasCriticalFail) {
-----+                                if (currentState.showSubmitButton && currentState.allAnswered) {
-----                                     Button(
-----                                         onClick = { showConfirmationDialog.value = true },
------                                        enabled = currentState.showSubmitButton && currentState.allAnswered && !currentState.hasCriticalFail,
-----+                                        enabled = currentState.showSubmitButton && currentState.allAnswered,
-----                                         modifier = Modifier
-----                                             .fillMaxWidth()
-----                                             .padding(16.dp),
-----diff --git a/app/src/main/java/app/forku/presentation/common/components/BaseScreen.kt b/app/src/main/java/app/forku/presentation/common/components/BaseScreen.kt
-----index b4c926d..b509b40 100644
-------- a/app/src/main/java/app/forku/presentation/common/components/BaseScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/common/components/BaseScreen.kt
-----@@ -16,23 +16,30 @@ import androidx.compose.ui.platform.LocalLifecycleOwner
----- import androidx.compose.ui.unit.dp
----- import androidx.lifecycle.Lifecycle
----- import androidx.lifecycle.LifecycleEventObserver
-----+import app.forku.core.network.NetworkConnectivityManager
----- import app.forku.presentation.common.theme.BackgroundGray
----- import app.forku.presentation.dashboard.DashboardState
-----+import androidx.compose.foundation.clickable
-----+import androidx.compose.foundation.interaction.MutableInteractionSource
-----+import androidx.compose.foundation.interaction.collectIsHoveredAsState
-----+import androidx.compose.material3.surfaceColorAtElevation
----- 
----- @OptIn(ExperimentalMaterial3Api::class)
----- @Composable
----- fun BaseScreen(
-----     navController: NavController,
-----     modifier: Modifier = Modifier,
------    showTopBar: Boolean = false,
-----+    showTopBar: Boolean = true,
-----     showBottomBar: Boolean = false,
-----+    showBackButton: Boolean = true,
-----     currentVehicleId: String? = null,
-----     currentCheckId: String? = null,
-----     dashboardState: DashboardState? = null,
-----     viewModel: ViewModel? = null,
------    topBarTitle: String = "",
-----+    topBarTitle: String? = null,
-----     onRefresh: (() -> Unit)? = null,
-----     showLoadingOnRefresh: Boolean = false,
-----+    networkManager: NetworkConnectivityManager,
-----     content: @Composable (PaddingValues) -> Unit
----- ) {
-----     val lifecycleOwner = LocalLifecycleOwner.current
-----@@ -41,7 +48,6 @@ fun BaseScreen(
-----     DisposableEffect(lifecycleOwner) {
-----         val observer = LifecycleEventObserver { _, event ->
-----             if (event == Lifecycle.Event.ON_RESUME) {
------                // Refresh silencioso al volver a la pantalla
-----                 onRefresh?.invoke()
-----             }
-----         }
-----@@ -56,7 +62,8 @@ fun BaseScreen(
-----         color = backgroundColor
-----     ) {
-----         Column(modifier = Modifier.fillMaxSize()) {
------            Spacer(modifier = Modifier.height(24.dp))
-----+            // Network Status Bar at the very top
-----+            NetworkStatusBar(networkManager = networkManager)
-----             
-----             // Header section
-----             if (showTopBar) {
-----@@ -65,27 +72,46 @@ fun BaseScreen(
-----                         .fillMaxWidth()
-----                         .padding(horizontal = 16.dp)
-----                 ) {
------                    // Back button
------                    TextButton(
------                        onClick = { navController.navigateUp() },
------                        contentPadding = PaddingValues(0.dp)
------                    ) {
------                        Icon(
------                            Icons.Default.ArrowBack,
------                            contentDescription = "Back",
------                            tint = MaterialTheme.colorScheme.primary
------                        )
------                        Text(
------                            "Back",
------                            color = MaterialTheme.colorScheme.primary,
------                            style = MaterialTheme.typography.bodyLarge,
------                            modifier = Modifier.padding(start = 4.dp)
------                        )
-----+                    // Back button with additional top padding - only show if showBackButton is true
-----+                    if (showBackButton) {
-----+                        Box(
-----+                            modifier = Modifier
-----+                                .fillMaxWidth()
-----+                                .padding(top = 24.dp)
-----+                        ) {
-----+                            // Custom back button implementation
-----+                            Row(
-----+                                modifier = Modifier
-----+                                    .clickable(
-----+                                        interactionSource = remember { MutableInteractionSource() },
-----+                                        indication = null,
-----+                                        enabled = true,
-----+                                        onClickLabel = "Back",
-----+                                        role = androidx.compose.ui.semantics.Role.Button,
-----+                                        onClick = { navController.navigateUp() }
-----+                                    )
-----+                                    .padding(8.dp),
-----+                                verticalAlignment = Alignment.CenterVertically
-----+                            ) {
-----+                                Icon(
-----+                                    Icons.Default.ArrowBack,
-----+                                    contentDescription = "Back",
-----+                                    tint = MaterialTheme.colorScheme.primary,
-----+                                    modifier = Modifier.size(24.dp)
-----+                                )
-----+                                Spacer(modifier = Modifier.width(4.dp))
-----+                                Text(
-----+                                    "Back",
-----+                                    color = MaterialTheme.colorScheme.primary,
-----+                                    style = MaterialTheme.typography.bodyLarge
-----+                                )
-----+                            }
-----+                        }
-----                     }
-----                     
------                    // Title with spacing
------                    if (topBarTitle.isNotEmpty()) {
------                        Spacer(modifier = Modifier.height(8.dp))
-----+                    // Title with spacing - adjust padding based on whether back button is shown
-----+                    if (topBarTitle?.isNotEmpty() == true) {
-----+                        Spacer(modifier = Modifier.height(if (showBackButton) 8.dp else 24.dp))
-----                         Box(
-----                             modifier = Modifier
-----                                 .fillMaxWidth()
-----@@ -107,7 +133,7 @@ fun BaseScreen(
-----                     .fillMaxSize()
-----                     .weight(1f)
-----             ) {
------                content(PaddingValues(horizontal = 2.dp))
-----+                content(PaddingValues(horizontal = 16.dp))
-----             }
----- 
-----             // Bottom Bar
-----diff --git a/app/src/main/java/app/forku/presentation/common/components/PermissionGate.kt b/app/src/main/java/app/forku/presentation/common/components/PermissionGate.kt
-----deleted file mode 100644
-----index 5e2d9e6..0000000
-------- a/app/src/main/java/app/forku/presentation/common/components/PermissionGate.kt
-----+++ /dev/null
-----@@ -1,32 +0,0 @@
------package app.forku.presentation.common.components
------
------import androidx.compose.runtime.Composable
------import app.forku.domain.model.user.User
------import app.forku.domain.model.user.hasAllPermissions
------import app.forku.domain.model.user.hasAnyPermission
------
------@Composable
------fun PermissionGate(
------    user: User?,
------    requiredPermissions: Set<String>,
------    requireAll: Boolean = true,
------    unauthorizedContent: @Composable () -> Unit = {},
------    content: @Composable () -> Unit
------) {
------    if (user == null) {
------        unauthorizedContent()
------        return
------    }
------
------    val hasPermission = if (requireAll) {
------        user.hasAllPermissions(requiredPermissions)
------    } else {
------        user.hasAnyPermission(requiredPermissions)
------    }
------
------    if (hasPermission) {
------        content()
------    } else {
------        unauthorizedContent()
------    }
------} 
-----\ No newline at end of file
-----diff --git a/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt
-----index 5bca3df..6ab19b0 100644
-------- a/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt
-----@@ -1,114 +1,497 @@
----- package app.forku.presentation.dashboard
----- 
-----+import androidx.compose.foundation.background
----- import androidx.compose.foundation.layout.*
-----+import androidx.compose.foundation.lazy.LazyColumn
-----+import androidx.compose.foundation.shape.CircleShape
-----+import androidx.compose.foundation.shape.RoundedCornerShape
-----+import androidx.compose.material.icons.Icons
-----+import androidx.compose.material.icons.filled.*
----- import androidx.compose.material3.*
------import androidx.compose.runtime.Composable
-----+import androidx.compose.runtime.*
----- import androidx.compose.ui.Alignment
----- import androidx.compose.ui.Modifier
-----+import androidx.compose.ui.draw.clip
-----+import androidx.compose.ui.graphics.Color
-----+import androidx.compose.ui.graphics.vector.ImageVector
-----+import androidx.compose.ui.layout.ContentScale
-----+import androidx.compose.ui.text.font.FontWeight
----- import androidx.compose.ui.unit.dp
-----+import androidx.compose.ui.unit.sp
----- import androidx.navigation.NavController
-----+import app.forku.core.network.NetworkConnectivityManager
-----+import coil.compose.AsyncImage
-----+import app.forku.presentation.common.components.BaseScreen
-----+import androidx.compose.material.ExperimentalMaterialApi
-----+import androidx.compose.material.pullrefresh.PullRefreshIndicator
-----+import androidx.compose.material.pullrefresh.pullRefresh
-----+import androidx.compose.material.pullrefresh.rememberPullRefreshState
----- import app.forku.presentation.navigation.Screen
----- 
-----+@OptIn(ExperimentalMaterialApi::class)
----- @Composable
----- fun AdminDashboardScreen(
-----     navController: NavController? = null,
-----     onNavigate: (String) -> Unit = {},
------    viewModel: DashboardViewModel = androidx.hilt.navigation.compose.hiltViewModel()
-----+    viewModel: AdminDashboardViewModel = androidx.hilt.navigation.compose.hiltViewModel(),
-----+    networkManager: NetworkConnectivityManager
----- ) {
------    Column(
-----+    val currentUser by viewModel.currentUser.collectAsState()
-----+    val dashboardState by viewModel.state.collectAsState()
-----+
-----+    val pullRefreshState = rememberPullRefreshState(
-----+        refreshing = dashboardState.isLoading,
-----+        onRefresh = { viewModel.loadDashboardData() }
-----+    )
-----+    
-----+    BaseScreen(
-----+        navController = navController ?: return,
-----+        showBottomBar = true,
-----+        showTopBar = false,
-----+        showBackButton = false,
-----+        networkManager = networkManager
-----+    ) { padding ->
-----+        Box(
-----+            modifier = Modifier
-----+                .fillMaxSize()
-----+                .pullRefresh(pullRefreshState)
-----+        ) {
-----+            LazyColumn(
-----+                modifier = Modifier
-----+                    .fillMaxSize()
-----+                    .padding(padding)
-----+                    .padding(horizontal = 16.dp),
-----+                verticalArrangement = Arrangement.spacedBy(24.dp)
-----+            ) {
-----+                item { HeaderSection(userFirstName = currentUser?.firstName ?: "") }
-----+                
-----+                item { OperationStatusSection(dashboardState) }
-----+                
-----+                item { VehicleSessionSection(dashboardState, navController) }
-----+                
-----+                item { OperatorsSessionSection(dashboardState, navController) }
-----+                
-----+                // Add some padding at the bottom
-----+                item { Spacer(modifier = Modifier.height(16.dp)) }
-----+            }
-----+
-----+            PullRefreshIndicator(
-----+                refreshing = dashboardState.isLoading,
-----+                state = pullRefreshState,
-----+                modifier = Modifier.align(Alignment.TopCenter)
-----+            )
-----+        }
-----+    }
-----+}
-----+
-----+@Composable
-----+private fun HeaderSection(userFirstName: String) {
-----+    Row(
-----         modifier = Modifier
------            .fillMaxSize()
------            .padding(16.dp),
------        horizontalAlignment = Alignment.CenterHorizontally,
------        verticalArrangement = Arrangement.spacedBy(16.dp)
-----+            .fillMaxWidth()
-----+            .padding(top = 40.dp, bottom = 16.dp),
-----+        horizontalArrangement = Arrangement.SpaceBetween,
-----+        verticalAlignment = Alignment.CenterVertically
-----+    ) {
-----+        Column {
-----+            Text(
-----+                text = "Hi, $userFirstName!",
-----+                fontSize = 24.sp,
-----+                fontWeight = FontWeight.Bold
-----+            )
-----+            Text(
-----+                text = "How are you today?",
-----+                color = Color.Gray,
-----+                fontSize = 16.sp
-----+            )
-----+        }
-----+        IconButton(onClick = { /* Handle notifications */ }) {
-----+            Icon(
-----+                imageVector = Icons.Default.Notifications,
-----+                contentDescription = "Notifications",
-----+                tint = Color.Gray
-----+            )
-----+        }
-----+    }
-----+}
-----+
-----+@Composable
-----+private fun OperationStatusSection(state: AdminDashboardState) {
-----+    Card(
-----+        modifier = Modifier.fillMaxWidth(),
-----+        colors = CardDefaults.cardColors(containerColor = Color.White)
-----     ) {
-----+        Column(modifier = Modifier.padding(16.dp)) {
-----+            Text(
-----+                text = "Operation Status",
-----+                fontSize = 20.sp,
-----+                fontWeight = FontWeight.Bold
-----+            )
-----+            
-----+            Spacer(modifier = Modifier.height(16.dp))
-----+            
-----+            Row(
-----+                modifier = Modifier.fillMaxWidth(),
-----+                horizontalArrangement = Arrangement.SpaceBetween
-----+            ) {
-----+                StatusItem(
-----+                    icon = Icons.Default.DirectionsCar,
-----+                    count = state.operatingVehiclesCount.toString(),
-----+                    label = "Operating",
-----+                    iconTint = Color(0xFF4CAF50)
-----+                )
-----+                StatusItem(
-----+                    icon = Icons.Default.Warning,
-----+                    count = state.totalIncidentsCount.toString(),
-----+                    label = "Incidents",
-----+                    iconTint = Color(0xFFFFA726)
-----+                )
-----+                StatusItem(
-----+                    icon = Icons.Default.Security,
-----+                    count = state.safetyAlertsCount.toString(),
-----+                    label = "Safety Alerts",
-----+                    iconTint = Color(0xFF2196F3)
-----+                )
-----+            }
-----+
-----+            if (state.isLoading) {
-----+                LinearProgressIndicator(
-----+                    modifier = Modifier
-----+                        .fillMaxWidth()
-----+                        .padding(top = 16.dp)
-----+                )
-----+            }
-----+
-----+            state.error?.let { error ->
-----+                Text(
-----+                    text = error,
-----+                    color = Color.Red,
-----+                    modifier = Modifier.padding(top = 8.dp)
-----+                )
-----+            }
-----+        }
-----+    }
-----+}
-----+
-----+@Composable
-----+private fun StatusItem(
-----+    icon: ImageVector,
-----+    count: String,
-----+    total: String? = null,
-----+    label: String,
-----+    iconTint: Color
-----+) {
-----+    Column(
-----+        horizontalAlignment = Alignment.CenterHorizontally
-----+    ) {
-----+        Icon(
-----+            imageVector = icon,
-----+            contentDescription = null,
-----+            tint = iconTint,
-----+            modifier = Modifier.size(24.dp)
-----+        )
-----+        if (total != null) {
-----+            Text(
-----+                text = total,
-----+                fontSize = 12.sp,
-----+                color = Color.Gray
-----+            )
-----+        }
-----+        Text(
-----+            text = count,
-----+            fontSize = 32.sp,
-----+            fontWeight = FontWeight.Bold
-----+        )
-----         Text(
------            text = "Admin Dashboard",
------            style = MaterialTheme.typography.headlineMedium
-----+            text = label,
-----+            fontSize = 14.sp,
-----+            color = Color.Gray
-----         )
-----+    }
-----+}
----- 
------        // Sección de Gestión de Usuarios
------        ElevatedCard(
------            modifier = Modifier.fillMaxWidth()
-----+@Composable
-----+private fun VehicleSessionSection(
-----+    state: AdminDashboardState,
-----+    navController: NavController
-----+) {
-----+    Column {
-----+        Row(
-----+            modifier = Modifier.fillMaxWidth(),
-----+            horizontalArrangement = Arrangement.SpaceBetween,
-----+            verticalAlignment = Alignment.CenterVertically
-----         ) {
------            Column(
------                modifier = Modifier.padding(16.dp)
-----+            Text(
-----+                text = "Vehicle In-Session",
-----+                fontSize = 20.sp,
-----+                fontWeight = FontWeight.Bold
-----+            )
-----+            TextButton(
-----+                onClick = { navController.navigate(Screen.VehicleSessionList.route) }
-----             ) {
------                Text(
------                    text = "User Management",
------                    style = MaterialTheme.typography.titleMedium
------                )
------                Spacer(modifier = Modifier.height(8.dp))
------                Button(
------                    onClick = { onNavigate("manage_users") },
------                    modifier = Modifier.fillMaxWidth()
-----+                Text("View all")
-----+                Icon(Icons.Default.ArrowForward, contentDescription = null)
-----+            }
-----+        }
-----+        
-----+        Spacer(modifier = Modifier.height(8.dp))
-----+        
-----+        if (state.activeVehicleSessions.isEmpty()) {
-----+            Card(
-----+                modifier = Modifier.fillMaxWidth(),
-----+                colors = CardDefaults.cardColors(containerColor = Color.White)
-----+            ) {
-----+                Box(
-----+                    modifier = Modifier
-----+                        .fillMaxWidth()
-----+                        .padding(32.dp),
-----+                    contentAlignment = Alignment.Center
-----                 ) {
------                    Text("Manage Users")
-----+                    Text(
-----+                        text = "No active vehicle sessions",
-----+                        color = Color.Gray,
-----+                        fontSize = 16.sp
-----+                    )
-----+                }
-----+            }
-----+        } else {
-----+            Card(
-----+                modifier = Modifier.fillMaxWidth(),
-----+                colors = CardDefaults.cardColors(containerColor = Color.White)
-----+            ) {
-----+                Column(modifier = Modifier.padding(16.dp)) {
-----+                    state.activeVehicleSessions.forEachIndexed { index, session ->
-----+                        VehicleSessionItem(
-----+                            vehicleId = session.vehicleId,
-----+                            vehicleType = session.vehicleType,
-----+                            progress = session.progress,
-----+                            operatorName = session.operatorName,
-----+                            operatorImage = session.operatorImage ?: "",
-----+                            vehicleImage = session.vehicleImage,
-----+                            codename = session.codename
-----+                        )
-----+                        
-----+                        if (index < state.activeVehicleSessions.size - 1) {
-----+                            Spacer(modifier = Modifier.height(16.dp))
-----+                        }
-----+                    }
-----                 }
-----             }
-----         }
----- 
------        // Sección de Gestión de Vehículos
------        ElevatedCard(
------            modifier = Modifier.fillMaxWidth()
------        ) {
-----+        if (state.isLoading) {
-----+            LinearProgressIndicator(
-----+                modifier = Modifier
-----+                    .fillMaxWidth()
-----+                    .padding(top = 16.dp)
-----+            )
-----+        }
-----+    }
-----+}
-----+
-----+@Composable
-----+private fun VehicleSessionItem(
-----+    vehicleId: String,
-----+    vehicleType: String,
-----+    progress: Float,
-----+    operatorName: String,
-----+    operatorImage: String,
-----+    vehicleImage: String?,
-----+    codename: String
-----+) {
-----+    Row(
-----+        modifier = Modifier.fillMaxWidth(),
-----+        horizontalArrangement = Arrangement.SpaceBetween,
-----+        verticalAlignment = Alignment.CenterVertically
-----+    ) {
-----+        Row(verticalAlignment = Alignment.CenterVertically) {
-----+            AsyncImage(
-----+                model = vehicleImage,
-----+                contentDescription = "Vehicle image",
-----+                modifier = Modifier
-----+                    .size(60.dp)
-----+                    .clip(RoundedCornerShape(8.dp)),
-----+                contentScale = ContentScale.Crop
-----+            )
-----+            Spacer(modifier = Modifier.width(12.dp))
-----+            Column(modifier = Modifier.weight(1f)) {
-----+                Row(verticalAlignment = Alignment.CenterVertically) {
-----+                    Text(
-----+                        text = codename,
-----+                        fontWeight = FontWeight.Bold
-----+                    )
-----+                    Spacer(modifier = Modifier.width(8.dp))
-----+                    Text(
-----+                        text = vehicleType,
-----+                        color = Color.Gray,
-----+                        fontSize = 14.sp
-----+                    )
-----+                }
-----+                
-----+                Spacer(modifier = Modifier.height(4.dp))
-----+                
-----+                Row(verticalAlignment = Alignment.CenterVertically) {
-----+                    Text(
-----+                        text = "${(progress * 100).toInt()}%",
-----+                        fontWeight = FontWeight.Bold,
-----+                        fontSize = 20.sp
-----+                    )
-----+                    Spacer(modifier = Modifier.width(8.dp))
-----+                    LinearProgressIndicator(
-----+                        progress = progress,
-----+                        modifier = Modifier
-----+                            .weight(1f)
-----+                            .height(8.dp)
-----+                            .clip(RoundedCornerShape(4.dp)),
-----+                        color = when {
-----+                            progress > 0.7f -> Color(0xFF4CAF50)
-----+                            progress > 0.3f -> Color(0xFFFFA726)
-----+                            else -> Color(0xFFF44336)
-----+                        }
-----+                    )
-----+                }
-----+            }
-----+            
-----+            Spacer(modifier = Modifier.width(16.dp))
-----+            
-----             Column(
------                modifier = Modifier.padding(16.dp)
-----+                horizontalAlignment = Alignment.End,
-----+                modifier = Modifier.width(100.dp)
-----             ) {
-----+                AsyncImage(
-----+                    model = operatorImage,
-----+                    contentDescription = null,
-----+                    modifier = Modifier
-----+                        .size(40.dp)
-----+                        .clip(CircleShape),
-----+                    contentScale = ContentScale.Crop
-----+                )
-----                 Text(
------                    text = "Vehicle Management",
------                    style = MaterialTheme.typography.titleMedium
-----+                    text = "Operator",
-----+                    fontSize = 12.sp,
-----+                    color = Color.Gray
-----+                )
-----+                Text(
-----+                    text = operatorName,
-----+                    fontSize = 14.sp,
-----+                    fontWeight = FontWeight.Medium,
-----+                    maxLines = 1
-----                 )
------                Spacer(modifier = Modifier.height(8.dp))
------                Button(
------                    onClick = { onNavigate(Screen.Vehicles.route) },
------                    modifier = Modifier.fillMaxWidth()
------                ) {
------                    Text("Manage Vehicles")
------                }
-----             }
-----         }
-----+    }
-----+}
----- 
------        // Sección de Reportes
------        ElevatedCard(
------            modifier = Modifier.fillMaxWidth()
-----+@Composable
-----+private fun OperatorsSessionSection(state: AdminDashboardState, navController: NavController) {
-----+    Column {
-----+        Row(
-----+            modifier = Modifier.fillMaxWidth(),
-----+            horizontalArrangement = Arrangement.SpaceBetween,
-----+            verticalAlignment = Alignment.CenterVertically
-----         ) {
------            Column(
------                modifier = Modifier.padding(16.dp)
-----+            Text(
-----+                text = "Operators in-Session",
-----+                fontSize = 20.sp,
-----+                fontWeight = FontWeight.Bold
-----+            )
-----+            TextButton(onClick = { navController.navigate(Screen.OperatorSessionList.route) }) {
-----+                Text("View all")
-----+                Icon(Icons.Default.ArrowForward, contentDescription = null)
-----+            }
-----+        }
-----+        
-----+        Spacer(modifier = Modifier.height(8.dp))
-----+
-----+        if (state.activeOperators.isEmpty()) {
-----+            Card(
-----+                modifier = Modifier.fillMaxWidth(),
-----+                colors = CardDefaults.cardColors(containerColor = Color.White)
-----             ) {
------                Text(
------                    text = "Reports",
------                    style = MaterialTheme.typography.titleMedium
------                )
------                Spacer(modifier = Modifier.height(8.dp))
------                Button(
------                    onClick = { onNavigate("reports") },
------                    modifier = Modifier.fillMaxWidth()
-----+                Box(
-----+                    modifier = Modifier
-----+                        .fillMaxWidth()
-----+                        .padding(32.dp),
-----+                    contentAlignment = Alignment.Center
-----                 ) {
------                    Text("View Reports")
-----+                    Text(
-----+                        text = "No operators currently in session",
-----+                        color = Color.Gray,
-----+                        fontSize = 16.sp
-----+                    )
-----+                }
-----+            }
-----+        } else {
-----+            Row(
-----+                modifier = Modifier.fillMaxWidth(),
-----+                horizontalArrangement = Arrangement.spacedBy(8.dp)
-----+            ) {
-----+                state.activeOperators.forEach { operator ->
-----+                    OperatorItem(
-----+                        name = operator.name,
-----+                        image = operator.image ?: "",
-----+                        isActive = operator.isActive
-----+                    )
-----                 }
-----             }
-----         }
----- 
------        // Sección de Certificaciones
------        ElevatedCard(
------            modifier = Modifier.fillMaxWidth()
-----+        if (state.isLoading) {
-----+            LinearProgressIndicator(
-----+                modifier = Modifier
-----+                    .fillMaxWidth()
-----+                    .padding(top = 16.dp)
-----+            )
-----+        }
-----+    }
-----+}
-----+
-----+@Composable
-----+private fun OperatorItem(
-----+    name: String,
-----+    image: String,
-----+    isActive: Boolean
-----+) {
-----+    Card(
-----+        modifier = Modifier.width(111.dp),
-----+        colors = CardDefaults.cardColors(containerColor = Color.White)
-----         ) {
-----             Column(
------                modifier = Modifier.padding(16.dp)
------            ) {
------                Text(
------                    text = "Certifications",
------                    style = MaterialTheme.typography.titleMedium
-----+            modifier = Modifier.padding(8.dp),
-----+            horizontalAlignment = Alignment.CenterHorizontally
-----+        ) {
-----+            Box {
-----+                AsyncImage(
-----+                    model = image,
-----+                    contentDescription = null,
-----+                    modifier = Modifier
-----+                        .size(80.dp)
-----+                        .clip(RoundedCornerShape(8.dp)),
-----+                    contentScale = ContentScale.Crop
-----                 )
------                Spacer(modifier = Modifier.height(8.dp))
------                Button(
------                    onClick = { onNavigate("certifications") },
------                    modifier = Modifier.fillMaxWidth()
------                ) {
------                    Text("Manage Certifications")
-----+                if (isActive) {
-----+                    Box(
-----+                        modifier = Modifier
-----+                            .size(12.dp)
-----+                            .clip(CircleShape)
-----+                            .background(Color(0xFF4CAF50))
-----+                            .align(Alignment.BottomEnd)
-----+                    )
-----                 }
-----             }
-----+            
-----+            Spacer(modifier = Modifier.height(4.dp))
-----+            
-----+            Text(
-----+                text = name,
-----+                fontSize = 14.sp,
-----+                fontWeight = FontWeight.Medium
-----+            )
-----+            Text(
-----+                text = if (isActive) "Active" else "Inactive",
-----+                fontSize = 12.sp,
-----+                color = if (isActive) Color(0xFF4CAF50) else Color.Gray
-----+            )
-----         }
-----     }
----- } 
-----\ No newline at end of file
-----diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
-----index 75f43a2..b918ddb 100644
-------- a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
-----@@ -39,17 +39,21 @@ import androidx.compose.material.icons.filled.QrCodeScanner
----- import androidx.compose.material.icons.filled.Report
----- import androidx.compose.runtime.setValue
----- import androidx.compose.ui.unit.sp
-----+import app.forku.core.network.NetworkConnectivityManager
----- import app.forku.domain.model.vehicle.toColor
----- import app.forku.presentation.dashboard.components.SessionCard
------import app.forku.domain.model.user.Permissions
------import app.forku.presentation.common.components.PermissionGate
-----+import androidx.compose.foundation.interaction.MutableInteractionSource
-----+import androidx.compose.foundation.interaction.collectIsHoveredAsState
-----+import androidx.compose.foundation.clickable
-----+
----- 
----- @OptIn(ExperimentalMaterialApi::class)
----- @Composable
----- fun DashboardScreen(
-----     navController: NavController,
-----+    onNavigate: (String) -> Unit,
-----     viewModel: DashboardViewModel = hiltViewModel(),
------    onNavigate: (String) -> Unit
-----+    networkManager: NetworkConnectivityManager
----- ) {
-----     val dashboardState by viewModel.state.collectAsState()
-----     val currentUser by viewModel.currentUser.collectAsState()
-----@@ -57,6 +61,11 @@ fun DashboardScreen(
-----     // Add loading state observation
-----     var isCheckoutLoading by remember { mutableStateOf(false) }
----- 
-----+    val pullRefreshState = rememberPullRefreshState(
-----+        refreshing = dashboardState.isLoading,
-----+        onRefresh = { viewModel.refreshWithLoading() }
-----+    )
-----+
-----     // Handle loading state during checkout
-----     LaunchedEffect(dashboardState.currentSession) {
-----         if (dashboardState.currentSession == null && isCheckoutLoading) {
-----@@ -76,51 +85,26 @@ fun DashboardScreen(
-----         viewModel.refresh()
-----     }
----- 
------    val pullRefreshState = rememberPullRefreshState(
------        refreshing = dashboardState.isLoading,
------        onRefresh = { viewModel.refreshWithLoading() }
------    )
------
------    Column {
------        // Contenido común para todos los usuarios
------        CommonContent()
------
------        // Funcionalidades específicas para Admin
------        PermissionGate(
------            user = currentUser,
------            requiredPermissions = setOf(Permissions.MANAGE_USERS),
------        ) {
------            UserManagementSection()
------        }
------
------        // Funcionalidades específicas para Operator
------        PermissionGate(
------            user = currentUser,
------            requiredPermissions = setOf(Permissions.OPERATE_VEHICLE),
------        ) {
------            VehicleOperationSection()
------        }
------    }
------
-----     BaseScreen(
-----         navController = navController,
-----         showBottomBar = true,
-----+        showBackButton = false,
-----         currentVehicleId = dashboardState.currentSession?.vehicleId,
-----         currentCheckId = dashboardState.lastPreShiftCheck?.id,
------        dashboardState = dashboardState
-----+        dashboardState = dashboardState,
-----+        networkManager = networkManager
-----     ) { padding ->
-----         Box(
-----             modifier = Modifier
-----                 .fillMaxSize()
------                .padding(padding)
-----                 .pullRefresh(pullRefreshState)
-----         ) {
-----             Column(
-----                 modifier = Modifier
-----                     .fillMaxSize()
------                    .padding(16.dp),
------                horizontalAlignment = Alignment.CenterHorizontally,
------                verticalArrangement = Arrangement.Center
-----+                    .padding(padding)
-----+                    .padding(top = 32.dp),
-----+                horizontalAlignment = Alignment.CenterHorizontally
-----             ) {
-----                 SessionCard(
-----                     vehicle = dashboardState.displayVehicle,
-----@@ -155,28 +139,6 @@ fun DashboardScreen(
-----                 )
-----             }
----- 
------            // Show loading indicator
------            if (isCheckoutLoading) {
------                CircularProgressIndicator(
------                    modifier = Modifier.align(Alignment.Center)
------                )
------            }
------
------            // Show error if any
------            dashboardState.error?.let { error ->
------                Snackbar(
------                    modifier = Modifier.align(Alignment.BottomCenter),
------                    action = {
------                        TextButton(onClick = { viewModel.clearError() }) {
------                            Text("Retry")
------                        }
------                    }
------                ) {
------                    Text(error)
------                }
------            }
------
------            // Pull to refresh indicator
-----             PullRefreshIndicator(
-----                 refreshing = dashboardState.isLoading,
-----                 state = pullRefreshState,
-----@@ -282,15 +244,18 @@ private fun NavigationButton(
----- ) {
-----     val buttonSize = if (isCenter) 120.dp else 90.dp
-----     val iconSize = if (isCenter) 32.dp else 24.dp
-----+    val interactionSource = remember { MutableInteractionSource() }
-----     
------    OutlinedButton(
------        onClick = onClick,
------        modifier = modifier.size(buttonSize),
-----+    Surface(
-----+        modifier = modifier
-----+            .size(buttonSize)
-----+            .clickable(
-----+                interactionSource = interactionSource,
-----+                indication = null,
-----+                onClick = onClick
-----+            ),
-----         shape = CircleShape,
------        colors = ButtonDefaults.outlinedButtonColors(
------            containerColor = Color.White,
------            contentColor = Color.Black
------        ),
-----+        color = Color.White,
-----         border = BorderStroke(
-----             width = if (isCenter) 3.dp else 0.dp,
-----             color = if (isCenter) VehicleStatus.AVAILABLE.toColor().copy(alpha = 0.1f) else Color.Gray.copy(alpha = 0.3f)
-----@@ -299,7 +264,9 @@ private fun NavigationButton(
-----         Column(
-----             horizontalAlignment = Alignment.CenterHorizontally,
-----             verticalArrangement = Arrangement.Center,
------            modifier = Modifier.padding(0.dp).fillMaxWidth()
-----+            modifier = Modifier
-----+                .padding(0.dp)
-----+                .fillMaxWidth()
-----         ) {
-----             Icon(
-----                 imageVector = icon,
-----@@ -321,11 +288,6 @@ private fun CommonContent() {
-----     // Implementation of CommonContent
----- }
----- 
------@Composable
------private fun UserManagementSection() {
------    // Implementation of UserManagementSection
------}
------
----- @Composable
----- private fun VehicleOperationSection() {
-----     // Implementation of VehicleOperationSection
-----diff --git a/app/src/main/java/app/forku/presentation/dashboard/OperatorDashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/OperatorDashboardScreen.kt
-----deleted file mode 100644
-----index 667aa83..0000000
-------- a/app/src/main/java/app/forku/presentation/dashboard/OperatorDashboardScreen.kt
-----+++ /dev/null
-----@@ -1,139 +0,0 @@
------package app.forku.presentation.dashboard
------
------import androidx.compose.foundation.layout.*
------import androidx.compose.material3.*
------import androidx.compose.runtime.Composable
------import androidx.compose.runtime.collectAsState
------import androidx.compose.runtime.getValue
------import androidx.compose.ui.Alignment
------import androidx.compose.ui.Modifier
------import androidx.compose.ui.unit.dp
------import androidx.navigation.NavController
------import app.forku.presentation.navigation.Screen
------import androidx.hilt.navigation.compose.hiltViewModel
------
------@Composable
------fun OperatorDashboardScreen(
------    navController: NavController? = null,
------    onNavigate: (String) -> Unit = {},
------    viewModel: DashboardViewModel = hiltViewModel()
------) {
------    val dashboardState by viewModel.state.collectAsState()
------    val currentUser by viewModel.currentUser.collectAsState()
------
------    Column(
------        modifier = Modifier
------            .fillMaxSize()
------            .padding(16.dp),
------        horizontalAlignment = Alignment.CenterHorizontally,
------        verticalArrangement = Arrangement.spacedBy(16.dp)
------    ) {
------        Text(
------            text = "Operator Dashboard",
------            style = MaterialTheme.typography.headlineMedium
------        )
------
------        // Sección de Vehículo Actual
------        if (dashboardState.currentSession != null) {
------            ElevatedCard(
------                modifier = Modifier.fillMaxWidth()
------            ) {
------                Column(
------                    modifier = Modifier.padding(16.dp)
------                ) {
------                    Text(
------                        text = "Current Vehicle",
------                        style = MaterialTheme.typography.titleMedium
------                    )
------                    Spacer(modifier = Modifier.height(8.dp))
------                    dashboardState.displayVehicle?.let { vehicle ->
------                        Text("Vehicle: ${vehicle.codename}")
------                        Text("Status: ${vehicle.status}")
------                    }
------                    Button(
------                        onClick = { viewModel.endCurrentSession() },
------                        modifier = Modifier.fillMaxWidth()
------                    ) {
------                        Text("End Session")
------                    }
------                }
------            }
------        }
------
------        // Sección de Inicio de Sesión
------        if (dashboardState.currentSession == null) {
------            ElevatedCard(
------                modifier = Modifier.fillMaxWidth()
------            ) {
------                Column(
------                    modifier = Modifier.padding(16.dp)
------                ) {
------                    Text(
------                        text = "Start Session",
------                        style = MaterialTheme.typography.titleMedium
------                    )
------                    Spacer(modifier = Modifier.height(8.dp))
------                    Button(
------                        onClick = { onNavigate(Screen.QRScanner.route) },
------                        modifier = Modifier.fillMaxWidth()
------                    ) {
------                        Text("Scan Vehicle QR")
------                    }
------                }
------            }
------        }
------
------        // Sección de Reportes de Incidentes
------        ElevatedCard(
------            modifier = Modifier.fillMaxWidth()
------        ) {
------            Column(
------                modifier = Modifier.padding(16.dp)
------            ) {
------                Text(
------                    text = "Incident Reporting",
------                    style = MaterialTheme.typography.titleMedium
------                )
------                Spacer(modifier = Modifier.height(8.dp))
------                Button(
------                    onClick = { onNavigate(Screen.SafetyReporting.route) },
------                    modifier = Modifier.fillMaxWidth()
------                ) {
------                    Text("Report Incident")
------                }
------            }
------        }
------
------        // Sección de Historial
------        ElevatedCard(
------            modifier = Modifier.fillMaxWidth()
------        ) {
------            Column(
------                modifier = Modifier.padding(16.dp)
------            ) {
------                Text(
------                    text = "History",
------                    style = MaterialTheme.typography.titleMedium
------                )
------                Spacer(modifier = Modifier.height(8.dp))
------                Row(
------                    modifier = Modifier.fillMaxWidth(),
------                    horizontalArrangement = Arrangement.spacedBy(8.dp)
------                ) {
------                    Button(
------                        onClick = { onNavigate(Screen.IncidentsHistory.route) },
------                        modifier = Modifier.weight(1f)
------                    ) {
------                        Text("Incidents")
------                    }
------                    Button(
------                        onClick = { onNavigate(Screen.OperatorsCICOHistory.route) },
------                        modifier = Modifier.weight(1f)
------                    ) {
------                        Text("Sessions")
------                    }
------                }
------            }
------        }
------    }
------} 
-----\ No newline at end of file
-----diff --git a/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt b/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
-----index fbd9008..c001ac3 100644
-------- a/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
-----+++ b/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
-----@@ -82,7 +82,7 @@ private fun SessionContent(
-----     ) {
-----         
-----         Text(
------            text = if (isActive) "Active Session" else "Welcome ${user?.name ?: ""}!",
-----+            text = if (isActive) "Active Session" else "Welcome ${user?.firstName ?: ""}!",
-----             style = MaterialTheme.typography.titleMedium,
-----             color = MaterialTheme.colorScheme.primary
-----         )
-----diff --git a/app/src/main/java/app/forku/presentation/incident/IncidentReportScreen.kt b/app/src/main/java/app/forku/presentation/incident/IncidentReportScreen.kt
-----index df23c00..7e56d44 100644
-------- a/app/src/main/java/app/forku/presentation/incident/IncidentReportScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/incident/IncidentReportScreen.kt
-----@@ -26,6 +26,7 @@ import app.forku.domain.model.incident.IncidentType
----- import app.forku.domain.model.incident.toDisplayText
----- import android.Manifest
----- import android.content.pm.PackageManager
-----+import app.forku.core.network.NetworkConnectivityManager
----- import app.forku.presentation.common.components.ForkuButton
----- import app.forku.presentation.common.components.LocationPermissionHandler
----- 
-----@@ -35,7 +36,8 @@ fun IncidentReportScreen(
-----     incidentType: String,
-----     onNavigateBack: () -> Unit,
-----     viewModel: IncidentReportViewModel = hiltViewModel(),
------    navController: NavController
-----+    navController: NavController,
-----+    networkManager: NetworkConnectivityManager
----- ) {
-----     val state by viewModel.state.collectAsState()
-----     val locationState by viewModel.locationState.collectAsState()
-----@@ -115,7 +117,8 @@ fun IncidentReportScreen(
-----         navController = navController,
-----         viewModel = viewModel,
-----         showBottomBar = false,
------        topBarTitle = "${IncidentType.valueOf(incidentType).toDisplayText()} Incident"
-----+        topBarTitle = "${IncidentType.valueOf(incidentType).toDisplayText()} Incident",
-----+        networkManager = networkManager
-----     ) { padding ->
-----         Column(
-----             modifier = Modifier
-----diff --git a/app/src/main/java/app/forku/presentation/incident/IncidentReportState.kt b/app/src/main/java/app/forku/presentation/incident/IncidentReportState.kt
-----index 2746af5..b9b6eb2 100644
-------- a/app/src/main/java/app/forku/presentation/incident/IncidentReportState.kt
-----+++ b/app/src/main/java/app/forku/presentation/incident/IncidentReportState.kt
-----@@ -34,7 +34,8 @@ data class IncidentReportState(
-----     val sessionId: String? = null,
-----     
-----     // People involved
------    val operatorId: String? = null,
-----+    val userId: String? = null,
-----+    val reporterName: String? = null,
-----     val othersInvolved: List<String> = emptyList(),
-----     val injuries: String = "",
-----     val injuryLocations: List<String> = emptyList(),
-----@@ -73,7 +74,11 @@ data class IncidentReportState(
-----     
-----     // Add to IncidentReportState
-----     val availableVehicles: List<Vehicle> = emptyList(),
------    val showVehicleSelector: Boolean = false
-----+    val showVehicleSelector: Boolean = false,
-----+
-----+    // Weather and location loading state
-----+    val weatherLoaded: Boolean = false,
-----+    val locationLoaded: Boolean = false
----- )
----- 
----- sealed class ValidationResult {
-----@@ -92,36 +97,48 @@ fun IncidentReportState.validate(): ValidationResult {
----- }
----- 
----- fun IncidentReportState.validateCollision(): ValidationResult {
-----+    val fields = typeSpecificFields as? IncidentTypeFields.CollisionFields
-----     return when {
-----         description.isBlank() -> ValidationResult.Error("Description is required")
------        location.isBlank() -> ValidationResult.Error("Location is required")
-----         vehicleId == null -> ValidationResult.Error("Vehicle information is required")
------        operatorId == null -> ValidationResult.Error("Operator information is required")
-----+        userId == null -> ValidationResult.Error("Operator information is required")
-----+        fields?.collisionType == null -> ValidationResult.Error("Collision type is required")
-----+        fields.damageOccurrence == null -> ValidationResult.Error("Damage occurrence is required")
-----+        fields.immediateCause == null -> ValidationResult.Error("Immediate cause is required")
-----         else -> ValidationResult.Success
-----     }
----- }
----- 
----- fun IncidentReportState.validateNearMiss(): ValidationResult {
-----+    val fields = typeSpecificFields as? IncidentTypeFields.NearMissFields
-----     return when {
-----         description.isBlank() -> ValidationResult.Error("Description is required")
------        location.isBlank() -> ValidationResult.Error("Location is required")
-----+        userId == null -> ValidationResult.Error("Operator information is required")
-----+        fields?.nearMissType == null -> ValidationResult.Error("Near miss type is required")
-----+        fields.immediateCause == null -> ValidationResult.Error("Immediate cause is required")
-----         else -> ValidationResult.Success
-----     }
----- }
----- 
----- fun IncidentReportState.validateHazard(): ValidationResult {
-----+    val fields = typeSpecificFields as? IncidentTypeFields.HazardFields
-----     return when {
-----         description.isBlank() -> ValidationResult.Error("Description is required")
------        location.isBlank() -> ValidationResult.Error("Location is required")
-----+        userId == null -> ValidationResult.Error("Operator information is required")
-----+        fields?.hazardType == null -> ValidationResult.Error("Hazard type is required")
-----         else -> ValidationResult.Success
-----     }
----- }
----- 
----- fun IncidentReportState.validateVehicleFail(): ValidationResult {
-----+    val fields = typeSpecificFields as? IncidentTypeFields.VehicleFailFields
-----     return when {
-----         description.isBlank() -> ValidationResult.Error("Description is required")
-----         vehicleId == null -> ValidationResult.Error("Vehicle information is required")
------        location.isBlank() -> ValidationResult.Error("Location is required")
-----+        userId == null -> ValidationResult.Error("Operator information is required")
-----+        fields?.failureType == null -> ValidationResult.Error("Failure type is required")
-----+        fields.damageOccurrence == null -> ValidationResult.Error("Damage occurrence is required")
-----+        fields.immediateCause == null -> ValidationResult.Error("Immediate cause is required")
-----         else -> ValidationResult.Success
-----     }
----- }
-----diff --git a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
-----index 4e22b85..970a413 100644
-------- a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
-----+++ b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
-----@@ -19,6 +19,8 @@ import javax.inject.Inject
----- import android.net.Uri
----- import app.forku.core.location.LocationManager
----- import app.forku.core.location.LocationState
-----+import app.forku.data.repository.notification.NotificationRepository
-----+import app.forku.domain.model.incident.toDisplayText
----- import app.forku.domain.model.vehicle.Vehicle
----- import app.forku.domain.repository.vehicle.VehicleRepository
----- import java.time.LocalDateTime
-----@@ -34,6 +36,7 @@ import kotlinx.coroutines.cancel
----- import kotlinx.coroutines.delay
----- import app.forku.domain.repository.user.UserRepository
----- 
-----+
----- @HiltViewModel
----- class IncidentReportViewModel @Inject constructor(
-----     private val reportIncidentUseCase: ReportIncidentUseCase,
-----@@ -43,7 +46,8 @@ class IncidentReportViewModel @Inject constructor(
-----     private val userRepository: UserRepository,
-----     private val vehicleRepository: VehicleRepository,
-----     private val checklistRepository: ChecklistRepository,
------    private val locationManager: LocationManager
-----+    private val locationManager: LocationManager,
-----+    private val notificationRepository: NotificationRepository
----- ) : ViewModel() {
----- 
-----     private val _state = MutableStateFlow(IncidentReportState())
-----@@ -87,18 +91,23 @@ class IncidentReportViewModel @Inject constructor(
-----     private fun observeLocationUpdates() {
-----         viewModelScope.launch {
-----             locationState.collect { locationStateValue ->
------                locationStateValue.location?.let { location ->
-----+                if (locationStateValue.location != null) {
-----                     _state.update { it.copy(
------                        location = location,
------                        locationCoordinates = location
-----+                        location = locationStateValue.location,
-----+                        locationCoordinates = locationStateValue.location,
-----+                        locationLoaded = true
-----                     )}
-----                 }
-----+                
-----+                if (locationStateValue.latitude != null && locationStateValue.longitude != null) {
-----+                    if (!state.value.weatherLoaded) {
-----+                        fetchWeather(locationStateValue.latitude, locationStateValue.longitude)
-----+                    }
-----+                }
-----+
-----                 locationStateValue.error?.let { error ->
-----                     _state.update { it.copy(error = error) }
-----                 }
------                if (locationStateValue.latitude != null && locationStateValue.longitude != null) {
------                    fetchWeather(locationStateValue.latitude, locationStateValue.longitude)
------                }
-----             }
-----         }
-----     }
-----@@ -116,9 +125,42 @@ class IncidentReportViewModel @Inject constructor(
-----                 val vehicles = vehicleRepository.getVehicles()
-----                 _state.update { it.copy(availableVehicles = vehicles) }
----- 
-----+                // Get current user first
-----+                var currentUser = userRepository.getCurrentUser()
-----+                android.util.Log.d("IncidentReport", "Initial current user fetch: $currentUser")
-----+                
-----+                // If no user found, try to refresh
-----+                if (currentUser == null) {
-----+                    android.util.Log.d("IncidentReport", "No user found, attempting to refresh")
-----+                    val refreshResult = userRepository.refreshCurrentUser()
-----+                    currentUser = refreshResult.getOrNull()
-----+                    android.util.Log.d("IncidentReport", "After refresh, current user: $currentUser")
-----+                }
-----+                
-----+                // Set user information regardless of session
-----+                currentUser?.let { user ->
-----+                    android.util.Log.d("IncidentReport", """
-----+                        Setting user info:
-----+                        - ID: ${user.id}
-----+                        - Name: ${user.fullName}
-----+                        - Token: ${user.token.take(10)}...
-----+                        - Role: ${user.role}
-----+                    """.trimIndent())
-----+                    
-----+                    _state.update { currentState ->
-----+                        currentState.copy(
-----+                            userId = user.id,
-----+                            reporterName = user.fullName
-----+                        )
-----+                    }
-----+                } ?: run {
-----+                    android.util.Log.e("IncidentReport", "No user found after refresh attempt")
-----+                    _state.update { it.copy(error = "User not authenticated") }
-----+                }
-----+
-----                 // Then try to get current session
-----                 val session = sessionRepository.getCurrentSession()
------                val currentUser = userRepository.getCurrentUser()
-----+                android.util.Log.d("IncidentReport", "Current session: $session")
-----                 
-----                 session?.vehicleId?.let { vehicleId ->
-----                     try {
-----@@ -131,7 +173,6 @@ class IncidentReportViewModel @Inject constructor(
-----                                 vehicleType = vehicle.type,
-----                                 vehicleName = vehicle.codename,
-----                                 sessionId = session.id,
------                                operatorId = currentUser?.id,
-----                                 lastPreshiftCheck = lastCheck?.lastCheckDateTime?.let { dateString ->
-----                                     LocalDateTime.parse(dateString, DateTimeFormatter.ISO_DATE_TIME)
-----                                 },
-----@@ -143,6 +184,7 @@ class IncidentReportViewModel @Inject constructor(
-----                     }
-----                 }
-----             } catch (e: Exception) {
-----+                android.util.Log.e("IncidentReport", "Error in loadInitialData", e)
-----                 _state.update { it.copy(error = "Failed to load initial data") }
-----             }
-----         }
-----@@ -214,7 +256,7 @@ class IncidentReportViewModel @Inject constructor(
-----                                 preshiftCheckStatus = state.value.preshiftCheckStatus,
-----                                 typeSpecificFields = state.value.typeSpecificFields,
-----                                 sessionId = state.value.sessionId,
------                                operatorId = state.value.operatorId,
-----+                                userId = state.value.userId,
-----                                 othersInvolved = state.value.othersInvolved,
-----                                 injuries = state.value.injuries,
-----                                 injuryLocations = state.value.injuryLocations,
-----@@ -228,7 +270,14 @@ class IncidentReportViewModel @Inject constructor(
-----                                 locationCoordinates = state.value.locationCoordinates
-----                             )
----- 
------                            result.onSuccess {
-----+                            result.onSuccess { incident ->
-----+                                // Show notification for the new incident
-----+                                notificationRepository.simulateIncidentNotification(
-----+                                    incidentId = incident.id ?: "unknown",
-----+                                    title = "New ${incident.type.toDisplayText()} Reported",
-----+                                    message = "Location: ${incident.location}"
-----+                                )
-----+                                
-----                                 _state.update { it.copy(
-----                                     isLoading = false,
-----                                     showSuccessDialog = true
-----@@ -282,27 +331,42 @@ class IncidentReportViewModel @Inject constructor(
-----     }
----- 
-----     fun onLocationPermissionGranted() {
------        locationManager.onLocationPermissionGranted()
-----+        viewModelScope.launch {
-----+            try {
-----+                locationManager.startLocationUpdates()
-----+                // Esperar un momento para que la ubicación se actualice
-----+                delay(1000)
-----+                // Forzar una actualización de ubicación
-----+                locationManager.requestSingleUpdate()
-----+            } catch (e: Exception) {
-----+                _state.update { it.copy(error = "Error starting location updates: ${e.message}") }
-----+            }
-----+        }
-----     }
----- 
-----     fun onLocationPermissionDenied() {
------        locationManager.onLocationPermissionDenied()
-----+        _state.update { it.copy(
-----+            error = "Location permission is required to report incidents"
-----+        )}
-----     }
----- 
-----     fun onLocationSettingsDenied() {
------        locationManager.onLocationSettingsDenied()
-----+        _state.update { it.copy(
-----+            error = "Location settings need to be enabled to report incidents"
-----+        )}
-----     }
----- 
-----     private fun fetchWeather(latitude: Double, longitude: Double) {
-----         viewModelScope.launch {
------            weatherRepository.getWeatherByCoordinates(latitude, longitude)
------                .onSuccess { weather ->
------                    val weatherDescription = "${weather.description}, ${weather.temperature}°F"
------                    _state.update { it.copy(weather = weatherDescription) }
------                }
------                .onFailure { error ->
------                    android.util.Log.e("Weather", "Failed to fetch weather", error)
------                }
-----+            try {
-----+                val weather = weatherRepository.getCurrentWeather(latitude, longitude)
-----+                _state.update { it.copy(
-----+                    weather = weather,
-----+                    weatherLoaded = true
-----+                )}
-----+            } catch (e: Exception) {
-----+                _state.update { it.copy(error = "Error fetching weather: ${e.message}") }
-----+            }
-----         }
-----     }
----- 
-----diff --git a/app/src/main/java/app/forku/presentation/incident/components/DamageAndImpactSection.kt b/app/src/main/java/app/forku/presentation/incident/components/DamageAndImpactSection.kt
-----index 56259be..a2206a7 100644
-------- a/app/src/main/java/app/forku/presentation/incident/components/DamageAndImpactSection.kt
-----+++ b/app/src/main/java/app/forku/presentation/incident/components/DamageAndImpactSection.kt
-----@@ -29,10 +29,10 @@ fun DamageAndImpactSection(
-----         // Damage Occurrence Dropdown
-----         var expanded by remember { mutableStateOf(false) }
-----         val currentDamage = when (val fields = state.typeSpecificFields) {
------            is IncidentTypeFields.CollisionFields -> fields.damageOccurrence?.name
------            is IncidentTypeFields.VehicleFailFields -> fields.damageOccurrence?.name
-----+            is IncidentTypeFields.CollisionFields -> fields.damageOccurrence
-----+            is IncidentTypeFields.VehicleFailFields -> fields.damageOccurrence
-----             else -> null
------        }?.replace("_", " ")
-----+        }
----- 
-----         ExposedDropdownMenuBox(
-----             expanded = expanded,
-----@@ -40,10 +40,10 @@ fun DamageAndImpactSection(
-----             modifier = Modifier.fillMaxWidth()
-----         ) {
-----             CustomOutlinedTextField(
------                value = currentDamage ?: "",
-----+                value = currentDamage?.name?.replace("_", " ") ?: "",
-----                 onValueChange = {},
-----                 readOnly = true,
------                label = "Damage Occurrence",
-----+                label = "Damage Occurrence *",
-----                 trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },
-----                 modifier = Modifier
-----                     .menuAnchor()
-----diff --git a/app/src/main/java/app/forku/presentation/incident/components/IncidentDetailsSection.kt b/app/src/main/java/app/forku/presentation/incident/components/IncidentDetailsSection.kt
-----index 4c923c5..c3aaea2 100644
-------- a/app/src/main/java/app/forku/presentation/incident/components/IncidentDetailsSection.kt
-----+++ b/app/src/main/java/app/forku/presentation/incident/components/IncidentDetailsSection.kt
-----@@ -99,7 +99,7 @@ fun IncidentDetailsSection(
-----         FormFieldDivider()
----- 
-----         // Hidden Weather Conditions field - maintains state but not visible
------        if (false) {  // This ensures the composable is never rendered
-----+        if (true) {  // This ensures the composable is never rendered
-----             CustomOutlinedTextField(
-----                 value = state.weather,
-----                 onValueChange = { },
-----@@ -114,7 +114,7 @@ fun IncidentDetailsSection(
-----         }
----- 
-----         // Hidden Location field - maintains state but not visible
------        if (false) {  // This ensures the composable is never rendered
-----+        if (true) {  // This ensures the composable is never rendered
-----             CustomOutlinedTextField(
-----                 value = state.location,
-----                 onValueChange = { },
-----diff --git a/app/src/main/java/app/forku/presentation/incident/components/PeopleSpecificFields.kt b/app/src/main/java/app/forku/presentation/incident/components/PeopleSpecificFields.kt
-----index ab25923..5cc7784 100644
-------- a/app/src/main/java/app/forku/presentation/incident/components/PeopleSpecificFields.kt
-----+++ b/app/src/main/java/app/forku/presentation/incident/components/PeopleSpecificFields.kt
-----@@ -76,9 +76,9 @@ fun BasicPeopleFields(
-----     Column(modifier = modifier.fillMaxWidth()) {
----- 
-----         // Reporter field (read-only)
------        if(false){
-----+        if(true){
-----             CustomOutlinedTextField(
------                value = state.operatorId ?: "Unknown",
-----+                value = state.userId ?: "Unknown",
-----                 onValueChange = { },
-----                 label = "Reported By",
-----                 readOnly = true,
-----diff --git a/app/src/main/java/app/forku/presentation/incident/detail/IncidentDetailScreen.kt b/app/src/main/java/app/forku/presentation/incident/detail/IncidentDetailScreen.kt
-----index b6066c9..c20f32d 100644
-------- a/app/src/main/java/app/forku/presentation/incident/detail/IncidentDetailScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/incident/detail/IncidentDetailScreen.kt
-----@@ -5,25 +5,37 @@ import androidx.compose.material3.*
----- import androidx.compose.runtime.Composable
----- import androidx.compose.runtime.LaunchedEffect
----- import androidx.compose.runtime.getValue
-----+import androidx.compose.ui.Alignment
----- import androidx.compose.ui.Modifier
----- import androidx.compose.ui.unit.dp
----- import androidx.hilt.navigation.compose.hiltViewModel
----- import androidx.lifecycle.compose.collectAsStateWithLifecycle
----- import androidx.navigation.NavController
-----+import app.forku.core.network.NetworkConnectivityManager
----- import app.forku.presentation.common.components.BaseScreen
----- import app.forku.presentation.common.components.LoadingOverlay
----- import app.forku.presentation.common.components.ErrorScreen
----- import app.forku.presentation.common.utils.getRelativeTimeSpanString
-----+import androidx.compose.material.ExperimentalMaterialApi
-----+import androidx.compose.material.pullrefresh.PullRefreshIndicator
-----+import androidx.compose.material.pullrefresh.pullRefresh
-----+import androidx.compose.material.pullrefresh.rememberPullRefreshState
----- 
------@OptIn(ExperimentalMaterial3Api::class)
-----+@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class)
----- @Composable
----- fun IncidentDetailScreen(
-----     incidentId: String,
-----     viewModel: IncidentDetailViewModel = hiltViewModel(),
------    navController: NavController
-----+    navController: NavController,
-----+    networkManager: NetworkConnectivityManager
----- ) {
-----     val state by viewModel.state.collectAsStateWithLifecycle()
----- 
-----+    val pullRefreshState = rememberPullRefreshState(
-----+        refreshing = state.isLoading,
-----+        onRefresh = { viewModel.loadIncidentDetail(incidentId) }
-----+    )
-----+
-----     // Cargar los detalles cuando se inicia la pantalla
-----     LaunchedEffect(incidentId) {
-----         viewModel.loadIncidentDetail(incidentId)
-----@@ -33,10 +45,12 @@ fun IncidentDetailScreen(
-----         navController = navController,
-----         showTopBar = true,
-----         topBarTitle = "Incident Details",
-----+        networkManager = networkManager,
-----         content = { padding ->
-----             Box(
-----                 modifier = Modifier
-----                     .fillMaxSize()
-----+                    .pullRefresh(pullRefreshState)
-----                     .padding(padding)
-----             ) {
-----                 when {
-----diff --git a/app/src/main/java/app/forku/presentation/incident/list/IncidentHistoryScreen.kt b/app/src/main/java/app/forku/presentation/incident/list/IncidentHistoryScreen.kt
-----index bbb1311..dbec231 100644
-------- a/app/src/main/java/app/forku/presentation/incident/list/IncidentHistoryScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/incident/list/IncidentHistoryScreen.kt
-----@@ -10,6 +10,7 @@ import androidx.compose.material.icons.filled.ArrowBack
----- import androidx.compose.material3.*
----- import androidx.compose.runtime.Composable
----- import androidx.compose.runtime.getValue
-----+import androidx.compose.ui.Alignment
----- import androidx.compose.ui.Modifier
----- import androidx.compose.ui.text.style.TextOverflow
----- import androidx.compose.ui.unit.dp
-----@@ -19,57 +20,79 @@ import app.forku.presentation.common.components.LoadingOverlay
----- import app.forku.presentation.common.components.ErrorScreen
----- import app.forku.presentation.common.utils.getRelativeTimeSpanString
----- import androidx.navigation.NavController
-----+import app.forku.core.network.NetworkConnectivityManager
----- import app.forku.presentation.common.components.BaseScreen
----- import app.forku.presentation.navigation.Screen
-----+import androidx.compose.material.ExperimentalMaterialApi
-----+import androidx.compose.material.pullrefresh.PullRefreshIndicator
-----+import androidx.compose.material.pullrefresh.pullRefresh
-----+import androidx.compose.material.pullrefresh.rememberPullRefreshState
----- 
------
------@OptIn(ExperimentalMaterial3Api::class)
-----+@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class)
----- @Composable
----- fun IncidentHistoryScreen(
-----     viewModel: IncidentHistoryViewModel = hiltViewModel(),
-----     onNavigateBack: () -> Unit,
-----     onNavigateToReport: () -> Unit,
------    navController: NavController
-----+    navController: NavController,
-----+    networkManager: NetworkConnectivityManager
----- ) {
-----     val state by viewModel.state.collectAsStateWithLifecycle()
----- 
-----+    val pullRefreshState = rememberPullRefreshState(
-----+        refreshing = state.isLoading,
-----+        onRefresh = { viewModel.loadIncidents() }
-----+    )
-----+
-----     BaseScreen(
-----         navController = navController,
-----         showTopBar = true,
-----         topBarTitle = "Incident Reports",
-----         content = { padding ->
------            when {
------                state.isLoading -> LoadingOverlay()
------                state.error != null -> ErrorScreen(
------                    message = state.error ?: "Unknown error occurred",
------                    onRetry = { viewModel.loadIncidents() }
------                )
------                else -> {
------                    LazyColumn(
------                        modifier = Modifier
------                            .fillMaxSize()
------                            .padding(padding)
------                    ) {
------                        items(
------                            items = state.incidents,
------                            key = { it.id }
------                        ) { incident ->
------                            IncidentHistoryItem(
------                                incident = incident,
------                                onClick = {
------                                    navController.navigate(
------                                        Screen.IncidentDetail.route.replace(
------                                            "{incidentId}",
------                                            incident.id
-----+            Box(
-----+                modifier = Modifier
-----+                    .fillMaxSize()
-----+                    .pullRefresh(pullRefreshState)
-----+            ) {
-----+                when {
-----+                    state.error != null -> ErrorScreen(
-----+                        message = state.error ?: "Unknown error occurred",
-----+                        onRetry = { viewModel.loadIncidents() }
-----+                    )
-----+                    else -> {
-----+                        LazyColumn(
-----+                            modifier = Modifier
-----+                                .fillMaxSize()
-----+                                .padding(padding)
-----+                        ) {
-----+                            items(
-----+                                items = state.incidents,
-----+                                key = { it.id }
-----+                            ) { incident ->
-----+                                IncidentHistoryItem(
-----+                                    incident = incident,
-----+                                    onClick = {
-----+                                        navController.navigate(
-----+                                            Screen.IncidentDetail.route.replace(
-----+                                                "{incidentId}",
-----+                                                incident.id
-----+                                            )
-----                                         )
------                                    )
------                                }
------                            )
-----+                                    }
-----+                                )
-----+                            }
-----                         }
-----                     }
-----                 }
-----+
-----+                PullRefreshIndicator(
-----+                    refreshing = state.isLoading,
-----+                    state = pullRefreshState,
-----+                    modifier = Modifier.align(Alignment.TopCenter)
-----+                )
-----             }
------        }
-----+        },
-----+        networkManager = networkManager
-----     )
----- }
----- 
-----diff --git a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
-----index 3c1a0cb..c3808f8 100644
-------- a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
-----+++ b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
-----@@ -11,6 +11,7 @@ import androidx.navigation.compose.NavHost
----- import androidx.navigation.compose.composable
----- import androidx.navigation.compose.rememberNavController
----- import androidx.navigation.navArgument
-----+import app.forku.core.network.NetworkConnectivityManager
----- import app.forku.presentation.user.login.LoginScreen
----- import app.forku.presentation.dashboard.DashboardScreen
----- import app.forku.presentation.checklist.ChecklistScreen
-----@@ -29,13 +30,12 @@ import app.forku.presentation.incident.detail.IncidentDetailScreen
----- import app.forku.presentation.tour.TourScreen
----- import app.forku.presentation.user.register.RegisterScreen
----- import app.forku.presentation.dashboard.AdminDashboardScreen
------import app.forku.presentation.dashboard.OperatorDashboardScreen
----- import app.forku.presentation.dashboard.UnauthorizedScreen
------import app.forku.domain.model.user.Permissions
------import app.forku.presentation.common.components.PermissionGate
----- import app.forku.presentation.dashboard.DashboardViewModel
----- import app.forku.presentation.user.login.LoginState
------
-----+import app.forku.domain.model.user.UserRole
-----+import app.forku.presentation.user.session.OperatorSessionListScreen
-----+import app.forku.presentation.vehicle.session.VehicleSessionListScreen
----- 
----- sealed class Screen(val route: String) {
-----     data object Login : Screen("login")
-----@@ -54,13 +54,15 @@ sealed class Screen(val route: String) {
-----     data object IncidentDetail : Screen("incident_detail/{incidentId}")
-----     data object Tour : Screen("tour")
-----     data object AdminDashboard : Screen("admin_dashboard")
------    data object OperatorDashboard : Screen("operator_dashboard")
-----+    data object VehicleSessionList : Screen("vehicle_session_list")
-----+    data object OperatorSessionList : Screen("operator_session_list")
----- }
----- 
----- @Composable
----- fun NavGraph(
-----     navController: NavHostController = rememberNavController(),
------    startDestination: String = Screen.Tour.route
-----+    startDestination: String = Screen.Tour.route,
-----+    networkManager: NetworkConnectivityManager
----- ) {
-----     val viewModel = hiltViewModel<DashboardViewModel>()
-----     val currentUser by viewModel.currentUser.collectAsState()
-----@@ -72,48 +74,63 @@ fun NavGraph(
-----         navController = navController,
-----         startDestination = when {
-----             !tourCompleted -> Screen.Tour.route
------            loginState is LoginState.Success || hasToken -> Screen.Dashboard.route
-----+            loginState is LoginState.Success || hasToken -> {
-----+                when (currentUser?.role) {
-----+                    UserRole.ADMIN -> Screen.AdminDashboard.route
-----+                    else -> Screen.Dashboard.route
-----+                }
-----+            }
-----             else -> Screen.Login.route
-----         }
-----     ) {
-----         composable(Screen.Login.route) {
-----             LoginScreen(
------                onLoginSuccess = {
------                    navController.navigate(Screen.Dashboard.route) {
-----+                onLoginSuccess = { user ->
-----+                    val route = when (user.role) {
-----+                        UserRole.ADMIN -> Screen.AdminDashboard.route
-----+                        else -> Screen.Dashboard.route
-----+                    }
-----+                    navController.navigate(route) {
-----                         popUpTo(Screen.Login.route) { inclusive = true }
-----                     }
------                }
-----+                },
-----+                networkManager = networkManager,
-----+                navController = navController
-----+            )
-----+        }
-----+
-----+        composable(Screen.Register.route) {
-----+            RegisterScreen(
-----+                navController = navController,
-----+                networkManager = networkManager
-----+            )
-----+        }
-----+
-----+        composable(Screen.Tour.route) {
-----+            TourScreen(
-----+                navController = navController,
-----+                networkManager = networkManager
-----             )
-----         }
----- 
-----         composable(Screen.Dashboard.route) {
------            val currentUser = viewModel.getCurrentUser()
------            when {
------                currentUser?.permissions?.containsAll(Permissions.ADMIN_PERMISSIONS) == true -> {
------                    AdminDashboardScreen(
------                        navController = navController,
------                        onNavigate = { route ->
------                            navController.navigate(route)
------                        }
------                    )
------                }
------                currentUser?.permissions?.containsAll(Permissions.OPERATOR_PERMISSIONS) == true -> {
------                    OperatorDashboardScreen(
------                        navController = navController,
------                        onNavigate = { route ->
------                            navController.navigate(route)
------                        }
------                    )
------                }
------                else -> {
------                    DashboardScreen(
------                        navController = navController,
------                        onNavigate = { route ->
------                            navController.navigate(route)
------                        }
------                    )
------                }
------            }
-----+            DashboardScreen(
-----+                navController = navController,
-----+                onNavigate = { route ->
-----+                    navController.navigate(route)
-----+                },
-----+                networkManager = networkManager
-----+            )
-----+        }
-----+
-----+        composable(Screen.AdminDashboard.route) {
-----+            AdminDashboardScreen(
-----+                navController = navController,
-----+                onNavigate = { route ->
-----+                    navController.navigate(route)
-----+                },
-----+                networkManager = networkManager
-----+            )
-----         }
----- 
-----         composable(Screen.QRScanner.route) {
-----@@ -126,7 +143,8 @@ fun NavGraph(
-----                 },
-----                 onNavigateBack = {
-----                     navController.popBackStack()
------                }
-----+                },
-----+                networkManager = networkManager
-----             )
-----         }
----- 
-----@@ -155,7 +173,8 @@ fun NavGraph(
-----                     } else {
-----                         navController.popBackStack()
-----                     }
------                }
-----+                },
-----+                networkManager = networkManager
-----             )
-----         }
----- 
-----@@ -164,7 +183,8 @@ fun NavGraph(
-----                 navController = navController,
-----                 onVehicleClick = { vehicleId ->
-----                     navController.navigate(Screen.VehicleProfile.route.replace("{vehicleId}", vehicleId))
------                }
-----+                },
-----+                networkManager = networkManager
-----             )
-----         }
----- 
-----@@ -184,7 +204,8 @@ fun NavGraph(
-----                 onScanQrCode = {
-----                     navController.navigate(Screen.QRScanner.route)
-----                 },
------                navController = navController
-----+                navController = navController,
-----+                networkManager = networkManager
-----             )
-----         }
----- 
-----@@ -204,7 +225,8 @@ fun NavGraph(
-----                 incidentType = incidentType,
-----                 onNavigateBack = { navController.popBackStack() },
-----                 viewModel = viewModel,
------                navController = navController
-----+                navController = navController,
-----+                networkManager = networkManager
-----             )
-----         }
----- 
-----@@ -213,14 +235,16 @@ fun NavGraph(
-----                 navController = navController,
-----                 onNavigateBack = { navController.navigateUp() },
-----                 onNavigateToIncidents = { navController.navigate(Screen.IncidentsHistory.route) },
------                onNavigateToCicoHistory = { navController.navigate(Screen.OperatorsCICOHistory.route) }
-----+                onNavigateToCicoHistory = { navController.navigate(Screen.OperatorsCICOHistory.route) },
-----+                networkManager = networkManager
-----             )
-----         }
----- 
-----         composable(Screen.OperatorsCICOHistory.route) {
-----             CicoHistoryScreen(
-----                 onNavigateBack = { navController.navigateUp() },
------                navController = navController
-----+                navController = navController,
-----+                networkManager = networkManager
-----             )
-----         }
----- 
-----@@ -230,13 +254,15 @@ fun NavGraph(
-----                 onNavigateToReport = {
-----                     //navController.navigate(Screen.IncidentReport.route)
-----                 },
------                navController = navController
-----+                navController = navController,
-----+                networkManager = networkManager
-----             )
-----         }
----- 
-----         composable(Screen.PerformanceReport.route) {
-----             PerformanceReportScreen(
------                navController = navController
-----+                navController = navController,
-----+                networkManager = networkManager
-----             )
-----         }
----- 
-----@@ -247,46 +273,26 @@ fun NavGraph(
-----             val incidentId = backStackEntry.arguments?.getString("incidentId") ?: return@composable
-----             IncidentDetailScreen(
-----                 incidentId = incidentId,
------                navController = navController
-----+                navController = navController,
-----+                networkManager = networkManager
-----             )
-----         }
----- 
------        composable(Screen.Tour.route) {
------            TourScreen(navController = navController)
------        }
------
------        composable("register") {
------            RegisterScreen(
------                navController = navController
-----+        composable(Screen.VehicleSessionList.route) {
-----+            VehicleSessionListScreen(
-----+                navController = navController,
-----+                onVehicleClick = { vehicleId ->
-----+                    navController.navigate(Screen.VehicleProfile.route.replace("{vehicleId}", vehicleId))
-----+                },
-----+                networkManager = networkManager
-----             )
-----         }
----- 
------        // Rutas protegidas para Admin
------        composable(Screen.AdminDashboard.route) {
------            val currentUser = viewModel.getCurrentUser()
------            PermissionGate(
------                user = currentUser,
------                requiredPermissions = Permissions.ADMIN_PERMISSIONS,
------                unauthorizedContent = { 
------                    UnauthorizedScreen()
------                }
------            ) {
------                AdminDashboardScreen()
------            }
------        }
------
------        // Rutas protegidas para Operator
------        composable(Screen.OperatorDashboard.route) {
------            val currentUser = viewModel.getCurrentUser()
------            PermissionGate(
------                user = currentUser,
------                requiredPermissions = Permissions.OPERATOR_PERMISSIONS,
------                unauthorizedContent = { 
------                    UnauthorizedScreen()
------                }
------            ) {
------                OperatorDashboardScreen()
------            }
-----+        composable(Screen.OperatorSessionList.route) {
-----+            OperatorSessionListScreen(
-----+                navController = navController,
-----+                networkManager = networkManager
-----+            )
-----         }
-----     }
----- }
-----\ No newline at end of file
-----diff --git a/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt b/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt
-----index 556167a..a194784 100644
-------- a/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt
-----@@ -26,6 +26,7 @@ import androidx.core.content.ContextCompat
----- import androidx.hilt.navigation.compose.hiltViewModel
----- import androidx.lifecycle.LifecycleOwner
----- import androidx.lifecycle.compose.collectAsStateWithLifecycle
-----+import app.forku.core.network.NetworkConnectivityManager
----- import com.google.accompanist.permissions.ExperimentalPermissionsApi
----- import com.google.accompanist.permissions.isGranted
----- import com.google.accompanist.permissions.rememberPermissionState
-----@@ -39,7 +40,8 @@ fun QRScannerScreen(
-----     onNavigateToPreShiftCheck: (String) -> Unit,
-----     onNavigateToVehicleProfile: (String) -> Unit,
-----     onNavigateBack: () -> Unit,
------    viewModel: QRScannerViewModel = hiltViewModel()
-----+    viewModel: QRScannerViewModel = hiltViewModel(),
-----+    networkManager: NetworkConnectivityManager
----- ) {
-----     val state by viewModel.state.collectAsStateWithLifecycle()
-----     val context = LocalContext.current
-----diff --git a/app/src/main/java/app/forku/presentation/tour/TourScreen.kt b/app/src/main/java/app/forku/presentation/tour/TourScreen.kt
-----index 2bfc4bc..5cdb21d 100644
-------- a/app/src/main/java/app/forku/presentation/tour/TourScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/tour/TourScreen.kt
-----@@ -16,8 +16,12 @@ import androidx.compose.ui.unit.dp
----- import androidx.hilt.navigation.compose.hiltViewModel
----- import androidx.navigation.NavController
----- import app.forku.R
-----+import app.forku.core.network.NetworkConnectivityManager
-----+import app.forku.presentation.common.components.BaseScreen
----- import app.forku.presentation.navigation.Screen
----- import kotlinx.coroutines.launch
-----+import androidx.compose.animation.*
-----+import androidx.compose.animation.core.*
----- 
----- data class TourPage(
-----     val title: String,
-----@@ -29,107 +33,122 @@ data class TourPage(
----- @Composable
----- fun TourScreen(
-----     navController: NavController,
------    viewModel: TourViewModel = hiltViewModel()
-----+    viewModel: TourViewModel = hiltViewModel(),
-----+    networkManager: NetworkConnectivityManager
----- ) {
------    val state by viewModel.state.collectAsState()
------    val scope = rememberCoroutineScope()
------    
------    val pages = listOf(
------        TourPage(
------            "Driver safety and team compliance on any device.",
------            "Learn why you're here.",
------            R.drawable.tour_1
------        ),
------        TourPage(
------            "Track compliance and safety in any workplace.",
------            "Reflections and goals",
------            R.drawable.tour_2
------        ),
------        TourPage(
------            "Track tasks with your team or while working solo.",
------            "Goals and Reflection",
------            R.drawable.tour_3
------        ),
------        TourPage(
------            "Follow your goals and find your motivation.",
------            "Register to begin",
------            R.drawable.tour_4
-----+    BaseScreen(
-----+        navController = navController,
-----+        showTopBar = false,
-----+        networkManager = networkManager
-----+    ) { padding ->
-----+        val state by viewModel.state.collectAsState()
-----+        val scope = rememberCoroutineScope()
-----+        
-----+        val pages = listOf(
-----+            TourPage(
-----+                "Driver safety and team compliance on any device.",
-----+                "Learn why you're here.",
-----+                R.drawable.tour_1
-----+            ),
-----+            TourPage(
-----+                "Track compliance and safety in any workplace.",
-----+                "Reflections and goals",
-----+                R.drawable.tour_2
-----+            ),
-----+            TourPage(
-----+                "Track tasks with your team or while working solo.",
-----+                "Goals and Reflection",
-----+                R.drawable.tour_3
-----+            ),
-----+            TourPage(
-----+                "Follow your goals and find your motivation.",
-----+                "Register to begin",
-----+                R.drawable.tour_4
-----+            )
-----         )
------    )
------
------    val pagerState = rememberPagerState(pageCount = { pages.size })
----- 
------    LaunchedEffect(pagerState.currentPage) {
------        viewModel.onEvent(TourEvent.NextPage)
------    }
-----+        val pagerState = rememberPagerState(pageCount = { pages.size })
----- 
------    Column(
------        modifier = Modifier
------            .fillMaxSize()
------            .background(MaterialTheme.colorScheme.background)
------    ) {
------        HorizontalPager(
------            state = pagerState,
------            modifier = Modifier
------                .weight(1f)
------                .fillMaxWidth()
------        ) { page ->
------            TourPage(pages[page])
-----+        LaunchedEffect(pagerState.currentPage) {
-----+            viewModel.onEvent(TourEvent.NextPage)
-----         }
----- 
------        // Page indicator
------        Row(
------            Modifier
------                .height(50.dp)
------                .fillMaxWidth(),
------            horizontalArrangement = Arrangement.Center,
------            verticalAlignment = Alignment.CenterVertically
-----+        Column(
-----+            modifier = Modifier
-----+                .fillMaxSize()
-----+                .background(MaterialTheme.colorScheme.background)
-----         ) {
------            repeat(pagerState.pageCount) { iteration ->
------                val color = if (pagerState.currentPage == iteration) {
------                    MaterialTheme.colorScheme.primary
------                } else {
------                    MaterialTheme.colorScheme.onBackground.copy(alpha = 0.5f)
------                }
------                Box(
------                    modifier = Modifier
------                        .padding(2.dp)
------                        .background(color, MaterialTheme.shapes.small)
------                        .size(8.dp)
------                )
-----+            HorizontalPager(
-----+                state = pagerState,
-----+                modifier = Modifier
-----+                    .weight(1f)
-----+                    .fillMaxWidth()
-----+            ) { page ->
-----+                TourPage(pages[page])
-----             }
------        }
----- 
------        // Buttons
------        Row(
------            modifier = Modifier
------                .fillMaxWidth()
------                .padding(16.dp),
------            horizontalArrangement = Arrangement.spacedBy(8.dp)
------        ) {
------            Button(
------                onClick = { 
------                    navController.navigate("register") {
------                        popUpTo("tour") { inclusive = true }
------                    }
------                },
------                modifier = Modifier.weight(1f)
-----+            // Page indicator
-----+            Row(
-----+                Modifier
-----+                    .height(50.dp)
-----+                    .fillMaxWidth(),
-----+                horizontalArrangement = Arrangement.Center,
-----+                verticalAlignment = Alignment.CenterVertically
-----             ) {
------                Text("Register")
------            }
------            
------            Button(
------                onClick = { 
------                    navController.navigate("login") {
------                        popUpTo("tour") { inclusive = true }
-----+                repeat(pagerState.pageCount) { iteration ->
-----+                    val color = if (pagerState.currentPage == iteration) {
-----+                        MaterialTheme.colorScheme.primary
-----+                    } else {
-----+                        MaterialTheme.colorScheme.onBackground.copy(alpha = 0.5f)
-----                     }
------                },
------                modifier = Modifier.weight(1f),
------                colors = ButtonDefaults.buttonColors(
------                    containerColor = MaterialTheme.colorScheme.secondary
------                )
-----+                    Box(
-----+                        modifier = Modifier
-----+                            .padding(2.dp)
-----+                            .background(color, MaterialTheme.shapes.small)
-----+                            .size(8.dp)
-----+                    )
-----+                }
-----+            }
-----+
-----+            // Buttons - only show when on the last page
-----+            AnimatedVisibility(
-----+                visible = pagerState.currentPage == pages.size - 1,
-----+                enter = fadeIn() + expandVertically(),
-----+                exit = fadeOut() + shrinkVertically()
-----             ) {
------                Text("Login")
-----+                Row(
-----+                    modifier = Modifier
-----+                        .fillMaxWidth()
-----+                        .padding(16.dp),
-----+                    horizontalArrangement = Arrangement.spacedBy(8.dp)
-----+                ) {
-----+                    Button(
-----+                        onClick = { 
-----+                            viewModel.onEvent(TourEvent.Register)
-----+                            navController.navigate(Screen.Register.route) {
-----+                                popUpTo(Screen.Tour.route) { inclusive = true }
-----+                            }
-----+                        },
-----+                        modifier = Modifier.weight(1f)
-----+                    ) {
-----+                        Text("Register")
-----+                    }
-----+                    
-----+                    Button(
-----+                        onClick = { 
-----+                            viewModel.onEvent(TourEvent.Login)
-----+                            navController.navigate(Screen.Login.route) {
-----+                                popUpTo(Screen.Tour.route) { inclusive = true }
-----+                            }
-----+                        },
-----+                        modifier = Modifier.weight(1f),
-----+                        colors = ButtonDefaults.buttonColors(
-----+                            containerColor = MaterialTheme.colorScheme.secondary
-----+                        )
-----+                    ) {
-----+                        Text("Login")
-----+                    }
-----+                }
-----             }
-----         }
-----     }
-----diff --git a/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt b/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt
-----index 6c851b9..92af767 100644
-------- a/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt
-----+++ b/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt
-----@@ -2,7 +2,7 @@ package app.forku.presentation.tour
----- 
----- import androidx.lifecycle.ViewModel
----- import androidx.lifecycle.viewModelScope
------import app.forku.data.local.TokenManager
-----+import app.forku.data.datastore.AuthDataStore
----- import app.forku.data.local.TourPreferences
----- import dagger.hilt.android.lifecycle.HiltViewModel
----- import kotlinx.coroutines.flow.MutableStateFlow
-----@@ -13,7 +13,7 @@ import javax.inject.Inject
----- 
----- @HiltViewModel
----- class TourViewModel @Inject constructor(
------    private val tokenManager: TokenManager,
-----+    private val authDataStore: AuthDataStore,
-----     private val tourPreferences: TourPreferences
----- ) : ViewModel() {
----- 
-----diff --git a/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryScreen.kt b/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryScreen.kt
-----index 080812a..0dfd262 100644
-------- a/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryScreen.kt
-----@@ -15,6 +15,7 @@ import androidx.lifecycle.compose.collectAsStateWithLifecycle
----- import app.forku.presentation.common.components.LoadingOverlay
----- import app.forku.presentation.common.components.ErrorScreen
----- import androidx.navigation.NavController
-----+import app.forku.core.network.NetworkConnectivityManager
----- import app.forku.presentation.common.components.BaseScreen
----- 
----- @OptIn(ExperimentalMaterial3Api::class)
-----@@ -22,7 +23,8 @@ import app.forku.presentation.common.components.BaseScreen
----- fun CicoHistoryScreen(
-----     viewModel: CicoHistoryViewModel = hiltViewModel(),
-----     onNavigateBack: () -> Unit,
------    navController: NavController
-----+    navController: NavController,
-----+    networkManager: NetworkConnectivityManager
----- ) {
-----     val state by viewModel.state.collectAsStateWithLifecycle()
----- 
-----@@ -49,7 +51,8 @@ fun CicoHistoryScreen(
-----                     }
-----                 }
-----             }
------        }
-----+        },
-----+        networkManager = networkManager
-----     )
----- }
----- 
-----diff --git a/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt b/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt
-----index c79467a..507d9d0 100644
-------- a/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt
-----@@ -13,21 +13,29 @@ import androidx.compose.ui.unit.dp
----- import androidx.compose.ui.unit.sp
----- import androidx.hilt.navigation.compose.hiltViewModel
----- import androidx.lifecycle.compose.collectAsStateWithLifecycle
-----+import app.forku.core.network.NetworkConnectivityManager
----- import app.forku.presentation.common.components.LoadingOverlay
-----+import app.forku.domain.model.user.User
-----+import app.forku.domain.model.user.UserRole
-----+import androidx.navigation.NavController
-----+import app.forku.presentation.navigation.Screen
-----+
----- 
----- @OptIn(ExperimentalMaterial3Api::class)
----- @Composable
----- fun LoginScreen(
-----     viewModel: LoginViewModel = hiltViewModel(),
------    onLoginSuccess: () -> Unit
-----+    onLoginSuccess: (User) -> Unit,
-----+    networkManager: NetworkConnectivityManager,
-----+    navController: NavController
----- ) {
------    var username by remember { mutableStateOf("") }
-----+    val state by viewModel.state.collectAsState()
-----+    var email by remember { mutableStateOf("") }
-----     var password by remember { mutableStateOf("") }
------    val state by viewModel.state.collectAsStateWithLifecycle()
----- 
-----     LaunchedEffect(state) {
-----         if (state is LoginState.Success) {
------            onLoginSuccess()
-----+            onLoginSuccess((state as LoginState.Success).user)
-----         }
-----     }
----- 
-----@@ -61,8 +69,8 @@ fun LoginScreen(
-----             Spacer(modifier = Modifier.height(32.dp))
----- 
-----             OutlinedTextField(
------                value = username,
------                onValueChange = { username = it },
-----+                value = email,
-----+                onValueChange = { email = it },
-----                 label = { Text("Phone or email") },
-----                 modifier = Modifier.fillMaxWidth(),
-----                 colors = OutlinedTextFieldDefaults.colors(
-----@@ -104,13 +112,13 @@ fun LoginScreen(
-----             Spacer(modifier = Modifier.height(24.dp))
----- 
-----             Button(
------                onClick = { viewModel.login(username, password) },
-----+                onClick = { viewModel.login(email, password) },
-----                 modifier = Modifier.fillMaxWidth(),
-----                 colors = ButtonDefaults.buttonColors(
-----                     containerColor = Color(0xFFFFA726),
-----                     contentColor = Color.Black
-----                 ),
------                enabled = username.isNotBlank() && password.isNotBlank() && state !is LoginState.Loading
-----+                enabled = email.isNotBlank() && password.isNotBlank() && state !is LoginState.Loading
-----             ) {
-----                 if (state is LoginState.Loading) {
-----                     CircularProgressIndicator(
-----@@ -121,6 +129,28 @@ fun LoginScreen(
-----                     Text("Log in")
-----                 }
-----             }
-----+
-----+            Spacer(modifier = Modifier.height(16.dp))
-----+
-----+            Row(
-----+                modifier = Modifier.fillMaxWidth(),
-----+                horizontalArrangement = Arrangement.Center,
-----+                verticalAlignment = Alignment.CenterVertically
-----+            ) {
-----+                Text(
-----+                    text = "Don't have an account? ",
-----+                    color = MaterialTheme.colorScheme.onBackground
-----+                )
-----+                TextButton(
-----+                    onClick = { navController.navigate(Screen.Register.route) },
-----+                    colors = ButtonDefaults.textButtonColors(
-----+                        contentColor = Color(0xFFFFA726)
-----+                    )
-----+                ) {
-----+                    Text("Register")
-----+                }
-----+            }
-----+
-----             Spacer(modifier = Modifier.height(24.dp))
-----         }
----- 
-----diff --git a/app/src/main/java/app/forku/presentation/user/login/LoginState.kt b/app/src/main/java/app/forku/presentation/user/login/LoginState.kt
-----index 2966f24..64b0c8e 100644
-------- a/app/src/main/java/app/forku/presentation/user/login/LoginState.kt
-----+++ b/app/src/main/java/app/forku/presentation/user/login/LoginState.kt
-----@@ -3,10 +3,9 @@ package app.forku.presentation.user.login
----- import app.forku.domain.model.user.User
----- 
----- sealed class LoginState {
------    data object Idle : LoginState()
-----     data object Initial : LoginState()
-----+    data object Idle : LoginState()
-----     data object Loading : LoginState()
-----     data class Success(val user: User) : LoginState()
-----     data class Error(val message: String) : LoginState()
------
----- }
-----diff --git a/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt b/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt
-----index b0a03c0..63b1f44 100644
-------- a/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt
-----+++ b/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt
-----@@ -8,7 +8,8 @@ import dagger.hilt.android.lifecycle.HiltViewModel
----- import javax.inject.Inject
----- import java.net.UnknownHostException
----- import java.net.SocketTimeoutException
------import app.forku.data.local.TokenManager
-----+import app.forku.data.datastore.AuthDataStore
-----+import app.forku.data.local.TourPreferences
----- import kotlinx.coroutines.flow.MutableStateFlow
----- import kotlinx.coroutines.flow.asStateFlow
----- import kotlinx.coroutines.launch
-----@@ -16,7 +17,8 @@ import kotlinx.coroutines.launch
----- @HiltViewModel
----- class LoginViewModel @Inject constructor(
-----     private val loginUseCase: LoginUseCase,
------    private val tokenManager: TokenManager
-----+    private val authDataStore: AuthDataStore,
-----+    private val tourPreferences: TourPreferences
----- ) : ViewModel() {
-----     private val _state = MutableStateFlow<LoginState>(LoginState.Idle)
-----     val state = _state.asStateFlow()
-----@@ -29,10 +31,8 @@ class LoginViewModel @Inject constructor(
----- 
-----                 val result = loginUseCase(sanitizedEmail, sanitizedPassword)
-----                 result.onSuccess { user ->
------                    tokenManager.saveToken(
------                        token = user.id,
------                        refreshToken = "temp_refresh_token"
------                    )
-----+                    authDataStore.setCurrentUser(user)
-----+                    tourPreferences.setTourCompleted()
-----                     _state.value = LoginState.Success(user)
-----                 }.onFailure { error ->
-----                     val errorMessage = when (error) {
-----@@ -55,7 +55,7 @@ class LoginViewModel @Inject constructor(
----- 
-----     fun logout() {
-----         viewModelScope.launch {
------            tokenManager.clearToken()
-----+            authDataStore.clearAuth()
-----             _state.value = LoginState.Idle
-----         }
-----     }
-----diff --git a/app/src/main/java/app/forku/presentation/user/profile/ProfileScreen.kt b/app/src/main/java/app/forku/presentation/user/profile/ProfileScreen.kt
-----index bc05dd9..8cb9827 100644
-------- a/app/src/main/java/app/forku/presentation/user/profile/ProfileScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/user/profile/ProfileScreen.kt
-----@@ -45,6 +45,7 @@ import app.forku.presentation.user.profile.components.ProfileSections
----- import app.forku.presentation.user.profile.components.StatsGrid
----- import coil.compose.AsyncImage
----- import androidx.navigation.NavController
-----+import app.forku.core.network.NetworkConnectivityManager
----- import app.forku.presentation.common.components.BaseScreen
----- import app.forku.presentation.navigation.Screen
----- 
-----@@ -55,7 +56,8 @@ fun ProfileScreen(
-----     onNavigateBack: () -> Unit,
-----     onNavigateToIncidents: () -> Unit,
-----     onNavigateToCicoHistory: () -> Unit,
------    navController: NavController
-----+    navController: NavController,
-----+    networkManager: NetworkConnectivityManager
----- ) {
-----     val state by viewModel.state.collectAsStateWithLifecycle()
-----     BaseScreen(
-----@@ -91,7 +93,8 @@ fun ProfileScreen(
-----                     )
-----                 }
-----             }
------        }
-----+        },
-----+        networkManager = networkManager
-----     )
----- }
----- 
-----@@ -175,7 +178,7 @@ private fun ProfileHeader(
-----                             color = Color.Gray
-----                         )
-----                         Text(
------                            text = state.user?.name ?: "",
-----+                            text = state.user?.fullName ?: "",
-----                             style = MaterialTheme.typography.titleLarge
-----                         )
-----                         Spacer(modifier = Modifier.height(8.dp))
-----diff --git a/app/src/main/java/app/forku/presentation/user/register/RegisterScreen.kt b/app/src/main/java/app/forku/presentation/user/register/RegisterScreen.kt
-----index c49528f..efb9a72 100644
-------- a/app/src/main/java/app/forku/presentation/user/register/RegisterScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/user/register/RegisterScreen.kt
-----@@ -23,13 +23,16 @@ import androidx.compose.ui.text.input.VisualTransformation
----- import androidx.compose.ui.unit.dp
----- import androidx.hilt.navigation.compose.hiltViewModel
----- import androidx.navigation.NavController
-----+import app.forku.core.network.NetworkConnectivityManager
----- import app.forku.presentation.common.components.LoadingScreen
----- import app.forku.presentation.navigation.Screen
----- 
-----+
----- @Composable
----- fun RegisterScreen(
-----     navController: NavController,
------    viewModel: RegisterViewModel = hiltViewModel()
-----+    viewModel: RegisterViewModel = hiltViewModel(),
-----+    networkManager: NetworkConnectivityManager
----- ) {
-----     val state by viewModel.state.collectAsState()
-----     val focusManager = LocalFocusManager.current
-----diff --git a/app/src/main/java/app/forku/presentation/vehicle/components/VehicleQrCodeModal.kt b/app/src/main/java/app/forku/presentation/vehicle/components/VehicleQrCodeModal.kt
-----index 8f755e7..8a4db90 100644
-------- a/app/src/main/java/app/forku/presentation/vehicle/components/VehicleQrCodeModal.kt
-----+++ b/app/src/main/java/app/forku/presentation/vehicle/components/VehicleQrCodeModal.kt
-----@@ -1,10 +1,13 @@
----- package app.forku.presentation.vehicle.components
----- 
----- import androidx.compose.foundation.layout.*
-----+import androidx.compose.material.icons.Icons
-----+import androidx.compose.material.icons.filled.Share
----- import androidx.compose.material3.*
----- import androidx.compose.runtime.Composable
----- import androidx.compose.ui.Alignment
----- import androidx.compose.ui.Modifier
-----+import androidx.compose.ui.platform.LocalContext
----- import androidx.compose.ui.unit.dp
----- import app.forku.presentation.common.components.AppModal
----- 
-----@@ -12,6 +15,7 @@ import app.forku.presentation.common.components.AppModal
----- fun VehicleQrCodeModal(
-----     vehicleId: String,
-----     onDismiss: () -> Unit,
-----+    onShare: () -> Unit,
-----     modifier: Modifier = Modifier.size(256.dp)
----- ) {
-----     AppModal(
-----@@ -31,6 +35,20 @@ fun VehicleQrCodeModal(
-----                     modifier = Modifier.size(256.dp)
-----                 )
-----                 Spacer(modifier = Modifier.height(16.dp))
-----+                Button(
-----+                    onClick = onShare,
-----+                    colors = ButtonDefaults.buttonColors(
-----+                        containerColor = MaterialTheme.colorScheme.secondary
-----+                    )
-----+                ) {
-----+                    Icon(
-----+                        imageVector = Icons.Default.Share,
-----+                        contentDescription = "Share QR Code",
-----+                        modifier = Modifier.size(18.dp)
-----+                    )
-----+                    Spacer(modifier = Modifier.width(8.dp))
-----+                    Text("Share QR Code")
-----+                }
-----             }
-----         }
-----     )
-----diff --git a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListScreen.kt b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListScreen.kt
-----index 2299b6f..53a8a6d 100644
-------- a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListScreen.kt
-----@@ -25,13 +25,15 @@ import androidx.compose.material.ExperimentalMaterialApi
----- import androidx.compose.material.pullrefresh.PullRefreshIndicator
----- import androidx.compose.material.pullrefresh.pullRefresh
----- import androidx.compose.material.pullrefresh.rememberPullRefreshState
-----+import app.forku.core.network.NetworkConnectivityManager
----- 
----- @OptIn(ExperimentalMaterialApi::class)
----- @Composable
----- fun VehicleListScreen(
-----     navController: NavController,
-----     viewModel: VehicleListViewModel = hiltViewModel(),
------    onVehicleClick: (String) -> Unit
-----+    onVehicleClick: (String) -> Unit,
-----+    networkManager: NetworkConnectivityManager
----- ) {
-----     val state by viewModel.state.collectAsStateWithLifecycle()
-----     
-----@@ -46,7 +48,8 @@ fun VehicleListScreen(
-----         topBarTitle = "Vehicles",
-----         showBottomBar = true,
-----         onRefresh = { viewModel.loadVehicles(true) },
------        showLoadingOnRefresh = false
-----+        showLoadingOnRefresh = false,
-----+        networkManager = networkManager
-----     ) { padding ->
-----         Box(
-----             modifier = Modifier
-----diff --git a/app/src/main/java/app/forku/presentation/vehicle/manual/PerformanceReportScreen.kt b/app/src/main/java/app/forku/presentation/vehicle/manual/PerformanceReportScreen.kt
-----index 48fb55b..b9de615 100644
-------- a/app/src/main/java/app/forku/presentation/vehicle/manual/PerformanceReportScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/vehicle/manual/PerformanceReportScreen.kt
-----@@ -7,12 +7,14 @@ import androidx.compose.runtime.Composable
----- import androidx.compose.ui.Modifier
----- import androidx.compose.ui.viewinterop.AndroidView
----- import androidx.navigation.NavController
-----+import app.forku.core.network.NetworkConnectivityManager
----- import app.forku.presentation.common.components.BaseScreen
----- 
----- @Composable
----- fun PerformanceReportScreen(
-----     navController: NavController,
------    pdfUrl: String = "https://drive.google.com/file/d/1UXNMsRFqJH4fPfjtDvbvX-N57tGu-uUJ/preview"
-----+    pdfUrl: String = "https://drive.google.com/file/d/1UXNMsRFqJH4fPfjtDvbvX-N57tGu-uUJ/preview",
-----+    networkManager: NetworkConnectivityManager
----- ) {
-----     BaseScreen(
-----         navController = navController,
-----@@ -29,6 +31,7 @@ fun PerformanceReportScreen(
-----                 },
-----                 modifier = Modifier.fillMaxSize()
-----             )
------        }
-----+        },
-----+        networkManager = networkManager
-----     )
----- } 
-----\ No newline at end of file
-----diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
-----index de8a1e0..5f06274 100644
-------- a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
-----+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
-----@@ -23,6 +23,7 @@ import androidx.hilt.navigation.compose.hiltViewModel
----- import app.forku.domain.model.vehicle.VehicleStatus
----- import app.forku.presentation.vehicle.profile.components.VehicleProfileSummary
----- import androidx.navigation.NavController
-----+import app.forku.core.network.NetworkConnectivityManager
----- 
----- 
----- @OptIn(ExperimentalMaterial3Api::class)
-----@@ -33,7 +34,8 @@ fun VehicleProfileScreen(
-----     onNavigateBack: () -> Unit,
-----     onPreShiftCheck: (String) -> Unit,
-----     onScanQrCode: () -> Unit,
------    navController: NavController
-----+    navController: NavController,
-----+    networkManager: NetworkConnectivityManager
----- ) {
-----     val state by viewModel.state.collectAsStateWithLifecycle()
-----     var showMenu by remember { mutableStateOf(false) }
-----@@ -149,7 +151,8 @@ fun VehicleProfileScreen(
-----                         if (state.showQrCode) {
-----                             VehicleQrCodeModal(
-----                                 vehicleId = vehicle.id,
------                                onDismiss = viewModel::toggleQrCode
-----+                                onDismiss = viewModel::toggleQrCode,
-----+                                onShare = viewModel::shareQrCode
-----                             )
-----                         }
----- 
-----diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt
-----index 9eee7cc..25bfabc 100644
-------- a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt
-----+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt
-----@@ -1,5 +1,10 @@
----- package app.forku.presentation.vehicle.profile
----- 
-----+import android.content.Context
-----+import android.content.Intent
-----+import android.graphics.Bitmap
-----+import android.net.Uri
-----+import androidx.core.content.FileProvider
----- import androidx.lifecycle.SavedStateHandle
----- import androidx.lifecycle.ViewModel
----- import androidx.lifecycle.viewModelScope
-----@@ -9,6 +14,7 @@ import app.forku.domain.repository.vehicle.VehicleRepository
----- import app.forku.domain.usecase.vehicle.GetVehicleUseCase
----- import app.forku.domain.model.session.SessionStatus
----- import dagger.hilt.android.lifecycle.HiltViewModel
-----+import dagger.hilt.android.qualifiers.ApplicationContext
----- import kotlinx.coroutines.flow.MutableStateFlow
----- import kotlinx.coroutines.flow.asStateFlow
----- import kotlinx.coroutines.flow.update
-----@@ -21,7 +27,9 @@ import app.forku.domain.repository.checklist.ChecklistRepository
----- import app.forku.domain.model.vehicle.getErrorMessage
----- import app.forku.domain.model.vehicle.isAvailable
----- import app.forku.domain.repository.user.UserRepository
------
-----+import app.forku.presentation.vehicle.components.QrCodeGenerator
-----+import java.io.File
-----+import java.io.FileOutputStream
----- 
----- @HiltViewModel
----- class VehicleProfileViewModel @Inject constructor(
-----@@ -32,7 +40,8 @@ class VehicleProfileViewModel @Inject constructor(
-----     private val getVehicleStatusUseCase: GetVehicleStatusUseCase,
-----     private val checklistRepository: ChecklistRepository,
-----     private val userRepository: UserRepository,
------    savedStateHandle: SavedStateHandle
-----+    savedStateHandle: SavedStateHandle,
-----+    @ApplicationContext private val context: Context
----- ) : ViewModel() {
-----     private val _state = MutableStateFlow(VehicleProfileState())
-----     val state = _state.asStateFlow()
-----@@ -109,6 +118,50 @@ class VehicleProfileViewModel @Inject constructor(
-----         _state.update { it.copy(showQrCode = !it.showQrCode) }
-----     }
----- 
-----+    fun shareQrCode() {
-----+        viewModelScope.launch {
-----+            try {
-----+                state.value.vehicle?.let { vehicle ->
-----+                    // Generate QR code bitmap
-----+                    val qrBitmap = QrCodeGenerator.generateVehicleQrCode(vehicle.id)
-----+                    
-----+                    // Save bitmap to temporary file
-----+                    val cachePath = File(context.cacheDir, "qr_codes")
-----+                    cachePath.mkdirs()
-----+                    
-----+                    val file = File(cachePath, "vehicle_qr_${vehicle.id}.png")
-----+                    FileOutputStream(file).use { out ->
-----+                        qrBitmap.compress(Bitmap.CompressFormat.PNG, 100, out)
-----+                    }
-----+                    
-----+                    // Get content URI using FileProvider
-----+                    val contentUri = FileProvider.getUriForFile(
-----+                        context,
-----+                        "${context.packageName}.fileprovider",
-----+                        file
-----+                    )
-----+                    
-----+                    // Create share intent
-----+                    val shareIntent = Intent(Intent.ACTION_SEND).apply {
-----+                        type = "image/png"
-----+                        putExtra(Intent.EXTRA_STREAM, contentUri)
-----+                        putExtra(Intent.EXTRA_SUBJECT, "Vehicle QR Code")
-----+                        putExtra(Intent.EXTRA_TEXT, "Scan this QR code to access vehicle information")
-----+                        addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
-----+                    }
-----+                    
-----+                    // Start share activity
-----+                    val chooserIntent = Intent.createChooser(shareIntent, "Share QR Code")
-----+                    chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
-----+                    context.startActivity(chooserIntent)
-----+                }
-----+            } catch (e: Exception) {
-----+                // Handle error
-----+                _state.update { it.copy(error = "Error sharing QR code: ${e.message}") }
-----+            }
-----+        }
-----+    }
-----+
-----     fun startSessionFromCheck() {
-----         viewModelScope.launch {
-----             try {
-----diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
-----index 0644154..8b0d38d 100644
-------- a/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
-----+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
-----@@ -200,7 +200,7 @@ fun VehicleDetailsSection(
-----                 ) {
-----                     activeOperator?.role?.let {
-----                         OperatorProfile(
------                            name = activeOperator?.name ?: "No operator assigned",
-----+                            name = activeOperator?.fullName ?: "No operator assigned",
-----                             imageUrl = activeOperator.photoUrl,
-----                             modifier = Modifier.padding(0.dp, 8.dp),
-----                             role = it.name
-----diff --git a/app/src/main/res/xml/file_paths.xml b/app/src/main/res/xml/file_paths.xml
-----index fcbcd7a..3720d23 100644
-------- a/app/src/main/res/xml/file_paths.xml
-----+++ b/app/src/main/res/xml/file_paths.xml
-----@@ -6,4 +6,7 @@
-----     <external-cache-path
-----         name="external_cached_photos"
-----         path="." />
-----+    <cache-path
-----+        name="qr_codes"
-----+        path="qr_codes/"/>
----- </paths>
-----\ No newline at end of file
-----diff --git a/build.gradle.kts b/build.gradle.kts
-----index 221d560..d3c4b1b 100644
-------- a/build.gradle.kts
-----+++ b/build.gradle.kts
-----@@ -1,7 +1,12 @@
----- // Top-level build file where you can add configuration options common to all sub-projects/modules.
-----+@Suppress("DSL_SCOPE_VIOLATION") // Remove when fixed https://youtrack.jetbrains.com/issue/KTIJ-19369
----- plugins {
-----     alias(libs.plugins.android.application) apply false
-----     alias(libs.plugins.kotlin.android) apply false
-----     alias(libs.plugins.hilt.android) apply false
-----     alias(libs.plugins.kotlin.ksp) apply false
------}
-----\ No newline at end of file
-----+    alias(libs.plugins.kotlin.serialization) apply false
-----+    alias(libs.plugins.google.services) apply false
-----+}
-----+
-----+true // Needed to make the Suppress annotation work for the plugins block
-----\ No newline at end of file
-----diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
-----index 6e81f17..6b24877 100644
-------- a/gradle/libs.versions.toml
-----+++ b/gradle/libs.versions.toml
-----@@ -6,6 +6,10 @@ kotlinxSerialization = "1.6.0"
----- ksp = "1.9.22-1.0.17"
----- location = "21.0.1"
----- 
-----+# Firebase
-----+firebase-bom = "32.7.2"
-----+google-services = "4.4.1"
-----+
----- # Core Android libraries
----- core-ktx = "1.12.0"
----- appcompat = "1.6.1"
-----@@ -127,10 +131,19 @@ kotlin-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-j
----- androidx-compose-material-icons-core = { group = "androidx.compose.material", name = "material-icons-core", version.ref = "compose-material" }
----- androidx-compose-material-icons-extended = { group = "androidx.compose.material", name = "material-icons-extended", version.ref = "compose-material" }
----- 
-----+# Firebase
-----+firebase-bom = { group = "com.google.firebase", name = "firebase-bom", version.ref = "firebase-bom" }
-----+firebase-analytics = { group = "com.google.firebase", name = "firebase-analytics" }
-----+firebase-auth = { group = "com.google.firebase", name = "firebase-auth" }
-----+firebase-firestore = { group = "com.google.firebase", name = "firebase-firestore" }
-----+firebase-storage = { group = "com.google.firebase", name = "firebase-storage" }
-----+firebase-messaging = { group = "com.google.firebase", name = "firebase-messaging" }
-----+
----- 
----- [plugins]
----- android-application = { id = "com.android.application", version.ref = "agp" }
----- kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
----- hilt-android = { id = "com.google.dagger.hilt.android", version.ref = "hilt" }
----- kotlin-ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
------kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
-----\ No newline at end of file
-----+kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
-----+google-services = { id = "com.google.gms.google-services", version.ref = "google-services" }
-----\ No newline at end of file
