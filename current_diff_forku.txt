diff --git a/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt
index da4487b..ade55de 100644
--- a/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt
+++ b/app/src/main/java/app/forku/data/repository/checklist/ChecklistRepositoryImpl.kt
@@ -186,14 +186,14 @@ class ChecklistRepositoryImpl @Inject constructor(
     override suspend fun createGlobalCheck(check: PreShiftCheck): PreShiftCheck {
         val dto = check.toDto()
         val response = api.createGlobalCheck(dto)
-        if (!response.isSuccessful) throw Exception("Failed to save global check")
+        if (!response.isSuccessful) throw Exception("Failed to save global checklist")
         return response.body()?.toDomain() ?: throw Exception("Failed to save global check: Empty response")
     }
 
     override suspend fun updateGlobalCheck(checkId: String, check: PreShiftCheck): PreShiftCheck {
         val dto = check.toDto()
         val response = api.updateGlobalCheck(checkId, dto)
-        if (!response.isSuccessful) throw Exception("Failed to update global check")
+        if (!response.isSuccessful) throw Exception("Failed to update global checklist")
         return response.body()?.toDomain() ?: throw Exception("Failed to update global check: Empty response")
     }
 
diff --git a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
index d126b87..ed2879e 100644
--- a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
+++ b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
@@ -130,7 +130,7 @@ fun ChecklistScreen(
         showTopBar = true,
         showBottomBar = false,
         viewModel = viewModel,
-        topBarTitle = "Pre-Shift Check",
+        topBarTitle = "Pre-Shift Checklist",
         networkManager = networkManager,
         onRefresh = { viewModel.loadChecklistData() },
         content = { padding ->
diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
index bfc7034..d36fff1 100644
--- a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
@@ -455,13 +455,13 @@ private fun DashboardNavigationButtons(
                     imageVector = if (hasActiveSession) Icons.Default.Close else Icons.Default.QrCodeScanner,
                     contentDescription = null,
                     tint = MaterialTheme.colorScheme.primary.copy(alpha = iconAlpha.coerceIn(0f, 1f)),
-                    modifier = Modifier.size(28.dp)
+                    modifier = Modifier.size(36.dp)
                 )
                 Spacer(modifier = Modifier.height(2.dp))
                 Text(
                     text = if (hasActiveSession) "Check Out" else "Check In",
                     style = MaterialTheme.typography.labelSmall.copy(
-                        fontSize = 10.sp
+                        fontSize = 16.sp
                     ),
                     color = MaterialTheme.colorScheme.primary.copy(alpha = iconAlpha.coerceIn(0f, 1f))
                 )
diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
index 4a01a84..fa4ed2d 100644
--- a/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardViewModel.kt
@@ -161,11 +161,11 @@ class DashboardViewModel @Inject constructor(
                 getVehicleUseCase(it.vehicleId)
             }
             
-            android.util.Log.d("DashboardViewModel", "Getting last pre-shift check")
+            android.util.Log.d("DashboardViewModel", "Getting last pre-shift checklist")
             val lastPreShiftCheck = try {
                 getLastPreShiftCheckCurrentUserUseCase()
             } catch (e: Exception) {
-                android.util.Log.e("DashboardViewModel", "Error getting last pre-shift check", e)
+                android.util.Log.e("DashboardViewModel", "Error getting last pre-shift checklist", e)
                 null
             }
             
diff --git a/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt b/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
index d2c3471..7e68bd3 100644
--- a/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
+++ b/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
@@ -183,7 +183,7 @@ private fun SessionContent(
                             ) {
                                 Row {
                                     Text(
-                                        text = "Last Check",
+                                        text = "Checklist",
                                         style = MaterialTheme.typography.bodySmall.copy(
                                             fontSize = 11.sp
                                         )
diff --git a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
index 75f4e82..441cc9d 100644
--- a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
+++ b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
@@ -216,7 +216,7 @@ class IncidentReportViewModel @Inject constructor(
                 }
                 hasLoadedChecks = true
             } catch (e: Exception) {
-                _state.update { it.copy(error = "Failed to load preshift check") }
+                _state.update { it.copy(error = "Failed to load preshift checklist") }
             }
         }
     }
diff --git a/app/src/main/java/app/forku/presentation/incident/components/VehicleInfoSection.kt b/app/src/main/java/app/forku/presentation/incident/components/VehicleInfoSection.kt
index 060ba24..1bdf118 100644
--- a/app/src/main/java/app/forku/presentation/incident/components/VehicleInfoSection.kt
+++ b/app/src/main/java/app/forku/presentation/incident/components/VehicleInfoSection.kt
@@ -93,7 +93,7 @@ fun VehicleInfoSection(
         CustomOutlinedTextField(
             value = state.lastPreshiftCheck?.let { getRelativeTimeSpanFromDateTime(it) } ?: "No preshift check recorded",
             onValueChange = { /* Read-only */ },
-            label = "Last Check",
+            label = "Checklist",
             enabled = false,
             modifier = Modifier
                 .fillMaxWidth()
diff --git a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleItem.kt b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleItem.kt
index 919fa27..2026e1b 100644
--- a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleItem.kt
+++ b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleItem.kt
@@ -208,7 +208,7 @@ fun VehicleItem(
                         modifier = Modifier.padding(top = 1.dp)
                     ) {
                         Text(
-                            text = "Last Check: ",
+                            text = "Checklist: ",
                             style = TextStyle(
                                 fontSize = textConfigs.preshiftCheck.fontSize.sp,
                                 lineHeight = textConfigs.preshiftCheck.lineHeight.sp,
diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
index f152051..cfe53d3 100644
--- a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
@@ -184,7 +184,7 @@ fun VehicleProfileScreen(
 
                                 // Options available to all users
                                 add(DropdownMenuOption(
-                                    text = if (state.hasActivePreShiftCheck) "Continue Pre-Shift Check" else "Start Pre-Shift Check",
+                                    text = if (state.hasActivePreShiftCheck) "Continue Checklist" else "Start Checklist",
                                     onClick = { onPreShiftCheck(vehicle?.id ?: "") },
                                     leadingIcon = Icons.Default.CheckCircle,
                                     enabled = vehicle?.status == VehicleStatus.AVAILABLE && !state.hasActiveSession
diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
index 7b88430..c26e91d 100644
--- a/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
@@ -277,7 +277,7 @@ fun VehicleDetailsSection(
                 Row {
                     Column {
                         Text(
-                            text = "Last Check ",
+                            text = "Checklist ",
                             color = Color.Gray,
                             fontSize = 12.sp
                         )
diff --git a/current_diff_forku.txt b/current_diff_forku.txt
index 15174cb..8167669 100644
--- a/current_diff_forku.txt
+++ b/current_diff_forku.txt
@@ -1,3954 +0,0 @@
-diff --git a/.cursorrules b/.cursorrules
-index f6b91ae..1b078fe 100644
---- a/.cursorrules
-+++ b/.cursorrules
-@@ -9,8 +9,8 @@ Could you provide a structured summary of our work session today? Please include
-    - Initial complexity assessment (Low/Medium/High)
- 
- 3. Time & Value Analysis:
--   - Time spent with AI assistance and multiply by 8: [X] minutes/hours
--   - Estimated traditional development and multiply by 8: [X] minutes/hours
-+   - Time spent with AI assistance: [X] minutes/hours
-+   - Estimated traditional development: [X] minutes/hours
-    - Key factors in time savings:
-      • [Specific ways AI accelerated the work]
-      • [Tools or approaches that were particularly effective]
-diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
-index 4178654..96e11f5 100644
---- a/.idea/deploymentTargetSelector.xml
-+++ b/.idea/deploymentTargetSelector.xml
-@@ -4,7 +4,7 @@
-     <selectionStates>
-       <SelectionState runConfigName="app">
-         <option name="selectionMode" value="DROPDOWN" />
--        <DropdownSelection timestamp="2025-03-09T03:11:00.924348Z">
-+        <DropdownSelection timestamp="2025-03-12T20:10:44.969999Z">
-           <Target type="DEFAULT_BOOT">
-             <handle>
-               <DeviceId pluginId="PhysicalDevice" identifier="serial=R58T127FYWT" />
-diff --git a/app/build.gradle.kts b/app/build.gradle.kts
-index 99013c4..c3a3079 100644
---- a/app/build.gradle.kts
-+++ b/app/build.gradle.kts
-@@ -8,6 +8,7 @@ plugins {
-     alias(libs.plugins.hilt.android)
-     alias(libs.plugins.kotlin.ksp)
-     alias(libs.plugins.kotlin.serialization)
-+    alias(libs.plugins.google.services)
-     kotlin("kapt")
- }
- 
-@@ -29,6 +30,10 @@ android {
-             useSupportLibrary = true
-         }
- 
-+        ndk {
-+            abiFilters += listOf("arm64-v8a", "armeabi-v7a", "x86_64", "x86")
-+        }
-+
-         ksp {
-             arg("room.schemaLocation", "$projectDir/schemas")
-         }
-@@ -171,4 +176,8 @@ dependencies {
-     implementation(libs.androidx.compose.material.icons.core)
-     implementation(libs.androidx.compose.material.icons.extended)
- 
-+    // Firebase
-+    implementation(platform(libs.firebase.bom))
-+    implementation(libs.firebase.analytics)
-+    implementation(libs.firebase.messaging)
- }
-\ No newline at end of file
-diff --git a/app/google-services.json b/app/google-services.json
-new file mode 100644
-index 0000000..bd43030
---- /dev/null
-+++ b/app/google-services.json
-@@ -0,0 +1,29 @@
-+{
-+  "project_info": {
-+    "project_number": "238145798774",
-+    "project_id": "forku-1800d",
-+    "storage_bucket": "forku-1800d.firebasestorage.app"
-+  },
-+  "client": [
-+    {
-+      "client_info": {
-+        "mobilesdk_app_id": "1:238145798774:android:f68955833a23698cbc1557",
-+        "android_client_info": {
-+          "package_name": "app.forku"
-+        }
-+      },
-+      "oauth_client": [],
-+      "api_key": [
-+        {
-+          "current_key": "AIzaSyDENsT7S-iAo5fm2o64F3S5YTi5LXwaXQ4"
-+        }
-+      ],
-+      "services": {
-+        "appinvite_service": {
-+          "other_platform_oauth_client": []
-+        }
-+      }
-+    }
-+  ],
-+  "configuration_version": "1"
-+}
-\ No newline at end of file
-diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
-index 741ebff..7503870 100644
---- a/app/src/main/AndroidManifest.xml
-+++ b/app/src/main/AndroidManifest.xml
-@@ -18,6 +18,7 @@
- 
-     <application
-         android:name=".ForkUApplication"
-+        android:enableOnBackInvokedCallback="true"
-         android:allowBackup="true"
-         android:dataExtractionRules="@xml/data_extraction_rules"
-         android:fullBackupContent="@xml/backup_rules"
-@@ -51,6 +52,14 @@
-                 android:resource="@xml/file_paths" />
-         </provider>
- 
-+        <service
-+            android:name=".core.notification.ForkUMessagingService"
-+            android:exported="false">
-+            <intent-filter>
-+                <action android:name="com.google.firebase.MESSAGING_EVENT" />
-+            </intent-filter>
-+        </service>
-+
-     </application>
- 
- </manifest>
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/ForkUApplication.kt b/app/src/main/java/app/forku/ForkUApplication.kt
-index 6bfa0ce..1f1d635 100644
---- a/app/src/main/java/app/forku/ForkUApplication.kt
-+++ b/app/src/main/java/app/forku/ForkUApplication.kt
-@@ -7,6 +7,7 @@ import kotlinx.coroutines.CoroutineScope
- import kotlinx.coroutines.Dispatchers
- import kotlinx.coroutines.launch
- import javax.inject.Inject
-+import com.google.firebase.FirebaseApp
- 
- @HiltAndroidApp
- class ForkUApplication : Application() {
-@@ -15,6 +16,13 @@ class ForkUApplication : Application() {
- 
-     override fun onCreate() {
-         super.onCreate()
-+        
-+        // Initialize Firebase first
-+        if (FirebaseApp.getApps(this).isEmpty()) {
-+            FirebaseApp.initializeApp(this)
-+        }
-+        
-+        // Then initialize other components
-         initializeAuth()
-     }
- 
-diff --git a/app/src/main/java/app/forku/MainActivity.kt b/app/src/main/java/app/forku/MainActivity.kt
-index a36874f..11eff28 100644
---- a/app/src/main/java/app/forku/MainActivity.kt
-+++ b/app/src/main/java/app/forku/MainActivity.kt
-@@ -5,9 +5,13 @@ import android.widget.Toast
- import androidx.activity.ComponentActivity
- import androidx.activity.compose.setContent
- import androidx.activity.viewModels
-+import androidx.compose.foundation.layout.fillMaxSize
-+import androidx.compose.material3.MaterialTheme
-+import androidx.compose.material3.Surface
- import androidx.compose.runtime.collectAsState
- import androidx.compose.runtime.getValue
--import app.forku.data.local.TokenManager
-+import androidx.compose.ui.Modifier
-+import app.forku.data.datastore.AuthDataStore
- import app.forku.data.local.TourPreferences
- import app.forku.presentation.user.login.LoginState
- import app.forku.presentation.user.login.LoginViewModel
-@@ -21,15 +25,21 @@ import javax.inject.Inject
- import android.view.View
- import androidx.compose.ui.graphics.toArgb
- import app.forku.presentation.common.theme.BackgroundGray
-+import androidx.lifecycle.lifecycleScope
-+import app.forku.core.network.NetworkConnectivityManager
-+import kotlinx.coroutines.launch
- 
- @AndroidEntryPoint
- class MainActivity : ComponentActivity() {
-     @Inject
--    lateinit var tokenManager: TokenManager
-+    lateinit var authDataStore: AuthDataStore
- 
-     @Inject
-     lateinit var tourPreferences: TourPreferences
- 
-+    @Inject
-+    lateinit var networkManager: NetworkConnectivityManager
-+
-     private val loginViewModel: LoginViewModel by viewModels()
- 
-     override fun onCreate(savedInstanceState: Bundle?) {
-@@ -39,9 +49,15 @@ class MainActivity : ComponentActivity() {
-                 View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR
- 
-         super.onCreate(savedInstanceState)
-+        
-+        // Inicializar el token al inicio
-+        lifecycleScope.launch {
-+            authDataStore.initializeToken()
-+        }
-+
-         setContent {
-             val loginState by loginViewModel.state.collectAsState()
--            val hasToken = tokenManager.getToken() != null
-+            val hasToken = authDataStore.getToken() != null
-             val tourCompleted = tourPreferences.hasTourCompleted()
- 
-             ForkUTheme {
-@@ -61,7 +77,8 @@ class MainActivity : ComponentActivity() {
-                                 !tourCompleted -> Screen.Tour.route
-                                 loginState is LoginState.Success || hasToken -> Screen.Dashboard.route
-                                 else -> Screen.Login.route
--                            }
-+                            },
-+                            networkManager = networkManager
-                         )
-                     }
-                 }
-diff --git a/app/src/main/java/app/forku/core/Constants.kt b/app/src/main/java/app/forku/core/Constants.kt
-index 3b5bd8e..49b7af7 100644
---- a/app/src/main/java/app/forku/core/Constants.kt
-+++ b/app/src/main/java/app/forku/core/Constants.kt
-@@ -1,8 +1,8 @@
- package app.forku.core
- 
- object Constants {
--    const val BASE_URL = "https://67ce79d2125cd5af757aa258.mockapi.io/forku/api/v2/" //Dev
--    //const val BASE_URL = "https://67b8faf351192bd378dc5bdf.mockapi.io/forku/api/v1/" //Test
-+    //const val BASE_URL = "https://67ce79d2125cd5af757aa258.mockapi.io/forku/api/v2/" //Test
-+    const val BASE_URL = "https://67d20f4190e0670699bc531f.mockapi.io/forku/api/dev/" //Dev
-     const val API_VERSION = "v1"
- 
- }
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/core/location/LocationManager.kt b/app/src/main/java/app/forku/core/location/LocationManager.kt
-index 86fffd9..a63c9b8 100644
---- a/app/src/main/java/app/forku/core/location/LocationManager.kt
-+++ b/app/src/main/java/app/forku/core/location/LocationManager.kt
-@@ -143,4 +143,39 @@ class LocationManager @Inject constructor(
-     fun clearError() {
-         _locationState.update { it.copy(error = null) }
-     }
-+
-+    fun startLocationUpdates() {
-+        coroutineScope.launch {
-+            try {
-+                val locationRequest = LocationRequest.Builder(10000)
-+                    .setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY)
-+                    .setMinUpdateIntervalMillis(5000)
-+                    .build()
-+
-+                requestLocationSettings()
-+            } catch (e: SecurityException) {
-+                _locationState.update { it.copy(
-+                    error = "Location permission error",
-+                    hasLocationPermission = false
-+                )}
-+            }
-+        }
-+    }
-+
-+    fun requestSingleUpdate() {
-+        try {
-+            val locationRequest = LocationRequest.Builder(10000)
-+                .setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY)
-+                .setMinUpdateIntervalMillis(5000)
-+                .setMaxUpdateDelayMillis(10000)
-+                .build()
-+
-+            requestLocation(locationRequest)
-+        } catch (e: SecurityException) {
-+            _locationState.update { it.copy(
-+                error = "Location permission error",
-+                hasLocationPermission = false
-+            )}
-+        }
-+    }
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/data/api/dto/incident/IncidentDto.kt b/app/src/main/java/app/forku/data/api/dto/incident/IncidentDto.kt
-index 34b49bb..5f24239 100644
---- a/app/src/main/java/app/forku/data/api/dto/incident/IncidentDto.kt
-+++ b/app/src/main/java/app/forku/data/api/dto/incident/IncidentDto.kt
-@@ -29,7 +29,6 @@ data class IncidentDto(
-     val loadWeight: String?,
-     
-     // People involved
--    val operatorId: String?,
-     val othersInvolved: List<String>,
-     val injuries: String,
-     val injuryLocations: List<String>,
-diff --git a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
-index 605dd8f..64b228a 100644
---- a/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
-+++ b/app/src/main/java/app/forku/data/api/dto/user/UserDto.kt
-@@ -7,14 +7,14 @@ data class UserDto(
-     val email: String,
-     val password: String,
-     val username: String,
--    val name: String,
-+    val firstName: String,
-+    val lastName: String,
-     val photoUrl: String?,
-     val role: String,
--    val permissions: List<String>,
-     val certifications: List<CertificationDto>,
--    val last_medical_check: String?,
--    val last_login: String?,
--    val is_active: Boolean = true
-+    val lastMedicalCheck: String?,
-+    val lastLogin: String?,
-+    val isActive: Boolean = true
- )
- 
- data class CertificationDto(
-diff --git a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
-index 76fccaf..ab7d1a1 100644
---- a/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
-+++ b/app/src/main/java/app/forku/data/datastore/AuthDataStore.kt
-@@ -27,10 +27,10 @@ class AuthDataStore @Inject constructor(
-         val REFRESH_TOKEN = stringPreferencesKey("refresh_token")
-         val EMAIL = stringPreferencesKey("email")
-         val USERNAME = stringPreferencesKey("username")
--        val NAME = stringPreferencesKey("name")
-+        val FIRST_NAME = stringPreferencesKey("first_name")
-+        val LAST_NAME = stringPreferencesKey("last_name")
-         val PHOTO_URL = stringPreferencesKey("photo_url")
-         val ROLE = stringPreferencesKey("role")
--        val PERMISSIONS = stringSetPreferencesKey("permissions")
-         val USER_KEY = stringPreferencesKey("user")
-         val TOKEN_KEY = stringPreferencesKey("token")
-     }
-@@ -38,9 +38,13 @@ class AuthDataStore @Inject constructor(
-     @Volatile
-     private var cachedToken: String? = null
- 
--    fun getToken(): String? = cachedToken
-+    fun getToken(): String? {
-+        android.util.Log.d("AuthDataStore", "Getting cached token: $cachedToken")
-+        return cachedToken
-+    }
- 
-     suspend fun setToken(token: String?) {
-+        android.util.Log.d("AuthDataStore", "Setting token: ${token?.take(10)}...")
-         cachedToken = token
-         context.dataStore.edit { preferences ->
-             if (token != null) {
-@@ -52,33 +56,84 @@ class AuthDataStore @Inject constructor(
-     }
- 
-     suspend fun setCurrentUser(user: User) {
-+        android.util.Log.d("AuthDataStore", """
-+            Setting current user:
-+            - ID: ${user.id}
-+            - Name: ${user.fullName}
-+            - Token: ${user.token.take(10)}...
-+            - Role: ${user.role}
-+        """.trimIndent())
-+        
-         context.dataStore.edit { preferences ->
-             preferences[PreferencesKeys.USER_ID] = user.id
-             preferences[PreferencesKeys.TOKEN] = user.token
-             preferences[PreferencesKeys.REFRESH_TOKEN] = user.refreshToken
-             preferences[PreferencesKeys.EMAIL] = user.email
-             preferences[PreferencesKeys.USERNAME] = user.username
--            preferences[PreferencesKeys.NAME] = user.name
-+            preferences[PreferencesKeys.FIRST_NAME] = user.firstName
-+            preferences[PreferencesKeys.LAST_NAME] = user.lastName
-             preferences[PreferencesKeys.PHOTO_URL] = user.photoUrl ?: ""
-             preferences[PreferencesKeys.ROLE] = user.role.name
--            preferences[PreferencesKeys.PERMISSIONS] = user.permissions.toSet()
-             preferences[PreferencesKeys.TOKEN_KEY] = user.token
-         }
-         cachedToken = user.token
-+        android.util.Log.d("AuthDataStore", "User data stored successfully")
-     }
- 
-     suspend fun getCurrentUser(): User? {
-         return try {
-             val preferences = context.dataStore.data.first()
--            val userId = preferences[PreferencesKeys.USER_ID] ?: return null
--            val token = preferences[PreferencesKeys.TOKEN] ?: return null
--            val refreshToken = preferences[PreferencesKeys.REFRESH_TOKEN] ?: return null
--            val email = preferences[PreferencesKeys.EMAIL] ?: return null
--            val username = preferences[PreferencesKeys.USERNAME] ?: return null
--            val name = preferences[PreferencesKeys.NAME] ?: return null
-+            
-+            // Log all stored preferences for debugging
-+            android.util.Log.d("AuthDataStore", """
-+                Stored preferences:
-+                - USER_ID: ${preferences[PreferencesKeys.USER_ID]}
-+                - TOKEN: ${preferences[PreferencesKeys.TOKEN]?.take(10)}...
-+                - TOKEN_KEY: ${preferences[PreferencesKeys.TOKEN_KEY]?.take(10)}...
-+                - EMAIL: ${preferences[PreferencesKeys.EMAIL]}
-+                - USERNAME: ${preferences[PreferencesKeys.USERNAME]}
-+                - FIRST_NAME: ${preferences[PreferencesKeys.FIRST_NAME]}
-+                - LAST_NAME: ${preferences[PreferencesKeys.LAST_NAME]}
-+                - ROLE: ${preferences[PreferencesKeys.ROLE]}
-+            """.trimIndent())
-+            
-+            val userId = preferences[PreferencesKeys.USER_ID]
-+            android.util.Log.d("AuthDataStore", "Getting current user - Found ID: $userId")
-+            
-+            if (userId == null) {
-+                android.util.Log.e("AuthDataStore", "No user ID found in preferences")
-+                return null
-+            }
-+            
-+            val token = preferences[PreferencesKeys.TOKEN] ?: run {
-+                android.util.Log.e("AuthDataStore", "No token found for user $userId")
-+                return null
-+            }
-+            val refreshToken = preferences[PreferencesKeys.REFRESH_TOKEN] ?: run {
-+                android.util.Log.e("AuthDataStore", "No refresh token found for user $userId")
-+                return null
-+            }
-+            val email = preferences[PreferencesKeys.EMAIL] ?: run {
-+                android.util.Log.e("AuthDataStore", "No email found for user $userId")
-+                return null
-+            }
-+            val username = preferences[PreferencesKeys.USERNAME] ?: run {
-+                android.util.Log.e("AuthDataStore", "No username found for user $userId")
-+                return null
-+            }
-+            val firstName = preferences[PreferencesKeys.FIRST_NAME] ?: run {
-+                android.util.Log.e("AuthDataStore", "No first name found for user $userId")
-+                return null
-+            }
-+            val lastName = preferences[PreferencesKeys.LAST_NAME] ?: run {
-+                android.util.Log.e("AuthDataStore", "No last name found for user $userId")
-+                return null
-+            }
-             val photoUrl = preferences[PreferencesKeys.PHOTO_URL]
--            val role = preferences[PreferencesKeys.ROLE]?.let { UserRole.fromString(it) } ?: return null
--            val permissions = preferences[PreferencesKeys.PERMISSIONS]?.toList() ?: emptyList()
-+            val role = preferences[PreferencesKeys.ROLE]?.let { UserRole.fromString(it) } ?: run {
-+                android.util.Log.e("AuthDataStore", "No role found for user $userId")
-+                return null
-+            }
- 
-             User(
-                 id = userId,
-@@ -86,26 +141,38 @@ class AuthDataStore @Inject constructor(
-                 refreshToken = refreshToken,
-                 email = email,
-                 username = username,
--                name = name,
-+                firstName = "$firstName",
-+                lastName = "$lastName",
-                 photoUrl = photoUrl?.takeIf { it.isNotEmpty() },
-                 role = role,
--                permissions = permissions,
-                 certifications = emptyList()
--            )
-+            ).also {
-+                android.util.Log.d("AuthDataStore", """
-+                    User retrieved successfully:
-+                    - ID: ${it.id}
-+                    - Name: ${it.fullName}
-+                    - Token: ${it.token.take(10)}...
-+                    - Role: ${it.role}
-+                """.trimIndent())
-+            }
-         } catch (e: Exception) {
-+            android.util.Log.e("AuthDataStore", "Error getting current user", e)
-             null
-         }
-     }
- 
-     suspend fun clearAuth() {
-+        android.util.Log.d("AuthDataStore", "Clearing all auth data")
-         context.dataStore.edit { preferences ->
-             preferences.clear()
-         }
-+        cachedToken = null
-     }
- 
-     suspend fun initializeToken() {
-         cachedToken = context.dataStore.data.map { preferences ->
-             preferences[PreferencesKeys.TOKEN_KEY]
-         }.first()
-+        android.util.Log.d("AuthDataStore", "Initialized token: ${cachedToken?.take(10)}...")
-     }
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/data/local/TokenManager.kt b/app/src/main/java/app/forku/data/local/TokenManager.kt
-deleted file mode 100644
-index f1cab6d..0000000
---- a/app/src/main/java/app/forku/data/local/TokenManager.kt
-+++ /dev/null
-@@ -1,41 +0,0 @@
--package app.forku.data.local
--
--import android.content.Context
--import android.content.SharedPreferences
--import dagger.hilt.android.qualifiers.ApplicationContext
--import javax.inject.Inject
--import javax.inject.Singleton
--
--@Singleton
--class TokenManager @Inject constructor(
--    @ApplicationContext context: Context
--) {
--    private val prefs: SharedPreferences = 
--        context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE)
--
--    fun saveToken(token: String, refreshToken: String) {
--        prefs.edit()
--            .putString(KEY_TOKEN, token)
--            .putString(KEY_REFRESH_TOKEN, refreshToken)
--            .apply()
--    }
--
--    fun getToken(): String? {
--        return prefs.getString(KEY_TOKEN, null)
--    }
--
--    fun getRefreshToken(): String? = prefs.getString(KEY_REFRESH_TOKEN, null)
--
--    fun clearToken() {
--        prefs.edit()
--            .remove(KEY_TOKEN)
--            .remove(KEY_REFRESH_TOKEN)
--            .apply()
--    }
--
--    companion object {
--        private const val PREF_NAME = "ForkUPrefs"
--        private const val KEY_TOKEN = "auth_token"
--        private const val KEY_REFRESH_TOKEN = "refresh_token"
--    }
--} 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/data/mapper/IncidentMapper.kt b/app/src/main/java/app/forku/data/mapper/IncidentMapper.kt
-index 7d433e5..1bd4db1 100644
---- a/app/src/main/java/app/forku/data/mapper/IncidentMapper.kt
-+++ b/app/src/main/java/app/forku/data/mapper/IncidentMapper.kt
-@@ -34,7 +34,6 @@ fun Incident.toDto(): IncidentDto {
-             type = type.name,
-             data = emptyMap()
-         ),
--        operatorId = operatorId,
-         othersInvolved = othersInvolved,
-         injuries = injuries,
-         injuryLocations = injuryLocations,
-@@ -67,7 +66,6 @@ fun IncidentDto.toDomain(): Incident {
-         severityLevel = severityLevel?.let { IncidentSeverityLevel.valueOf(it) },
-         preshiftCheckStatus = preshiftCheckStatus,
-         typeSpecificFields = typeSpecificFields.toDomain(type),
--        operatorId = operatorId,
-         othersInvolved = othersInvolved,
-         injuries = injuries,
-         injuryLocations = injuryLocations,
-diff --git a/app/src/main/java/app/forku/data/mapper/UserMapper.kt b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
-index cbe4973..0c8fdc1 100644
---- a/app/src/main/java/app/forku/data/mapper/UserMapper.kt
-+++ b/app/src/main/java/app/forku/data/mapper/UserMapper.kt
-@@ -8,20 +8,22 @@ import app.forku.domain.model.user.UserRole
- import app.forku.domain.model.user.Certification
- 
- fun UserDto.toDomain(): User {
-+    // Split the name into first and last name
-+
-     return User(
-         id = id,
-         token = token,
-         refreshToken = refreshToken,
-         email = email,
-         username = username,
--        name = name,
-+        firstName = firstName,
-+        lastName = lastName,
-         photoUrl = photoUrl,
-         role = UserRole.fromString(role),
--        permissions = permissions,
-         certifications = certifications.map { it.toDomain() },
--        lastMedicalCheck = last_medical_check,
--        lastLogin = last_login,
--        isActive = is_active
-+        lastMedicalCheck = lastMedicalCheck,
-+        lastLogin = lastLogin,
-+        isActive = isActive
-     )
- }
- 
-@@ -41,14 +43,14 @@ fun User.toDto(): UserDto {
-         email = email,
-         password = "", // No incluimos el password en la conversión a DTO
-         username = username,
--        name = name,
-+        firstName = firstName,
-+        lastName = lastName,
-         photoUrl = photoUrl,
-         role = role.name,
--        permissions = permissions,
-         certifications = certifications.map { it.toDto() },
--        last_medical_check = lastMedicalCheck,
--        last_login = lastLogin,
--        is_active = isActive
-+        lastMedicalCheck = lastMedicalCheck,
-+        lastLogin = lastLogin,
-+        isActive = isActive
-     )
- }
- 
-diff --git a/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt
-index c225d34..55de3ef 100644
---- a/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/incident/IncidentRepositoryImpl.kt
-@@ -14,6 +14,9 @@ class IncidentRepositoryImpl @Inject constructor(
- ) : IncidentRepository {
-     override suspend fun reportIncident(incident: Incident): Result<Incident> {
-         return try {
-+            val currentUser = authDataStore.getCurrentUser() 
-+                ?: return Result.failure(Exception("User not authenticated"))
-+            
-             val response = api.reportIncident(incident.toDto())
-             if (response.isSuccessful) {
-                 Result.success(response.body()?.toDomain() 
-diff --git a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
-index 3d5ffda..ab6730d 100644
---- a/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/user/UserRepositoryImpl.kt
-@@ -7,27 +7,22 @@ import app.forku.domain.model.user.User
- import app.forku.domain.repository.user.UserRepository
- import app.forku.data.datastore.AuthDataStore
- import app.forku.data.mapper.toDto
--import app.forku.domain.model.user.Permissions
- import app.forku.domain.model.user.UserRole
-+import app.forku.data.local.TourPreferences
- import java.util.UUID
- import javax.inject.Inject
- import kotlinx.coroutines.Dispatchers
- import kotlinx.coroutines.withContext
- import javax.inject.Singleton
--import android.content.SharedPreferences
- import kotlinx.coroutines.flow.Flow
- 
- @Singleton
- class UserRepositoryImpl @Inject constructor(
-     private val api: GeneralApi,
-     private val authDataStore: AuthDataStore,
--    private val sharedPreferences: SharedPreferences
-+    private val tourPreferences: TourPreferences
- ) : UserRepository {
-     
--    companion object {
--        private const val PREF_TOUR_COMPLETED = "tour_completed"
--    }
--
-     override suspend fun getUserById(id: String): User? {
-         return try {
-             val response = api.getUser(id)
-@@ -43,20 +38,49 @@ class UserRepositoryImpl @Inject constructor(
-             // Obtener todos los usuarios
-             val response = api.getUsers()
-             if (!response.isSuccessful) {
--                return@withContext Result.failure(Exception("Failed to fetch users"))
-+                android.util.Log.e("appflow UserRepository", "Server error: ${response.code()}")
-+                return@withContext Result.failure(Exception("Error de servidor. Por favor intenta más tarde"))
-+            }
-+
-+            // Log the response for debugging
-+            android.util.Log.d("appflow UserRepository", "Users response: ${response.body()}")
-+
-+            // Primero verificar si existe el email
-+            val userWithEmail = response.body()?.find { it.email == email }
-+            if (userWithEmail == null) {
-+                android.util.Log.e("appflow UserRepository", "User not found with email: $email")
-+                return@withContext Result.failure(Exception("El correo electrónico no está registrado"))
-             }
- 
--            // Buscar usuario por email y password
-+            // Log user found
-+            android.util.Log.d("appflow UserRepository", "Found user: $userWithEmail")
-+
-+            // Luego verificar la contraseña
-             val user = response.body()?.find { 
-                 it.email == email && it.password == password 
--            }?.toDomain() ?: return@withContext Result.failure(Exception("Invalid credentials"))
-+            }?.toDomain()
-+            
-+            if (user == null) {
-+                android.util.Log.e("appflow UserRepository", "Invalid password for email: $email")
-+                return@withContext Result.failure(Exception("Contraseña incorrecta"))
-+            }
-+
-+            // Verificar si el usuario está activo
-+            if (!user.isActive) {
-+                android.util.Log.e("appflow UserRepository", "User account is inactive: $email")
-+                return@withContext Result.failure(Exception("Tu cuenta está desactivada. Contacta al administrador"))
-+            }
-+
-+            // Log successful login
-+            android.util.Log.d("appflow UserRepository", "Successful login for user: ${user.email}")
- 
-             // Guardar usuario en AuthDataStore
-             authDataStore.setCurrentUser(user)
-             
-             Result.success(user)
-         } catch (e: Exception) {
--            Result.failure(e)
-+            android.util.Log.e("UserRepository", "Error during login", e)
-+            Result.failure(Exception("Error de conexión. Verifica tu internet e intenta de nuevo"))
-         }
-     }
- 
-@@ -79,29 +103,24 @@ class UserRepositoryImpl @Inject constructor(
-             }
- 
-             // Por defecto, los nuevos usuarios se registran con rol USER
--            val role = UserRole.USER
--            val permissions = when (role) {
--                UserRole.ADMIN -> Permissions.ADMIN_PERMISSIONS
--                UserRole.OPERATOR -> Permissions.OPERATOR_PERMISSIONS
--                UserRole.USER -> Permissions.USER_PERMISSIONS
--            }
--
-+            val role = UserRole.OPERATOR
-+            
-             // Crear nuevo usuario
-             val newUser = UserDto(
-                 id = UUID.randomUUID().toString(),
-                 email = email,
-                 password = password,
-                 username = email,
--                name = "$firstName $lastName",
-+                firstName = firstName,
-+                lastName = lastName,
-                 token = UUID.randomUUID().toString(),
-                 refreshToken = UUID.randomUUID().toString(),
-                 photoUrl = null,
-                 role = role.name,
--                permissions = permissions.toList(),
-                 certifications = listOf(),
--                last_medical_check = null,
--                last_login = null,
--                is_active = true
-+                lastMedicalCheck = null,
-+                lastLogin = null,
-+                isActive = true
-             )
- 
-             val response = api.createUser(newUser)
-@@ -152,28 +171,21 @@ class UserRepositoryImpl @Inject constructor(
-         try {
-             val user = getUserById(userId) ?: return@withContext Result.failure(Exception("User not found"))
-             
--            // Asignar permisos según el nuevo rol
--            val newPermissions = when (newRole) {
--                UserRole.ADMIN -> Permissions.ADMIN_PERMISSIONS
--                UserRole.OPERATOR -> Permissions.OPERATOR_PERMISSIONS
--                UserRole.USER -> Permissions.USER_PERMISSIONS
--            }
--
-             val updatedUserDto = UserDto(
-                 id = user.id,
-                 email = user.email,
-                 password = "", // No incluimos el password en la actualización
-                 username = user.username,
--                name = user.name,
-+                firstName = user.firstName,
-+                lastName = user.lastName,
-                 token = user.token,
-                 refreshToken = user.refreshToken,
-                 photoUrl = user.photoUrl,
-                 role = newRole.name,
--                permissions = newPermissions.toList(),
-                 certifications = user.certifications.map { it.toDto() },
--                last_medical_check = user.lastMedicalCheck,
--                last_login = user.lastLogin,
--                is_active = true
-+                lastMedicalCheck = user.lastMedicalCheck,
-+                lastLogin = user.lastLogin,
-+                isActive = true
-             )
- 
-             val response = api.updateUser(userId, updatedUserDto)
-@@ -204,16 +216,16 @@ class UserRepositoryImpl @Inject constructor(
-                 email = user.email,
-                 password = "", // No incluimos el password en la actualización
-                 username = user.username,
--                name = user.name,
-+                firstName = user.firstName,
-+                lastName = user.lastName,
-                 token = user.token,
-                 refreshToken = user.refreshToken,
-                 photoUrl = user.photoUrl,
-                 role = user.role.name,
--                permissions = user.permissions,
-                 certifications = user.certifications.map { it.toDto() },
--                last_medical_check = user.lastMedicalCheck,
--                last_login = user.lastLogin,
--                is_active = user.isActive
-+                lastMedicalCheck = user.lastMedicalCheck,
-+                lastLogin = user.lastLogin,
-+                isActive = user.isActive
-             )
- 
-             val response = api.updateUser(user.id, userDto)
-@@ -274,11 +286,11 @@ class UserRepositoryImpl @Inject constructor(
-     }
- 
-     override suspend fun getTourCompletionStatus(): Boolean {
--        return sharedPreferences.getBoolean(PREF_TOUR_COMPLETED, false)
-+        return tourPreferences.hasTourCompleted()
-     }
- 
-     override suspend fun setTourCompleted() {
--        sharedPreferences.edit().putBoolean(PREF_TOUR_COMPLETED, true).apply()
-+        tourPreferences.setTourCompleted()
-     }
- 
-     override suspend fun getAuthToken(): String? {
-diff --git a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
-index 6f4bcdf..5c9a76a 100644
---- a/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/vehicle_session/VehicleSessionRepositoryImpl.kt
-@@ -141,20 +141,23 @@ class VehicleSessionRepositoryImpl @Inject constructor(
-     }
- 
-     override suspend fun getActiveSessionForVehicle(vehicleId: String): VehicleSession? {
--        return try {
--            val response = api.getAllSessions()
--            if (response.isSuccessful) {
--                val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
--                sessions.find { 
--                    it.vehicleId == vehicleId && 
--                    it.status == SessionStatus.ACTIVE 
--                }
--            } else {
--                null
-+        android.util.Log.d("VehicleSession", "Fetching active session for vehicle: $vehicleId")
-+        val response = api.getAllSessions()
-+        if (response.isSuccessful) {
-+            android.util.Log.d("VehicleSession", "API response successful. Status code: ${response.code()}")
-+            val sessions = response.body()?.map { it.toDomain() } ?: emptyList()
-+            android.util.Log.d("VehicleSession", "Total sessions fetched: ${sessions.size}")
-+            
-+            val activeSession = sessions.find { 
-+                it.vehicleId == vehicleId && 
-+                it.status == SessionStatus.ACTIVE 
-             }
--        } catch (e: Exception) {
--            null
-+            
-+            android.util.Log.d("VehicleSession", "Active session for vehicle $vehicleId: $activeSession")
-+            return activeSession
-         }
-+        android.util.Log.w("VehicleSession", "Failed to fetch sessions. Status code: ${response.code()}")
-+        return null
-     }
- 
-     override suspend fun getOperatorSessionHistory(): List<VehicleSession> {
-diff --git a/app/src/main/java/app/forku/data/repository/weather/WeatherRepositoryImpl.kt b/app/src/main/java/app/forku/data/repository/weather/WeatherRepositoryImpl.kt
-index 0e904ef..3459ca2 100644
---- a/app/src/main/java/app/forku/data/repository/weather/WeatherRepositoryImpl.kt
-+++ b/app/src/main/java/app/forku/data/repository/weather/WeatherRepositoryImpl.kt
-@@ -29,4 +29,18 @@ class WeatherRepositoryImpl @Inject constructor(
-     } catch (e: Exception) {
-         Result.failure(e)
-     }
-+
-+    override suspend fun getCurrentWeather(latitude: Double, longitude: Double): String {
-+        return try {
-+            val weatherResult = getWeatherByCoordinates(latitude, longitude)
-+            weatherResult.fold(
-+                onSuccess = { weather ->
-+                    "${weather.description}, ${weather.temperature}°F, ${weather.humidity}% humidity"
-+                },
-+                onFailure = { "Weather data unavailable" }
-+            )
-+        } catch (e: Exception) {
-+            "Weather data unavailable"
-+        }
-+    }
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/di/NetworkModule.kt b/app/src/main/java/app/forku/di/NetworkModule.kt
-index e65354c..a08dd80 100644
---- a/app/src/main/java/app/forku/di/NetworkModule.kt
-+++ b/app/src/main/java/app/forku/di/NetworkModule.kt
-@@ -9,6 +9,7 @@ import app.forku.data.repository.weather.WeatherRepositoryImpl
- import dagger.Module
- import dagger.Provides
- import dagger.hilt.InstallIn
-+import dagger.hilt.android.qualifiers.ApplicationContext
- import dagger.hilt.components.SingletonComponent
- import okhttp3.OkHttpClient
- import okhttp3.logging.HttpLoggingInterceptor
-@@ -16,6 +17,8 @@ import retrofit2.Retrofit
- import retrofit2.converter.gson.GsonConverterFactory
- import javax.inject.Singleton
- import java.util.concurrent.TimeUnit
-+import android.content.Context
-+import app.forku.core.network.NetworkConnectivityManager
- 
- @Module
- @InstallIn(SingletonComponent::class)
-@@ -71,4 +74,12 @@ object NetworkModule {
-     ): WeatherRepository {
-         return WeatherRepositoryImpl(weatherApi)
-     }
-+
-+    @Provides
-+    @Singleton
-+    fun provideNetworkConnectivityManager(
-+        @ApplicationContext context: Context
-+    ): NetworkConnectivityManager {
-+        return NetworkConnectivityManager(context)
-+    }
- }
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/domain/model/incident/Incident.kt b/app/src/main/java/app/forku/domain/model/incident/Incident.kt
-index 592df52..0f60440 100644
---- a/app/src/main/java/app/forku/domain/model/incident/Incident.kt
-+++ b/app/src/main/java/app/forku/domain/model/incident/Incident.kt
-@@ -33,7 +33,6 @@ data class Incident(
-     val severityLevel: IncidentSeverityLevel? = null,
-     val preshiftCheckStatus: String = "",
-     val typeSpecificFields: IncidentTypeFields? = null,
--    val operatorId: String? = null,
-     val othersInvolved: List<String> = emptyList(),
-     val injuries: String = "",
-     val injuryLocations: List<String> = emptyList(),
-diff --git a/app/src/main/java/app/forku/domain/model/user/Operator.kt b/app/src/main/java/app/forku/domain/model/user/Operator.kt
-index 7b11f57..4486605 100644
---- a/app/src/main/java/app/forku/domain/model/user/Operator.kt
-+++ b/app/src/main/java/app/forku/domain/model/user/Operator.kt
-@@ -20,7 +20,6 @@ data class Operator(
-     val id: String get() = user.id
-     val username: String get() = user.username
-     val role: UserRole get() = user.role
--    val permissions: List<String> get() = user.permissions
-     val certifications: List<Certification> get() = user.certifications
- 
-     fun canOperateVehicle(vehicleType: VehicleType): Boolean {
-diff --git a/app/src/main/java/app/forku/domain/model/user/Permissions.kt b/app/src/main/java/app/forku/domain/model/user/Permissions.kt
-deleted file mode 100644
-index 30558b8..0000000
---- a/app/src/main/java/app/forku/domain/model/user/Permissions.kt
-+++ /dev/null
-@@ -1,51 +0,0 @@
--package app.forku.domain.model.user
--
--object Permissions {
--    // Admin Permissions
--    const val MANAGE_USERS = "MANAGE_USERS"
--    const val MANAGE_VEHICLES = "MANAGE_VEHICLES"
--    const val VIEW_ALL_REPORTS = "VIEW_ALL_REPORTS"
--    const val MANAGE_CERTIFICATIONS = "MANAGE_CERTIFICATIONS"
--    const val MANAGE_TRAINING = "MANAGE_TRAINING"
--    
--    // Operator Permissions
--    const val OPERATE_VEHICLE = "OPERATE_VEHICLE"
--    const val REPORT_INCIDENT = "REPORT_INCIDENT"
--    const val VIEW_OWN_REPORTS = "VIEW_OWN_REPORTS"
--    const val TAKE_TRAINING = "TAKE_TRAINING"
--    
--    // Default permission sets by role
--    val ADMIN_PERMISSIONS = setOf(
--        MANAGE_USERS,
--        MANAGE_VEHICLES,
--        VIEW_ALL_REPORTS,
--        MANAGE_CERTIFICATIONS,
--        MANAGE_TRAINING
--    )
--    
--    val OPERATOR_PERMISSIONS = setOf(
--        OPERATE_VEHICLE,
--        REPORT_INCIDENT,
--        VIEW_OWN_REPORTS,
--        TAKE_TRAINING
--    )
--    
--    val USER_PERMISSIONS = setOf(
--        TAKE_TRAINING
--    )
--}
--
--// Extension function to check if a user has a specific permission
--fun User.hasPermission(permission: String): Boolean {
--    return permissions.contains(permission)
--}
--
--// Extension function to check if a user has all required permissions
--fun User.hasAllPermissions(requiredPermissions: Set<String>): Boolean {
--    return permissions.containsAll(requiredPermissions)
--}
--
--// Extension function to check if a user has any of the specified permissions
--fun User.hasAnyPermission(permissions: Set<String>): Boolean {
--    return this.permissions.any { it in permissions }
--} 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/domain/model/user/User.kt b/app/src/main/java/app/forku/domain/model/user/User.kt
-index 2d3ccf3..c939f70 100644
---- a/app/src/main/java/app/forku/domain/model/user/User.kt
-+++ b/app/src/main/java/app/forku/domain/model/user/User.kt
-@@ -6,10 +6,10 @@ data class User(
-     val refreshToken: String,
-     val email: String,
-     val username: String,
--    val name: String,
-+    val firstName: String,
-+    val lastName: String,
-     val photoUrl: String?,
-     val role: UserRole,
--    val permissions: List<String>,
-     val certifications: List<Certification>,
-     val experienceLevel: String = "Rookie",
-     val points: Int = 0,
-@@ -20,4 +20,7 @@ data class User(
-     val lastMedicalCheck: String? = null,
-     val lastLogin: String? = null,
-     val isActive: Boolean = true
--)
-\ No newline at end of file
-+) {
-+    val fullName: String
-+        get() = "$firstName $lastName"
-+}
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/domain/model/user/UserRole.kt b/app/src/main/java/app/forku/domain/model/user/UserRole.kt
-index 32f66d8..57ae288 100644
---- a/app/src/main/java/app/forku/domain/model/user/UserRole.kt
-+++ b/app/src/main/java/app/forku/domain/model/user/UserRole.kt
-@@ -2,8 +2,7 @@ package app.forku.domain.model.user
- 
- enum class UserRole {
-     ADMIN,
--    OPERATOR,
--    USER;
-+    OPERATOR;
- 
-     companion object {
-         fun fromString(role: String): UserRole {
-diff --git a/app/src/main/java/app/forku/domain/model/vehicle/VehicleType.kt b/app/src/main/java/app/forku/domain/model/vehicle/VehicleType.kt
-index 359deb0..3f1944b 100644
---- a/app/src/main/java/app/forku/domain/model/vehicle/VehicleType.kt
-+++ b/app/src/main/java/app/forku/domain/model/vehicle/VehicleType.kt
-@@ -5,21 +5,31 @@ enum class VehicleType(
-     val displayName: String,
-     val requiresCertification: Boolean
- ) {
--    FORKLIFT("forklift_type", "Forklift", true),
--    PALLET_JACK("pallet_jack_type", "Pallet Jack", false),
--    REACH_TRUCK("reach_truck_type", "Reach Truck", true),
--    ORDER_PICKER("order_picker_type", "Order Picker", true),
--    TOW_TRACTOR("tow_tractor_type", "Tow Tractor", true),
--    COUNTERBALANCE("counterbalance_type", "Counterbalance", true),
-+    COUNTERBALANCE_FORKLIFT("counterbalance_forklift", "Counterbalance Forklift", true),
-+    REACH_FORKLIFT("reach_forklift", "Reach Forklift", true),
-+    SIDE_LOADER("side_loader", "Side Loader", true),
-+    TELESCOPIC_HANDLER("telescopic_handler", "Telescopic Handler", true),
-+    ORDER_PICKER("order_picker", "Order Picker", true),
-+    ROUGH_TERRAIN_FORKLIFT("rough_terrain_forklift", "Rough Terrain Forklift", true),
-+    INDUSTRIAL_FORKLIFT("industrial_forklift", "Industrial Forklift", true),
-+    ARTICULATED_FORKLIFT("articulated_forklift", "Articulated Forklift", true),
-+    TURRET_TRUCK("turret_truck", "Turret Truck", true),
-+    PALLET_JACK("pallet_jack", "Pallet Jack", false),
-+    OTHER("other", "Other", true),
-     ALL("all", "All", false);
- 
-     companion object {
--        fun fromId(id: String) = values().find { it.id == id } ?: FORKLIFT
-+        fun fromId(id: String) = values().find { it.id == id } ?: OTHER
-         fun fromName(name: String) = try {
--            valueOf(name.uppercase())
-+            // Intenta encontrar una coincidencia directa primero
-+            values().find { it.displayName.equals(name, ignoreCase = true) }
-+                // Si no encuentra coincidencia directa, intenta con el nombre enum
-+                ?: valueOf(name.uppercase().replace(" ", "_"))
-+                // Si aún no encuentra, devuelve OTHER
-+                ?: OTHER
-         } catch (e: IllegalArgumentException) {
--            android.util.Log.w("VehicleType", "Unknown vehicle type: $name")
--            FORKLIFT
-+            android.util.Log.w("VehicleType", "Unknown vehicle type: $name, using OTHER type")
-+            OTHER
-         }
-     }
- }
-diff --git a/app/src/main/java/app/forku/domain/repository/weather/WeatherRepository.kt b/app/src/main/java/app/forku/domain/repository/weather/WeatherRepository.kt
-index a9d2e6f..1d556d2 100644
---- a/app/src/main/java/app/forku/domain/repository/weather/WeatherRepository.kt
-+++ b/app/src/main/java/app/forku/domain/repository/weather/WeatherRepository.kt
-@@ -4,4 +4,5 @@ import app.forku.domain.model.weather.Weather
- 
- interface WeatherRepository {
-     suspend fun getWeatherByCoordinates(latitude: Double, longitude: Double): Result<Weather>
-+    suspend fun getCurrentWeather(latitude: Double, longitude: Double): String
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/domain/usecase/incident/ReportIncidentUseCase.kt b/app/src/main/java/app/forku/domain/usecase/incident/ReportIncidentUseCase.kt
-index a9785ae..062bfa1 100644
---- a/app/src/main/java/app/forku/domain/usecase/incident/ReportIncidentUseCase.kt
-+++ b/app/src/main/java/app/forku/domain/usecase/incident/ReportIncidentUseCase.kt
-@@ -31,7 +31,7 @@ class ReportIncidentUseCase @Inject constructor(
-         preshiftCheckStatus: String,
-         typeSpecificFields: IncidentTypeFields?,
-         sessionId: String?,
--        operatorId: String?,
-+        userId: String?,
-         othersInvolved: List<String>,
-         injuries: String,
-         injuryLocations: List<String>,
-@@ -66,7 +66,6 @@ class ReportIncidentUseCase @Inject constructor(
-                 severityLevel = severityLevel,
-                 preshiftCheckStatus = preshiftCheckStatus,
-                 typeSpecificFields = typeSpecificFields,
--                operatorId = operatorId,
-                 othersInvolved = othersInvolved,
-                 injuries = injuries,
-                 injuryLocations = injuryLocations,
-diff --git a/app/src/main/java/app/forku/domain/usecase/session/StartVehicleSessionUseCase.kt b/app/src/main/java/app/forku/domain/usecase/session/StartVehicleSessionUseCase.kt
-index e12d582..cf455fa 100644
---- a/app/src/main/java/app/forku/domain/usecase/session/StartVehicleSessionUseCase.kt
-+++ b/app/src/main/java/app/forku/domain/usecase/session/StartVehicleSessionUseCase.kt
-@@ -1,8 +1,7 @@
- package app.forku.domain.usecase.session
- 
- import app.forku.domain.model.session.VehicleSession
--import app.forku.domain.model.user.Permissions
--import app.forku.domain.model.user.hasPermission
-+import app.forku.domain.model.user.UserRole
- import app.forku.domain.repository.session.SessionRepository
- import app.forku.domain.repository.user.UserRepository
- import javax.inject.Inject
-@@ -15,7 +14,7 @@ class StartVehicleSessionUseCase @Inject constructor(
-         val currentUser = userRepository.getCurrentUser()
-             ?: return Result.failure(Exception("User not logged in"))
- 
--        if (!currentUser.hasPermission(Permissions.OPERATE_VEHICLE)) {
-+        if (currentUser.role != UserRole.OPERATOR) {
-             return Result.failure(Exception("User does not have permission to operate vehicles"))
-         }
- 
-diff --git a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
-index 8ffab1d..bed1351 100644
---- a/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/checklist/ChecklistScreen.kt
-@@ -24,14 +24,17 @@ import androidx.navigation.NavController
- import app.forku.presentation.common.components.BaseScreen
- import androidx.compose.runtime.mutableStateOf
- import androidx.compose.runtime.remember
-+import app.forku.core.network.NetworkConnectivityManager
- import app.forku.presentation.common.components.AppModal
- 
-+
- @OptIn(ExperimentalMaterial3Api::class)
- @Composable
- fun ChecklistScreen(
-     viewModel: ChecklistViewModel = hiltViewModel(),
-     navController: NavController,
--    onBackPressed: () -> Unit
-+    onBackPressed: () -> Unit,
-+    networkManager: NetworkConnectivityManager
- ) {
-     var showConfirmationDialog = remember { mutableStateOf(false) }
-     
-@@ -54,7 +57,8 @@ fun ChecklistScreen(
-         showTopBar = true,
-         showBottomBar = true,
-         viewModel = viewModel,
--        topBarTitle = "Vehicle Check",
-+        topBarTitle = "Pre-Shift Check",
-+        networkManager = networkManager,
-         onRefresh = { viewModel.loadChecklistData() },
-         content = { padding ->
-             Box(modifier = Modifier.fillMaxSize()) {
-@@ -116,10 +120,10 @@ fun ChecklistScreen(
- 
- 
-                                 // Only show submit button when all items are answered
--                                if (currentState.showSubmitButton && currentState.allAnswered && !currentState.hasCriticalFail) {
-+                                if (currentState.showSubmitButton && currentState.allAnswered) {
-                                     Button(
-                                         onClick = { showConfirmationDialog.value = true },
--                                        enabled = currentState.showSubmitButton && currentState.allAnswered && !currentState.hasCriticalFail,
-+                                        enabled = currentState.showSubmitButton && currentState.allAnswered,
-                                         modifier = Modifier
-                                             .fillMaxWidth()
-                                             .padding(16.dp),
-diff --git a/app/src/main/java/app/forku/presentation/common/components/BaseScreen.kt b/app/src/main/java/app/forku/presentation/common/components/BaseScreen.kt
-index b4c926d..b509b40 100644
---- a/app/src/main/java/app/forku/presentation/common/components/BaseScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/common/components/BaseScreen.kt
-@@ -16,23 +16,30 @@ import androidx.compose.ui.platform.LocalLifecycleOwner
- import androidx.compose.ui.unit.dp
- import androidx.lifecycle.Lifecycle
- import androidx.lifecycle.LifecycleEventObserver
-+import app.forku.core.network.NetworkConnectivityManager
- import app.forku.presentation.common.theme.BackgroundGray
- import app.forku.presentation.dashboard.DashboardState
-+import androidx.compose.foundation.clickable
-+import androidx.compose.foundation.interaction.MutableInteractionSource
-+import androidx.compose.foundation.interaction.collectIsHoveredAsState
-+import androidx.compose.material3.surfaceColorAtElevation
- 
- @OptIn(ExperimentalMaterial3Api::class)
- @Composable
- fun BaseScreen(
-     navController: NavController,
-     modifier: Modifier = Modifier,
--    showTopBar: Boolean = false,
-+    showTopBar: Boolean = true,
-     showBottomBar: Boolean = false,
-+    showBackButton: Boolean = true,
-     currentVehicleId: String? = null,
-     currentCheckId: String? = null,
-     dashboardState: DashboardState? = null,
-     viewModel: ViewModel? = null,
--    topBarTitle: String = "",
-+    topBarTitle: String? = null,
-     onRefresh: (() -> Unit)? = null,
-     showLoadingOnRefresh: Boolean = false,
-+    networkManager: NetworkConnectivityManager,
-     content: @Composable (PaddingValues) -> Unit
- ) {
-     val lifecycleOwner = LocalLifecycleOwner.current
-@@ -41,7 +48,6 @@ fun BaseScreen(
-     DisposableEffect(lifecycleOwner) {
-         val observer = LifecycleEventObserver { _, event ->
-             if (event == Lifecycle.Event.ON_RESUME) {
--                // Refresh silencioso al volver a la pantalla
-                 onRefresh?.invoke()
-             }
-         }
-@@ -56,7 +62,8 @@ fun BaseScreen(
-         color = backgroundColor
-     ) {
-         Column(modifier = Modifier.fillMaxSize()) {
--            Spacer(modifier = Modifier.height(24.dp))
-+            // Network Status Bar at the very top
-+            NetworkStatusBar(networkManager = networkManager)
-             
-             // Header section
-             if (showTopBar) {
-@@ -65,27 +72,46 @@ fun BaseScreen(
-                         .fillMaxWidth()
-                         .padding(horizontal = 16.dp)
-                 ) {
--                    // Back button
--                    TextButton(
--                        onClick = { navController.navigateUp() },
--                        contentPadding = PaddingValues(0.dp)
--                    ) {
--                        Icon(
--                            Icons.Default.ArrowBack,
--                            contentDescription = "Back",
--                            tint = MaterialTheme.colorScheme.primary
--                        )
--                        Text(
--                            "Back",
--                            color = MaterialTheme.colorScheme.primary,
--                            style = MaterialTheme.typography.bodyLarge,
--                            modifier = Modifier.padding(start = 4.dp)
--                        )
-+                    // Back button with additional top padding - only show if showBackButton is true
-+                    if (showBackButton) {
-+                        Box(
-+                            modifier = Modifier
-+                                .fillMaxWidth()
-+                                .padding(top = 24.dp)
-+                        ) {
-+                            // Custom back button implementation
-+                            Row(
-+                                modifier = Modifier
-+                                    .clickable(
-+                                        interactionSource = remember { MutableInteractionSource() },
-+                                        indication = null,
-+                                        enabled = true,
-+                                        onClickLabel = "Back",
-+                                        role = androidx.compose.ui.semantics.Role.Button,
-+                                        onClick = { navController.navigateUp() }
-+                                    )
-+                                    .padding(8.dp),
-+                                verticalAlignment = Alignment.CenterVertically
-+                            ) {
-+                                Icon(
-+                                    Icons.Default.ArrowBack,
-+                                    contentDescription = "Back",
-+                                    tint = MaterialTheme.colorScheme.primary,
-+                                    modifier = Modifier.size(24.dp)
-+                                )
-+                                Spacer(modifier = Modifier.width(4.dp))
-+                                Text(
-+                                    "Back",
-+                                    color = MaterialTheme.colorScheme.primary,
-+                                    style = MaterialTheme.typography.bodyLarge
-+                                )
-+                            }
-+                        }
-                     }
-                     
--                    // Title with spacing
--                    if (topBarTitle.isNotEmpty()) {
--                        Spacer(modifier = Modifier.height(8.dp))
-+                    // Title with spacing - adjust padding based on whether back button is shown
-+                    if (topBarTitle?.isNotEmpty() == true) {
-+                        Spacer(modifier = Modifier.height(if (showBackButton) 8.dp else 24.dp))
-                         Box(
-                             modifier = Modifier
-                                 .fillMaxWidth()
-@@ -107,7 +133,7 @@ fun BaseScreen(
-                     .fillMaxSize()
-                     .weight(1f)
-             ) {
--                content(PaddingValues(horizontal = 2.dp))
-+                content(PaddingValues(horizontal = 16.dp))
-             }
- 
-             // Bottom Bar
-diff --git a/app/src/main/java/app/forku/presentation/common/components/PermissionGate.kt b/app/src/main/java/app/forku/presentation/common/components/PermissionGate.kt
-deleted file mode 100644
-index 5e2d9e6..0000000
---- a/app/src/main/java/app/forku/presentation/common/components/PermissionGate.kt
-+++ /dev/null
-@@ -1,32 +0,0 @@
--package app.forku.presentation.common.components
--
--import androidx.compose.runtime.Composable
--import app.forku.domain.model.user.User
--import app.forku.domain.model.user.hasAllPermissions
--import app.forku.domain.model.user.hasAnyPermission
--
--@Composable
--fun PermissionGate(
--    user: User?,
--    requiredPermissions: Set<String>,
--    requireAll: Boolean = true,
--    unauthorizedContent: @Composable () -> Unit = {},
--    content: @Composable () -> Unit
--) {
--    if (user == null) {
--        unauthorizedContent()
--        return
--    }
--
--    val hasPermission = if (requireAll) {
--        user.hasAllPermissions(requiredPermissions)
--    } else {
--        user.hasAnyPermission(requiredPermissions)
--    }
--
--    if (hasPermission) {
--        content()
--    } else {
--        unauthorizedContent()
--    }
--} 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt
-index 5bca3df..6ab19b0 100644
---- a/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/dashboard/AdminDashboardScreen.kt
-@@ -1,114 +1,497 @@
- package app.forku.presentation.dashboard
- 
-+import androidx.compose.foundation.background
- import androidx.compose.foundation.layout.*
-+import androidx.compose.foundation.lazy.LazyColumn
-+import androidx.compose.foundation.shape.CircleShape
-+import androidx.compose.foundation.shape.RoundedCornerShape
-+import androidx.compose.material.icons.Icons
-+import androidx.compose.material.icons.filled.*
- import androidx.compose.material3.*
--import androidx.compose.runtime.Composable
-+import androidx.compose.runtime.*
- import androidx.compose.ui.Alignment
- import androidx.compose.ui.Modifier
-+import androidx.compose.ui.draw.clip
-+import androidx.compose.ui.graphics.Color
-+import androidx.compose.ui.graphics.vector.ImageVector
-+import androidx.compose.ui.layout.ContentScale
-+import androidx.compose.ui.text.font.FontWeight
- import androidx.compose.ui.unit.dp
-+import androidx.compose.ui.unit.sp
- import androidx.navigation.NavController
-+import app.forku.core.network.NetworkConnectivityManager
-+import coil.compose.AsyncImage
-+import app.forku.presentation.common.components.BaseScreen
-+import androidx.compose.material.ExperimentalMaterialApi
-+import androidx.compose.material.pullrefresh.PullRefreshIndicator
-+import androidx.compose.material.pullrefresh.pullRefresh
-+import androidx.compose.material.pullrefresh.rememberPullRefreshState
- import app.forku.presentation.navigation.Screen
- 
-+@OptIn(ExperimentalMaterialApi::class)
- @Composable
- fun AdminDashboardScreen(
-     navController: NavController? = null,
-     onNavigate: (String) -> Unit = {},
--    viewModel: DashboardViewModel = androidx.hilt.navigation.compose.hiltViewModel()
-+    viewModel: AdminDashboardViewModel = androidx.hilt.navigation.compose.hiltViewModel(),
-+    networkManager: NetworkConnectivityManager
- ) {
--    Column(
-+    val currentUser by viewModel.currentUser.collectAsState()
-+    val dashboardState by viewModel.state.collectAsState()
-+
-+    val pullRefreshState = rememberPullRefreshState(
-+        refreshing = dashboardState.isLoading,
-+        onRefresh = { viewModel.loadDashboardData() }
-+    )
-+    
-+    BaseScreen(
-+        navController = navController ?: return,
-+        showBottomBar = true,
-+        showTopBar = false,
-+        showBackButton = false,
-+        networkManager = networkManager
-+    ) { padding ->
-+        Box(
-+            modifier = Modifier
-+                .fillMaxSize()
-+                .pullRefresh(pullRefreshState)
-+        ) {
-+            LazyColumn(
-+                modifier = Modifier
-+                    .fillMaxSize()
-+                    .padding(padding)
-+                    .padding(horizontal = 16.dp),
-+                verticalArrangement = Arrangement.spacedBy(24.dp)
-+            ) {
-+                item { HeaderSection(userFirstName = currentUser?.firstName ?: "") }
-+                
-+                item { OperationStatusSection(dashboardState) }
-+                
-+                item { VehicleSessionSection(dashboardState, navController) }
-+                
-+                item { OperatorsSessionSection(dashboardState, navController) }
-+                
-+                // Add some padding at the bottom
-+                item { Spacer(modifier = Modifier.height(16.dp)) }
-+            }
-+
-+            PullRefreshIndicator(
-+                refreshing = dashboardState.isLoading,
-+                state = pullRefreshState,
-+                modifier = Modifier.align(Alignment.TopCenter)
-+            )
-+        }
-+    }
-+}
-+
-+@Composable
-+private fun HeaderSection(userFirstName: String) {
-+    Row(
-         modifier = Modifier
--            .fillMaxSize()
--            .padding(16.dp),
--        horizontalAlignment = Alignment.CenterHorizontally,
--        verticalArrangement = Arrangement.spacedBy(16.dp)
-+            .fillMaxWidth()
-+            .padding(top = 40.dp, bottom = 16.dp),
-+        horizontalArrangement = Arrangement.SpaceBetween,
-+        verticalAlignment = Alignment.CenterVertically
-+    ) {
-+        Column {
-+            Text(
-+                text = "Hi, $userFirstName!",
-+                fontSize = 24.sp,
-+                fontWeight = FontWeight.Bold
-+            )
-+            Text(
-+                text = "How are you today?",
-+                color = Color.Gray,
-+                fontSize = 16.sp
-+            )
-+        }
-+        IconButton(onClick = { /* Handle notifications */ }) {
-+            Icon(
-+                imageVector = Icons.Default.Notifications,
-+                contentDescription = "Notifications",
-+                tint = Color.Gray
-+            )
-+        }
-+    }
-+}
-+
-+@Composable
-+private fun OperationStatusSection(state: AdminDashboardState) {
-+    Card(
-+        modifier = Modifier.fillMaxWidth(),
-+        colors = CardDefaults.cardColors(containerColor = Color.White)
-     ) {
-+        Column(modifier = Modifier.padding(16.dp)) {
-+            Text(
-+                text = "Operation Status",
-+                fontSize = 20.sp,
-+                fontWeight = FontWeight.Bold
-+            )
-+            
-+            Spacer(modifier = Modifier.height(16.dp))
-+            
-+            Row(
-+                modifier = Modifier.fillMaxWidth(),
-+                horizontalArrangement = Arrangement.SpaceBetween
-+            ) {
-+                StatusItem(
-+                    icon = Icons.Default.DirectionsCar,
-+                    count = state.operatingVehiclesCount.toString(),
-+                    label = "Operating",
-+                    iconTint = Color(0xFF4CAF50)
-+                )
-+                StatusItem(
-+                    icon = Icons.Default.Warning,
-+                    count = state.totalIncidentsCount.toString(),
-+                    label = "Incidents",
-+                    iconTint = Color(0xFFFFA726)
-+                )
-+                StatusItem(
-+                    icon = Icons.Default.Security,
-+                    count = state.safetyAlertsCount.toString(),
-+                    label = "Safety Alerts",
-+                    iconTint = Color(0xFF2196F3)
-+                )
-+            }
-+
-+            if (state.isLoading) {
-+                LinearProgressIndicator(
-+                    modifier = Modifier
-+                        .fillMaxWidth()
-+                        .padding(top = 16.dp)
-+                )
-+            }
-+
-+            state.error?.let { error ->
-+                Text(
-+                    text = error,
-+                    color = Color.Red,
-+                    modifier = Modifier.padding(top = 8.dp)
-+                )
-+            }
-+        }
-+    }
-+}
-+
-+@Composable
-+private fun StatusItem(
-+    icon: ImageVector,
-+    count: String,
-+    total: String? = null,
-+    label: String,
-+    iconTint: Color
-+) {
-+    Column(
-+        horizontalAlignment = Alignment.CenterHorizontally
-+    ) {
-+        Icon(
-+            imageVector = icon,
-+            contentDescription = null,
-+            tint = iconTint,
-+            modifier = Modifier.size(24.dp)
-+        )
-+        if (total != null) {
-+            Text(
-+                text = total,
-+                fontSize = 12.sp,
-+                color = Color.Gray
-+            )
-+        }
-+        Text(
-+            text = count,
-+            fontSize = 32.sp,
-+            fontWeight = FontWeight.Bold
-+        )
-         Text(
--            text = "Admin Dashboard",
--            style = MaterialTheme.typography.headlineMedium
-+            text = label,
-+            fontSize = 14.sp,
-+            color = Color.Gray
-         )
-+    }
-+}
- 
--        // Sección de Gestión de Usuarios
--        ElevatedCard(
--            modifier = Modifier.fillMaxWidth()
-+@Composable
-+private fun VehicleSessionSection(
-+    state: AdminDashboardState,
-+    navController: NavController
-+) {
-+    Column {
-+        Row(
-+            modifier = Modifier.fillMaxWidth(),
-+            horizontalArrangement = Arrangement.SpaceBetween,
-+            verticalAlignment = Alignment.CenterVertically
-         ) {
--            Column(
--                modifier = Modifier.padding(16.dp)
-+            Text(
-+                text = "Vehicle In-Session",
-+                fontSize = 20.sp,
-+                fontWeight = FontWeight.Bold
-+            )
-+            TextButton(
-+                onClick = { navController.navigate(Screen.VehicleSessionList.route) }
-             ) {
--                Text(
--                    text = "User Management",
--                    style = MaterialTheme.typography.titleMedium
--                )
--                Spacer(modifier = Modifier.height(8.dp))
--                Button(
--                    onClick = { onNavigate("manage_users") },
--                    modifier = Modifier.fillMaxWidth()
-+                Text("View all")
-+                Icon(Icons.Default.ArrowForward, contentDescription = null)
-+            }
-+        }
-+        
-+        Spacer(modifier = Modifier.height(8.dp))
-+        
-+        if (state.activeVehicleSessions.isEmpty()) {
-+            Card(
-+                modifier = Modifier.fillMaxWidth(),
-+                colors = CardDefaults.cardColors(containerColor = Color.White)
-+            ) {
-+                Box(
-+                    modifier = Modifier
-+                        .fillMaxWidth()
-+                        .padding(32.dp),
-+                    contentAlignment = Alignment.Center
-                 ) {
--                    Text("Manage Users")
-+                    Text(
-+                        text = "No active vehicle sessions",
-+                        color = Color.Gray,
-+                        fontSize = 16.sp
-+                    )
-+                }
-+            }
-+        } else {
-+            Card(
-+                modifier = Modifier.fillMaxWidth(),
-+                colors = CardDefaults.cardColors(containerColor = Color.White)
-+            ) {
-+                Column(modifier = Modifier.padding(16.dp)) {
-+                    state.activeVehicleSessions.forEachIndexed { index, session ->
-+                        VehicleSessionItem(
-+                            vehicleId = session.vehicleId,
-+                            vehicleType = session.vehicleType,
-+                            progress = session.progress,
-+                            operatorName = session.operatorName,
-+                            operatorImage = session.operatorImage ?: "",
-+                            vehicleImage = session.vehicleImage,
-+                            codename = session.codename
-+                        )
-+                        
-+                        if (index < state.activeVehicleSessions.size - 1) {
-+                            Spacer(modifier = Modifier.height(16.dp))
-+                        }
-+                    }
-                 }
-             }
-         }
- 
--        // Sección de Gestión de Vehículos
--        ElevatedCard(
--            modifier = Modifier.fillMaxWidth()
--        ) {
-+        if (state.isLoading) {
-+            LinearProgressIndicator(
-+                modifier = Modifier
-+                    .fillMaxWidth()
-+                    .padding(top = 16.dp)
-+            )
-+        }
-+    }
-+}
-+
-+@Composable
-+private fun VehicleSessionItem(
-+    vehicleId: String,
-+    vehicleType: String,
-+    progress: Float,
-+    operatorName: String,
-+    operatorImage: String,
-+    vehicleImage: String?,
-+    codename: String
-+) {
-+    Row(
-+        modifier = Modifier.fillMaxWidth(),
-+        horizontalArrangement = Arrangement.SpaceBetween,
-+        verticalAlignment = Alignment.CenterVertically
-+    ) {
-+        Row(verticalAlignment = Alignment.CenterVertically) {
-+            AsyncImage(
-+                model = vehicleImage,
-+                contentDescription = "Vehicle image",
-+                modifier = Modifier
-+                    .size(60.dp)
-+                    .clip(RoundedCornerShape(8.dp)),
-+                contentScale = ContentScale.Crop
-+            )
-+            Spacer(modifier = Modifier.width(12.dp))
-+            Column(modifier = Modifier.weight(1f)) {
-+                Row(verticalAlignment = Alignment.CenterVertically) {
-+                    Text(
-+                        text = codename,
-+                        fontWeight = FontWeight.Bold
-+                    )
-+                    Spacer(modifier = Modifier.width(8.dp))
-+                    Text(
-+                        text = vehicleType,
-+                        color = Color.Gray,
-+                        fontSize = 14.sp
-+                    )
-+                }
-+                
-+                Spacer(modifier = Modifier.height(4.dp))
-+                
-+                Row(verticalAlignment = Alignment.CenterVertically) {
-+                    Text(
-+                        text = "${(progress * 100).toInt()}%",
-+                        fontWeight = FontWeight.Bold,
-+                        fontSize = 20.sp
-+                    )
-+                    Spacer(modifier = Modifier.width(8.dp))
-+                    LinearProgressIndicator(
-+                        progress = progress,
-+                        modifier = Modifier
-+                            .weight(1f)
-+                            .height(8.dp)
-+                            .clip(RoundedCornerShape(4.dp)),
-+                        color = when {
-+                            progress > 0.7f -> Color(0xFF4CAF50)
-+                            progress > 0.3f -> Color(0xFFFFA726)
-+                            else -> Color(0xFFF44336)
-+                        }
-+                    )
-+                }
-+            }
-+            
-+            Spacer(modifier = Modifier.width(16.dp))
-+            
-             Column(
--                modifier = Modifier.padding(16.dp)
-+                horizontalAlignment = Alignment.End,
-+                modifier = Modifier.width(100.dp)
-             ) {
-+                AsyncImage(
-+                    model = operatorImage,
-+                    contentDescription = null,
-+                    modifier = Modifier
-+                        .size(40.dp)
-+                        .clip(CircleShape),
-+                    contentScale = ContentScale.Crop
-+                )
-                 Text(
--                    text = "Vehicle Management",
--                    style = MaterialTheme.typography.titleMedium
-+                    text = "Operator",
-+                    fontSize = 12.sp,
-+                    color = Color.Gray
-+                )
-+                Text(
-+                    text = operatorName,
-+                    fontSize = 14.sp,
-+                    fontWeight = FontWeight.Medium,
-+                    maxLines = 1
-                 )
--                Spacer(modifier = Modifier.height(8.dp))
--                Button(
--                    onClick = { onNavigate(Screen.Vehicles.route) },
--                    modifier = Modifier.fillMaxWidth()
--                ) {
--                    Text("Manage Vehicles")
--                }
-             }
-         }
-+    }
-+}
- 
--        // Sección de Reportes
--        ElevatedCard(
--            modifier = Modifier.fillMaxWidth()
-+@Composable
-+private fun OperatorsSessionSection(state: AdminDashboardState, navController: NavController) {
-+    Column {
-+        Row(
-+            modifier = Modifier.fillMaxWidth(),
-+            horizontalArrangement = Arrangement.SpaceBetween,
-+            verticalAlignment = Alignment.CenterVertically
-         ) {
--            Column(
--                modifier = Modifier.padding(16.dp)
-+            Text(
-+                text = "Operators in-Session",
-+                fontSize = 20.sp,
-+                fontWeight = FontWeight.Bold
-+            )
-+            TextButton(onClick = { navController.navigate(Screen.OperatorSessionList.route) }) {
-+                Text("View all")
-+                Icon(Icons.Default.ArrowForward, contentDescription = null)
-+            }
-+        }
-+        
-+        Spacer(modifier = Modifier.height(8.dp))
-+
-+        if (state.activeOperators.isEmpty()) {
-+            Card(
-+                modifier = Modifier.fillMaxWidth(),
-+                colors = CardDefaults.cardColors(containerColor = Color.White)
-             ) {
--                Text(
--                    text = "Reports",
--                    style = MaterialTheme.typography.titleMedium
--                )
--                Spacer(modifier = Modifier.height(8.dp))
--                Button(
--                    onClick = { onNavigate("reports") },
--                    modifier = Modifier.fillMaxWidth()
-+                Box(
-+                    modifier = Modifier
-+                        .fillMaxWidth()
-+                        .padding(32.dp),
-+                    contentAlignment = Alignment.Center
-                 ) {
--                    Text("View Reports")
-+                    Text(
-+                        text = "No operators currently in session",
-+                        color = Color.Gray,
-+                        fontSize = 16.sp
-+                    )
-+                }
-+            }
-+        } else {
-+            Row(
-+                modifier = Modifier.fillMaxWidth(),
-+                horizontalArrangement = Arrangement.spacedBy(8.dp)
-+            ) {
-+                state.activeOperators.forEach { operator ->
-+                    OperatorItem(
-+                        name = operator.name,
-+                        image = operator.image ?: "",
-+                        isActive = operator.isActive
-+                    )
-                 }
-             }
-         }
- 
--        // Sección de Certificaciones
--        ElevatedCard(
--            modifier = Modifier.fillMaxWidth()
-+        if (state.isLoading) {
-+            LinearProgressIndicator(
-+                modifier = Modifier
-+                    .fillMaxWidth()
-+                    .padding(top = 16.dp)
-+            )
-+        }
-+    }
-+}
-+
-+@Composable
-+private fun OperatorItem(
-+    name: String,
-+    image: String,
-+    isActive: Boolean
-+) {
-+    Card(
-+        modifier = Modifier.width(111.dp),
-+        colors = CardDefaults.cardColors(containerColor = Color.White)
-         ) {
-             Column(
--                modifier = Modifier.padding(16.dp)
--            ) {
--                Text(
--                    text = "Certifications",
--                    style = MaterialTheme.typography.titleMedium
-+            modifier = Modifier.padding(8.dp),
-+            horizontalAlignment = Alignment.CenterHorizontally
-+        ) {
-+            Box {
-+                AsyncImage(
-+                    model = image,
-+                    contentDescription = null,
-+                    modifier = Modifier
-+                        .size(80.dp)
-+                        .clip(RoundedCornerShape(8.dp)),
-+                    contentScale = ContentScale.Crop
-                 )
--                Spacer(modifier = Modifier.height(8.dp))
--                Button(
--                    onClick = { onNavigate("certifications") },
--                    modifier = Modifier.fillMaxWidth()
--                ) {
--                    Text("Manage Certifications")
-+                if (isActive) {
-+                    Box(
-+                        modifier = Modifier
-+                            .size(12.dp)
-+                            .clip(CircleShape)
-+                            .background(Color(0xFF4CAF50))
-+                            .align(Alignment.BottomEnd)
-+                    )
-                 }
-             }
-+            
-+            Spacer(modifier = Modifier.height(4.dp))
-+            
-+            Text(
-+                text = name,
-+                fontSize = 14.sp,
-+                fontWeight = FontWeight.Medium
-+            )
-+            Text(
-+                text = if (isActive) "Active" else "Inactive",
-+                fontSize = 12.sp,
-+                color = if (isActive) Color(0xFF4CAF50) else Color.Gray
-+            )
-         }
-     }
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
-index 75f43a2..b918ddb 100644
---- a/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/dashboard/DashboardScreen.kt
-@@ -39,17 +39,21 @@ import androidx.compose.material.icons.filled.QrCodeScanner
- import androidx.compose.material.icons.filled.Report
- import androidx.compose.runtime.setValue
- import androidx.compose.ui.unit.sp
-+import app.forku.core.network.NetworkConnectivityManager
- import app.forku.domain.model.vehicle.toColor
- import app.forku.presentation.dashboard.components.SessionCard
--import app.forku.domain.model.user.Permissions
--import app.forku.presentation.common.components.PermissionGate
-+import androidx.compose.foundation.interaction.MutableInteractionSource
-+import androidx.compose.foundation.interaction.collectIsHoveredAsState
-+import androidx.compose.foundation.clickable
-+
- 
- @OptIn(ExperimentalMaterialApi::class)
- @Composable
- fun DashboardScreen(
-     navController: NavController,
-+    onNavigate: (String) -> Unit,
-     viewModel: DashboardViewModel = hiltViewModel(),
--    onNavigate: (String) -> Unit
-+    networkManager: NetworkConnectivityManager
- ) {
-     val dashboardState by viewModel.state.collectAsState()
-     val currentUser by viewModel.currentUser.collectAsState()
-@@ -57,6 +61,11 @@ fun DashboardScreen(
-     // Add loading state observation
-     var isCheckoutLoading by remember { mutableStateOf(false) }
- 
-+    val pullRefreshState = rememberPullRefreshState(
-+        refreshing = dashboardState.isLoading,
-+        onRefresh = { viewModel.refreshWithLoading() }
-+    )
-+
-     // Handle loading state during checkout
-     LaunchedEffect(dashboardState.currentSession) {
-         if (dashboardState.currentSession == null && isCheckoutLoading) {
-@@ -76,51 +85,26 @@ fun DashboardScreen(
-         viewModel.refresh()
-     }
- 
--    val pullRefreshState = rememberPullRefreshState(
--        refreshing = dashboardState.isLoading,
--        onRefresh = { viewModel.refreshWithLoading() }
--    )
--
--    Column {
--        // Contenido común para todos los usuarios
--        CommonContent()
--
--        // Funcionalidades específicas para Admin
--        PermissionGate(
--            user = currentUser,
--            requiredPermissions = setOf(Permissions.MANAGE_USERS),
--        ) {
--            UserManagementSection()
--        }
--
--        // Funcionalidades específicas para Operator
--        PermissionGate(
--            user = currentUser,
--            requiredPermissions = setOf(Permissions.OPERATE_VEHICLE),
--        ) {
--            VehicleOperationSection()
--        }
--    }
--
-     BaseScreen(
-         navController = navController,
-         showBottomBar = true,
-+        showBackButton = false,
-         currentVehicleId = dashboardState.currentSession?.vehicleId,
-         currentCheckId = dashboardState.lastPreShiftCheck?.id,
--        dashboardState = dashboardState
-+        dashboardState = dashboardState,
-+        networkManager = networkManager
-     ) { padding ->
-         Box(
-             modifier = Modifier
-                 .fillMaxSize()
--                .padding(padding)
-                 .pullRefresh(pullRefreshState)
-         ) {
-             Column(
-                 modifier = Modifier
-                     .fillMaxSize()
--                    .padding(16.dp),
--                horizontalAlignment = Alignment.CenterHorizontally,
--                verticalArrangement = Arrangement.Center
-+                    .padding(padding)
-+                    .padding(top = 32.dp),
-+                horizontalAlignment = Alignment.CenterHorizontally
-             ) {
-                 SessionCard(
-                     vehicle = dashboardState.displayVehicle,
-@@ -155,28 +139,6 @@ fun DashboardScreen(
-                 )
-             }
- 
--            // Show loading indicator
--            if (isCheckoutLoading) {
--                CircularProgressIndicator(
--                    modifier = Modifier.align(Alignment.Center)
--                )
--            }
--
--            // Show error if any
--            dashboardState.error?.let { error ->
--                Snackbar(
--                    modifier = Modifier.align(Alignment.BottomCenter),
--                    action = {
--                        TextButton(onClick = { viewModel.clearError() }) {
--                            Text("Retry")
--                        }
--                    }
--                ) {
--                    Text(error)
--                }
--            }
--
--            // Pull to refresh indicator
-             PullRefreshIndicator(
-                 refreshing = dashboardState.isLoading,
-                 state = pullRefreshState,
-@@ -282,15 +244,18 @@ private fun NavigationButton(
- ) {
-     val buttonSize = if (isCenter) 120.dp else 90.dp
-     val iconSize = if (isCenter) 32.dp else 24.dp
-+    val interactionSource = remember { MutableInteractionSource() }
-     
--    OutlinedButton(
--        onClick = onClick,
--        modifier = modifier.size(buttonSize),
-+    Surface(
-+        modifier = modifier
-+            .size(buttonSize)
-+            .clickable(
-+                interactionSource = interactionSource,
-+                indication = null,
-+                onClick = onClick
-+            ),
-         shape = CircleShape,
--        colors = ButtonDefaults.outlinedButtonColors(
--            containerColor = Color.White,
--            contentColor = Color.Black
--        ),
-+        color = Color.White,
-         border = BorderStroke(
-             width = if (isCenter) 3.dp else 0.dp,
-             color = if (isCenter) VehicleStatus.AVAILABLE.toColor().copy(alpha = 0.1f) else Color.Gray.copy(alpha = 0.3f)
-@@ -299,7 +264,9 @@ private fun NavigationButton(
-         Column(
-             horizontalAlignment = Alignment.CenterHorizontally,
-             verticalArrangement = Arrangement.Center,
--            modifier = Modifier.padding(0.dp).fillMaxWidth()
-+            modifier = Modifier
-+                .padding(0.dp)
-+                .fillMaxWidth()
-         ) {
-             Icon(
-                 imageVector = icon,
-@@ -321,11 +288,6 @@ private fun CommonContent() {
-     // Implementation of CommonContent
- }
- 
--@Composable
--private fun UserManagementSection() {
--    // Implementation of UserManagementSection
--}
--
- @Composable
- private fun VehicleOperationSection() {
-     // Implementation of VehicleOperationSection
-diff --git a/app/src/main/java/app/forku/presentation/dashboard/OperatorDashboardScreen.kt b/app/src/main/java/app/forku/presentation/dashboard/OperatorDashboardScreen.kt
-deleted file mode 100644
-index 667aa83..0000000
---- a/app/src/main/java/app/forku/presentation/dashboard/OperatorDashboardScreen.kt
-+++ /dev/null
-@@ -1,139 +0,0 @@
--package app.forku.presentation.dashboard
--
--import androidx.compose.foundation.layout.*
--import androidx.compose.material3.*
--import androidx.compose.runtime.Composable
--import androidx.compose.runtime.collectAsState
--import androidx.compose.runtime.getValue
--import androidx.compose.ui.Alignment
--import androidx.compose.ui.Modifier
--import androidx.compose.ui.unit.dp
--import androidx.navigation.NavController
--import app.forku.presentation.navigation.Screen
--import androidx.hilt.navigation.compose.hiltViewModel
--
--@Composable
--fun OperatorDashboardScreen(
--    navController: NavController? = null,
--    onNavigate: (String) -> Unit = {},
--    viewModel: DashboardViewModel = hiltViewModel()
--) {
--    val dashboardState by viewModel.state.collectAsState()
--    val currentUser by viewModel.currentUser.collectAsState()
--
--    Column(
--        modifier = Modifier
--            .fillMaxSize()
--            .padding(16.dp),
--        horizontalAlignment = Alignment.CenterHorizontally,
--        verticalArrangement = Arrangement.spacedBy(16.dp)
--    ) {
--        Text(
--            text = "Operator Dashboard",
--            style = MaterialTheme.typography.headlineMedium
--        )
--
--        // Sección de Vehículo Actual
--        if (dashboardState.currentSession != null) {
--            ElevatedCard(
--                modifier = Modifier.fillMaxWidth()
--            ) {
--                Column(
--                    modifier = Modifier.padding(16.dp)
--                ) {
--                    Text(
--                        text = "Current Vehicle",
--                        style = MaterialTheme.typography.titleMedium
--                    )
--                    Spacer(modifier = Modifier.height(8.dp))
--                    dashboardState.displayVehicle?.let { vehicle ->
--                        Text("Vehicle: ${vehicle.codename}")
--                        Text("Status: ${vehicle.status}")
--                    }
--                    Button(
--                        onClick = { viewModel.endCurrentSession() },
--                        modifier = Modifier.fillMaxWidth()
--                    ) {
--                        Text("End Session")
--                    }
--                }
--            }
--        }
--
--        // Sección de Inicio de Sesión
--        if (dashboardState.currentSession == null) {
--            ElevatedCard(
--                modifier = Modifier.fillMaxWidth()
--            ) {
--                Column(
--                    modifier = Modifier.padding(16.dp)
--                ) {
--                    Text(
--                        text = "Start Session",
--                        style = MaterialTheme.typography.titleMedium
--                    )
--                    Spacer(modifier = Modifier.height(8.dp))
--                    Button(
--                        onClick = { onNavigate(Screen.QRScanner.route) },
--                        modifier = Modifier.fillMaxWidth()
--                    ) {
--                        Text("Scan Vehicle QR")
--                    }
--                }
--            }
--        }
--
--        // Sección de Reportes de Incidentes
--        ElevatedCard(
--            modifier = Modifier.fillMaxWidth()
--        ) {
--            Column(
--                modifier = Modifier.padding(16.dp)
--            ) {
--                Text(
--                    text = "Incident Reporting",
--                    style = MaterialTheme.typography.titleMedium
--                )
--                Spacer(modifier = Modifier.height(8.dp))
--                Button(
--                    onClick = { onNavigate(Screen.SafetyReporting.route) },
--                    modifier = Modifier.fillMaxWidth()
--                ) {
--                    Text("Report Incident")
--                }
--            }
--        }
--
--        // Sección de Historial
--        ElevatedCard(
--            modifier = Modifier.fillMaxWidth()
--        ) {
--            Column(
--                modifier = Modifier.padding(16.dp)
--            ) {
--                Text(
--                    text = "History",
--                    style = MaterialTheme.typography.titleMedium
--                )
--                Spacer(modifier = Modifier.height(8.dp))
--                Row(
--                    modifier = Modifier.fillMaxWidth(),
--                    horizontalArrangement = Arrangement.spacedBy(8.dp)
--                ) {
--                    Button(
--                        onClick = { onNavigate(Screen.IncidentsHistory.route) },
--                        modifier = Modifier.weight(1f)
--                    ) {
--                        Text("Incidents")
--                    }
--                    Button(
--                        onClick = { onNavigate(Screen.OperatorsCICOHistory.route) },
--                        modifier = Modifier.weight(1f)
--                    ) {
--                        Text("Sessions")
--                    }
--                }
--            }
--        }
--    }
--} 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt b/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
-index fbd9008..c001ac3 100644
---- a/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
-+++ b/app/src/main/java/app/forku/presentation/dashboard/components/SessionCard.kt
-@@ -82,7 +82,7 @@ private fun SessionContent(
-     ) {
-         
-         Text(
--            text = if (isActive) "Active Session" else "Welcome ${user?.name ?: ""}!",
-+            text = if (isActive) "Active Session" else "Welcome ${user?.firstName ?: ""}!",
-             style = MaterialTheme.typography.titleMedium,
-             color = MaterialTheme.colorScheme.primary
-         )
-diff --git a/app/src/main/java/app/forku/presentation/incident/IncidentReportScreen.kt b/app/src/main/java/app/forku/presentation/incident/IncidentReportScreen.kt
-index df23c00..7e56d44 100644
---- a/app/src/main/java/app/forku/presentation/incident/IncidentReportScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/incident/IncidentReportScreen.kt
-@@ -26,6 +26,7 @@ import app.forku.domain.model.incident.IncidentType
- import app.forku.domain.model.incident.toDisplayText
- import android.Manifest
- import android.content.pm.PackageManager
-+import app.forku.core.network.NetworkConnectivityManager
- import app.forku.presentation.common.components.ForkuButton
- import app.forku.presentation.common.components.LocationPermissionHandler
- 
-@@ -35,7 +36,8 @@ fun IncidentReportScreen(
-     incidentType: String,
-     onNavigateBack: () -> Unit,
-     viewModel: IncidentReportViewModel = hiltViewModel(),
--    navController: NavController
-+    navController: NavController,
-+    networkManager: NetworkConnectivityManager
- ) {
-     val state by viewModel.state.collectAsState()
-     val locationState by viewModel.locationState.collectAsState()
-@@ -115,7 +117,8 @@ fun IncidentReportScreen(
-         navController = navController,
-         viewModel = viewModel,
-         showBottomBar = false,
--        topBarTitle = "${IncidentType.valueOf(incidentType).toDisplayText()} Incident"
-+        topBarTitle = "${IncidentType.valueOf(incidentType).toDisplayText()} Incident",
-+        networkManager = networkManager
-     ) { padding ->
-         Column(
-             modifier = Modifier
-diff --git a/app/src/main/java/app/forku/presentation/incident/IncidentReportState.kt b/app/src/main/java/app/forku/presentation/incident/IncidentReportState.kt
-index 2746af5..b9b6eb2 100644
---- a/app/src/main/java/app/forku/presentation/incident/IncidentReportState.kt
-+++ b/app/src/main/java/app/forku/presentation/incident/IncidentReportState.kt
-@@ -34,7 +34,8 @@ data class IncidentReportState(
-     val sessionId: String? = null,
-     
-     // People involved
--    val operatorId: String? = null,
-+    val userId: String? = null,
-+    val reporterName: String? = null,
-     val othersInvolved: List<String> = emptyList(),
-     val injuries: String = "",
-     val injuryLocations: List<String> = emptyList(),
-@@ -73,7 +74,11 @@ data class IncidentReportState(
-     
-     // Add to IncidentReportState
-     val availableVehicles: List<Vehicle> = emptyList(),
--    val showVehicleSelector: Boolean = false
-+    val showVehicleSelector: Boolean = false,
-+
-+    // Weather and location loading state
-+    val weatherLoaded: Boolean = false,
-+    val locationLoaded: Boolean = false
- )
- 
- sealed class ValidationResult {
-@@ -92,36 +97,48 @@ fun IncidentReportState.validate(): ValidationResult {
- }
- 
- fun IncidentReportState.validateCollision(): ValidationResult {
-+    val fields = typeSpecificFields as? IncidentTypeFields.CollisionFields
-     return when {
-         description.isBlank() -> ValidationResult.Error("Description is required")
--        location.isBlank() -> ValidationResult.Error("Location is required")
-         vehicleId == null -> ValidationResult.Error("Vehicle information is required")
--        operatorId == null -> ValidationResult.Error("Operator information is required")
-+        userId == null -> ValidationResult.Error("Operator information is required")
-+        fields?.collisionType == null -> ValidationResult.Error("Collision type is required")
-+        fields.damageOccurrence == null -> ValidationResult.Error("Damage occurrence is required")
-+        fields.immediateCause == null -> ValidationResult.Error("Immediate cause is required")
-         else -> ValidationResult.Success
-     }
- }
- 
- fun IncidentReportState.validateNearMiss(): ValidationResult {
-+    val fields = typeSpecificFields as? IncidentTypeFields.NearMissFields
-     return when {
-         description.isBlank() -> ValidationResult.Error("Description is required")
--        location.isBlank() -> ValidationResult.Error("Location is required")
-+        userId == null -> ValidationResult.Error("Operator information is required")
-+        fields?.nearMissType == null -> ValidationResult.Error("Near miss type is required")
-+        fields.immediateCause == null -> ValidationResult.Error("Immediate cause is required")
-         else -> ValidationResult.Success
-     }
- }
- 
- fun IncidentReportState.validateHazard(): ValidationResult {
-+    val fields = typeSpecificFields as? IncidentTypeFields.HazardFields
-     return when {
-         description.isBlank() -> ValidationResult.Error("Description is required")
--        location.isBlank() -> ValidationResult.Error("Location is required")
-+        userId == null -> ValidationResult.Error("Operator information is required")
-+        fields?.hazardType == null -> ValidationResult.Error("Hazard type is required")
-         else -> ValidationResult.Success
-     }
- }
- 
- fun IncidentReportState.validateVehicleFail(): ValidationResult {
-+    val fields = typeSpecificFields as? IncidentTypeFields.VehicleFailFields
-     return when {
-         description.isBlank() -> ValidationResult.Error("Description is required")
-         vehicleId == null -> ValidationResult.Error("Vehicle information is required")
--        location.isBlank() -> ValidationResult.Error("Location is required")
-+        userId == null -> ValidationResult.Error("Operator information is required")
-+        fields?.failureType == null -> ValidationResult.Error("Failure type is required")
-+        fields.damageOccurrence == null -> ValidationResult.Error("Damage occurrence is required")
-+        fields.immediateCause == null -> ValidationResult.Error("Immediate cause is required")
-         else -> ValidationResult.Success
-     }
- }
-diff --git a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
-index 4e22b85..970a413 100644
---- a/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/incident/IncidentReportViewModel.kt
-@@ -19,6 +19,8 @@ import javax.inject.Inject
- import android.net.Uri
- import app.forku.core.location.LocationManager
- import app.forku.core.location.LocationState
-+import app.forku.data.repository.notification.NotificationRepository
-+import app.forku.domain.model.incident.toDisplayText
- import app.forku.domain.model.vehicle.Vehicle
- import app.forku.domain.repository.vehicle.VehicleRepository
- import java.time.LocalDateTime
-@@ -34,6 +36,7 @@ import kotlinx.coroutines.cancel
- import kotlinx.coroutines.delay
- import app.forku.domain.repository.user.UserRepository
- 
-+
- @HiltViewModel
- class IncidentReportViewModel @Inject constructor(
-     private val reportIncidentUseCase: ReportIncidentUseCase,
-@@ -43,7 +46,8 @@ class IncidentReportViewModel @Inject constructor(
-     private val userRepository: UserRepository,
-     private val vehicleRepository: VehicleRepository,
-     private val checklistRepository: ChecklistRepository,
--    private val locationManager: LocationManager
-+    private val locationManager: LocationManager,
-+    private val notificationRepository: NotificationRepository
- ) : ViewModel() {
- 
-     private val _state = MutableStateFlow(IncidentReportState())
-@@ -87,18 +91,23 @@ class IncidentReportViewModel @Inject constructor(
-     private fun observeLocationUpdates() {
-         viewModelScope.launch {
-             locationState.collect { locationStateValue ->
--                locationStateValue.location?.let { location ->
-+                if (locationStateValue.location != null) {
-                     _state.update { it.copy(
--                        location = location,
--                        locationCoordinates = location
-+                        location = locationStateValue.location,
-+                        locationCoordinates = locationStateValue.location,
-+                        locationLoaded = true
-                     )}
-                 }
-+                
-+                if (locationStateValue.latitude != null && locationStateValue.longitude != null) {
-+                    if (!state.value.weatherLoaded) {
-+                        fetchWeather(locationStateValue.latitude, locationStateValue.longitude)
-+                    }
-+                }
-+
-                 locationStateValue.error?.let { error ->
-                     _state.update { it.copy(error = error) }
-                 }
--                if (locationStateValue.latitude != null && locationStateValue.longitude != null) {
--                    fetchWeather(locationStateValue.latitude, locationStateValue.longitude)
--                }
-             }
-         }
-     }
-@@ -116,9 +125,42 @@ class IncidentReportViewModel @Inject constructor(
-                 val vehicles = vehicleRepository.getVehicles()
-                 _state.update { it.copy(availableVehicles = vehicles) }
- 
-+                // Get current user first
-+                var currentUser = userRepository.getCurrentUser()
-+                android.util.Log.d("IncidentReport", "Initial current user fetch: $currentUser")
-+                
-+                // If no user found, try to refresh
-+                if (currentUser == null) {
-+                    android.util.Log.d("IncidentReport", "No user found, attempting to refresh")
-+                    val refreshResult = userRepository.refreshCurrentUser()
-+                    currentUser = refreshResult.getOrNull()
-+                    android.util.Log.d("IncidentReport", "After refresh, current user: $currentUser")
-+                }
-+                
-+                // Set user information regardless of session
-+                currentUser?.let { user ->
-+                    android.util.Log.d("IncidentReport", """
-+                        Setting user info:
-+                        - ID: ${user.id}
-+                        - Name: ${user.fullName}
-+                        - Token: ${user.token.take(10)}...
-+                        - Role: ${user.role}
-+                    """.trimIndent())
-+                    
-+                    _state.update { currentState ->
-+                        currentState.copy(
-+                            userId = user.id,
-+                            reporterName = user.fullName
-+                        )
-+                    }
-+                } ?: run {
-+                    android.util.Log.e("IncidentReport", "No user found after refresh attempt")
-+                    _state.update { it.copy(error = "User not authenticated") }
-+                }
-+
-                 // Then try to get current session
-                 val session = sessionRepository.getCurrentSession()
--                val currentUser = userRepository.getCurrentUser()
-+                android.util.Log.d("IncidentReport", "Current session: $session")
-                 
-                 session?.vehicleId?.let { vehicleId ->
-                     try {
-@@ -131,7 +173,6 @@ class IncidentReportViewModel @Inject constructor(
-                                 vehicleType = vehicle.type,
-                                 vehicleName = vehicle.codename,
-                                 sessionId = session.id,
--                                operatorId = currentUser?.id,
-                                 lastPreshiftCheck = lastCheck?.lastCheckDateTime?.let { dateString ->
-                                     LocalDateTime.parse(dateString, DateTimeFormatter.ISO_DATE_TIME)
-                                 },
-@@ -143,6 +184,7 @@ class IncidentReportViewModel @Inject constructor(
-                     }
-                 }
-             } catch (e: Exception) {
-+                android.util.Log.e("IncidentReport", "Error in loadInitialData", e)
-                 _state.update { it.copy(error = "Failed to load initial data") }
-             }
-         }
-@@ -214,7 +256,7 @@ class IncidentReportViewModel @Inject constructor(
-                                 preshiftCheckStatus = state.value.preshiftCheckStatus,
-                                 typeSpecificFields = state.value.typeSpecificFields,
-                                 sessionId = state.value.sessionId,
--                                operatorId = state.value.operatorId,
-+                                userId = state.value.userId,
-                                 othersInvolved = state.value.othersInvolved,
-                                 injuries = state.value.injuries,
-                                 injuryLocations = state.value.injuryLocations,
-@@ -228,7 +270,14 @@ class IncidentReportViewModel @Inject constructor(
-                                 locationCoordinates = state.value.locationCoordinates
-                             )
- 
--                            result.onSuccess {
-+                            result.onSuccess { incident ->
-+                                // Show notification for the new incident
-+                                notificationRepository.simulateIncidentNotification(
-+                                    incidentId = incident.id ?: "unknown",
-+                                    title = "New ${incident.type.toDisplayText()} Reported",
-+                                    message = "Location: ${incident.location}"
-+                                )
-+                                
-                                 _state.update { it.copy(
-                                     isLoading = false,
-                                     showSuccessDialog = true
-@@ -282,27 +331,42 @@ class IncidentReportViewModel @Inject constructor(
-     }
- 
-     fun onLocationPermissionGranted() {
--        locationManager.onLocationPermissionGranted()
-+        viewModelScope.launch {
-+            try {
-+                locationManager.startLocationUpdates()
-+                // Esperar un momento para que la ubicación se actualice
-+                delay(1000)
-+                // Forzar una actualización de ubicación
-+                locationManager.requestSingleUpdate()
-+            } catch (e: Exception) {
-+                _state.update { it.copy(error = "Error starting location updates: ${e.message}") }
-+            }
-+        }
-     }
- 
-     fun onLocationPermissionDenied() {
--        locationManager.onLocationPermissionDenied()
-+        _state.update { it.copy(
-+            error = "Location permission is required to report incidents"
-+        )}
-     }
- 
-     fun onLocationSettingsDenied() {
--        locationManager.onLocationSettingsDenied()
-+        _state.update { it.copy(
-+            error = "Location settings need to be enabled to report incidents"
-+        )}
-     }
- 
-     private fun fetchWeather(latitude: Double, longitude: Double) {
-         viewModelScope.launch {
--            weatherRepository.getWeatherByCoordinates(latitude, longitude)
--                .onSuccess { weather ->
--                    val weatherDescription = "${weather.description}, ${weather.temperature}°F"
--                    _state.update { it.copy(weather = weatherDescription) }
--                }
--                .onFailure { error ->
--                    android.util.Log.e("Weather", "Failed to fetch weather", error)
--                }
-+            try {
-+                val weather = weatherRepository.getCurrentWeather(latitude, longitude)
-+                _state.update { it.copy(
-+                    weather = weather,
-+                    weatherLoaded = true
-+                )}
-+            } catch (e: Exception) {
-+                _state.update { it.copy(error = "Error fetching weather: ${e.message}") }
-+            }
-         }
-     }
- 
-diff --git a/app/src/main/java/app/forku/presentation/incident/components/DamageAndImpactSection.kt b/app/src/main/java/app/forku/presentation/incident/components/DamageAndImpactSection.kt
-index 56259be..a2206a7 100644
---- a/app/src/main/java/app/forku/presentation/incident/components/DamageAndImpactSection.kt
-+++ b/app/src/main/java/app/forku/presentation/incident/components/DamageAndImpactSection.kt
-@@ -29,10 +29,10 @@ fun DamageAndImpactSection(
-         // Damage Occurrence Dropdown
-         var expanded by remember { mutableStateOf(false) }
-         val currentDamage = when (val fields = state.typeSpecificFields) {
--            is IncidentTypeFields.CollisionFields -> fields.damageOccurrence?.name
--            is IncidentTypeFields.VehicleFailFields -> fields.damageOccurrence?.name
-+            is IncidentTypeFields.CollisionFields -> fields.damageOccurrence
-+            is IncidentTypeFields.VehicleFailFields -> fields.damageOccurrence
-             else -> null
--        }?.replace("_", " ")
-+        }
- 
-         ExposedDropdownMenuBox(
-             expanded = expanded,
-@@ -40,10 +40,10 @@ fun DamageAndImpactSection(
-             modifier = Modifier.fillMaxWidth()
-         ) {
-             CustomOutlinedTextField(
--                value = currentDamage ?: "",
-+                value = currentDamage?.name?.replace("_", " ") ?: "",
-                 onValueChange = {},
-                 readOnly = true,
--                label = "Damage Occurrence",
-+                label = "Damage Occurrence *",
-                 trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },
-                 modifier = Modifier
-                     .menuAnchor()
-diff --git a/app/src/main/java/app/forku/presentation/incident/components/IncidentDetailsSection.kt b/app/src/main/java/app/forku/presentation/incident/components/IncidentDetailsSection.kt
-index 4c923c5..c3aaea2 100644
---- a/app/src/main/java/app/forku/presentation/incident/components/IncidentDetailsSection.kt
-+++ b/app/src/main/java/app/forku/presentation/incident/components/IncidentDetailsSection.kt
-@@ -99,7 +99,7 @@ fun IncidentDetailsSection(
-         FormFieldDivider()
- 
-         // Hidden Weather Conditions field - maintains state but not visible
--        if (false) {  // This ensures the composable is never rendered
-+        if (true) {  // This ensures the composable is never rendered
-             CustomOutlinedTextField(
-                 value = state.weather,
-                 onValueChange = { },
-@@ -114,7 +114,7 @@ fun IncidentDetailsSection(
-         }
- 
-         // Hidden Location field - maintains state but not visible
--        if (false) {  // This ensures the composable is never rendered
-+        if (true) {  // This ensures the composable is never rendered
-             CustomOutlinedTextField(
-                 value = state.location,
-                 onValueChange = { },
-diff --git a/app/src/main/java/app/forku/presentation/incident/components/PeopleSpecificFields.kt b/app/src/main/java/app/forku/presentation/incident/components/PeopleSpecificFields.kt
-index ab25923..5cc7784 100644
---- a/app/src/main/java/app/forku/presentation/incident/components/PeopleSpecificFields.kt
-+++ b/app/src/main/java/app/forku/presentation/incident/components/PeopleSpecificFields.kt
-@@ -76,9 +76,9 @@ fun BasicPeopleFields(
-     Column(modifier = modifier.fillMaxWidth()) {
- 
-         // Reporter field (read-only)
--        if(false){
-+        if(true){
-             CustomOutlinedTextField(
--                value = state.operatorId ?: "Unknown",
-+                value = state.userId ?: "Unknown",
-                 onValueChange = { },
-                 label = "Reported By",
-                 readOnly = true,
-diff --git a/app/src/main/java/app/forku/presentation/incident/detail/IncidentDetailScreen.kt b/app/src/main/java/app/forku/presentation/incident/detail/IncidentDetailScreen.kt
-index b6066c9..c20f32d 100644
---- a/app/src/main/java/app/forku/presentation/incident/detail/IncidentDetailScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/incident/detail/IncidentDetailScreen.kt
-@@ -5,25 +5,37 @@ import androidx.compose.material3.*
- import androidx.compose.runtime.Composable
- import androidx.compose.runtime.LaunchedEffect
- import androidx.compose.runtime.getValue
-+import androidx.compose.ui.Alignment
- import androidx.compose.ui.Modifier
- import androidx.compose.ui.unit.dp
- import androidx.hilt.navigation.compose.hiltViewModel
- import androidx.lifecycle.compose.collectAsStateWithLifecycle
- import androidx.navigation.NavController
-+import app.forku.core.network.NetworkConnectivityManager
- import app.forku.presentation.common.components.BaseScreen
- import app.forku.presentation.common.components.LoadingOverlay
- import app.forku.presentation.common.components.ErrorScreen
- import app.forku.presentation.common.utils.getRelativeTimeSpanString
-+import androidx.compose.material.ExperimentalMaterialApi
-+import androidx.compose.material.pullrefresh.PullRefreshIndicator
-+import androidx.compose.material.pullrefresh.pullRefresh
-+import androidx.compose.material.pullrefresh.rememberPullRefreshState
- 
--@OptIn(ExperimentalMaterial3Api::class)
-+@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class)
- @Composable
- fun IncidentDetailScreen(
-     incidentId: String,
-     viewModel: IncidentDetailViewModel = hiltViewModel(),
--    navController: NavController
-+    navController: NavController,
-+    networkManager: NetworkConnectivityManager
- ) {
-     val state by viewModel.state.collectAsStateWithLifecycle()
- 
-+    val pullRefreshState = rememberPullRefreshState(
-+        refreshing = state.isLoading,
-+        onRefresh = { viewModel.loadIncidentDetail(incidentId) }
-+    )
-+
-     // Cargar los detalles cuando se inicia la pantalla
-     LaunchedEffect(incidentId) {
-         viewModel.loadIncidentDetail(incidentId)
-@@ -33,10 +45,12 @@ fun IncidentDetailScreen(
-         navController = navController,
-         showTopBar = true,
-         topBarTitle = "Incident Details",
-+        networkManager = networkManager,
-         content = { padding ->
-             Box(
-                 modifier = Modifier
-                     .fillMaxSize()
-+                    .pullRefresh(pullRefreshState)
-                     .padding(padding)
-             ) {
-                 when {
-diff --git a/app/src/main/java/app/forku/presentation/incident/list/IncidentHistoryScreen.kt b/app/src/main/java/app/forku/presentation/incident/list/IncidentHistoryScreen.kt
-index bbb1311..dbec231 100644
---- a/app/src/main/java/app/forku/presentation/incident/list/IncidentHistoryScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/incident/list/IncidentHistoryScreen.kt
-@@ -10,6 +10,7 @@ import androidx.compose.material.icons.filled.ArrowBack
- import androidx.compose.material3.*
- import androidx.compose.runtime.Composable
- import androidx.compose.runtime.getValue
-+import androidx.compose.ui.Alignment
- import androidx.compose.ui.Modifier
- import androidx.compose.ui.text.style.TextOverflow
- import androidx.compose.ui.unit.dp
-@@ -19,57 +20,79 @@ import app.forku.presentation.common.components.LoadingOverlay
- import app.forku.presentation.common.components.ErrorScreen
- import app.forku.presentation.common.utils.getRelativeTimeSpanString
- import androidx.navigation.NavController
-+import app.forku.core.network.NetworkConnectivityManager
- import app.forku.presentation.common.components.BaseScreen
- import app.forku.presentation.navigation.Screen
-+import androidx.compose.material.ExperimentalMaterialApi
-+import androidx.compose.material.pullrefresh.PullRefreshIndicator
-+import androidx.compose.material.pullrefresh.pullRefresh
-+import androidx.compose.material.pullrefresh.rememberPullRefreshState
- 
--
--@OptIn(ExperimentalMaterial3Api::class)
-+@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class)
- @Composable
- fun IncidentHistoryScreen(
-     viewModel: IncidentHistoryViewModel = hiltViewModel(),
-     onNavigateBack: () -> Unit,
-     onNavigateToReport: () -> Unit,
--    navController: NavController
-+    navController: NavController,
-+    networkManager: NetworkConnectivityManager
- ) {
-     val state by viewModel.state.collectAsStateWithLifecycle()
- 
-+    val pullRefreshState = rememberPullRefreshState(
-+        refreshing = state.isLoading,
-+        onRefresh = { viewModel.loadIncidents() }
-+    )
-+
-     BaseScreen(
-         navController = navController,
-         showTopBar = true,
-         topBarTitle = "Incident Reports",
-         content = { padding ->
--            when {
--                state.isLoading -> LoadingOverlay()
--                state.error != null -> ErrorScreen(
--                    message = state.error ?: "Unknown error occurred",
--                    onRetry = { viewModel.loadIncidents() }
--                )
--                else -> {
--                    LazyColumn(
--                        modifier = Modifier
--                            .fillMaxSize()
--                            .padding(padding)
--                    ) {
--                        items(
--                            items = state.incidents,
--                            key = { it.id }
--                        ) { incident ->
--                            IncidentHistoryItem(
--                                incident = incident,
--                                onClick = {
--                                    navController.navigate(
--                                        Screen.IncidentDetail.route.replace(
--                                            "{incidentId}",
--                                            incident.id
-+            Box(
-+                modifier = Modifier
-+                    .fillMaxSize()
-+                    .pullRefresh(pullRefreshState)
-+            ) {
-+                when {
-+                    state.error != null -> ErrorScreen(
-+                        message = state.error ?: "Unknown error occurred",
-+                        onRetry = { viewModel.loadIncidents() }
-+                    )
-+                    else -> {
-+                        LazyColumn(
-+                            modifier = Modifier
-+                                .fillMaxSize()
-+                                .padding(padding)
-+                        ) {
-+                            items(
-+                                items = state.incidents,
-+                                key = { it.id }
-+                            ) { incident ->
-+                                IncidentHistoryItem(
-+                                    incident = incident,
-+                                    onClick = {
-+                                        navController.navigate(
-+                                            Screen.IncidentDetail.route.replace(
-+                                                "{incidentId}",
-+                                                incident.id
-+                                            )
-                                         )
--                                    )
--                                }
--                            )
-+                                    }
-+                                )
-+                            }
-                         }
-                     }
-                 }
-+
-+                PullRefreshIndicator(
-+                    refreshing = state.isLoading,
-+                    state = pullRefreshState,
-+                    modifier = Modifier.align(Alignment.TopCenter)
-+                )
-             }
--        }
-+        },
-+        networkManager = networkManager
-     )
- }
- 
-diff --git a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
-index 3c1a0cb..c3808f8 100644
---- a/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
-+++ b/app/src/main/java/app/forku/presentation/navigation/NavGraph.kt
-@@ -11,6 +11,7 @@ import androidx.navigation.compose.NavHost
- import androidx.navigation.compose.composable
- import androidx.navigation.compose.rememberNavController
- import androidx.navigation.navArgument
-+import app.forku.core.network.NetworkConnectivityManager
- import app.forku.presentation.user.login.LoginScreen
- import app.forku.presentation.dashboard.DashboardScreen
- import app.forku.presentation.checklist.ChecklistScreen
-@@ -29,13 +30,12 @@ import app.forku.presentation.incident.detail.IncidentDetailScreen
- import app.forku.presentation.tour.TourScreen
- import app.forku.presentation.user.register.RegisterScreen
- import app.forku.presentation.dashboard.AdminDashboardScreen
--import app.forku.presentation.dashboard.OperatorDashboardScreen
- import app.forku.presentation.dashboard.UnauthorizedScreen
--import app.forku.domain.model.user.Permissions
--import app.forku.presentation.common.components.PermissionGate
- import app.forku.presentation.dashboard.DashboardViewModel
- import app.forku.presentation.user.login.LoginState
--
-+import app.forku.domain.model.user.UserRole
-+import app.forku.presentation.user.session.OperatorSessionListScreen
-+import app.forku.presentation.vehicle.session.VehicleSessionListScreen
- 
- sealed class Screen(val route: String) {
-     data object Login : Screen("login")
-@@ -54,13 +54,15 @@ sealed class Screen(val route: String) {
-     data object IncidentDetail : Screen("incident_detail/{incidentId}")
-     data object Tour : Screen("tour")
-     data object AdminDashboard : Screen("admin_dashboard")
--    data object OperatorDashboard : Screen("operator_dashboard")
-+    data object VehicleSessionList : Screen("vehicle_session_list")
-+    data object OperatorSessionList : Screen("operator_session_list")
- }
- 
- @Composable
- fun NavGraph(
-     navController: NavHostController = rememberNavController(),
--    startDestination: String = Screen.Tour.route
-+    startDestination: String = Screen.Tour.route,
-+    networkManager: NetworkConnectivityManager
- ) {
-     val viewModel = hiltViewModel<DashboardViewModel>()
-     val currentUser by viewModel.currentUser.collectAsState()
-@@ -72,48 +74,63 @@ fun NavGraph(
-         navController = navController,
-         startDestination = when {
-             !tourCompleted -> Screen.Tour.route
--            loginState is LoginState.Success || hasToken -> Screen.Dashboard.route
-+            loginState is LoginState.Success || hasToken -> {
-+                when (currentUser?.role) {
-+                    UserRole.ADMIN -> Screen.AdminDashboard.route
-+                    else -> Screen.Dashboard.route
-+                }
-+            }
-             else -> Screen.Login.route
-         }
-     ) {
-         composable(Screen.Login.route) {
-             LoginScreen(
--                onLoginSuccess = {
--                    navController.navigate(Screen.Dashboard.route) {
-+                onLoginSuccess = { user ->
-+                    val route = when (user.role) {
-+                        UserRole.ADMIN -> Screen.AdminDashboard.route
-+                        else -> Screen.Dashboard.route
-+                    }
-+                    navController.navigate(route) {
-                         popUpTo(Screen.Login.route) { inclusive = true }
-                     }
--                }
-+                },
-+                networkManager = networkManager,
-+                navController = navController
-+            )
-+        }
-+
-+        composable(Screen.Register.route) {
-+            RegisterScreen(
-+                navController = navController,
-+                networkManager = networkManager
-+            )
-+        }
-+
-+        composable(Screen.Tour.route) {
-+            TourScreen(
-+                navController = navController,
-+                networkManager = networkManager
-             )
-         }
- 
-         composable(Screen.Dashboard.route) {
--            val currentUser = viewModel.getCurrentUser()
--            when {
--                currentUser?.permissions?.containsAll(Permissions.ADMIN_PERMISSIONS) == true -> {
--                    AdminDashboardScreen(
--                        navController = navController,
--                        onNavigate = { route ->
--                            navController.navigate(route)
--                        }
--                    )
--                }
--                currentUser?.permissions?.containsAll(Permissions.OPERATOR_PERMISSIONS) == true -> {
--                    OperatorDashboardScreen(
--                        navController = navController,
--                        onNavigate = { route ->
--                            navController.navigate(route)
--                        }
--                    )
--                }
--                else -> {
--                    DashboardScreen(
--                        navController = navController,
--                        onNavigate = { route ->
--                            navController.navigate(route)
--                        }
--                    )
--                }
--            }
-+            DashboardScreen(
-+                navController = navController,
-+                onNavigate = { route ->
-+                    navController.navigate(route)
-+                },
-+                networkManager = networkManager
-+            )
-+        }
-+
-+        composable(Screen.AdminDashboard.route) {
-+            AdminDashboardScreen(
-+                navController = navController,
-+                onNavigate = { route ->
-+                    navController.navigate(route)
-+                },
-+                networkManager = networkManager
-+            )
-         }
- 
-         composable(Screen.QRScanner.route) {
-@@ -126,7 +143,8 @@ fun NavGraph(
-                 },
-                 onNavigateBack = {
-                     navController.popBackStack()
--                }
-+                },
-+                networkManager = networkManager
-             )
-         }
- 
-@@ -155,7 +173,8 @@ fun NavGraph(
-                     } else {
-                         navController.popBackStack()
-                     }
--                }
-+                },
-+                networkManager = networkManager
-             )
-         }
- 
-@@ -164,7 +183,8 @@ fun NavGraph(
-                 navController = navController,
-                 onVehicleClick = { vehicleId ->
-                     navController.navigate(Screen.VehicleProfile.route.replace("{vehicleId}", vehicleId))
--                }
-+                },
-+                networkManager = networkManager
-             )
-         }
- 
-@@ -184,7 +204,8 @@ fun NavGraph(
-                 onScanQrCode = {
-                     navController.navigate(Screen.QRScanner.route)
-                 },
--                navController = navController
-+                navController = navController,
-+                networkManager = networkManager
-             )
-         }
- 
-@@ -204,7 +225,8 @@ fun NavGraph(
-                 incidentType = incidentType,
-                 onNavigateBack = { navController.popBackStack() },
-                 viewModel = viewModel,
--                navController = navController
-+                navController = navController,
-+                networkManager = networkManager
-             )
-         }
- 
-@@ -213,14 +235,16 @@ fun NavGraph(
-                 navController = navController,
-                 onNavigateBack = { navController.navigateUp() },
-                 onNavigateToIncidents = { navController.navigate(Screen.IncidentsHistory.route) },
--                onNavigateToCicoHistory = { navController.navigate(Screen.OperatorsCICOHistory.route) }
-+                onNavigateToCicoHistory = { navController.navigate(Screen.OperatorsCICOHistory.route) },
-+                networkManager = networkManager
-             )
-         }
- 
-         composable(Screen.OperatorsCICOHistory.route) {
-             CicoHistoryScreen(
-                 onNavigateBack = { navController.navigateUp() },
--                navController = navController
-+                navController = navController,
-+                networkManager = networkManager
-             )
-         }
- 
-@@ -230,13 +254,15 @@ fun NavGraph(
-                 onNavigateToReport = {
-                     //navController.navigate(Screen.IncidentReport.route)
-                 },
--                navController = navController
-+                navController = navController,
-+                networkManager = networkManager
-             )
-         }
- 
-         composable(Screen.PerformanceReport.route) {
-             PerformanceReportScreen(
--                navController = navController
-+                navController = navController,
-+                networkManager = networkManager
-             )
-         }
- 
-@@ -247,46 +273,26 @@ fun NavGraph(
-             val incidentId = backStackEntry.arguments?.getString("incidentId") ?: return@composable
-             IncidentDetailScreen(
-                 incidentId = incidentId,
--                navController = navController
-+                navController = navController,
-+                networkManager = networkManager
-             )
-         }
- 
--        composable(Screen.Tour.route) {
--            TourScreen(navController = navController)
--        }
--
--        composable("register") {
--            RegisterScreen(
--                navController = navController
-+        composable(Screen.VehicleSessionList.route) {
-+            VehicleSessionListScreen(
-+                navController = navController,
-+                onVehicleClick = { vehicleId ->
-+                    navController.navigate(Screen.VehicleProfile.route.replace("{vehicleId}", vehicleId))
-+                },
-+                networkManager = networkManager
-             )
-         }
- 
--        // Rutas protegidas para Admin
--        composable(Screen.AdminDashboard.route) {
--            val currentUser = viewModel.getCurrentUser()
--            PermissionGate(
--                user = currentUser,
--                requiredPermissions = Permissions.ADMIN_PERMISSIONS,
--                unauthorizedContent = { 
--                    UnauthorizedScreen()
--                }
--            ) {
--                AdminDashboardScreen()
--            }
--        }
--
--        // Rutas protegidas para Operator
--        composable(Screen.OperatorDashboard.route) {
--            val currentUser = viewModel.getCurrentUser()
--            PermissionGate(
--                user = currentUser,
--                requiredPermissions = Permissions.OPERATOR_PERMISSIONS,
--                unauthorizedContent = { 
--                    UnauthorizedScreen()
--                }
--            ) {
--                OperatorDashboardScreen()
--            }
-+        composable(Screen.OperatorSessionList.route) {
-+            OperatorSessionListScreen(
-+                navController = navController,
-+                networkManager = networkManager
-+            )
-         }
-     }
- }
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt b/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt
-index 556167a..a194784 100644
---- a/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/scanner/QRScannerScreen.kt
-@@ -26,6 +26,7 @@ import androidx.core.content.ContextCompat
- import androidx.hilt.navigation.compose.hiltViewModel
- import androidx.lifecycle.LifecycleOwner
- import androidx.lifecycle.compose.collectAsStateWithLifecycle
-+import app.forku.core.network.NetworkConnectivityManager
- import com.google.accompanist.permissions.ExperimentalPermissionsApi
- import com.google.accompanist.permissions.isGranted
- import com.google.accompanist.permissions.rememberPermissionState
-@@ -39,7 +40,8 @@ fun QRScannerScreen(
-     onNavigateToPreShiftCheck: (String) -> Unit,
-     onNavigateToVehicleProfile: (String) -> Unit,
-     onNavigateBack: () -> Unit,
--    viewModel: QRScannerViewModel = hiltViewModel()
-+    viewModel: QRScannerViewModel = hiltViewModel(),
-+    networkManager: NetworkConnectivityManager
- ) {
-     val state by viewModel.state.collectAsStateWithLifecycle()
-     val context = LocalContext.current
-diff --git a/app/src/main/java/app/forku/presentation/tour/TourScreen.kt b/app/src/main/java/app/forku/presentation/tour/TourScreen.kt
-index 2bfc4bc..5cdb21d 100644
---- a/app/src/main/java/app/forku/presentation/tour/TourScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/tour/TourScreen.kt
-@@ -16,8 +16,12 @@ import androidx.compose.ui.unit.dp
- import androidx.hilt.navigation.compose.hiltViewModel
- import androidx.navigation.NavController
- import app.forku.R
-+import app.forku.core.network.NetworkConnectivityManager
-+import app.forku.presentation.common.components.BaseScreen
- import app.forku.presentation.navigation.Screen
- import kotlinx.coroutines.launch
-+import androidx.compose.animation.*
-+import androidx.compose.animation.core.*
- 
- data class TourPage(
-     val title: String,
-@@ -29,107 +33,122 @@ data class TourPage(
- @Composable
- fun TourScreen(
-     navController: NavController,
--    viewModel: TourViewModel = hiltViewModel()
-+    viewModel: TourViewModel = hiltViewModel(),
-+    networkManager: NetworkConnectivityManager
- ) {
--    val state by viewModel.state.collectAsState()
--    val scope = rememberCoroutineScope()
--    
--    val pages = listOf(
--        TourPage(
--            "Driver safety and team compliance on any device.",
--            "Learn why you're here.",
--            R.drawable.tour_1
--        ),
--        TourPage(
--            "Track compliance and safety in any workplace.",
--            "Reflections and goals",
--            R.drawable.tour_2
--        ),
--        TourPage(
--            "Track tasks with your team or while working solo.",
--            "Goals and Reflection",
--            R.drawable.tour_3
--        ),
--        TourPage(
--            "Follow your goals and find your motivation.",
--            "Register to begin",
--            R.drawable.tour_4
-+    BaseScreen(
-+        navController = navController,
-+        showTopBar = false,
-+        networkManager = networkManager
-+    ) { padding ->
-+        val state by viewModel.state.collectAsState()
-+        val scope = rememberCoroutineScope()
-+        
-+        val pages = listOf(
-+            TourPage(
-+                "Driver safety and team compliance on any device.",
-+                "Learn why you're here.",
-+                R.drawable.tour_1
-+            ),
-+            TourPage(
-+                "Track compliance and safety in any workplace.",
-+                "Reflections and goals",
-+                R.drawable.tour_2
-+            ),
-+            TourPage(
-+                "Track tasks with your team or while working solo.",
-+                "Goals and Reflection",
-+                R.drawable.tour_3
-+            ),
-+            TourPage(
-+                "Follow your goals and find your motivation.",
-+                "Register to begin",
-+                R.drawable.tour_4
-+            )
-         )
--    )
--
--    val pagerState = rememberPagerState(pageCount = { pages.size })
- 
--    LaunchedEffect(pagerState.currentPage) {
--        viewModel.onEvent(TourEvent.NextPage)
--    }
-+        val pagerState = rememberPagerState(pageCount = { pages.size })
- 
--    Column(
--        modifier = Modifier
--            .fillMaxSize()
--            .background(MaterialTheme.colorScheme.background)
--    ) {
--        HorizontalPager(
--            state = pagerState,
--            modifier = Modifier
--                .weight(1f)
--                .fillMaxWidth()
--        ) { page ->
--            TourPage(pages[page])
-+        LaunchedEffect(pagerState.currentPage) {
-+            viewModel.onEvent(TourEvent.NextPage)
-         }
- 
--        // Page indicator
--        Row(
--            Modifier
--                .height(50.dp)
--                .fillMaxWidth(),
--            horizontalArrangement = Arrangement.Center,
--            verticalAlignment = Alignment.CenterVertically
-+        Column(
-+            modifier = Modifier
-+                .fillMaxSize()
-+                .background(MaterialTheme.colorScheme.background)
-         ) {
--            repeat(pagerState.pageCount) { iteration ->
--                val color = if (pagerState.currentPage == iteration) {
--                    MaterialTheme.colorScheme.primary
--                } else {
--                    MaterialTheme.colorScheme.onBackground.copy(alpha = 0.5f)
--                }
--                Box(
--                    modifier = Modifier
--                        .padding(2.dp)
--                        .background(color, MaterialTheme.shapes.small)
--                        .size(8.dp)
--                )
-+            HorizontalPager(
-+                state = pagerState,
-+                modifier = Modifier
-+                    .weight(1f)
-+                    .fillMaxWidth()
-+            ) { page ->
-+                TourPage(pages[page])
-             }
--        }
- 
--        // Buttons
--        Row(
--            modifier = Modifier
--                .fillMaxWidth()
--                .padding(16.dp),
--            horizontalArrangement = Arrangement.spacedBy(8.dp)
--        ) {
--            Button(
--                onClick = { 
--                    navController.navigate("register") {
--                        popUpTo("tour") { inclusive = true }
--                    }
--                },
--                modifier = Modifier.weight(1f)
-+            // Page indicator
-+            Row(
-+                Modifier
-+                    .height(50.dp)
-+                    .fillMaxWidth(),
-+                horizontalArrangement = Arrangement.Center,
-+                verticalAlignment = Alignment.CenterVertically
-             ) {
--                Text("Register")
--            }
--            
--            Button(
--                onClick = { 
--                    navController.navigate("login") {
--                        popUpTo("tour") { inclusive = true }
-+                repeat(pagerState.pageCount) { iteration ->
-+                    val color = if (pagerState.currentPage == iteration) {
-+                        MaterialTheme.colorScheme.primary
-+                    } else {
-+                        MaterialTheme.colorScheme.onBackground.copy(alpha = 0.5f)
-                     }
--                },
--                modifier = Modifier.weight(1f),
--                colors = ButtonDefaults.buttonColors(
--                    containerColor = MaterialTheme.colorScheme.secondary
--                )
-+                    Box(
-+                        modifier = Modifier
-+                            .padding(2.dp)
-+                            .background(color, MaterialTheme.shapes.small)
-+                            .size(8.dp)
-+                    )
-+                }
-+            }
-+
-+            // Buttons - only show when on the last page
-+            AnimatedVisibility(
-+                visible = pagerState.currentPage == pages.size - 1,
-+                enter = fadeIn() + expandVertically(),
-+                exit = fadeOut() + shrinkVertically()
-             ) {
--                Text("Login")
-+                Row(
-+                    modifier = Modifier
-+                        .fillMaxWidth()
-+                        .padding(16.dp),
-+                    horizontalArrangement = Arrangement.spacedBy(8.dp)
-+                ) {
-+                    Button(
-+                        onClick = { 
-+                            viewModel.onEvent(TourEvent.Register)
-+                            navController.navigate(Screen.Register.route) {
-+                                popUpTo(Screen.Tour.route) { inclusive = true }
-+                            }
-+                        },
-+                        modifier = Modifier.weight(1f)
-+                    ) {
-+                        Text("Register")
-+                    }
-+                    
-+                    Button(
-+                        onClick = { 
-+                            viewModel.onEvent(TourEvent.Login)
-+                            navController.navigate(Screen.Login.route) {
-+                                popUpTo(Screen.Tour.route) { inclusive = true }
-+                            }
-+                        },
-+                        modifier = Modifier.weight(1f),
-+                        colors = ButtonDefaults.buttonColors(
-+                            containerColor = MaterialTheme.colorScheme.secondary
-+                        )
-+                    ) {
-+                        Text("Login")
-+                    }
-+                }
-             }
-         }
-     }
-diff --git a/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt b/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt
-index 6c851b9..92af767 100644
---- a/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/tour/TourViewModel.kt
-@@ -2,7 +2,7 @@ package app.forku.presentation.tour
- 
- import androidx.lifecycle.ViewModel
- import androidx.lifecycle.viewModelScope
--import app.forku.data.local.TokenManager
-+import app.forku.data.datastore.AuthDataStore
- import app.forku.data.local.TourPreferences
- import dagger.hilt.android.lifecycle.HiltViewModel
- import kotlinx.coroutines.flow.MutableStateFlow
-@@ -13,7 +13,7 @@ import javax.inject.Inject
- 
- @HiltViewModel
- class TourViewModel @Inject constructor(
--    private val tokenManager: TokenManager,
-+    private val authDataStore: AuthDataStore,
-     private val tourPreferences: TourPreferences
- ) : ViewModel() {
- 
-diff --git a/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryScreen.kt b/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryScreen.kt
-index 080812a..0dfd262 100644
---- a/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/user/cico/CicoHistoryScreen.kt
-@@ -15,6 +15,7 @@ import androidx.lifecycle.compose.collectAsStateWithLifecycle
- import app.forku.presentation.common.components.LoadingOverlay
- import app.forku.presentation.common.components.ErrorScreen
- import androidx.navigation.NavController
-+import app.forku.core.network.NetworkConnectivityManager
- import app.forku.presentation.common.components.BaseScreen
- 
- @OptIn(ExperimentalMaterial3Api::class)
-@@ -22,7 +23,8 @@ import app.forku.presentation.common.components.BaseScreen
- fun CicoHistoryScreen(
-     viewModel: CicoHistoryViewModel = hiltViewModel(),
-     onNavigateBack: () -> Unit,
--    navController: NavController
-+    navController: NavController,
-+    networkManager: NetworkConnectivityManager
- ) {
-     val state by viewModel.state.collectAsStateWithLifecycle()
- 
-@@ -49,7 +51,8 @@ fun CicoHistoryScreen(
-                     }
-                 }
-             }
--        }
-+        },
-+        networkManager = networkManager
-     )
- }
- 
-diff --git a/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt b/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt
-index c79467a..507d9d0 100644
---- a/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/user/login/LoginScreen.kt
-@@ -13,21 +13,29 @@ import androidx.compose.ui.unit.dp
- import androidx.compose.ui.unit.sp
- import androidx.hilt.navigation.compose.hiltViewModel
- import androidx.lifecycle.compose.collectAsStateWithLifecycle
-+import app.forku.core.network.NetworkConnectivityManager
- import app.forku.presentation.common.components.LoadingOverlay
-+import app.forku.domain.model.user.User
-+import app.forku.domain.model.user.UserRole
-+import androidx.navigation.NavController
-+import app.forku.presentation.navigation.Screen
-+
- 
- @OptIn(ExperimentalMaterial3Api::class)
- @Composable
- fun LoginScreen(
-     viewModel: LoginViewModel = hiltViewModel(),
--    onLoginSuccess: () -> Unit
-+    onLoginSuccess: (User) -> Unit,
-+    networkManager: NetworkConnectivityManager,
-+    navController: NavController
- ) {
--    var username by remember { mutableStateOf("") }
-+    val state by viewModel.state.collectAsState()
-+    var email by remember { mutableStateOf("") }
-     var password by remember { mutableStateOf("") }
--    val state by viewModel.state.collectAsStateWithLifecycle()
- 
-     LaunchedEffect(state) {
-         if (state is LoginState.Success) {
--            onLoginSuccess()
-+            onLoginSuccess((state as LoginState.Success).user)
-         }
-     }
- 
-@@ -61,8 +69,8 @@ fun LoginScreen(
-             Spacer(modifier = Modifier.height(32.dp))
- 
-             OutlinedTextField(
--                value = username,
--                onValueChange = { username = it },
-+                value = email,
-+                onValueChange = { email = it },
-                 label = { Text("Phone or email") },
-                 modifier = Modifier.fillMaxWidth(),
-                 colors = OutlinedTextFieldDefaults.colors(
-@@ -104,13 +112,13 @@ fun LoginScreen(
-             Spacer(modifier = Modifier.height(24.dp))
- 
-             Button(
--                onClick = { viewModel.login(username, password) },
-+                onClick = { viewModel.login(email, password) },
-                 modifier = Modifier.fillMaxWidth(),
-                 colors = ButtonDefaults.buttonColors(
-                     containerColor = Color(0xFFFFA726),
-                     contentColor = Color.Black
-                 ),
--                enabled = username.isNotBlank() && password.isNotBlank() && state !is LoginState.Loading
-+                enabled = email.isNotBlank() && password.isNotBlank() && state !is LoginState.Loading
-             ) {
-                 if (state is LoginState.Loading) {
-                     CircularProgressIndicator(
-@@ -121,6 +129,28 @@ fun LoginScreen(
-                     Text("Log in")
-                 }
-             }
-+
-+            Spacer(modifier = Modifier.height(16.dp))
-+
-+            Row(
-+                modifier = Modifier.fillMaxWidth(),
-+                horizontalArrangement = Arrangement.Center,
-+                verticalAlignment = Alignment.CenterVertically
-+            ) {
-+                Text(
-+                    text = "Don't have an account? ",
-+                    color = MaterialTheme.colorScheme.onBackground
-+                )
-+                TextButton(
-+                    onClick = { navController.navigate(Screen.Register.route) },
-+                    colors = ButtonDefaults.textButtonColors(
-+                        contentColor = Color(0xFFFFA726)
-+                    )
-+                ) {
-+                    Text("Register")
-+                }
-+            }
-+
-             Spacer(modifier = Modifier.height(24.dp))
-         }
- 
-diff --git a/app/src/main/java/app/forku/presentation/user/login/LoginState.kt b/app/src/main/java/app/forku/presentation/user/login/LoginState.kt
-index 2966f24..64b0c8e 100644
---- a/app/src/main/java/app/forku/presentation/user/login/LoginState.kt
-+++ b/app/src/main/java/app/forku/presentation/user/login/LoginState.kt
-@@ -3,10 +3,9 @@ package app.forku.presentation.user.login
- import app.forku.domain.model.user.User
- 
- sealed class LoginState {
--    data object Idle : LoginState()
-     data object Initial : LoginState()
-+    data object Idle : LoginState()
-     data object Loading : LoginState()
-     data class Success(val user: User) : LoginState()
-     data class Error(val message: String) : LoginState()
--
- }
-diff --git a/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt b/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt
-index b0a03c0..63b1f44 100644
---- a/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/user/login/LoginViewModel.kt
-@@ -8,7 +8,8 @@ import dagger.hilt.android.lifecycle.HiltViewModel
- import javax.inject.Inject
- import java.net.UnknownHostException
- import java.net.SocketTimeoutException
--import app.forku.data.local.TokenManager
-+import app.forku.data.datastore.AuthDataStore
-+import app.forku.data.local.TourPreferences
- import kotlinx.coroutines.flow.MutableStateFlow
- import kotlinx.coroutines.flow.asStateFlow
- import kotlinx.coroutines.launch
-@@ -16,7 +17,8 @@ import kotlinx.coroutines.launch
- @HiltViewModel
- class LoginViewModel @Inject constructor(
-     private val loginUseCase: LoginUseCase,
--    private val tokenManager: TokenManager
-+    private val authDataStore: AuthDataStore,
-+    private val tourPreferences: TourPreferences
- ) : ViewModel() {
-     private val _state = MutableStateFlow<LoginState>(LoginState.Idle)
-     val state = _state.asStateFlow()
-@@ -29,10 +31,8 @@ class LoginViewModel @Inject constructor(
- 
-                 val result = loginUseCase(sanitizedEmail, sanitizedPassword)
-                 result.onSuccess { user ->
--                    tokenManager.saveToken(
--                        token = user.id,
--                        refreshToken = "temp_refresh_token"
--                    )
-+                    authDataStore.setCurrentUser(user)
-+                    tourPreferences.setTourCompleted()
-                     _state.value = LoginState.Success(user)
-                 }.onFailure { error ->
-                     val errorMessage = when (error) {
-@@ -55,7 +55,7 @@ class LoginViewModel @Inject constructor(
- 
-     fun logout() {
-         viewModelScope.launch {
--            tokenManager.clearToken()
-+            authDataStore.clearAuth()
-             _state.value = LoginState.Idle
-         }
-     }
-diff --git a/app/src/main/java/app/forku/presentation/user/profile/ProfileScreen.kt b/app/src/main/java/app/forku/presentation/user/profile/ProfileScreen.kt
-index bc05dd9..8cb9827 100644
---- a/app/src/main/java/app/forku/presentation/user/profile/ProfileScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/user/profile/ProfileScreen.kt
-@@ -45,6 +45,7 @@ import app.forku.presentation.user.profile.components.ProfileSections
- import app.forku.presentation.user.profile.components.StatsGrid
- import coil.compose.AsyncImage
- import androidx.navigation.NavController
-+import app.forku.core.network.NetworkConnectivityManager
- import app.forku.presentation.common.components.BaseScreen
- import app.forku.presentation.navigation.Screen
- 
-@@ -55,7 +56,8 @@ fun ProfileScreen(
-     onNavigateBack: () -> Unit,
-     onNavigateToIncidents: () -> Unit,
-     onNavigateToCicoHistory: () -> Unit,
--    navController: NavController
-+    navController: NavController,
-+    networkManager: NetworkConnectivityManager
- ) {
-     val state by viewModel.state.collectAsStateWithLifecycle()
-     BaseScreen(
-@@ -91,7 +93,8 @@ fun ProfileScreen(
-                     )
-                 }
-             }
--        }
-+        },
-+        networkManager = networkManager
-     )
- }
- 
-@@ -175,7 +178,7 @@ private fun ProfileHeader(
-                             color = Color.Gray
-                         )
-                         Text(
--                            text = state.user?.name ?: "",
-+                            text = state.user?.fullName ?: "",
-                             style = MaterialTheme.typography.titleLarge
-                         )
-                         Spacer(modifier = Modifier.height(8.dp))
-diff --git a/app/src/main/java/app/forku/presentation/user/register/RegisterScreen.kt b/app/src/main/java/app/forku/presentation/user/register/RegisterScreen.kt
-index c49528f..efb9a72 100644
---- a/app/src/main/java/app/forku/presentation/user/register/RegisterScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/user/register/RegisterScreen.kt
-@@ -23,13 +23,16 @@ import androidx.compose.ui.text.input.VisualTransformation
- import androidx.compose.ui.unit.dp
- import androidx.hilt.navigation.compose.hiltViewModel
- import androidx.navigation.NavController
-+import app.forku.core.network.NetworkConnectivityManager
- import app.forku.presentation.common.components.LoadingScreen
- import app.forku.presentation.navigation.Screen
- 
-+
- @Composable
- fun RegisterScreen(
-     navController: NavController,
--    viewModel: RegisterViewModel = hiltViewModel()
-+    viewModel: RegisterViewModel = hiltViewModel(),
-+    networkManager: NetworkConnectivityManager
- ) {
-     val state by viewModel.state.collectAsState()
-     val focusManager = LocalFocusManager.current
-diff --git a/app/src/main/java/app/forku/presentation/vehicle/components/VehicleQrCodeModal.kt b/app/src/main/java/app/forku/presentation/vehicle/components/VehicleQrCodeModal.kt
-index 8f755e7..8a4db90 100644
---- a/app/src/main/java/app/forku/presentation/vehicle/components/VehicleQrCodeModal.kt
-+++ b/app/src/main/java/app/forku/presentation/vehicle/components/VehicleQrCodeModal.kt
-@@ -1,10 +1,13 @@
- package app.forku.presentation.vehicle.components
- 
- import androidx.compose.foundation.layout.*
-+import androidx.compose.material.icons.Icons
-+import androidx.compose.material.icons.filled.Share
- import androidx.compose.material3.*
- import androidx.compose.runtime.Composable
- import androidx.compose.ui.Alignment
- import androidx.compose.ui.Modifier
-+import androidx.compose.ui.platform.LocalContext
- import androidx.compose.ui.unit.dp
- import app.forku.presentation.common.components.AppModal
- 
-@@ -12,6 +15,7 @@ import app.forku.presentation.common.components.AppModal
- fun VehicleQrCodeModal(
-     vehicleId: String,
-     onDismiss: () -> Unit,
-+    onShare: () -> Unit,
-     modifier: Modifier = Modifier.size(256.dp)
- ) {
-     AppModal(
-@@ -31,6 +35,20 @@ fun VehicleQrCodeModal(
-                     modifier = Modifier.size(256.dp)
-                 )
-                 Spacer(modifier = Modifier.height(16.dp))
-+                Button(
-+                    onClick = onShare,
-+                    colors = ButtonDefaults.buttonColors(
-+                        containerColor = MaterialTheme.colorScheme.secondary
-+                    )
-+                ) {
-+                    Icon(
-+                        imageVector = Icons.Default.Share,
-+                        contentDescription = "Share QR Code",
-+                        modifier = Modifier.size(18.dp)
-+                    )
-+                    Spacer(modifier = Modifier.width(8.dp))
-+                    Text("Share QR Code")
-+                }
-             }
-         }
-     )
-diff --git a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListScreen.kt b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListScreen.kt
-index 2299b6f..53a8a6d 100644
---- a/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/vehicle/list/VehicleListScreen.kt
-@@ -25,13 +25,15 @@ import androidx.compose.material.ExperimentalMaterialApi
- import androidx.compose.material.pullrefresh.PullRefreshIndicator
- import androidx.compose.material.pullrefresh.pullRefresh
- import androidx.compose.material.pullrefresh.rememberPullRefreshState
-+import app.forku.core.network.NetworkConnectivityManager
- 
- @OptIn(ExperimentalMaterialApi::class)
- @Composable
- fun VehicleListScreen(
-     navController: NavController,
-     viewModel: VehicleListViewModel = hiltViewModel(),
--    onVehicleClick: (String) -> Unit
-+    onVehicleClick: (String) -> Unit,
-+    networkManager: NetworkConnectivityManager
- ) {
-     val state by viewModel.state.collectAsStateWithLifecycle()
-     
-@@ -46,7 +48,8 @@ fun VehicleListScreen(
-         topBarTitle = "Vehicles",
-         showBottomBar = true,
-         onRefresh = { viewModel.loadVehicles(true) },
--        showLoadingOnRefresh = false
-+        showLoadingOnRefresh = false,
-+        networkManager = networkManager
-     ) { padding ->
-         Box(
-             modifier = Modifier
-diff --git a/app/src/main/java/app/forku/presentation/vehicle/manual/PerformanceReportScreen.kt b/app/src/main/java/app/forku/presentation/vehicle/manual/PerformanceReportScreen.kt
-index 48fb55b..b9de615 100644
---- a/app/src/main/java/app/forku/presentation/vehicle/manual/PerformanceReportScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/vehicle/manual/PerformanceReportScreen.kt
-@@ -7,12 +7,14 @@ import androidx.compose.runtime.Composable
- import androidx.compose.ui.Modifier
- import androidx.compose.ui.viewinterop.AndroidView
- import androidx.navigation.NavController
-+import app.forku.core.network.NetworkConnectivityManager
- import app.forku.presentation.common.components.BaseScreen
- 
- @Composable
- fun PerformanceReportScreen(
-     navController: NavController,
--    pdfUrl: String = "https://drive.google.com/file/d/1UXNMsRFqJH4fPfjtDvbvX-N57tGu-uUJ/preview"
-+    pdfUrl: String = "https://drive.google.com/file/d/1UXNMsRFqJH4fPfjtDvbvX-N57tGu-uUJ/preview",
-+    networkManager: NetworkConnectivityManager
- ) {
-     BaseScreen(
-         navController = navController,
-@@ -29,6 +31,7 @@ fun PerformanceReportScreen(
-                 },
-                 modifier = Modifier.fillMaxSize()
-             )
--        }
-+        },
-+        networkManager = networkManager
-     )
- } 
-\ No newline at end of file
-diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
-index de8a1e0..5f06274 100644
---- a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
-+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileScreen.kt
-@@ -23,6 +23,7 @@ import androidx.hilt.navigation.compose.hiltViewModel
- import app.forku.domain.model.vehicle.VehicleStatus
- import app.forku.presentation.vehicle.profile.components.VehicleProfileSummary
- import androidx.navigation.NavController
-+import app.forku.core.network.NetworkConnectivityManager
- 
- 
- @OptIn(ExperimentalMaterial3Api::class)
-@@ -33,7 +34,8 @@ fun VehicleProfileScreen(
-     onNavigateBack: () -> Unit,
-     onPreShiftCheck: (String) -> Unit,
-     onScanQrCode: () -> Unit,
--    navController: NavController
-+    navController: NavController,
-+    networkManager: NetworkConnectivityManager
- ) {
-     val state by viewModel.state.collectAsStateWithLifecycle()
-     var showMenu by remember { mutableStateOf(false) }
-@@ -149,7 +151,8 @@ fun VehicleProfileScreen(
-                         if (state.showQrCode) {
-                             VehicleQrCodeModal(
-                                 vehicleId = vehicle.id,
--                                onDismiss = viewModel::toggleQrCode
-+                                onDismiss = viewModel::toggleQrCode,
-+                                onShare = viewModel::shareQrCode
-                             )
-                         }
- 
-diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt
-index 9eee7cc..25bfabc 100644
---- a/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt
-+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/VehicleProfileViewModel.kt
-@@ -1,5 +1,10 @@
- package app.forku.presentation.vehicle.profile
- 
-+import android.content.Context
-+import android.content.Intent
-+import android.graphics.Bitmap
-+import android.net.Uri
-+import androidx.core.content.FileProvider
- import androidx.lifecycle.SavedStateHandle
- import androidx.lifecycle.ViewModel
- import androidx.lifecycle.viewModelScope
-@@ -9,6 +14,7 @@ import app.forku.domain.repository.vehicle.VehicleRepository
- import app.forku.domain.usecase.vehicle.GetVehicleUseCase
- import app.forku.domain.model.session.SessionStatus
- import dagger.hilt.android.lifecycle.HiltViewModel
-+import dagger.hilt.android.qualifiers.ApplicationContext
- import kotlinx.coroutines.flow.MutableStateFlow
- import kotlinx.coroutines.flow.asStateFlow
- import kotlinx.coroutines.flow.update
-@@ -21,7 +27,9 @@ import app.forku.domain.repository.checklist.ChecklistRepository
- import app.forku.domain.model.vehicle.getErrorMessage
- import app.forku.domain.model.vehicle.isAvailable
- import app.forku.domain.repository.user.UserRepository
--
-+import app.forku.presentation.vehicle.components.QrCodeGenerator
-+import java.io.File
-+import java.io.FileOutputStream
- 
- @HiltViewModel
- class VehicleProfileViewModel @Inject constructor(
-@@ -32,7 +40,8 @@ class VehicleProfileViewModel @Inject constructor(
-     private val getVehicleStatusUseCase: GetVehicleStatusUseCase,
-     private val checklistRepository: ChecklistRepository,
-     private val userRepository: UserRepository,
--    savedStateHandle: SavedStateHandle
-+    savedStateHandle: SavedStateHandle,
-+    @ApplicationContext private val context: Context
- ) : ViewModel() {
-     private val _state = MutableStateFlow(VehicleProfileState())
-     val state = _state.asStateFlow()
-@@ -109,6 +118,50 @@ class VehicleProfileViewModel @Inject constructor(
-         _state.update { it.copy(showQrCode = !it.showQrCode) }
-     }
- 
-+    fun shareQrCode() {
-+        viewModelScope.launch {
-+            try {
-+                state.value.vehicle?.let { vehicle ->
-+                    // Generate QR code bitmap
-+                    val qrBitmap = QrCodeGenerator.generateVehicleQrCode(vehicle.id)
-+                    
-+                    // Save bitmap to temporary file
-+                    val cachePath = File(context.cacheDir, "qr_codes")
-+                    cachePath.mkdirs()
-+                    
-+                    val file = File(cachePath, "vehicle_qr_${vehicle.id}.png")
-+                    FileOutputStream(file).use { out ->
-+                        qrBitmap.compress(Bitmap.CompressFormat.PNG, 100, out)
-+                    }
-+                    
-+                    // Get content URI using FileProvider
-+                    val contentUri = FileProvider.getUriForFile(
-+                        context,
-+                        "${context.packageName}.fileprovider",
-+                        file
-+                    )
-+                    
-+                    // Create share intent
-+                    val shareIntent = Intent(Intent.ACTION_SEND).apply {
-+                        type = "image/png"
-+                        putExtra(Intent.EXTRA_STREAM, contentUri)
-+                        putExtra(Intent.EXTRA_SUBJECT, "Vehicle QR Code")
-+                        putExtra(Intent.EXTRA_TEXT, "Scan this QR code to access vehicle information")
-+                        addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
-+                    }
-+                    
-+                    // Start share activity
-+                    val chooserIntent = Intent.createChooser(shareIntent, "Share QR Code")
-+                    chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
-+                    context.startActivity(chooserIntent)
-+                }
-+            } catch (e: Exception) {
-+                // Handle error
-+                _state.update { it.copy(error = "Error sharing QR code: ${e.message}") }
-+            }
-+        }
-+    }
-+
-     fun startSessionFromCheck() {
-         viewModelScope.launch {
-             try {
-diff --git a/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt b/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
-index 0644154..8b0d38d 100644
---- a/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
-+++ b/app/src/main/java/app/forku/presentation/vehicle/profile/components/VehicleProfileSummary.kt
-@@ -200,7 +200,7 @@ fun VehicleDetailsSection(
-                 ) {
-                     activeOperator?.role?.let {
-                         OperatorProfile(
--                            name = activeOperator?.name ?: "No operator assigned",
-+                            name = activeOperator?.fullName ?: "No operator assigned",
-                             imageUrl = activeOperator.photoUrl,
-                             modifier = Modifier.padding(0.dp, 8.dp),
-                             role = it.name
-diff --git a/app/src/main/res/xml/file_paths.xml b/app/src/main/res/xml/file_paths.xml
-index fcbcd7a..3720d23 100644
---- a/app/src/main/res/xml/file_paths.xml
-+++ b/app/src/main/res/xml/file_paths.xml
-@@ -6,4 +6,7 @@
-     <external-cache-path
-         name="external_cached_photos"
-         path="." />
-+    <cache-path
-+        name="qr_codes"
-+        path="qr_codes/"/>
- </paths>
-\ No newline at end of file
-diff --git a/build.gradle.kts b/build.gradle.kts
-index 221d560..d3c4b1b 100644
---- a/build.gradle.kts
-+++ b/build.gradle.kts
-@@ -1,7 +1,12 @@
- // Top-level build file where you can add configuration options common to all sub-projects/modules.
-+@Suppress("DSL_SCOPE_VIOLATION") // Remove when fixed https://youtrack.jetbrains.com/issue/KTIJ-19369
- plugins {
-     alias(libs.plugins.android.application) apply false
-     alias(libs.plugins.kotlin.android) apply false
-     alias(libs.plugins.hilt.android) apply false
-     alias(libs.plugins.kotlin.ksp) apply false
--}
-\ No newline at end of file
-+    alias(libs.plugins.kotlin.serialization) apply false
-+    alias(libs.plugins.google.services) apply false
-+}
-+
-+true // Needed to make the Suppress annotation work for the plugins block
-\ No newline at end of file
-diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
-index 6e81f17..6b24877 100644
---- a/gradle/libs.versions.toml
-+++ b/gradle/libs.versions.toml
-@@ -6,6 +6,10 @@ kotlinxSerialization = "1.6.0"
- ksp = "1.9.22-1.0.17"
- location = "21.0.1"
- 
-+# Firebase
-+firebase-bom = "32.7.2"
-+google-services = "4.4.1"
-+
- # Core Android libraries
- core-ktx = "1.12.0"
- appcompat = "1.6.1"
-@@ -127,10 +131,19 @@ kotlin-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-j
- androidx-compose-material-icons-core = { group = "androidx.compose.material", name = "material-icons-core", version.ref = "compose-material" }
- androidx-compose-material-icons-extended = { group = "androidx.compose.material", name = "material-icons-extended", version.ref = "compose-material" }
- 
-+# Firebase
-+firebase-bom = { group = "com.google.firebase", name = "firebase-bom", version.ref = "firebase-bom" }
-+firebase-analytics = { group = "com.google.firebase", name = "firebase-analytics" }
-+firebase-auth = { group = "com.google.firebase", name = "firebase-auth" }
-+firebase-firestore = { group = "com.google.firebase", name = "firebase-firestore" }
-+firebase-storage = { group = "com.google.firebase", name = "firebase-storage" }
-+firebase-messaging = { group = "com.google.firebase", name = "firebase-messaging" }
-+
- 
- [plugins]
- android-application = { id = "com.android.application", version.ref = "agp" }
- kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
- hilt-android = { id = "com.google.dagger.hilt.android", version.ref = "hilt" }
- kotlin-ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
--kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
-\ No newline at end of file
-+kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
-+google-services = { id = "com.google.gms.google-services", version.ref = "google-services" }
-\ No newline at end of file
