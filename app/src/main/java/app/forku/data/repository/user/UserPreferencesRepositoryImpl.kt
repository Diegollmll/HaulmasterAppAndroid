package app.forku.data.repository.user

import android.util.Log
import app.forku.data.api.UserPreferencesApi
import app.forku.data.api.UserApi
import app.forku.data.api.dto.user.UserDto
import app.forku.data.api.dto.user.preserveExistingImageFields
import app.forku.data.mapper.toDomain
import app.forku.data.mapper.toDto
import app.forku.data.mapper.getBusinessName
import app.forku.data.mapper.getSiteName
import app.forku.data.mapper.getUserName
import app.forku.domain.model.user.UserPreferences
import app.forku.domain.repository.user.UserPreferencesRepository
import app.forku.domain.repository.user.UserRepository
import app.forku.core.auth.HeaderManager

import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class UserPreferencesRepositoryImpl @Inject constructor(
    private val api: UserPreferencesApi,
    private val userApi: UserApi,
    private val userRepository: UserRepository,
    private val headerManager: HeaderManager
) : UserPreferencesRepository {

    private val _currentPreferences = MutableStateFlow<UserPreferences?>(null)
    
    private val gson = com.google.gson.Gson()
    
    companion object {
        private const val TAG = "UserPreferencesRepo"
    }

    override suspend fun getCurrentUserPreferences(): UserPreferences? = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "UserPreferencesRepositoryImpl getCurrentUserPreferences called - starting user preferences loading")
            
            // Use UserRepository to get user with preferences included
            val userRepositoryImpl = userRepository as app.forku.data.repository.user.UserRepositoryImpl
            Log.d(TAG, "UserPreferencesRepositoryImpl üîç About to call getCurrentUserWithPreferences...")
            
            val (user, preferences) = userRepositoryImpl.getCurrentUserWithPreferences()
            
            Log.d(TAG, "UserPreferencesRepositoryImpl üîç getCurrentUserWithPreferences completed:")
            Log.d(TAG, "UserPreferencesRepositoryImpl  - User found: ${user != null}")
            Log.d(TAG, "UserPreferencesRepositoryImpl  - User ID: ${user?.id}")
            Log.d(TAG, "UserPreferencesRepositoryImpl  - User name: ${user?.username}")
            Log.d(TAG, "UserPreferencesRepositoryImpl  - Preferences found: ${preferences != null}")
            Log.d(TAG, "UserPreferencesRepositoryImpl getCurrentUserWithPreferences completed: A")
            if (user == null) {
                Log.w(TAG, "‚ùå No current user found")
                return@withContext null
            }
            
            if (preferences == null) {
                Log.d(TAG, "‚ùå No preferences found for user ${user.id} - user needs setup")
                return@withContext null // Don't create automatically, let individual methods handle it
            }
            
            Log.d(TAG, "‚úÖ Successfully loaded preferences for user ${user.id}")
            Log.d(TAG, "  Business ID: ${preferences.businessId}")
            Log.d(TAG, "  Site ID: ${preferences.siteId}")
            Log.d(TAG, "  Last Selected Business: ${preferences.lastSelectedBusinessId}")
            Log.d(TAG, "  Last Selected Site: ${preferences.lastSelectedSiteId}")
            Log.d(TAG, "  Effective context: businessId=${preferences.getEffectiveBusinessId()}, siteId=${preferences.getEffectiveSiteId()}")
            
            _currentPreferences.value = preferences
            preferences
            
        } catch (e: Exception) {
            Log.e(TAG, "Error getting current user preferences", e)
            null
        }
    }

    override suspend fun getUserPreferences(userId: String): UserPreferences? = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "Getting preferences for user: $userId")
            
            val (csrfToken, cookie) = headerManager.getCsrfAndCookie()
            val filter = "GOUserId == Guid.Parse(\"$userId\")"
            val response = api.getAllUserPreferences(
                csrfToken = csrfToken,
                cookie = cookie,
                filter = filter
            )
            
            if (!response.isSuccessful) {
                Log.e(TAG, "Failed to get user preferences: ${response.code()}")
                return@withContext null
            }
            
            val preferencesDto = response.body()?.firstOrNull()
            preferencesDto?.toDomain()
        } catch (e: Exception) {
            Log.e(TAG, "Error getting user preferences", e)
            null
        }
    }

    override suspend fun saveUserPreferences(preferences: UserPreferences): UserPreferences = withContext(Dispatchers.IO) {
        try {
            val userId = preferences.getUserId() ?: userRepository.getCurrentUser()?.id
            Log.d(TAG, "Saving user preferences for user: $userId")
            
            val saveDto = preferences.toDto(userId)
            val entityJson = gson.toJson(saveDto)
            
            Log.d(TAG, "Sending UserPreferences JSON: $entityJson")
            
            val (csrfToken, cookie) = headerManager.getCsrfAndCookie()
            
            // ‚úÖ Get businessId from preferences - it must be present when saving
            val businessId = preferences.businessId 
                ?: throw Exception("No businessId in preferences - cannot save without business context")
                
            val response = api.saveUserPreferences(
                entity = entityJson,
                csrfToken = csrfToken,
                cookie = cookie,
                businessId = businessId
            )
            
            if (!response.isSuccessful) {
                Log.e(TAG, "Failed to save user preferences: ${response.code()}")
                Log.e(TAG, "Error body: ${response.errorBody()?.string()}")
                throw Exception("Failed to save user preferences: ${response.code()}")
            }
            
            val savedPreferences = response.body()?.toDomain()
                ?: throw Exception("Saved preferences response is null")
            
            // üîÑ RESTORED: Update user's UserPreferencesId after successful preferences save
            // This ensures the relationship is established even if backend doesn't handle it automatically
            try {
                Log.d(TAG, "üîÑ Attempting to update user's UserPreferencesId: ${savedPreferences.id}")
                val updateResult = updateUserPreferencesId(savedPreferences.id)
                if (updateResult) {
                    Log.d(TAG, "‚úÖ Successfully updated user's UserPreferencesId")
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Failed to update user's UserPreferencesId, but preferences were saved")
                }
            } catch (e: Exception) {
                Log.w(TAG, "‚ö†Ô∏è Error updating user's UserPreferencesId (non-critical): ${e.message}")
                // Don't throw - preferences were saved successfully, user update is secondary
            }
            
            _currentPreferences.value = savedPreferences
            Log.d(TAG, "User preferences saved successfully")
            
            savedPreferences
        } catch (e: Exception) {
            Log.e(TAG, "Error saving user preferences", e)
            throw e
        }
    }

    /**
     * Updates the user's UserPreferencesId to establish the relationship
     * @param userPreferencesId The ID of the saved UserPreferences
     * @return true if successful, false otherwise
     */
    private suspend fun updateUserPreferencesId(userPreferencesId: String?): Boolean {
        return try {
            if (userPreferencesId == null) {
                Log.w(TAG, "Cannot update user: userPreferencesId is null")
                return false
            }
            
            val currentUser = userRepository.getCurrentUser()
            if (currentUser == null) {
                Log.w(TAG, "Cannot update user: No current user found")
                return false
            }
            
            Log.d(TAG, "üîÑ === INICIANDO ACTUALIZACI√ìN DE USUARIO CON UserPreferencesId ===")
            Log.d(TAG, "üîÑ Usuario actual: ${currentUser.id}")
            Log.d(TAG, "üîÑ UserPreferencesId a asignar: $userPreferencesId")
            Log.d(TAG, "üîÑ Usuario actual photoUrl: '${currentUser.photoUrl}'")
            
            // ‚ö†Ô∏è CRITICAL FIX: Get current user data to preserve password
            val (csrfToken, cookie) = headerManager.getCsrfAndCookie()
            Log.d(TAG, "üîÑ Obteniendo datos actuales del usuario desde API...")
            val currentUserResponse = userApi.getUser(
                id = currentUser.id,
                csrfToken = csrfToken,
                cookie = cookie,
                include = "UserRoleItems,UserBusinesses,UserSiteItems" // ‚úÖ USAR SOLO CAMPOS QUE FUNCIONAN
            ) //Picture,PictureFileSize,PictureInternalName
            val currentUserData = currentUserResponse.body()
            val currentPassword = currentUserData?.password
            
            // ‚úÖ LOGS DETALLADOS DE DATOS CRUDOS DE LA API
            Log.d(TAG, "üîÑ === DATOS CRUDOS DE LA API ===")
            Log.d(TAG, "üîÑ API response successful: ${currentUserResponse.isSuccessful}")
            Log.d(TAG, "üîÑ API response code: ${currentUserResponse.code()}")
            Log.d(TAG, "üîÑ Current user data found: ${currentUserData != null}")
            
            if (currentUserData != null) {
                Log.d(TAG, "üîÑ === DATOS COMPLETOS DEL USUARIO DESDE API ===")
                Log.d(TAG, "üîÑ id: '${currentUserData.id}'")
                Log.d(TAG, "üîÑ email: '${currentUserData.email}'")
                Log.d(TAG, "üîÑ username: '${currentUserData.username}'")
                Log.d(TAG, "üîÑ firstName: '${currentUserData.firstName}'")
                Log.d(TAG, "üîÑ lastName: '${currentUserData.lastName}'")
                Log.d(TAG, "üîÑ fullName: '${currentUserData.fullName}'")
                Log.d(TAG, "üîÑ password: '${currentUserData.password?.take(10)}...' (length: ${currentUserData.password?.length ?: 0})")
                Log.d(TAG, "üîÑ picture: '${currentUserData.picture}'")
                Log.d(TAG, "üîÑ pictureFileSize: '${currentUserData.pictureFileSize}'")
                Log.d(TAG, "üîÑ pictureInternalName: '${currentUserData.pictureInternalName}'")
                Log.d(TAG, "üîÑ userPreferencesId: '${currentUserData.userPreferencesId}'")
                Log.d(TAG, "üîÑ blocked: ${currentUserData.blocked}")
                Log.d(TAG, "üîÑ userValidated: ${currentUserData.userValidated}")
                Log.d(TAG, "üîÑ unregistered: ${currentUserData.unregistered}")
                Log.d(TAG, "üîÑ isMarkedForDeletion: ${currentUserData.isMarkedForDeletion}")
                Log.d(TAG, "üîÑ isDirty: ${currentUserData.isDirty}")
                Log.d(TAG, "üîÑ isNew: ${currentUserData.isNew}")
                Log.d(TAG, "üîÑ internalObjectId: ${currentUserData.internalObjectId}")
                Log.d(TAG, "üîÑ emailChangeValidationInProgress: ${currentUserData.emailChangeValidationInProgress}")
                Log.d(TAG, "üîÑ emailValidated: ${currentUserData.emailValidated}")
                Log.d(TAG, "üîÑ newEmailAddress: '${currentUserData.newEmailAddress}'")
                Log.d(TAG, "üîÑ newEmailValidated: ${currentUserData.newEmailValidated}")
                Log.d(TAG, "üîÑ passwordExpiry: '${currentUserData.passwordExpiry}'")
                Log.d(TAG, "üîÑ passwordExpiryWithTimezoneOffset: '${currentUserData.passwordExpiryWithTimezoneOffset}'")
                Log.d(TAG, "üîÑ userRoleItems count: ${currentUserData.userRoleItems?.size ?: 0}")
                Log.d(TAG, "üîÑ userBusinesses count: ${currentUserData.userBusinesses?.size ?: 0}")
                Log.d(TAG, "üîÑ userSiteItems count: ${currentUserData.userSiteItems?.size ?: 0}")
                Log.d(TAG, "üîÑ ================================================")
            } else {
                Log.e(TAG, "‚ùå Current user data is null from API")
            }
            
            Log.d(TAG, "üîÑ === DATOS ACTUALES DEL USUARIO DESDE API ===")
            Log.d(TAG, "üîÑ API response successful: ${currentUserResponse.isSuccessful}")
            Log.d(TAG, "üîÑ Current user data found: ${currentUserData != null}")
            Log.d(TAG, "üîÑ Password found: ${!currentPassword.isNullOrBlank()}")
            Log.d(TAG, "üîÑ Password length: ${currentPassword?.length ?: 0}")
            Log.d(TAG, "üîÑ Email desde API: '${currentUserData?.email}'")
            Log.d(TAG, "üîÑ Picture desde API: '${currentUserData?.picture}'")
            Log.d(TAG, "üîÑ PictureFileSize desde API: '${currentUserData?.pictureFileSize}'")
            Log.d(TAG, "üîÑ PictureInternalName desde API: '${currentUserData?.pictureInternalName}'")
            Log.d(TAG, "üîÑ ================================================")

            Log.d(TAG, "üîÑ === RESOLUCI√ìN DE EMAIL === A")
            // ‚úÖ CRITICAL FIX: Use email from API if available, otherwise from memory if valid
            val emailFromApi = currentUserData?.email?.takeIf { it.isNotBlank() && it != "null" }
            Log.d(TAG, "üîÑ === RESOLUCI√ìN DE EMAIL === B '${emailFromApi}'")
            val emailFromMemory = currentUser.email.takeIf { email ->
                email.isNotBlank() && 
                email != "null" && 
                email.contains("@") && 
                email.contains(".")
            }
            Log.d(TAG, "üîÑ === RESOLUCI√ìN DE EMAIL === C '${emailFromMemory}'")
            // Priority: API email > Memory email > null
            val validEmail = emailFromApi ?: emailFromMemory
            Log.d(TAG, "üîÑ === RESOLUCI√ìN DE EMAIL === D '${validEmail}'")

            Log.d(TAG, "üîÑ Email from API: '$emailFromApi'")
            Log.d(TAG, "üîÑ Email from memory: '$emailFromMemory'")
            Log.d(TAG, "üîÑ Final email: '$validEmail'")
            Log.d(TAG, "üîÑ =========================")
            
            // ‚úÖ CRITICAL FIX: NO incluir email para evitar error "forbiddenToChangeEmail"
            // Solo actualizar UserPreferencesId y campos b√°sicos
            val updatedUserDto = UserDto(
                id = currentUser.id,
                email = validEmail, // ‚ùå NO incluir email - causa error forbiddenToChangeEmail
                username = currentUser.username,
                firstName = currentUser.firstName,
                lastName = currentUser.lastName,
                fullName = "${currentUser.firstName} ${currentUser.lastName}".trim(),
                password = currentPassword, // ‚úÖ Preserve the actual password from API
                userPreferencesId = userPreferencesId, // üéØ This is the key field
                isDirty = true,
                isNew = false,
                isMarkedForDeletion = false
            )
            // No incluir picture, pictureFileSize, pictureInternalName si no hay valor
            
            Log.d(TAG, "üîÑ === DTO ANTES DE APLICAR preserveExistingImageFields ===")
            Log.d(TAG, "üîÑ id: '${updatedUserDto.id}'")
            Log.d(TAG, "üîÑ email: '${updatedUserDto.email}'")
            Log.d(TAG, "üîÑ username: '${updatedUserDto.username}'")
            Log.d(TAG, "üîÑ firstName: '${updatedUserDto.firstName}'")
            Log.d(TAG, "üîÑ lastName: '${updatedUserDto.lastName}'")
            Log.d(TAG, "üîÑ fullName: '${updatedUserDto.fullName}'")
            Log.d(TAG, "üîÑ password: '${updatedUserDto.password?.take(10)}...' (length: ${updatedUserDto.password?.length ?: 0})")
            Log.d(TAG, "üîÑ picture: '${updatedUserDto.picture}'")
            Log.d(TAG, "üîÑ pictureFileSize: '${updatedUserDto.pictureFileSize}'")
            Log.d(TAG, "üîÑ pictureInternalName: '${updatedUserDto.pictureInternalName}'")
            Log.d(TAG, "üîÑ userPreferencesId: '${updatedUserDto.userPreferencesId}'")
            Log.d(TAG, "üîÑ isDirty: ${updatedUserDto.isDirty}")
            Log.d(TAG, "üîÑ isNew: ${updatedUserDto.isNew}")
            Log.d(TAG, "üîÑ isMarkedForDeletion: ${updatedUserDto.isMarkedForDeletion}")
            Log.d(TAG, "üîÑ ================================================")
            
            // ‚úÖ APLICAR FUNCI√ìN UTILITARIA PARA PRESERVAR IMAGEN
            Log.d(TAG, "üîÑ === APLICANDO preserveExistingImageFields ===")
            val safeUserDto = updatedUserDto.preserveExistingImageFields()
            Log.d(TAG, "üîÑ DTO despu√©s de preserveExistingImageFields:")
            Log.d(TAG, "üîÑ picture: '${safeUserDto.picture}'")
            Log.d(TAG, "üîÑ pictureFileSize: '${safeUserDto.pictureFileSize}'")
            Log.d(TAG, "üîÑ pictureInternalName: '${safeUserDto.pictureInternalName}'")
            Log.d(TAG, "üîÑ ================================================")
            
            // Convert to JSON string like VehicleApi does
            val userJson = gson.toJson(safeUserDto)
            
            Log.d(TAG, "üîÑ === JSON FINAL A ENVIAR ===")
            Log.d(TAG, "üîÑ userJson: $userJson")
            Log.d(TAG, "üîÑ JSON length: ${userJson.length}")
            Log.d(TAG, "üîÑ ===========================")
            
            Log.d(TAG, "üîÑ Enviando actualizaci√≥n de usuario al backend...")
            
            // ‚úÖ FIXED: Reuse existing csrfToken and cookie instead of redeclaring
            
            // Call API with FormUrlEncoded format like VehicleApi
            val response = userApi.saveUser(
                entity = userJson,
                csrfToken = csrfToken,
                cookie = cookie
            )
            
            Log.d(TAG, "üîÑ === RESPUESTA DEL BACKEND ===")
            Log.d(TAG, "üîÑ Response code: ${response.code()}")
            Log.d(TAG, "üîÑ Response successful: ${response.isSuccessful}")
            
            if (!response.isSuccessful) {
                val errorBody = response.errorBody()?.string()
                Log.e(TAG, "‚ùå Failed to update user with UserPreferencesId: ${response.code()}")
                Log.e(TAG, "‚ùå Error body: $errorBody")
                return false
            }
            
            val updatedUserResponse = response.body()
            Log.d(TAG, "üîÑ Usuario actualizado desde backend:")
            Log.d(TAG, "üîÑ id: '${updatedUserResponse?.id}'")
            Log.d(TAG, "üîÑ email: '${updatedUserResponse?.email}'")
            Log.d(TAG, "üîÑ picture: '${updatedUserResponse?.picture}'")
            Log.d(TAG, "üîÑ pictureFileSize: '${updatedUserResponse?.pictureFileSize}'")
            Log.d(TAG, "üîÑ pictureInternalName: '${updatedUserResponse?.pictureInternalName}'")
            Log.d(TAG, "üîÑ userPreferencesId: '${updatedUserResponse?.userPreferencesId}'")
            Log.d(TAG, "üîÑ ================================================")
            
            Log.d(TAG, "‚úÖ Successfully updated user with UserPreferencesId")
            val updatedUser = updatedUserResponse?.toDomain()
            Log.d(TAG, "‚úÖ Updated user UserPreferencesId: ${updatedUser?.userPreferencesId}")
            Log.d(TAG, "‚úÖ Updated user photoUrl: '${updatedUser?.photoUrl}'")
            Log.d(TAG, "üîÑ === FINALIZADA ACTUALIZACI√ìN DE USUARIO ===")
            
            true
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Exception updating user with UserPreferencesId: ${e.message}", e)
            false
        }
    }

    override suspend fun updateDefaultBusiness(businessId: String?): UserPreferences {
        val currentPrefs = getCurrentUserPreferences() 
            ?: throw Exception("No current user preferences found")
        
        val updatedPrefs = currentPrefs.copy(
            businessId = businessId,
            isDirty = true,
            isNew = false // ‚úÖ CRITICAL: Mark as update, not new creation
        )
        return saveUserPreferences(updatedPrefs)
    }

    override suspend fun updateDefaultSite(siteId: String?): UserPreferences {
        val currentPrefs = getCurrentUserPreferences() 
            ?: throw Exception("No current user preferences found")
        
        val updatedPrefs = currentPrefs.copy(
            siteId = siteId,
            isDirty = true,
            isNew = false // ‚úÖ CRITICAL: Mark as update, not new creation
        )
        return saveUserPreferences(updatedPrefs)
    }

    override suspend fun updateLastSelectedBusiness(businessId: String?): UserPreferences {
        val currentPrefs = getCurrentUserPreferences() 
            ?: throw Exception("No current user preferences found")
        
        val updatedPrefs = currentPrefs.copy(
            lastSelectedBusinessId = businessId,
            isDirty = true,
            isNew = false // ‚úÖ CRITICAL: Mark as update, not new creation
        )
        return saveUserPreferences(updatedPrefs)
    }

    override suspend fun updateLastSelectedSite(siteId: String?): UserPreferences {
        val currentPrefs = getCurrentUserPreferences() 
            ?: throw Exception("No current user preferences found")
        
        val updatedPrefs = currentPrefs.copy(
            lastSelectedSiteId = siteId,
            isDirty = true,
            isNew = false // ‚úÖ CRITICAL: Mark as update, not new creation
        )
        return saveUserPreferences(updatedPrefs)
    }

    override fun observeCurrentUserPreferences(): Flow<UserPreferences?> {
        return _currentPreferences.asStateFlow()
    }

    override suspend fun clearPreferences() {
        _currentPreferences.value = null
        Log.d(TAG, "Preferences cleared")
    }

    override suspend fun getEffectiveBusinessId(): String? {
        return getCurrentUserPreferences()?.getEffectiveBusinessId()
    }

    override suspend fun getEffectiveSiteId(): String? {
        return getCurrentUserPreferences()?.getEffectiveSiteId()
    }

    override suspend fun userNeedsPreferencesSetup(): Boolean {
        return try {
            val preferences = getCurrentUserPreferences()
            if (preferences == null) {
                Log.d(TAG, "User needs preferences setup: No preferences found")
                return true
            }
            
            // Check if user has effective business context
            val hasBusinessContext = preferences.hasBusinessContext()
            Log.d(TAG, "User preferences setup check:")
            Log.d(TAG, "  Has business context: $hasBusinessContext")
            Log.d(TAG, "  Business ID: ${preferences.businessId}")
            Log.d(TAG, "  Last Selected Business: ${preferences.lastSelectedBusinessId}")
            
            !hasBusinessContext
        } catch (e: Exception) {
            Log.e(TAG, "Error checking if user needs preferences setup", e)
            true // Default to requiring setup if there's an error
        }
    }

    override suspend fun updateDefaultBusinessId(businessId: String) {
        try {
            Log.d(TAG, "Updating default business ID to: $businessId")
            var currentPrefs = getCurrentUserPreferences()
            
            if (currentPrefs == null) {
                Log.d(TAG, "No current preferences found, creating new preferences")
                // Get current user to create preferences
                val currentUser = userRepository.getCurrentUser()
                if (currentUser == null) {
                    Log.e(TAG, "Cannot create preferences: No current user found")
                    throw Exception("No current user found")
                }
                
                // Create new preferences with the business ID
                currentPrefs = UserPreferences(
                    id = null,
                    user = currentUser,
                    businessId = businessId,
                    siteId = null,
                    lastSelectedBusinessId = businessId,
                    lastSelectedSiteId = null,
                    theme = "system",
                    language = "en",
                    notificationsEnabled = true,
                    isDirty = true,
                    isNew = true
                )
            } else {
                // Update existing preferences
                currentPrefs = currentPrefs.copy(
                    businessId = businessId,
                    isDirty = true,
                    isNew = false // ‚úÖ CRITICAL: Mark as update, not new creation
                )
            }
            
            saveUserPreferences(currentPrefs)
            Log.d(TAG, "Successfully updated default business ID to: $businessId")
        } catch (e: Exception) {
            Log.e(TAG, "Error updating default business ID", e)
            throw e
        }
    }

    override suspend fun updateDefaultSiteId(siteId: String) {
        try {
            Log.d(TAG, "Updating default site ID to: $siteId")
            var currentPrefs = getCurrentUserPreferences()
            
            if (currentPrefs == null) {
                Log.d(TAG, "No current preferences found, creating new preferences")
                // Get current user to create preferences
                val currentUser = userRepository.getCurrentUser()
                if (currentUser == null) {
                    Log.e(TAG, "Cannot create preferences: No current user found")
                    throw Exception("No current user found")
                }
                
                // Create new preferences with the site ID
                currentPrefs = UserPreferences(
                    id = null,
                    user = currentUser,
                    businessId = null,
                    siteId = siteId,
                    lastSelectedBusinessId = null,
                    lastSelectedSiteId = siteId,
                    theme = "system",
                    language = "en",
                    notificationsEnabled = true,
                    isDirty = true,
                    isNew = true
                )
            } else {
                // Update existing preferences
                currentPrefs = currentPrefs.copy(
                    siteId = siteId,
                    isDirty = true,
                    isNew = false // ‚úÖ CRITICAL: Mark as update, not new creation
                )
            }
            
            saveUserPreferences(currentPrefs)
            Log.d(TAG, "Successfully updated default site ID to: $siteId")
        } catch (e: Exception) {
            Log.e(TAG, "Error updating default site ID", e)
            throw e
        }
    }

    override suspend fun updateLastSelectedBusinessId(businessId: String) {
        try {
            Log.d(TAG, "Updating last selected business ID to: $businessId")
            var currentPrefs = getCurrentUserPreferences()
            
            if (currentPrefs == null) {
                Log.d(TAG, "No current preferences found, but NOT creating preferences yet")
                Log.d(TAG, "‚ùå Cannot create preferences with only Business due to DB FK constraints")
                Log.d(TAG, "User must select BOTH Business AND Site before preferences are created")
                
                // ‚ùå DON'T CREATE PREFERENCES YET - wait for both Business AND Site
                // The database requires BOTH BusinessId AND SiteId due to FK constraints
                // We'll create preferences only when user selects a site (which requires business first)
                
                throw Exception("Cannot create preferences with only Business. Please select a Site as well.")
            } else {
                Log.d(TAG, "Updating existing preferences with new business")
                // Update existing preferences - set both BusinessId and LastSelected
                currentPrefs = currentPrefs.copy(
                    businessId = businessId,
                    lastSelectedBusinessId = businessId,
                    isDirty = true,
                    isNew = false // ‚úÖ CRITICAL: Mark as update, not new creation
                )
                
                saveUserPreferences(currentPrefs)
                Log.d(TAG, "‚úÖ Successfully updated last selected business ID to: $businessId")
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error updating last selected business ID", e)
            throw e
        }
    }

    override suspend fun updateLastSelectedSiteId(siteId: String) {
        try {
            Log.d(TAG, "Updating last selected site ID to: $siteId")
            var currentPrefs = getCurrentUserPreferences()
            
            if (currentPrefs == null) {
                Log.d(TAG, "No current preferences found, but user is selecting site")
                Log.d(TAG, "‚ùå Cannot create preferences without BusinessId. User must select Business first.")
                throw Exception("Cannot set site without selecting business first")
            } else {
                // ‚úÖ FIXED: Update existing preferences - preserve BusinessId, only update SiteId
                Log.d(TAG, "Preserving existing BusinessId: ${currentPrefs.businessId}")
                currentPrefs = currentPrefs.copy(
                    // businessId = currentPrefs.businessId, // ‚úÖ Keep existing business
                    siteId = siteId, // ‚úÖ Update site
                    lastSelectedSiteId = siteId,
                    isDirty = true,
                    isNew = false // ‚úÖ CRITICAL: Mark as update, not new creation
                )
                
                saveUserPreferences(currentPrefs)
                Log.d(TAG, "‚úÖ Successfully updated last selected site ID to: $siteId (preserved BusinessId: ${currentPrefs.businessId})")
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error updating last selected site ID", e)
            throw e
        }
    }

    /**
     * Create preferences with both BusinessId and SiteId (like working Postman example)
     * If preferences already exist, update them instead of creating new ones
     */
    override suspend fun createPreferencesWithBusinessAndSite(businessId: String, siteId: String): UserPreferences {
        try {
            val currentUser = userRepository.getCurrentUser()
            if (currentUser == null) {
                Log.e(TAG, "Cannot create preferences: No current user found")
                throw Exception("No current user found")
            }
            val existingPrefs = getCurrentUserPreferences()
            val prefsToSave = if (existingPrefs != null) {
                existingPrefs.copy(
                    businessId = businessId,
                    siteId = siteId,
                    lastSelectedBusinessId = businessId,
                    lastSelectedSiteId = siteId,
                    isDirty = true,
                    isNew = false
                )
            } else {
                UserPreferences(
                    id = null,
                    user = currentUser,
                    businessId = businessId,
                    siteId = siteId,
                    lastSelectedBusinessId = businessId,
                    lastSelectedSiteId = siteId,
                    theme = "system",
                    language = "en",
                    notificationsEnabled = true,
                    isDirty = true,
                    isNew = true
                )
            }
            return saveUserPreferences(prefsToSave)
        } catch (e: Exception) {
            Log.e(TAG, "Error creating/updating preferences with business and site", e)
            throw e
        }
    }

    private suspend fun createDefaultPreferences(userId: String): UserPreferences {
        Log.d(TAG, "Creating default preferences for user: $userId")
        
        // Get the user object to include in preferences
        val user = userRepository.getUserById(userId)
        
        val defaultPrefs = UserPreferences(
            id = null, // Will be generated by backend
            user = user, // Include complete user object
            businessId = null,
            siteId = null,
            lastSelectedBusinessId = null,
            lastSelectedSiteId = null,
            theme = "system",
            language = "en",
            notificationsEnabled = true,
            isDirty = true,
            isNew = true
        )
        
        // Save the default preferences and return the saved version
        return try {
            Log.d(TAG, "Saving default preferences to backend")
            saveUserPreferences(defaultPrefs)
        } catch (e: Exception) {
            Log.w(TAG, "Failed to save default preferences to backend, returning in-memory version", e)
            defaultPrefs
        }
    }

    override suspend fun isVehicleInUserContext(vehicleBusinessId: String, vehicleSiteId: String): Boolean {
        return try {
            Log.d(TAG, "üîç Checking if vehicle belongs to user's assigned business and site")
            Log.d(TAG, "  - Vehicle Business ID: '$vehicleBusinessId'")
            Log.d(TAG, "  - Vehicle Site ID: '$vehicleSiteId'")
            
            val userPreferences = getCurrentUserPreferences()
            if (userPreferences == null) {
                Log.w(TAG, "‚ùå No user preferences found - user needs setup")
                return false
            }
            
            val userBusinessId = userPreferences.getEffectiveBusinessId()
            val userSiteId = userPreferences.getEffectiveSiteId()
            
            if (userBusinessId.isNullOrBlank()) {
                Log.w(TAG, "‚ùå No business assigned to user")
                return false
            }
            
            if (userSiteId.isNullOrBlank()) {
                Log.w(TAG, "‚ùå No site assigned to user")
                return false
            }
            
            val isSameBusiness = userBusinessId == vehicleBusinessId
            val isSameSite = userSiteId == vehicleSiteId
            val isInUserContext = isSameBusiness && isSameSite
            
            Log.d(TAG, "üîç Context validation result:")
            Log.d(TAG, "  - User's business: '$userBusinessId'")
            Log.d(TAG, "  - Vehicle's business: '$vehicleBusinessId'")
            Log.d(TAG, "  - Business match: $isSameBusiness")
            Log.d(TAG, "  - User's site: '$userSiteId'")
            Log.d(TAG, "  - Vehicle's site: '$vehicleSiteId'")
            Log.d(TAG, "  - Site match: $isSameSite")
            Log.d(TAG, "  - Final result: $isInUserContext")
            
            isInUserContext
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error checking vehicle context validation", e)
            false
        }
    }
} 