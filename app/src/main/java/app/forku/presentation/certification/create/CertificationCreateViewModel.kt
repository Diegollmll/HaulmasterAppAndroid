package app.forku.presentation.certification.create

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import app.forku.domain.model.certification.Certification
import app.forku.domain.model.certification.CertificationStatus
import app.forku.domain.usecase.certification.CreateCertificationUseCase
import app.forku.domain.usecase.user.GetCurrentUserIdUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import java.time.LocalDate
import java.time.Instant
import javax.inject.Inject

@HiltViewModel
class CertificationCreateViewModel @Inject constructor(
    private val createCertificationUseCase: CreateCertificationUseCase,
    private val getCurrentUserIdUseCase: GetCurrentUserIdUseCase
) : ViewModel() {

    private val _state = MutableStateFlow(CertificationCreateState())
    val state = _state.asStateFlow()

    fun updateName(name: String) {
        _state.update { 
            it.copy(
                name = name,
                isValid = validateFields(name = name)
            )
        }
    }

    fun updateDescription(description: String) {
        _state.update { 
            it.copy(
                description = description,
                isValid = validateFields(description = description)
            )
        }
    }

    fun updateIssuer(issuer: String) {
        _state.update { 
            it.copy(
                issuer = issuer,
                isValid = validateFields(issuer = issuer)
            )
        }
    }

    fun updateIssueDate(date: LocalDate) {
        _state.update { 
            it.copy(
                issuedDate = date.toString(),
                isValid = validateFields(issuedDate = date.toString())
            )
        }
    }

    fun updateExpiryDate(date: LocalDate) {
        _state.update { 
            it.copy(
                expiryDate = date.toString(),
                isValid = validateFields(expiryDate = date.toString())
            )
        }
    }

    fun updateCertificationCode(code: String) {
        _state.update { 
            it.copy(
                certificationCode = code,
                isValid = validateFields(certificationCode = code)
            )
        }
    }

    private fun validateFields(
        name: String = state.value.name,
        description: String = state.value.description,
        issuer: String = state.value.issuer,
        issuedDate: String? = state.value.issuedDate,
        expiryDate: String? = state.value.expiryDate,
        certificationCode: String? = state.value.certificationCode
    ): Boolean {
        return name.isNotBlank() && 
               issuer.isNotBlank() && 
               issuedDate != null
    }

    fun createCertification() {
        if (!state.value.isValid) return

        viewModelScope.launch {
            _state.update { it.copy(isLoading = true, error = null) }
            try {
                val userId = getCurrentUserIdUseCase()
                if (userId == null) {
                    _state.update { 
                        it.copy(
                            isLoading = false,
                            error = "User not authenticated"
                        )
                    }
                    return@launch
                }

                val certification = Certification(
                    id = "", // Will be generated by the backend
                    name = state.value.name,
                    description = state.value.description.takeIf { it.isNotBlank() },
                    issuer = state.value.issuer,
                    issuedDate = state.value.issuedDate!!,
                    expiryDate = state.value.expiryDate,
                    certificationCode = state.value.certificationCode.takeIf { it?.isNotBlank() == true },
                    status = CertificationStatus.ACTIVE,
                    documentUrl = null,
                    timestamp = Instant.now().toString(),
                    userId = userId
                )
                
                val result = createCertificationUseCase(certification, userId)
                result.onSuccess {
                    _state.update { it.copy(isLoading = false, isCreated = true) }
                }.onFailure { e ->
                    _state.update { 
                        it.copy(
                            isLoading = false,
                            error = "Failed to create certification: ${e.message}"
                        )
                    }
                }
            } catch (e: Exception) {
                _state.update { 
                    it.copy(
                        isLoading = false,
                        error = "Failed to create certification: ${e.message}"
                    )
                }
            }
        }
    }

    fun clearError() {
        _state.update { it.copy(error = null) }
    }
}

data class CertificationCreateState(
    val isLoading: Boolean = false,
    val error: String? = null,
    val isCreated: Boolean = false,
    val isValid: Boolean = false,
    val name: String = "",
    val description: String = "",
    val issuer: String = "",
    val issuedDate: String? = null,
    val expiryDate: String? = null,
    val certificationCode: String? = null
) 